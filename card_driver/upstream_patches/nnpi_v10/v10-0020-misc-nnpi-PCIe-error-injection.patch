From b9f3efb7a14848feb44ab2bdfd6dbe94647d24bd Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Fri, 3 Apr 2020 10:12:52 +0300
Subject: [PATCH v10 20/22] misc: nnpi: PCIe error injection

Generate various PCIe errors, using dedicated debug registers, in order to
support development and debug of error handling procedures by the user.

Injecting PCIe errors is triggered by writing to a debugfs file:
<debugfs>/intel_nnpi/%d/pcie_inject. Depending on the string written to
this file, a correctable, uncorrectable or fatal error will be injected, or
the previously injected error will be restored.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 drivers/misc/intel-nnpi/Makefile         |   2 +-
 drivers/misc/intel-nnpi/device.c         |  14 +++
 drivers/misc/intel-nnpi/device.h         |   4 +
 drivers/misc/intel-nnpi/device_debugfs.c |  62 +++++++++
 drivers/misc/intel-nnpi/device_debugfs.h |  16 +++
 drivers/misc/intel-nnpi/nnp_hw.h         |   8 ++
 drivers/misc/intel-nnpi/nnp_hw_pcie.c    | 209 +++++++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/pcie.h           | 181 ++++++++++++++++++++++++++
 8 files changed, 495 insertions(+), 1 deletion(-)
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.c
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.h
 create mode 100644 drivers/misc/intel-nnpi/pcie.h

diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index 0329f2e..989ca6c 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -8,6 +8,6 @@ obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o nnp_hw_pcie.o device.o msg_scheduler.o \
 		   hostres.o host_chardev.o nnp_user.o bootimage.o \
-                   device_chardev.o cmd_chan.o device_sysfs.o
+                   device_chardev.o cmd_chan.o device_sysfs.o device_debugfs.o
 
 ccflags-y += -I$(srctree)/$(src)/ipc_include
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 91bda55..3910a87 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -21,6 +21,7 @@
 #include "bootimage.h"
 #include "cmd_chan.h"
 #include "device_chardev.h"
+#include "device_debugfs.h"
 #include "device_sysfs.h"
 #include "host_chardev.h"
 #include "ipc_c2h_events.h"
@@ -60,14 +61,20 @@ static void last_device_fini(void)
 }
 
 static struct ida dev_ida;
+static struct dentry *debugfs_dir;
 
 void nnpdev_module_init(void)
 {
 	ida_init(&dev_ida);
+
+	debugfs_dir = debugfs_create_dir("intel_nnpi", NULL);
+	if (IS_ERR_OR_NULL(debugfs_dir))
+		debugfs_dir = NULL;
 }
 
 void nnpdev_module_fini(void)
 {
+	debugfs_remove_recursive(debugfs_dir);
 	ida_destroy(&dev_ida);
 }
 
@@ -1210,6 +1217,11 @@ struct nnp_device *nnpdev_create(struct nnp_hw_dev *hw_dev)
 	hash_init(nnpdev->cmd_chan_hash);
 	init_waitqueue_head(&nnpdev->waitq);
 
+	if (debugfs_dir) {
+		nnpdev->debugfs_dir =
+			nnpdev_debugfs_init(nnpdev, debugfs_dir);
+	}
+
 	ret = first_device_init();
 	if (ret)
 		goto err_ida;
@@ -1294,6 +1306,7 @@ struct nnp_device *nnpdev_create(struct nnp_hw_dev *hw_dev)
 err_first_device:
 	last_device_fini();
 err_ida:
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 err_nnpdev:
 	kfree(nnpdev);
@@ -1515,6 +1528,7 @@ static void free_device(struct work_struct *work)
 
 	nnp_msched_destroy(nnpdev->cmdq_sched);
 
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 	ida_destroy(&nnpdev->cmd_chan_ida);
 	kfree(nnpdev);
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 300257f..fcddec0 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -9,6 +9,7 @@
 
 #include <linux/cdev.h>
 #include <linux/completion.h>
+#include <linux/debugfs.h>
 #include <linux/hashtable.h>
 #include <linux/idr.h>
 #include <linux/kernel.h>
@@ -237,6 +238,7 @@ struct nnp_device_counters {
  * @uncorrectable_dram_ecc_threshold: threshold error counter for generating
  *                                    uevent informing on uncorr dram ecc error
  * @uncorrectable_dram_ecc_counter: uncorrectable dram ecc error counter
+ * @debugfs_dir: dir entry for device's root debugfs dir
  */
 struct nnp_device {
 	struct kref            ref;
@@ -303,6 +305,8 @@ struct nnp_device {
 	unsigned long  correctable_dram_ecc_counter;
 	unsigned long  uncorrectable_dram_ecc_threshold;
 	unsigned long  uncorrectable_dram_ecc_counter;
+
+	struct dentry *debugfs_dir;
 };
 
 void nnpdev_module_init(void);
diff --git a/drivers/misc/intel-nnpi/device_debugfs.c b/drivers/misc/intel-nnpi/device_debugfs.c
new file mode 100644
index 0000000..274fd76
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.c
@@ -0,0 +1,62 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/*
+ * Copyright (C) 2019-2020 Intel Corporation
+ */
+
+#include "device_debugfs.h"
+#include <linux/string.h>
+#include "device.h"
+
+static ssize_t pcie_inject_write(struct file *file, const char __user *data,
+				 size_t count, loff_t *ppos)
+{
+	struct nnp_device *nnpdev = file->private_data;
+	u32 pcie_err_type;
+	int ret;
+
+	if (sysfs_streq(data, "corr"))
+		pcie_err_type = NNP_PCIE_INJECT_CORR;
+	else if (sysfs_streq(data, "uncorr"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR;
+	else if (sysfs_streq(data, "fatal"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR_FATAL;
+	else if (sysfs_streq(data, "none"))
+		pcie_err_type = NNP_PCIE_INJECT_RESTORE;
+	else
+		return -EINVAL;
+
+	/*
+	 * Setup h/w layer to generate the requested error
+	 * on the next dma transaction
+	 */
+	ret = nnp_error_inject(nnpdev->hw_dev, pcie_err_type);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+static const struct file_operations pcie_inject_fops = {
+	.open = simple_open,
+	.write = pcie_inject_write,
+	.llseek = generic_file_llseek,
+};
+
+struct dentry *nnpdev_debugfs_init(struct nnp_device *nnpdev,
+				   struct dentry *parent)
+{
+	struct dentry *dev_root;
+	char dev_dirname[8];
+
+	sprintf(dev_dirname, "%d", nnpdev->id);
+
+	dev_root = debugfs_create_dir(dev_dirname, parent);
+	if (IS_ERR_OR_NULL(dev_root))
+		return NULL;
+
+	debugfs_create_file("pcie_inject", 0644, dev_root, nnpdev,
+			    &pcie_inject_fops);
+
+	return dev_root;
+}
diff --git a/drivers/misc/intel-nnpi/device_debugfs.h b/drivers/misc/intel-nnpi/device_debugfs.h
new file mode 100644
index 0000000..a7b1d05
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.h
@@ -0,0 +1,16 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * Copyright (C) 2019-2020 Intel Corporation
+ */
+#ifndef _NNP_DEVICE_DEBUGFS_H
+#define _NNP_DEVICE_DEBUGFS_H
+
+#include <linux/debugfs.h>
+
+struct nnp_device;
+
+struct dentry *nnpdev_debugfs_init(struct nnp_device *nnpdev,
+				   struct dentry *parent);
+
+#endif // of _NNP_DEVICE_DEBUGFS_H
diff --git a/drivers/misc/intel-nnpi/nnp_hw.h b/drivers/misc/intel-nnpi/nnp_hw.h
index a5e4a03..94f48f2 100644
--- a/drivers/misc/intel-nnpi/nnp_hw.h
+++ b/drivers/misc/intel-nnpi/nnp_hw.h
@@ -24,6 +24,13 @@ struct nnp_hw_dev {
 	struct device *dev;
 };
 
+enum nnp_einj_type {
+	NNP_PCIE_INJECT_RESTORE = 0,
+	NNP_PCIE_INJECT_CORR,
+	NNP_PCIE_INJECT_UNCORR,
+	NNP_PCIE_INJECT_UNCORR_FATAL,
+};
+
 /*
  * Functions implemented by the nnp "hw" layer,
  * called by the nnp "device" layer
@@ -36,6 +43,7 @@ struct nnp_hw_dev {
 int nnp_fw_update_complete(struct nnp_hw_dev *hw_dev, bool start);
 int nnp_get_membar_addr(struct nnp_hw_dev *hw_dev, phys_addr_t *out_phy_addr,
 			void __iomem **out_vaddr, size_t *out_len);
+int nnp_error_inject(struct nnp_hw_dev *hw_dev, enum nnp_einj_type err_type);
 
 enum nnp_pcie_err {
 	NNP_PCIE_NON_FATAL_ERROR = 1,
diff --git a/drivers/misc/intel-nnpi/nnp_hw_pcie.c b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
index d7275c0..39508fd 100644
--- a/drivers/misc/intel-nnpi/nnp_hw_pcie.c
+++ b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
@@ -99,6 +99,11 @@ struct nnp_memdesc {
  *               during device reset.
  * @removing: true if device remove is in progress.
  * @hang: true if device hang condition is detected.
+ * @ras_des_off: offset of ras PCIe extension in config space
+ * @aer_pos: offset of PCIe AER extension in config space
+ * @aer_cor_mask: AER corrected mask of device before error has injected
+ * @aer_uncor_mask: AER uncorrected mask of decice before error has injected
+ * @aer_uncor_severity: AER uncorrected severity settings save.
  */
 struct nnp_pci {
 	struct nnp_hw_dev hw_dev;
@@ -136,8 +141,24 @@ struct nnp_pci {
 
 	bool            removing;
 	bool            hang;
+
+	int             ras_des_off;
+	int             aer_pos;
+	u32             aer_cor_mask;
+	u32             aer_uncor_mask;
+	u32             aer_uncor_severity;
 };
 
+/* error injection debug feature registers */
+#define NNP_RAS_DES_VSEC_ID   0x2
+#define EINJ_ENABLE_REG_OFF       0x30
+#define EINJ_ENABLE_REG_CRC_ERR  BIT(0)
+#define EINJ_ENABLE_REG_SEQ_ERR  BIT(1)
+#define EINJ_ENABLE_REG_DUP_ERR  BIT(5)
+#define EINJ_ENABLE_REG_TLP_ERR  BIT(6)
+
+#define EINJ0_CRC_REG_OFF         0x34
+
 static const char nnp_driver_name[] = "nnp_pcie";
 
 /* interrupt mask bits we enable and handle at interrupt level */
@@ -508,6 +529,139 @@ int nnp_cmdq_flush(struct nnp_hw_dev *hw_dev)
 	return 0;
 }
 
+int nnp_error_inject(struct nnp_hw_dev *hw_dev, enum nnp_einj_type err_type)
+{
+	struct nnp_pci *nnp_pci = container_of(hw_dev, struct nnp_pci, hw_dev);
+	u32 inj_enable = 0;
+
+	if (nnp_pci->ras_des_off == 0)
+		return -EFAULT;
+
+	switch (err_type) {
+	case NNP_PCIE_INJECT_RESTORE:
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       nnp_pci->aer_cor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       nnp_pci->aer_uncor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       nnp_pci->aer_uncor_severity);
+		break;
+	case NNP_PCIE_INJECT_CORR:
+		/* unmask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0x0);
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       0xffffffff);
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR_FATAL:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity |
+					PCI_ERR_UNC_COMP_TIME));
+		break;
+	default:
+		return -EFAULT;
+	}
+
+	if (err_type != NNP_PCIE_INJECT_RESTORE) {
+		/*
+		 * insert new TLP with ECRC error - will cause completion
+		 * timeout error
+		 */
+		inj_enable = EINJ_ENABLE_REG_CRC_ERR;
+
+		dev_info(&nnp_pci->pdev->dev,
+			 "Injecting %s PCIe error\n",
+			 (err_type == NNP_PCIE_INJECT_CORR ? "corrected" :
+			  err_type == NNP_PCIE_INJECT_UNCORR ?
+			   "uncorrected" : "uncorrected-fatal"));
+		if (err_type != NNP_PCIE_INJECT_CORR) {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x3 << 8 | 1);
+		} else {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x4 << 8 | 1);
+		}
+	} else {
+		dev_info(&nnp_pci->pdev->dev,
+			 "Restoring pcie error masks\n");
+	}
+
+#ifdef DEBUG
+	{
+		u32 cor_mask, uncor_mask, uncor_sev;
+
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				      &cor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				      &uncor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				      &uncor_sev);
+
+		dev_dbg(nnp_pci->pdev,
+			"inj_enable = %d\n", inj_enable);
+		dev_dbg(nnp_pci->pdev,
+			"corr_mask = 0x%x\n", cor_mask);
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_mask = 0x%x ComplTO%c\n", uncor_mask,
+			(uncor_mask & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_sever = 0x%x ComplTO%c\n", uncor_sev,
+			(uncor_sev & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+	}
+#endif
+
+	pci_write_config_word(nnp_pci->pdev,
+			      nnp_pci->ras_des_off + EINJ_ENABLE_REG_OFF,
+			      inj_enable);
+
+	return 0;
+}
+
 int nnp_set_host_doorbell_value(struct nnp_hw_dev *hw_dev, u32 value)
 {
 	struct nnp_pci *nnp_pci = container_of(hw_dev, struct nnp_pci, hw_dev);
@@ -780,6 +934,30 @@ static void nnp_fini_pci_device(struct nnp_pci *nnp_pci, bool release_regions)
 	pci_disable_device(nnp_pci->pdev);
 }
 
+static void find_ras_des_cap(struct nnp_pci *nnp_pci)
+{
+	int vsec = 0;
+	u16 val;
+
+	/* find vendor-specific capability matches RAS_DES */
+	do {
+		nnp_pci->ras_des_off =
+			pci_find_next_ext_capability(nnp_pci->pdev, vsec,
+						     PCI_EXT_CAP_ID_VNDR);
+		if (nnp_pci->ras_des_off) {
+			pci_read_config_word(nnp_pci->pdev,
+					     nnp_pci->ras_des_off + 0x4,
+					     &val);
+			if (val == NNP_RAS_DES_VSEC_ID)
+				break;
+		}
+	} while (nnp_pci->ras_des_off);
+
+	if (!nnp_pci->ras_des_off)
+		dev_err(&nnp_pci->pdev->dev,
+			"failed to find RAS DES vendor-specific capability - pcie error injection will not be available!!\n");
+}
+
 static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct nnp_pci *nnp_pci = NULL;
@@ -812,6 +990,26 @@ static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	if (rc)
 		goto do_exit;
 
+	/* Initialize aer masks and severity settings */
+	nnp_pci->aer_pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_ERR);
+	if (!nnp_pci->aer_pos) {
+		rc = -EFAULT;
+		goto do_exit;
+	}
+
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			      &nnp_pci->aer_cor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			      &nnp_pci->aer_uncor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			      &nnp_pci->aer_uncor_severity);
+
+	/* find vendor-specific capability for error injection */
+	find_ras_des_cap(nnp_pci);
+
 	/*
 	 * Take refcount to the device which will be released only when
 	 * nnpi_pci struct is freed
@@ -883,6 +1081,17 @@ static void nnp_remove(struct pci_dev *pdev)
 	/* inform card that host driver is down */
 	nnp_mmio_write(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE, 0);
 
+	/* restore device aer mask and severity settings */
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			       nnp_pci->aer_cor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			       nnp_pci->aer_uncor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			       nnp_pci->aer_uncor_severity);
+
 	nnpdev_destroy(nnp_pci->nnpdev, true);
 	nnp_fini_pci_device(nnp_pci, true);
 	nnpdev_destroy(nnp_pci->nnpdev, false);
diff --git a/drivers/misc/intel-nnpi/pcie.h b/drivers/misc/intel-nnpi/pcie.h
new file mode 100644
index 0000000..4a89046
--- /dev/null
+++ b/drivers/misc/intel-nnpi/pcie.h
@@ -0,0 +1,181 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * Copyright (C) 2019-2020 Intel Corporation
+ */
+
+#ifndef _NNPDRV_PCIE_H
+#define _NNPDRV_PCIE_H
+
+#include <linux/atomic.h>
+#include <linux/kref.h>
+#include <linux/pci.h>
+#include <linux/sched.h>
+#include <linux/spinlock.h>
+#include <linux/timer.h>
+#include <linux/version.h>
+#define ELBI_BASE         0  /* MMIO offset of ELBI registers */
+#include "nnp_elbi.h"
+
+struct nnp_device;
+struct device;
+
+#define NNP_MAX_COMMAND_HWQ_DEPTH    16
+#define NNP_MAX_RESPONSE_HWQ_DEPTH   16
+
+/**
+ * struct nnp_memdesc - describe a mapped PCI BAR
+ * @pa: the physical address of the mapped BAR
+ * @va: virtual address of the mapped BAR
+ * @len: size of the mapped BAR
+ */
+struct nnp_memdesc {
+	phys_addr_t   pa;
+	void __iomem  *va;
+	size_t        len;
+};
+
+/**
+ * struct nnp_pci_device - structure for NNP-I pci device info.
+ * @ref: reference count for this object
+ * @pdev: pointer to the pcie device struct
+ * @nnpdev: pointer to the "logical" device structure of this NNP-I device.
+ *          This is to separate NNP-I common device management from hw device
+ *          management (which potentially be not a pci device).
+ * @remove_reset_mutex: serialize device remove and reset flows.
+ * @mmio: device's BAR0 mapping info
+ * @mem_bar: device's BAR2 mapping info, this is the "inbound memory region"
+ *           This device memory region is described in
+ *           ipc_include/nnp_inbound_mem.h
+ * @mem_enabled: true if BARs are mapped and enabled
+ * @irq_lock: protects accesses to cmd_read_update_count members and also
+ *            protects read/write of ELBI_PCI_MSI_MASK register
+ * @response_buf: buffer to hold response messages pulled of the device's
+ *                response queue.
+ * @new_response: non-zero value indicate the device has sent an interrupt
+ *                notifying that new response is available in the response
+ *                queue and that response(s) did not yet pulled from the device
+ *                response queue.
+ * @doorbell_changed: non-zero value indicate the device has sent an interrupt
+ *                    notifying the doorbell register has changed and this new
+ *                    doorbell value has not yet been processed.
+ * @card_status_wait: waitq that get signaled when device pci status has changed
+ *                    or device has updated its read pointer of the command
+ *                    queue.
+ * @reset_work: work struct used to schedule device reset operation
+ * @interrupts_mask_timer: timer used to trigger device hang condition check.
+ * @card_doorbell_val: card's doorbell register value, updated when doorbell
+ *                     interrupt is received.
+ * @cmdq_free_slots: number of slots in the device's command queue which known
+ *                   to be available.
+ * @cmdq_lock: protects @cmdq_free_slots calculation.
+ * @card_status: Last device interrupt status register, updated in interrupt
+ *               handler.
+ * @cmd_read_update_count: number of times the device has updated its read
+ *                         pointer to the device command queue.
+ * @initted: true if PCI is enabled and interrupts are attached and
+ *           enabled. This will be false during device reset flow.
+ * @keep_alive: last host keep alive counter received in doorbell register.
+ * @periodic_on: true when @interrupts_mask_timer is active. It is turns off
+ *               during device reset.
+ * @removing: true if device remove is in progress.
+ * @hang: true if device hang condition is detected.
+ * @ras_des_off: offset of ras PCIe extension in config space
+ * @aer_pos: offset of PCIe AER extension in config space
+ * @aer_cor_mask: AER corrected mask of device before error has injected
+ * @aer_uncor_mask: AER uncorrected mask of decice before error has injected
+ * @aer_uncor_severity: AER uncorrected severity settings save.
+ */
+struct nnp_pci_device {
+	struct pci_dev    *pdev;
+	struct nnp_device *nnpdev;
+	struct mutex    remove_reset_mutex; // serialize reset and remove flows
+
+	struct nnp_memdesc        mmio;
+	struct nnp_memdesc        mem_bar; /* the inbound memory region */
+	bool                      mem_enabled;
+
+	/*
+	 * protects @cmd_read_update_count and
+	 * ELBI_PCI_MSI_MASK register reading
+	 */
+	spinlock_t      irq_lock;
+	u64             response_buf[ELBI_RESPONSE_FIFO_DEPTH];
+	atomic_t        new_response;
+	atomic_t        doorbell_changed;
+	wait_queue_head_t card_status_wait;
+	struct work_struct reset_work;
+	struct timer_list  interrupts_mask_timer;
+	u32             card_doorbell_val;
+
+	u32             cmdq_free_slots;
+	spinlock_t      cmdq_lock; /* protects @cmdq_free_slots */
+
+	u32             card_status;
+	u32             cmd_read_update_count;
+
+	u32             initted;
+
+	int             keep_alive;
+	int             periodic_on;
+
+	bool            removing;
+	bool            hang;
+
+	int             ras_des_off;
+	int             aer_pos;
+	u32             aer_cor_mask;
+	u32             aer_uncor_mask;
+	u32             aer_uncor_severity;
+};
+
+enum nnp_einj_type {
+	NNP_PCIE_INJECT_RESTORE = 0,
+	NNP_PCIE_INJECT_CORR,
+	NNP_PCIE_INJECT_UNCORR,
+	NNP_PCIE_INJECT_UNCORR_FATAL,
+};
+
+/*
+ * Functions implemented by the nnp "pci" layer,
+ * called by the nnp "device" layer
+ */
+int nnp_cmdq_write_mesg(struct nnp_pci_device *nnp_pci,
+			u64 *msg, u32 size, u64 *timed_wait);
+int nnp_cmdq_flush(struct nnp_pci_device *nnp_pci);
+int nnp_set_host_doorbell_value(struct nnp_pci_device *nnp_pci, u32 value);
+u32 nnp_get_postcode(struct nnp_pci_device *nnp_pci);
+u32 nnp_get_bios_flash_progress(struct nnp_pci_device *nnp_pci);
+int nnp_fw_update_complete(struct nnp_pci_device *nnp_pci, bool start);
+int nnp_get_membar_addr(struct nnp_pci_device *nnp_pci,
+			phys_addr_t *out_phy_addr, void __iomem **out_vaddr,
+			size_t *out_len);
+int nnp_error_inject(struct nnp_pci_device *nnp_pci,
+		     enum nnp_einj_type err_type);
+
+enum nnp_pcie_err {
+	NNP_PCIE_NON_FATAL_ERROR = 1,
+	NNP_PCIE_FATAL_ERROR,
+	NNP_PCIE_PERMANENT_FAILURE,
+	NNP_PCIE_LINK_RETRAIN_REQUIRED
+};
+
+/*
+ * Functions implemented by the nnp "device" layer,
+ * called by the nnp "pci" layer
+ */
+struct nnp_device *nnpdev_create(struct nnp_pci_device *nnp_pci);
+void nnpdev_destroy(struct nnp_device *nnpdev, bool prepare_only);
+void nnpdev_card_doorbell_value_changed(struct nnp_device *nnpdev,
+					u32 doorbell_val);
+void nnpdev_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
+			     unsigned int hw_nof_msg);
+int nnpdev_pci_error_detected(struct nnp_device *nnpdev,
+			      enum nnp_pcie_err error_type);
+void nnpdev_reset_prepare(struct nnp_device *nnpdev, bool is_hang);
+void nnpdev_reset_done(struct nnp_device *nnpdev);
+
+int nnp_pci_module_init(void);
+void nnp_pci_module_fini(void);
+
+#endif
-- 
1.8.3.1

