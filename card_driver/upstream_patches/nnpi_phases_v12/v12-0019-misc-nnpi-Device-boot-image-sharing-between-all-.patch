From e62beac04f6b2c9ba4ef89006b3ce9a3b2336f6b Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Sun, 29 Nov 2020 11:47:05 +0200
Subject: [PATCH v12 19/29] misc: nnpi: Device boot image sharing between all
 NNP-I devices

Save kernel memory allocations for device boot image on multi-device
configs.

Since the boot image may be big (bigger than 100MB in some configs),
share the same memory region for booting all the NNP-I devices in
the system and frees the memory when all devices have received the image.

There is a 30 seconds periodic timer which garbage collects the boot image
from memory when not needed any more (the timer stops when all images are
freed).
---
 drivers/misc/intel-nnpi/bootimage.c | 400 +++++++++++++++++++++++++++---------
 drivers/misc/intel-nnpi/bootimage.h |  31 +--
 drivers/misc/intel-nnpi/device.c    |  10 +-
 drivers/misc/intel-nnpi/device.h    |   2 -
 4 files changed, 315 insertions(+), 128 deletions(-)

diff --git a/drivers/misc/intel-nnpi/bootimage.c b/drivers/misc/intel-nnpi/bootimage.c
index 92eb9ac..6d476b2 100644
--- a/drivers/misc/intel-nnpi/bootimage.c
+++ b/drivers/misc/intel-nnpi/bootimage.c
@@ -4,35 +4,219 @@
 
 #define pr_fmt(fmt)   KBUILD_MODNAME ": " fmt
 
-#include "bootimage.h"
 #include <linux/bitfield.h>
 #include <linux/device.h>
 #include <linux/firmware.h>
 #include <linux/fs.h>
+#include <linux/limits.h>
 #include <linux/namei.h>
 #include <linux/printk.h>
 #include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/timer.h>
+#include <linux/wait.h>
+#include <linux/workqueue.h>
+#include "bootimage.h"
 #include "device.h"
-#include "hostres.h"
 #include "ipc_protocol.h"
 #include "nnp_boot_defs.h"
 
+enum image_state {
+	IMAGE_REQUESTED = 0,
+	IMAGE_LOAD_FAILED,
+	IMAGE_AVAILABLE
+};
 
 #define MAX_IMAGE_NAME_LEN   (NAME_MAX + 1)
 
-void nnpdev_boot_image_init(struct image_info *boot_image)
+/**
+ * struct image_info - describes a boot image object
+ * @state: state indicating whether it is loaded or load failed
+ * @load_fail_err: zero or error code if @state is IMAGE_LOAD_FAILED.
+ * @requested_nnpdev: the device which requests loading of the image
+ * @hostres: host resource object allocated for the image content
+ * @wait_list: list of devices waiting for the image to be loaded
+ * @wl_mutex: protects accesse to @wait_list
+ * @work: handle for placing the image load in a workqueue
+ *
+ * This structure describe a request to load boot image from disk,
+ * there is one such structure for image name requested to be loaded.
+ */
+struct image_info {
+	enum image_state             state;
+	int                          load_fail_err;
+	struct nnp_device            *requested_nnpdev;
+	struct host_resource         *hostres;
+	struct list_head             wait_list;
+	struct mutex                 wl_mutex; /* protects @wait_list */
+	struct work_struct           work;
+};
+
+/**
+ * struct nnp_bootloader - holds status of the boot loader
+ * @image_info: state of boot image load request
+ * @mutex: protects accesses to @image_info
+ * @gc_timer: timer object which schedules images garbage collect
+ * @gc_work: handle for placing the garbage collect in workqueue
+ * @unloading_module: true if bootloader is cleared during module unload time,
+ *                    this indicate that the boot image can be removed even
+ *                    when some devices are waiting for it to be loaded.
+ *
+ * structure to hold the state of the boot loader.
+ */
+struct nnp_bootloader {
+	struct image_info  *image_info;
+	struct mutex       mutex; /* protects accesses to @image_info */
+	struct timer_list  gc_timer;
+	struct work_struct gc_work;
+	bool               unloading_module;
+};
+
+/* the interval, in milliseconds, for the boot image garbadge collect timer */
+#define GC_INTERVAL_MS 30000
+
+static void gc_work_handler(struct work_struct *work);
+
+static struct nnp_bootloader boot_loader = {
+	.image_info = NULL,
+	.mutex = __MUTEX_INITIALIZER(boot_loader.mutex),
+	.gc_work = __WORK_INITIALIZER(boot_loader.gc_work, gc_work_handler),
+	.unloading_module = false,
+};
+
+static void gc_timer_handler(struct timer_list *timer)
+{
+	schedule_work(&boot_loader.gc_work);
+
+	mod_timer(&boot_loader.gc_timer,
+		  jiffies + msecs_to_jiffies(GC_INTERVAL_MS));
+}
+
+static inline void start_gc_timer(void)
+{
+	timer_setup(&boot_loader.gc_timer, gc_timer_handler, 0);
+	mod_timer(&boot_loader.gc_timer,
+		  jiffies + msecs_to_jiffies(GC_INTERVAL_MS));
+}
+
+static inline void stop_gc_timer(void)
+{
+	if (!boot_loader.unloading_module)
+		del_timer(&boot_loader.gc_timer);
+}
+
+/**
+ * handle_image_load_state() - handles image load status
+ * @nnpdev: the device requested the image load
+ * @image_info: the image load info struct
+ *
+ * This function is called when image load has ended or when a new device
+ * requests to load an image which has already starts loading by another
+ * device.
+ * It handles the event according to the image load state.
+ *
+ * Return:
+ *  * 0   - image has mapped successfully, @image, @page_list_addr
+ *          and @total_chunks are valid only in this case.
+ *  * -EAGAIN - image load has started but not yet completed, function
+ *              should be called again later to check the load status.
+ *  * other - error code. Image load has failed.
+ */
+static int handle_image_load_state(struct nnp_device *nnpdev,
+				   struct image_info *image_info)
+{
+	dma_addr_t page_list_addr;
+	unsigned int total_chunks;
+	unsigned int image_size;
+	u64 cmd[3];
+	u32 val;
+	int ret;
+
+	/*
+	 * Check image state, map image to device if image is available
+	 */
+	switch (image_info->state) {
+	case IMAGE_REQUESTED:
+		/*
+		 * image load started by another device, add this
+		 * device to the waiting list
+		 */
+		mutex_lock(&image_info->wl_mutex);
+		list_add_tail(&nnpdev->image_wait_node, &image_info->wait_list);
+		mutex_unlock(&image_info->wl_mutex);
+		return -EAGAIN;
+
+	case IMAGE_AVAILABLE:
+		/* image successfully loaded, map it to the device */
+		ret = nnp_hostres_map_device(image_info->hostres, nnpdev,
+					     true, &page_list_addr,
+					     &total_chunks);
+		break;
+	case IMAGE_LOAD_FAILED:
+		/* image load has failed - fail with error */
+		ret = image_info->load_fail_err;
+		break;
+	}
+
+	if (ret) {
+		/* notify card that boot image cannot be loaded */
+		val = FIELD_PREP(NNP_HOST_ERROR_MASK,
+				 NNP_HOST_ERROR_CANNOT_LOAD_IMAGE);
+		nnp_set_host_doorbell_value(nnpdev->hw_dev, val);
+		return ret;
+	}
+
+	image_size = (unsigned int)nnp_hostres_get_size(image_info->hostres);
+
+	/* image successfully mapped - send it to the device to boot */
+	dev_dbg(nnpdev->hw_dev->dev,
+		"Mapped boot image num_chunks=%u total_size=%u\n",
+		total_chunks, image_size);
+
+	/* write image address directly to the command Q */
+	cmd[0] = FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_OP_MASK,
+			    NNP_IPC_H2C_OP_BIOS_PROTOCOL);
+	cmd[0] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_TYPE_MASK,
+			     NNP_IPC_H2C_TYPE_BOOT_IMAGE_READY);
+	cmd[0] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_SIZE_MASK,
+			     2 * sizeof(u64));
+
+	cmd[1] = (u64)page_list_addr + sizeof(struct dma_chain_header);
+
+	cmd[2] = FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW2_DESC_SIZE_MASK,
+			    total_chunks * sizeof(struct dma_chain_entry));
+	cmd[2] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW2_IMAGE_SIZE_MASK,
+			     image_size);
+
+	return nnp_cmdq_write_mesg(nnpdev->hw_dev, cmd, 3);
+}
+
+/**
+ * image_load_done() - informs all waiting devices about image load state
+ * @image: The image info node that has completed loading
+ *
+ * This function is called when image load from disk is complete, either with
+ * success or not.
+ */
+static void image_load_done(struct image_info *image)
 {
-	boot_image->state = IMAGE_NONE;
-	boot_image->hostres = NULL;
-	mutex_init(&boot_image->mutex);
+	struct nnp_device *nnpdev;
+
+	/* inform all waiting devices about the load image state */
+	mutex_lock(&image->wl_mutex);
+	while (!list_empty(&image->wait_list)) {
+		nnpdev = list_first_entry(&image->wait_list, struct nnp_device,
+					  image_wait_node);
+		handle_image_load_state(nnpdev, image);
+		list_del(&nnpdev->image_wait_node);
+	}
+	mutex_unlock(&image->wl_mutex);
 }
 
 static int load_firmware(struct image_info *image_info)
 {
 	const struct firmware *fw;
-	struct nnp_device *nnpdev = container_of(image_info, struct nnp_device,
-						 boot_image);
-	struct device *dev = nnpdev->hw_dev->dev;
+	struct device *dev = image_info->requested_nnpdev->hw_dev->dev;
 	struct kstat stat;
 	struct path path;
 	static const char *fname = "/lib/firmware/" NNP_FIRMWARE_NAME;
@@ -87,66 +271,54 @@ static void load_image_handler(struct work_struct *work)
 {
 	struct image_info *image_info = container_of(work, struct image_info,
 						     work);
-	struct nnp_device *nnpdev = container_of(image_info, struct nnp_device,
-						 boot_image);
-	dma_addr_t page_list_addr;
-	unsigned int total_chunks;
-	unsigned int image_size;
-	u64 cmd[3];
-	u32 val;
-	int ret;
-
-	mutex_lock(&image_info->mutex);
 
 	/* load boot image from disk */
-	ret = load_firmware(image_info);
-	if (ret) {
+	image_info->load_fail_err = load_firmware(image_info);
+	if (image_info->load_fail_err)
 		image_info->state = IMAGE_LOAD_FAILED;
-		goto fail;
-	}
 
-	/* map image to the device */
-	ret = nnp_hostres_map_device(image_info->hostres, nnpdev,
-				     true, &page_list_addr,
-				     &total_chunks);
-	if (ret) {
-		nnp_hostres_put(image_info->hostres);
-		image_info->hostres = NULL;
-		image_info->state = IMAGE_NONE;
-		goto fail;
-	}
-
-	image_size = (unsigned int)nnp_hostres_get_size(image_info->hostres);
-
-	/* image successfully mapped - send it to the device to boot */
-	dev_dbg(nnpdev->hw_dev->dev,
-		"Mapped boot image num_chunks=%u total_size=%u\n",
-		total_chunks, image_size);
+	/* give the boot image to waiting devices */
+	image_load_done(image_info);
+}
 
-	/* write image address directly to the command Q */
-	cmd[0] = FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_OP_MASK,
-			    NNP_IPC_H2C_OP_BIOS_PROTOCOL);
-	cmd[0] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_TYPE_MASK,
-			     NNP_IPC_H2C_TYPE_BOOT_IMAGE_READY);
-	cmd[0] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW0_SIZE_MASK,
-			     2 * sizeof(u64));
+static void gc_work_handler(struct work_struct *work)
+{
+	struct image_info *image;
 
-	cmd[1] = (u64)page_list_addr + sizeof(struct dma_chain_header);
+	/* iterate on all images and remove no longer needed images */
+	mutex_lock(&boot_loader.mutex);
+	if (!boot_loader.image_info)
+		goto done;
 
-	cmd[2] = FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW2_DESC_SIZE_MASK,
-			    total_chunks * sizeof(struct dma_chain_entry));
-	cmd[2] |= FIELD_PREP(NNP_H2C_BOOT_IMAGE_READY_QW2_IMAGE_SIZE_MASK,
-			     image_size);
+	image = boot_loader.image_info;
 
-	mutex_unlock(&image_info->mutex);
-	return;
+	/*
+	 * remove the image if it is not in a middle of loading
+	 * and no devices are waiting for the image.
+	 * If we are unloading - force removing anyway.
+	 */
+	mutex_lock(&image->wl_mutex);
+	if (boot_loader.unloading_module ||
+	    (image->state != IMAGE_REQUESTED &&
+	     list_empty(&image->wait_list))) {
+		if (image->hostres)
+			nnp_hostres_put(image->hostres);
+		boot_loader.image_info = NULL;
+		kfree(image);
+	}
+	mutex_unlock(&image->wl_mutex);
+
+	if (!boot_loader.image_info) {
+		/*
+		 * if no images are in progress or in use stop the garbadge collect
+		 * timer. On the next time a device will launch an image load, it will
+		 * get restarted
+		 */
+		stop_gc_timer();
+	}
 
-fail:
-	/* notify card that boot image cannot be loaded */
-	val = FIELD_PREP(NNP_HOST_ERROR_MASK,
-			 NNP_HOST_ERROR_CANNOT_LOAD_IMAGE);
-	nnp_set_host_doorbell_value(nnpdev->hw_dev, val);
-	mutex_unlock(&image_info->mutex);
+done:
+	mutex_unlock(&boot_loader.mutex);
 }
 
 /**
@@ -154,35 +326,61 @@ static void load_image_handler(struct work_struct *work)
  * @nnpdev: the device requested the image
  *
  * This function starts the flow of loading a boot image and map it to the
- * requesting device. It will launch a work to load the boot image.
- * It is an error to call this function if boot image load for the same
- * device is already in progress.
+ * requesting device.
+ * If the image is not already loaded or in progress of loading,
+ * a work will be launched to load the image and EAGAIN will be returned.
+ * The function should be called again later-on to check the load status
+ * until it either success or fail with another error.
+ * When one device requesting to load a boot image which some other device
+ * already started loading, the request for the new device will be added to
+ * the image "waiting list" and no new work will be launched to load the image
+ * again.
  *
  * Return:
  * * 0       - boot image was successfully loaded, mapped and sent to the device.
- * * -EINVAL - image load is already in progress
+ * * -EAGAIN - image load has started, function needs to be re-called again later.
+ * * other   - Error code. Image load has failed.
  */
 int nnpdev_load_boot_image(struct nnp_device *nnpdev)
 {
-	struct image_info *image_info = &nnpdev->boot_image;
-	int ret = 0;
+	struct image_info *image_info;
+	int ret;
 
 	/* check if the image is already loaded or in progress */
-	mutex_lock(&image_info->mutex);
-	if (image_info->state != IMAGE_NONE) {
-		ret = -EINVAL;
+	mutex_lock(&boot_loader.mutex);
+	if (boot_loader.image_info) {
+		ret = handle_image_load_state(nnpdev, boot_loader.image_info);
 		goto done;
 	}
 
 	/* initialize image load request */
+	image_info = kzalloc(sizeof(*image_info), GFP_KERNEL);
+	if (!image_info) {
+		ret = -ENOMEM;
+		goto done;
+	}
+
 	image_info->state = IMAGE_REQUESTED;
+	image_info->requested_nnpdev = nnpdev;
+	INIT_LIST_HEAD(&image_info->wait_list);
+	mutex_init(&image_info->wl_mutex);
 	INIT_WORK(&image_info->work, load_image_handler);
 
+	/* add the requesting device to the image wait list */
+	list_add_tail(&nnpdev->image_wait_node, &image_info->wait_list);
+
+	/*
+	 * start the garbadge collect timer
+	 */
+	start_gc_timer();
+
 	/* schedule work to load the image */
 	schedule_work(&image_info->work);
+	boot_loader.image_info = image_info;
+	ret = -EAGAIN;
 
 done:
-	mutex_unlock(&image_info->mutex);
+	mutex_unlock(&boot_loader.mutex);
 	return ret;
 }
 
@@ -199,33 +397,47 @@ int nnpdev_load_boot_image(struct nnp_device *nnpdev)
  */
 int nnpdev_unload_boot_image(struct nnp_device *nnpdev)
 {
-	struct image_info *image_info = &nnpdev->boot_image;
-	int ret = 0;
+	struct image_info *image_info;
+	int ret = -ENOENT;
+	struct nnp_device *d;
 
-	mutex_lock(&image_info->mutex);
-	switch (image_info->state) {
-	case IMAGE_NONE:
-		ret = -EINVAL;
-		goto done;
-	case IMAGE_REQUESTED:
-		mutex_unlock(&image_info->mutex);
-		cancel_work_sync(&image_info->work);
-		mutex_lock(&image_info->mutex);
-		break;
-	case IMAGE_LOAD_FAILED:
-	case IMAGE_AVAILABLE:
-		break;
-	}
+	mutex_lock(&boot_loader.mutex);
+	if (!boot_loader.image_info)
+		return ret;
 
-	if (image_info->hostres) {
-		ret = nnp_hostres_unmap_device(image_info->hostres, nnpdev);
-		nnp_hostres_put(image_info->hostres);
-		image_info->hostres = NULL;
-	}
+	image_info = boot_loader.image_info;
 
-	image_info->state = IMAGE_NONE;
+	/* remove the device from the wait list of the image */
+	mutex_lock(&image_info->wl_mutex);
+	list_for_each_entry(d, &image_info->wait_list,
+			    image_wait_node)
+		if (d == nnpdev) {
+			list_del(&nnpdev->image_wait_node);
+			break;
+		}
+	mutex_unlock(&image_info->wl_mutex);
+
+	mutex_unlock(&boot_loader.mutex);
+
+	if (image_info->hostres)
+		ret = nnp_hostres_unmap_device(image_info->hostres, nnpdev);
 
-done:
-	mutex_unlock(&image_info->mutex);
 	return ret;
 }
+
+void nnp_bootimage_fini(void)
+{
+	/*
+	 * delete the garbage collect timer and call its
+	 * callback one last time in order to remove any
+	 * boot image still in memory
+	 */
+	mutex_lock(&boot_loader.mutex);
+	if (boot_loader.image_info) {
+		stop_gc_timer();
+		cancel_work_sync(&boot_loader.gc_work);
+	}
+	mutex_unlock(&boot_loader.mutex);
+	boot_loader.unloading_module = true;
+	gc_work_handler(&boot_loader.gc_work);
+}
diff --git a/drivers/misc/intel-nnpi/bootimage.h b/drivers/misc/intel-nnpi/bootimage.h
index 9d64ee7..b17803e 100644
--- a/drivers/misc/intel-nnpi/bootimage.h
+++ b/drivers/misc/intel-nnpi/bootimage.h
@@ -5,39 +5,12 @@
 #ifndef _NNPDRV_BOOTIMAGE_H
 #define _NNPDRV_BOOTIMAGE_H
 
-#include <linux/mutex.h>
-#include <linux/workqueue.h>
+#include "hostres.h"
 
 struct nnp_device;
-struct host_resource;
 
-enum image_state {
-	IMAGE_NONE = 0,
-	IMAGE_REQUESTED,
-	IMAGE_LOAD_FAILED,
-	IMAGE_AVAILABLE
-};
+void nnp_bootimage_fini(void);
 
-/**
- * struct image_info - describes a boot image object
- * @state: state indicating whether it is loaded or load failed
- * @mutex: protects accesses to @state and @hostres
- * @load_fail_err: zero or error code if @state is IMAGE_LOAD_FAILED.
- * @hostres: host resource object allocated for the image content
- * @work: handle for placing the image load in a workqueue
- *
- * This structure describe a request to load boot image from disk,
- * there is one such structure for each device.
- */
-struct image_info {
-	enum image_state             state;
-	struct mutex                 mutex; /* protects @state and @hostres */
-	struct host_resource         *hostres;
-	struct work_struct           work;
-};
-
-
-void nnpdev_boot_image_init(struct image_info *boot_image);
 int nnpdev_load_boot_image(struct nnp_device *nnpdev);
 int nnpdev_unload_boot_image(struct nnp_device *nnpdev);
 
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 487f707..7636d36 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -50,8 +50,9 @@ static void last_device_fini(void)
 {
 	mutex_lock(&device_num_mutex);
 	if (--num_devices == 0) {
-		/* Release host interface */
+		/* Release host interface and bootimage timer */
 		nnp_release_host_interface();
+		nnp_bootimage_fini();
 	}
 	mutex_unlock(&device_num_mutex);
 }
@@ -1120,7 +1121,11 @@ void nnpdev_set_boot_state(struct nnp_device *nnpdev, u32 mask)
 		nnpdev->boot_image_loaded = true;
 		ret = nnpdev_load_boot_image(nnpdev);
 
-		if (ret)
+		/*
+		 * EAGAIN means the image not available in memory
+		 * but staged to be loaded. Other error should not happen.
+		 */
+		if (ret && ret != -EAGAIN)
 			dev_err(nnpdev->hw_dev->dev,
 				"Unexpected error while loading boot image. rc=%d\n",
 				ret);
@@ -1263,7 +1268,6 @@ struct nnp_device *nnpdev_create(struct nnp_hw_dev *hw_dev)
 
 	kref_init(&nnpdev->ref);
 	spin_lock_init(&nnpdev->lock);
-	nnpdev_boot_image_init(&nnpdev->boot_image);
 	INIT_WORK(&nnpdev->query_version_work.work, process_query_version_reply);
 
 	return nnpdev;
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 9d1a5d8..96efcdd 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -12,7 +12,6 @@
 #include <linux/kref.h>
 #include <linux/spinlock.h>
 #include <linux/workqueue.h>
-#include "bootimage.h"
 #include "ipc_protocol.h"
 #include "msg_scheduler.h"
 #include "nnp_hw.h"
@@ -277,7 +276,6 @@ struct nnp_device {
 	unsigned short chan_protocol_version;
 	unsigned int   num_active_contexts;
 	u32            card_doorbell_val;
-	struct image_info boot_image;
 
 	struct host_crash_dump    host_crash_dump;
 	struct query_version_work query_version_work;
-- 
1.8.3.1

