From 6774b6684c1a6f9fe53a9f9b0c7302deae94a74e Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 16 Nov 2020 12:34:31 +0200
Subject: [PATCH v12 23/29] misc: nnpi: Visibility to bios post code and bios
 flash progress

Add sysfs attributes which expose device BIOS post code which is
updating while the device is booting as well as to BIOS flash
progress (percentage) which is updated while BIOS capsule update is
performed.

Also, Add fw_update_completion sysfs attribute which allows to
start device cold-reset after device firmware update has completed.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 Documentation/ABI/testing/sysfs-driver-intel_nnpi | 22 +++++++
 drivers/misc/intel-nnpi/device_sysfs.c            | 71 +++++++++++++++++++++++
 drivers/misc/intel-nnpi/nnp_hw.h                  |  3 +
 drivers/misc/intel-nnpi/nnp_hw_pcie.c             | 56 ++++++++++++++++++
 4 files changed, 152 insertions(+)

diff --git a/Documentation/ABI/testing/sysfs-driver-intel_nnpi b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
index c59a2b0..deb7c11 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel_nnpi
+++ b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
@@ -44,6 +44,28 @@ Contact:        guy.zadicario@intel.com
 Description:    A version string describing the version of the device
                 command protocol version.
 
+What:           /sys/class/nnpi/nnpi<n>/post_code
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Device boot stage post code, updated by device BIOS during device boot.
+
+What:           /sys/class/nnpi/nnpi<n>/flash_progress
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Device bios flash progress in percent. Valid only when device BIOS flash
+                is in progress.
+
+What:           /sys/class/nnpi/nnpi<n>/fw_update_completion
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Shows 0/1 indicating if device has completed a firmware update and
+                and requires device cold-reset to start use the new firmware.
+                Writing "go" to this attribute will flag the device it may reset for
+                completing the update. PCIe link may go down!
+
 What:           /sys/class/nnpi/nnpi<n>/ice_units
 Date:           Sep 2020
 Kernelversion:  5.11
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index fd0d767..2b0f0d2 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -199,6 +199,74 @@ void nnpdev_sysfs_get_state_strings(struct nnp_device *nnpdev,
 	}
 }
 
+static ssize_t post_code_show(struct device *dev, struct device_attribute *attr,
+			      char *buf)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	return sprintf(buf, "0x%04x\n", nnp_get_postcode(nnpdev->hw_dev));
+}
+static DEVICE_ATTR_RO(post_code);
+
+static ssize_t bios_flash_progress_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	return sprintf(buf, "%03d %%\n",
+		       nnp_get_bios_flash_progress(nnpdev->hw_dev));
+}
+static DEVICE_ATTR_RO(bios_flash_progress);
+
+static ssize_t fw_update_completion_store(struct device *dev,
+					  struct device_attribute *attr,
+					  const char *buf, size_t count)
+{
+	struct nnp_device *nnpdev;
+	int rc;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev || count < 3)
+		return -EINVAL;
+
+	if (!sysfs_streq(buf, "go"))
+		return -EINVAL;
+
+	rc = nnp_fw_update_complete(nnpdev->hw_dev, true);
+	if (rc < 0)
+		return rc;
+
+	return count;
+}
+
+static ssize_t fw_update_completion_show(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	struct nnp_device *nnpdev;
+	int needed;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	needed = nnp_fw_update_complete(nnpdev->hw_dev, false);
+	if (needed < 0)
+		return needed;
+
+	return sprintf(buf, "%d\n", needed);
+}
+static DEVICE_ATTR_RW(fw_update_completion);
+
 static ssize_t ice_units_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
@@ -728,6 +796,9 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 	&dev_attr_cecc_threshold.attr,
 	&dev_attr_ucecc_threshold.attr,
 	&dev_attr_crashlog_size.attr,
+	&dev_attr_post_code.attr,
+	&dev_attr_bios_flash_progress.attr,
+	&dev_attr_fw_update_completion.attr,
 	&dev_attr_ice_units.attr,
 	&dev_attr_bios_version.attr,
 	&dev_attr_image_version.attr,
diff --git a/drivers/misc/intel-nnpi/nnp_hw.h b/drivers/misc/intel-nnpi/nnp_hw.h
index 6267ab7..89e9022 100644
--- a/drivers/misc/intel-nnpi/nnp_hw.h
+++ b/drivers/misc/intel-nnpi/nnp_hw.h
@@ -46,6 +46,9 @@ struct nnp_hw_dev {
 int nnp_cmdq_write_mesg(struct nnp_hw_dev *hw_dev, u64 *msg, u32 size);
 int nnp_cmdq_flush(struct nnp_hw_dev *hw_dev);
 int nnp_set_host_doorbell_value(struct nnp_hw_dev *hw_dev, u32 value);
+u32 nnp_get_postcode(struct nnp_hw_dev *hw_dev);
+u32 nnp_get_bios_flash_progress(struct nnp_hw_dev *hw_dev);
+int nnp_fw_update_complete(struct nnp_hw_dev *hw_dev, bool start);
 int nnp_get_membar_addr(struct nnp_hw_dev *hw_dev, phys_addr_t *out_phy_addr,
 			void __iomem **out_vaddr, size_t *out_len);
 
diff --git a/drivers/misc/intel-nnpi/nnp_hw_pcie.c b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
index 89cb934..0a6c64d 100644
--- a/drivers/misc/intel-nnpi/nnp_hw_pcie.c
+++ b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
@@ -483,6 +483,62 @@ int nnp_set_host_doorbell_value(struct nnp_hw_dev *hw_dev, u32 value)
 	return 0;
 }
 
+u32 nnp_get_postcode(struct nnp_hw_dev *hw_dev)
+{
+	struct nnp_pci *nnp_pci = container_of(hw_dev, struct nnp_pci, hw_dev);
+	u32 val;
+
+	/* bios post-code is reported in CPU_STATUS_0 register */
+	val = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_0);
+
+	return val;
+}
+
+u32 nnp_get_bios_flash_progress(struct nnp_hw_dev *hw_dev)
+{
+	struct nnp_pci *nnp_pci = container_of(hw_dev, struct nnp_pci, hw_dev);
+	u32 val;
+
+	/* bios flash progress is reported in CPU_STATUS_1 register */
+	val = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_1);
+
+	return val;
+}
+
+int nnp_fw_update_complete(struct nnp_hw_dev *hw_dev, bool start)
+{
+	struct nnp_pci *nnp_pci = container_of(hw_dev, struct nnp_pci, hw_dev);
+	u32 card_state;
+	u32 host_db_val;
+	bool need;
+
+	/* in case we are called during device reset/remove */
+	if (!nnp_pci->initted)
+		return -ENODEV;
+
+	card_state = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_2);
+	need = (FIELD_GET(ELBI_CPU_STATUS_2_FLR_MODE_MASK, card_state) == 1);
+
+	/* return 0 if fw update complete flow is not required */
+	if (!need)
+		return 0;
+
+	/* just return required state if not requested to act */
+	if (!start)
+		return 1;
+
+	/*
+	 * flag the device it may start firmware update completion.
+	 * NOTE: PCIe link may drop during this flow!
+	 */
+	host_db_val = nnp_mmio_read(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE);
+	host_db_val |= NNP_HOST_DRV_REQUEST_SELF_RESET_MASK;
+	nnp_mmio_write(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE, host_db_val);
+
+	/* required and started */
+	return 1;
+}
+
 int nnp_get_membar_addr(struct nnp_hw_dev *hw_dev, phys_addr_t *out_phy_addr,
 			void __iomem **out_vaddr, size_t *out_len)
 {
-- 
1.8.3.1

