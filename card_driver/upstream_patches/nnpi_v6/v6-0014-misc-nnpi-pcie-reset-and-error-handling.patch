From 27f4bcc078d09f54744872290ebb5cabee046041 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Wed, 1 Apr 2020 17:10:17 +0300
Subject: [PATCH v6 14/19] misc: nnpi: pcie reset and error handling.

Handle pcie reset and errors.
Inform all client applications about the error and stop any I/O
to the device until device is resumed.

Added /sys/class/nnpi/nnpi%d/reset attribute which allows to request
reset to the device. It is different than the pci device reset sysfs
file in that it first check the device status and reject the reset
request if the device is enabled, unless force was specified.

Added module parameter 'pcie_err_reset_mode', when set to 1 will request
device function reset on uncorrectable non-fatal pcie error.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 drivers/misc/intel-nnpi/device.c       | 131 +++++++++++++++++--
 drivers/misc/intel-nnpi/device.h       |   9 ++
 drivers/misc/intel-nnpi/device_sysfs.c |  76 +++++++++--
 drivers/misc/intel-nnpi/nnpdrv_main.c  |   5 +-
 drivers/misc/intel-nnpi/pcie.c         | 223 ++++++++++++++++++++++++++++++++-
 drivers/misc/intel-nnpi/pcie.h         |  16 +++
 6 files changed, 437 insertions(+), 23 deletions(-)

diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 08c3bb3..ddf9334 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -503,6 +503,12 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 				(u32)event_msg->obj_id;
 			nnpdev->counters.uncorr.os_crashed++;
 			break;
+		case NNP_IPC_ERROR_PCI_ERROR:
+			nnpdev->state |= NNP_DEVICE_PCI_ERROR;
+			nnpdev->pci_error = event_msg->event_val;
+			if (event_msg->event_val == NNP_PCIE_FATAL_ERROR)
+				nnpdev->counters.uncorr.os_crashed++;
+			break;
 		case NNP_IPC_ERROR_PROTOCOL_ERROR:
 			nnpdev->state |= NNP_DEVICE_PROTOCOL_ERROR;
 			break;
@@ -522,14 +528,16 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 			nnpdev->state |= NNP_DEVICE_FATAL_ICE_ERROR;
 			break;
 		case NNP_IPC_ERROR_CARD_RESET:
-			if (nnpdev->state & NNP_DEVICE_HANG)
-				nnp_log_info(GENERAL_LOG,
-					     "Device#%d hang detected - reset is needed\n",
-					     nnpdev->id);
-			else
-				nnp_log_info(GENERAL_LOG,
-					     "ERROR_CARD_RESET event received for device#%d\n",
-					     nnpdev->id);
+			if (event_msg->event_val != 0) {
+				if (nnpdev->state & NNP_DEVICE_HANG)
+					nnp_log_info(GENERAL_LOG,
+						     "Device#%d hang detected - reset is needed\n",
+						     nnpdev->id);
+				else
+					nnp_log_info(GENERAL_LOG,
+						     "ERROR_CARD_RESET event received for device#%d\n",
+						     nnpdev->id);
+			}
 			break;
 		default:
 			nnp_log_err(GENERAL_LOG,
@@ -1538,6 +1546,21 @@ void nnpdrv_card_doorbell_value_changed(struct nnp_device *nnpdev,
 	queue_work(nnpdev->wq, &req->work);
 }
 
+static void notify_device_disconnect(struct nnp_device *nnpdev,
+				     bool               is_reset)
+{
+	union c2h_event_report event;
+
+	/*
+	 * Report critical error event to all clients
+	 */
+	event.value = 0;
+	event.opcode = NNP_IPC_C2H_OP_EVENT_REPORT;
+	event.event_code = NNP_IPC_ERROR_CARD_RESET;
+	event.event_val = is_reset ? 1 : 0;
+	IPC_OPCODE_HANDLER(EVENT_REPORT)(nnpdev, &event);
+}
+
 int nnpdrv_device_destroy(struct nnp_device *nnpdev, bool prepare_only)
 {
 	struct completion completion;
@@ -1557,6 +1580,11 @@ int nnpdrv_device_destroy(struct nnp_device *nnpdev, bool prepare_only)
 	nnp_log_debug(GO_DOWN_LOG, "Destroying NNP-I device %u\n", nnpdev->id);
 
 	/*
+	 * Notify all client applications to stop using the device
+	 */
+	notify_device_disconnect(nnpdev, false);
+
+	/*
 	 * Decrement nnp_device refcount and wait until
 	 * all clients get disconnected, refcount reaches 0 and nnp_device
 	 * is released and freed
@@ -1654,3 +1682,90 @@ void nnpdrv_device_enable(struct nnp_device *nnpdev)
 	nnpdev->state |= NNP_DEVICE_CARD_ENABLED;
 	spin_unlock(&nnpdev->lock);
 }
+
+/* called from pcie layer when pcie error is detected */
+int nnpdrv_device_pci_error_detected(struct nnp_device *nnpdev,
+				     u32                error_type)
+{
+	union c2h_event_report event;
+
+	/*
+	 * report the event through event report path.
+	 */
+	event.value = 0;
+	event.opcode = NNP_IPC_C2H_OP_EVENT_REPORT;
+	event.event_code = NNP_IPC_ERROR_PCI_ERROR;
+	event.event_val = error_type;
+
+	IPC_OPCODE_HANDLER(EVENT_REPORT)(nnpdev, &event);
+
+	return 0;
+}
+
+/* called from pcie layer before the device is about to reset */
+void nnpdrv_device_reset_prepare(struct nnp_device *nnpdev, bool is_hang)
+{
+	/* BAR2 can not longer be accessed */
+	spin_lock(&nnpdev->lock);
+	nnpdev->inbound_mem = NULL;
+	spin_unlock(&nnpdev->lock);
+
+	/*
+	 * Put the device in error state due to reset started.
+	 * Error condition will be cleared when boot state is changed.
+	 */
+	if (!is_hang) {
+		nnpdrv_device_set_boot_state(nnpdev, NNP_DEVICE_CARD_IN_RESET);
+
+		/* set host driver state to "Not ready" */
+		nnpdev->hw_ops->set_host_doorbell_value(nnpdev->hw_handle,
+						NNP_HOST_DRV_STATE_NOT_READY <<
+						NNP_HOST_DRV_STATE_SHIFT);
+	} else {
+		nnpdrv_device_set_boot_state(nnpdev, NNP_DEVICE_HANG);
+	}
+
+	/*
+	 * Remove and invalidate all message queues so that
+	 * no more messages will be sent to the h/w queue
+	 */
+	msg_scheduler_invalidate_all(nnpdev->cmdq_sched);
+
+	/*
+	 * Notify all client applications to stop using the device
+	 */
+	notify_device_disconnect(nnpdev, true);
+}
+
+/* called from pcie layer after the device has successfully done reset */
+void nnpdrv_device_reset_done(struct nnp_device *nnpdev)
+{
+	u64 membar_addr;
+	void *membar_vaddr;
+
+	/* re-enable the public command q */
+	msg_scheduler_queue_make_valid(nnpdev->public_cmdq);
+
+	/* recover BAR2 address after reset succeeded */
+	nnpdev->hw_ops->get_membar_addr(nnpdev->hw_handle,
+					&membar_addr,
+					&membar_vaddr,
+					NULL);
+	nnpdev->inbound_mem = (union nnp_inbound_mem *)membar_vaddr;
+}
+
+int nnpdrv_device_force_reset(struct nnp_device *nnpdev)
+{
+	int ret;
+
+	/*
+	 * reset h/w layer - will generate FLR
+	 */
+	ret = nnpdev->hw_ops->reset(nnpdev->hw_handle);
+	if (ret)
+		nnp_log_err(GENERAL_LOG,
+			    "failed to reset h/w layer during froce reset ret=%d\n",
+			    ret);
+
+	return ret;
+}
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index bffc7c1..2273cbf 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -180,6 +180,7 @@ struct nnp_device {
 	u16            chan_protocol_version;
 	u32            num_active_contexts;
 	u32            card_doorbell_val;
+	u32            pci_error;
 
 	u32 correctable_ecc_threshold;
 	u32 correctable_ecc_counter;
@@ -236,6 +237,14 @@ int nnpdrv_device_process_messages(struct nnp_device *nnpdev,
 				   u32                size);
 
 void nnpdrv_device_set_boot_state(struct nnp_device *nnpdev, u32 mask);
+int nnpdrv_device_pci_error_detected(struct nnp_device *nnpdev,
+				     u32                error_type);
+void nnpdrv_device_disable(struct nnp_device *nnpdev);
+void nnpdrv_device_enable(struct nnp_device *nnpdev);
+int nnpdrv_device_force_reset(struct nnp_device *nnpdev);
+void nnpdrv_device_reset_prepare(struct nnp_device *nnpdev, bool is_hang);
+void nnpdrv_device_reset_done(struct nnp_device *nnpdev);
+
 struct nnpdrv_cmd_chan *nnpdrv_device_find_channel(struct nnp_device *nnpdev,
 						   u16             protocol_id);
 void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index af7b392..d1cbe97 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -117,6 +117,48 @@ static ssize_t boot_image_store(struct device           *dev,
 }
 static DEVICE_ATTR_RW(boot_image);
 
+static ssize_t reset_store(struct device           *dev,
+			   struct device_attribute *attr,
+			   const char              *buf,
+			   size_t                   count)
+{
+	struct nnp_device *nnpdev;
+	int force;
+	unsigned long val;
+	int ret;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	force = strncmp(buf, "force", count) == 0 ? 1 : 0;
+	if (!force)
+		if (kstrtoul(buf, 0, &val) < 0)
+			return -EINVAL;
+
+	if (!force && !val)
+		return -EINVAL;
+
+	/*
+	 * If force was not specified we wont reset in those cases:
+	 * a) the device is enabled
+	 * b) the device reset has been already started
+	 * c) there are active contexts on the device.
+	 */
+	if (!force &&
+	    ((nnpdev->state & NNP_DEVICE_CARD_ENABLED) ||
+	     (nnpdev->state & NNP_DEVICE_CARD_IN_RESET) ||
+	     nnpdev->num_active_contexts > 0))
+		return -EBUSY;
+
+	ret = nnpdrv_device_force_reset(nnpdev);
+	if (ret)
+		return -EFAULT;
+
+	return count;
+}
+static DEVICE_ATTR_WO(reset);
+
 void nnpdrv_device_sysfs_get_state_strings(struct nnp_device *nnpdev,
 					   const char **state,
 					   const char **boot_state,
@@ -142,32 +184,39 @@ void nnpdrv_device_sysfs_get_state_strings(struct nnp_device *nnpdev,
 		*boot_state = "Unknown";
 
 	/* Find failure Reason*/
-	if (nnpdev->state & NNP_DEVICE_FAILED_VERSION)
+	if (nnpdev->state &
+	    (NNP_DEVICE_FAILED_VERSION | NNP_DEVICE_PROTOCOL_ERROR)) {
 		*fail_reason = "version Mismatch";
-	else if (nnpdev->state & NNP_DEVICE_CAPSULE_EXPECTED)
+	} else if (nnpdev->state & NNP_DEVICE_CAPSULE_EXPECTED) {
 		*fail_reason = "Bios Update Required";
-	else if (nnpdev->state & NNP_DEVICE_CAPSULE_FAILED)
+	} else if (nnpdev->state & NNP_DEVICE_CAPSULE_FAILED) {
 		*fail_reason = "Bios Update Failed";
-	else if (nnpdev->state & NNP_DEVICE_CURRUPTED_BOOT_IMAGE)
+	} else if (nnpdev->state & NNP_DEVICE_CURRUPTED_BOOT_IMAGE) {
 		*fail_reason = "Boot/Capsule image verification Failed";
-	else if (nnpdev->state & NNP_DEVICE_BOOT_FAILED)
+	} else if (nnpdev->state & NNP_DEVICE_BOOT_FAILED) {
 		*fail_reason = "Boot failed";
-	else if (nnpdev->state & NNP_DEVICE_HOST_DRIVER_ERROR)
+	} else if (nnpdev->state & NNP_DEVICE_HOST_DRIVER_ERROR) {
 		*fail_reason = "Driver Error";
-	else if (nnpdev->state & NNP_DEVICE_KERNEL_CRASH)
+	} else if (nnpdev->state & NNP_DEVICE_KERNEL_CRASH) {
 		*fail_reason = "OS Crash";
-	else if (nnpdev->state & NNP_DEVICE_CARD_IN_RESET)
+	} else if (nnpdev->state & NNP_DEVICE_PCI_ERROR) {
+		if (nnpdev->pci_error == NNP_PCIE_LINK_RETRAIN_REQUIRED)
+			*fail_reason = "PCI Error (rescan required)";
+		else
+			*fail_reason = "PCI Error";
+	} else if (nnpdev->state & NNP_DEVICE_CARD_IN_RESET) {
 		*fail_reason = "Reset in progress";
-	else if (nnpdev->state & NNP_DEVICE_FATAL_MCE_ERROR)
+	} else if (nnpdev->state & NNP_DEVICE_FATAL_MCE_ERROR) {
 		*fail_reason = "Fatal MCE Error";
-	else if (nnpdev->state & NNP_DEVICE_FATAL_DRAM_ECC_ERROR)
+	} else if (nnpdev->state & NNP_DEVICE_FATAL_DRAM_ECC_ERROR) {
 		*fail_reason = "Fatal DRAM ECC Error";
-	else if (nnpdev->state & NNP_DEVICE_FATAL_ICE_ERROR)
+	} else if (nnpdev->state & NNP_DEVICE_FATAL_ICE_ERROR) {
 		*fail_reason = "Fatal ICE execution error";
-	else if (nnpdev->state & NNP_DEVICE_HANG)
+	} else if (nnpdev->state & NNP_DEVICE_HANG) {
 		*fail_reason = "Device Not Responding (Hang)";
-	else
+	} else {
 		*fail_reason = "None";
+	}
 
 	/* find device state */
 	if (nnpdev->state & NNP_DEVICE_ERROR_MASK) {
@@ -789,6 +838,7 @@ static ssize_t corr_counters_show(struct device           *dev,
 static struct attribute *nnp_dev_attrs[] = {
 	&dev_attr_enable.attr,
 	&dev_attr_boot_image.attr,
+	&dev_attr_reset.attr,
 	&dev_attr_total_unprotected_mem.attr,
 	&dev_attr_total_protected_mem.attr,
 	&dev_attr_protocol_version.attr,
diff --git a/drivers/misc/intel-nnpi/nnpdrv_main.c b/drivers/misc/intel-nnpi/nnpdrv_main.c
index 728ab7f..e2a4f37 100644
--- a/drivers/misc/intel-nnpi/nnpdrv_main.c
+++ b/drivers/misc/intel-nnpi/nnpdrv_main.c
@@ -17,7 +17,10 @@
 	.create_nnp_device = nnpdrv_device_create,
 	.card_doorbell_value_changed = nnpdrv_card_doorbell_value_changed,
 	.destroy_nnp_device = nnpdrv_device_destroy,
-	.process_messages = nnpdrv_device_process_messages
+	.process_messages = nnpdrv_device_process_messages,
+	.pci_error_detected = nnpdrv_device_pci_error_detected,
+	.reset_prepare = nnpdrv_device_reset_prepare,
+	.reset_done = nnpdrv_device_reset_done
 };
 
 static int nnpdrv_init_module(void)
diff --git a/drivers/misc/intel-nnpi/pcie.c b/drivers/misc/intel-nnpi/pcie.c
index 188ad7f..8ac4893 100644
--- a/drivers/misc/intel-nnpi/pcie.c
+++ b/drivers/misc/intel-nnpi/pcie.c
@@ -13,6 +13,7 @@
 #include <linux/wait.h>
 #include <linux/kref.h>
 #include <linux/atomic.h>
+#include <linux/aer.h>
 #include "pcie.h"
 #define ELBI_BASE         0  /* MMIO offset of ELBI registers */
 #include "nnp_elbi.h"
@@ -46,6 +47,13 @@
 		   ELBI_PCI_STATUS_RESPONSE_FIFO_NEW_RESPONSE_MASK |
 		   ELBI_PCI_STATUS_DOORBELL_MASK;
 
+/* pcie_err_reset_mode
+ *    0 = do not auto issue FLR on non-fatal uncorrectable error
+ *    1 = issue FLR on non-fatal uncorrectable error
+ */
+int pcie_err_reset_mode;
+module_param(pcie_err_reset_mode,  int, 0400);
+
 struct nnp_memdesc {
 	phys_addr_t   pa;
 	void __iomem *va;
@@ -76,6 +84,8 @@ struct nnp_pci_device {
 	u32               cmd_read_update_count;
 
 	u32                initted;
+	u32                needs_reset;
+	struct work_struct reset_work;
 
 	bool               removing;
 };
@@ -94,6 +104,11 @@ static void free_nnp_pci(struct kref *kref)
 	kfree(nnp_pci);
 }
 
+static int nnp_pci_get(struct nnp_pci_device *nnp_pci)
+{
+	return kref_get_unless_zero(&nnp_pci->ref);
+}
+
 static int nnp_pci_put(struct nnp_pci_device *nnp_pci)
 {
 	return kref_put(&nnp_pci->ref, free_nnp_pci);
@@ -500,6 +515,13 @@ static int nnp_set_host_doorbell_value(void *hw_handle, u32 value)
 	return 0;
 }
 
+static int nnp_reset(void *hw_handle)
+{
+	struct nnp_pci_device *nnp_pci = (struct nnp_pci_device *)hw_handle;
+
+	return pci_reset_function(nnp_pci->pdev);
+}
+
 static u32 nnp_get_postcode(void *hw_handle)
 {
 	struct nnp_pci_device *nnp_pci = (struct nnp_pci_device *)hw_handle;
@@ -560,6 +582,7 @@ static dma_addr_t nnp_get_host_doorbell_addr(void *hw_handle)
 	.flush_command_fifo = nnp_cmdq_flush,
 	.get_card_doorbell_value = nnp_get_card_doorbell_value,
 	.set_host_doorbell_value = nnp_set_host_doorbell_value,
+	.reset = nnp_reset,
 	.get_postcode = nnp_get_postcode,
 	.get_bios_flash_progress = nnp_get_bios_flash_progress,
 	.get_membar_addr = nnp_get_membar_addr,
@@ -657,6 +680,12 @@ static int nnp_init_pci_device(struct nnp_pci_device *nnp_pci)
 		goto unmap_mem_bar;
 	}
 
+	rc = pci_enable_pcie_error_reporting(pdev);
+	if (rc)
+		nnp_dev_err(nnp_pci->dev, START_UP_LOG,
+			    "pci_enable_pcie_error_reporting returned %d\n",
+			    rc);
+
 	/*
 	 * done setting up the new pci device,
 	 * add it to the set of NNP-I devices
@@ -808,6 +837,197 @@ static void nnp_remove(struct pci_dev *pdev)
 	nnp_pci_put(nnp_pci);
 }
 
+static void start_reset_work(struct nnp_pci_device *nnp_pci,
+			     struct workqueue_struct *wq,
+			     work_func_t            handler)
+{
+	if (!nnp_pci_get(nnp_pci))
+		return;
+
+	/* cancel or wait for previous pending reset work */
+	if (work_pending(&nnp_pci->reset_work))
+		cancel_work_sync(&nnp_pci->reset_work);
+
+	spin_lock(&nnp_pci->cmdq_lock);
+	INIT_WORK(&nnp_pci->reset_work, handler);
+	if (wq)
+		queue_work(wq, &nnp_pci->reset_work);
+	else
+		schedule_work(&nnp_pci->reset_work);
+	spin_unlock(&nnp_pci->cmdq_lock);
+}
+
+static pci_ers_result_t nnp_pci_err_error_detected(struct pci_dev *dev,
+						   enum pci_channel_state error)
+{
+	struct nnp_pci_device *nnp_pci = NULL;
+
+	nnp_dev_err(nnp_pci->dev, GENERAL_LOG,
+		    "pci error detected error=%d\n", error);
+
+	nnp_pci = pci_get_drvdata(dev);
+	if (!nnp_pci || !s_nnp_callbacks)
+		return PCI_ERS_RESULT_NONE;
+
+	if (error == pci_channel_io_normal) {
+		/* non-fatal error */
+
+		/* report the event upstream */
+		s_nnp_callbacks->pci_error_detected(nnp_pci->nnpdev,
+						    NNP_PCIE_NON_FATAL_ERROR);
+
+		/* request to issue FLR when recovery is done */
+		nnp_pci->needs_reset = (pcie_err_reset_mode == 1 ? 1 : 0);
+
+		/* no need to reset the PCI bus */
+		return PCI_ERS_RESULT_CAN_RECOVER;
+	} else if (error == pci_channel_io_frozen) {
+		/* fatal error */
+
+		/* report the event upstream */
+		s_nnp_callbacks->pci_error_detected(nnp_pci->nnpdev,
+						    NNP_PCIE_FATAL_ERROR);
+
+		/* need to reset the link */
+		return PCI_ERS_RESULT_NEED_RESET;
+	} else if (error == pci_channel_io_perm_failure) {
+		/* cannot be recovered */
+
+		/* report the event upstream */
+		s_nnp_callbacks->pci_error_detected(nnp_pci->nnpdev,
+						    NNP_PCIE_PERMANENT_FAILURE);
+
+		return PCI_ERS_RESULT_DISCONNECT;
+	}
+
+	return PCI_ERS_RESULT_NONE;
+}
+
+static pci_ers_result_t nnp_pci_err_mmio_enabled(struct pci_dev *dev)
+{
+	nnp_dev_err(&dev->dev, GENERAL_LOG, "pci error mmio_enabled\n");
+	return PCI_ERS_RESULT_NONE;
+}
+
+static pci_ers_result_t nnp_pci_err_slot_reset(struct pci_dev *dev)
+{
+	u32 cmd;
+
+	nnp_dev_err(&dev->dev, GENERAL_LOG, "pci error slot_reset\n");
+
+	pci_read_config_dword(dev, 0x4, &cmd);
+	if (cmd != 0xffffffff)
+		return PCI_ERS_RESULT_RECOVERED;
+	else
+		return PCI_ERS_RESULT_DISCONNECT;
+}
+
+static void nnp_reset_work_handler(struct work_struct *work)
+{
+	struct nnp_pci_device *nnp_pci = container_of(work,
+						      struct nnp_pci_device,
+						      reset_work);
+
+	if (nnp_pci->needs_reset && !nnp_pci->removing) {
+		nnp_pci->needs_reset = 0;
+		nnp_reset(nnp_pci);
+	}
+
+	nnp_pci_put(nnp_pci);
+}
+
+static void nnp_pci_err_resume(struct pci_dev *dev)
+{
+	struct nnp_pci_device *nnp_pci = NULL;
+
+	nnp_pci = pci_get_drvdata(dev);
+	if (!nnp_pci || !s_nnp_callbacks)
+		return;
+
+	nnp_dev_err(nnp_pci->dev, GENERAL_LOG, "pci error resume\n");
+
+	/* request FLR - h/w may be recovered but need to restart s/w */
+	if (nnp_pci->needs_reset)
+		start_reset_work(nnp_pci, NULL, nnp_reset_work_handler);
+}
+
+static void nnp_reset_prepare(struct pci_dev *dev)
+{
+	struct nnp_pci_device *nnp_pci = NULL;
+
+	nnp_pci = pci_get_drvdata(dev);
+	if (!nnp_pci || !s_nnp_callbacks)
+		return;
+
+	nnp_dev_info(nnp_pci->dev, GENERAL_LOG, "reset_prepare\n");
+
+	if (s_nnp_callbacks->reset_prepare)
+		s_nnp_callbacks->reset_prepare(nnp_pci->nnpdev, false);
+
+	nnp_fini_pci_device(nnp_pci);
+}
+
+static void nnp_reset_done(struct pci_dev *dev)
+{
+	struct nnp_pci_device *nnp_pci = NULL;
+	int rc = 0;
+	u32 cmd;
+	int t = 30;
+
+	nnp_pci = pci_get_drvdata(dev);
+	if (!nnp_pci || !s_nnp_callbacks)
+		return;
+
+	nnp_dev_info(nnp_pci->dev, GENERAL_LOG, "reset_done\n");
+
+	do {
+		if (nnp_pci->removing)
+			break;
+		pci_read_config_dword(dev, 0x4, &cmd);
+		nnp_dev_info(nnp_pci->dev, GENERAL_LOG,
+			     "config after reset t=%d cmd0 = 0x%x\n", t, cmd);
+		if (cmd != 0xffffffff)
+			break;
+		msleep(100);
+	} while (t-- > 0);
+
+	if (nnp_pci->removing) {
+		nnp_dev_info(nnp_pci->dev, GENERAL_LOG,
+			     "Device has removed - give up reset/reload\n");
+		return;
+	}
+
+	if (cmd != 0xffffffff)
+		rc = nnp_init_pci_device(nnp_pci);
+
+	if (cmd == 0xffffffff || rc) {
+		u32 err = (cmd == 0xffffffff || rc == -EIO ?
+			   NNP_PCIE_LINK_RETRAIN_REQUIRED :
+			   NNP_PCIE_PERMANENT_FAILURE);
+
+		nnp_dev_err(nnp_pci->dev, GENERAL_LOG,
+			    "failed to initialize pci device after FLR/Reset!!\n");
+		if (err == NNP_PCIE_LINK_RETRAIN_REQUIRED)
+			nnp_dev_err(nnp_pci->dev, GENERAL_LOG,
+				    "Remove and Rescan device may help.\n");
+		if (nnp_pci->nnpdev)
+			s_nnp_callbacks->pci_error_detected(nnp_pci->nnpdev,
+							    err);
+	} else {
+		if (s_nnp_callbacks->reset_done)
+			s_nnp_callbacks->reset_done(nnp_pci->nnpdev);
+	}
+}
+
+static struct pci_error_handlers nnp_pci_err_handlers = {
+	.error_detected = nnp_pci_err_error_detected,
+	.mmio_enabled = nnp_pci_err_mmio_enabled,
+	.slot_reset = nnp_pci_err_slot_reset,
+	.reset_prepare = nnp_reset_prepare,
+	.reset_done = nnp_reset_done,
+	.resume = nnp_pci_err_resume
+};
+
 static const struct pci_device_id nnp_pci_tbl[] = {
 	{PCI_DEVICE(NNP_PCI_VENDOR_ID, NNP_PCI_DEVICE_ID)},
 	/* required last entry */
@@ -818,7 +1038,8 @@ static void nnp_remove(struct pci_dev *pdev)
 	.name = nnp_driver_name,
 	.id_table = nnp_pci_tbl,
 	.probe = nnp_probe,
-	.remove = nnp_remove
+	.remove = nnp_remove,
+	.err_handler = &nnp_pci_err_handlers
 };
 
 int nnpdrv_pci_init(struct nnpdrv_device_hw_callbacks *nnp_callbacks)
diff --git a/drivers/misc/intel-nnpi/pcie.h b/drivers/misc/intel-nnpi/pcie.h
index 3fafec9..acf2d62 100644
--- a/drivers/misc/intel-nnpi/pcie.h
+++ b/drivers/misc/intel-nnpi/pcie.h
@@ -30,6 +30,7 @@ struct nnpdrv_device_hw_ops {
 	int (*flush_command_fifo)(void *hw_handle);
 	u32 (*get_card_doorbell_value)(void *hw_handle);
 	int (*set_host_doorbell_value)(void *hw_handle, u32 value);
+	int (*reset)(void *hw_handle);
 	u32 (*get_postcode)(void *hw_handle);
 	u32 (*get_bios_flash_progress)(void *hw_handle);
 	int (*get_membar_addr)(void *hw_handle,
@@ -57,9 +58,24 @@ struct nnpdrv_device_hw_callbacks {
 	int (*process_messages)(struct nnp_device *nnpdev,
 				u64               *msg,
 				u32                size);
+
+	int (*pci_error_detected)(struct nnp_device *nnpdev,
+				  u32                error_type);
+
+	void (*reset_prepare)(struct nnp_device *nnpdev, bool is_hang);
+	void (*reset_done)(struct nnp_device *nnpdev);
 };
 
 int nnpdrv_pci_init(struct nnpdrv_device_hw_callbacks *callbacks);
 void nnpdrv_hw_cleanup(void);
 
+/*
+ * Possible values for 'error_type' argument passed to pci_error_detected
+ * callback.
+ */
+#define NNP_PCIE_NON_FATAL_ERROR   1
+#define NNP_PCIE_FATAL_ERROR       2
+#define NNP_PCIE_PERMANENT_FAILURE 3
+#define NNP_PCIE_LINK_RETRAIN_REQUIRED 4
+
 #endif
-- 
1.8.3.1

