From 4a54e7a5a11ee8fb4018b6a79b566d5c13fd5835 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 16 Nov 2020 15:31:17 +0200
Subject: [PATCH v15 26/30] misc: nnpi: PCIe error injection

Generate various PCIe errors, using dedicated debug registers, in order to
support development and debug of error handling procedures by the user.

Injecting PCIe errors is triggered by writing to a debugfs file:
<debugfs>/intel_nnpi/%d/pcie_inject. Depending on the string written to
this file, a correctable, uncorrectable or fatal error will be injected, or
the previously injected error will be restored.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/Makefile         |   3 +-
 drivers/misc/intel-nnpi/device.c         |  16 +++
 drivers/misc/intel-nnpi/device.h         |  12 ++
 drivers/misc/intel-nnpi/device_debugfs.c |  67 ++++++++++
 drivers/misc/intel-nnpi/device_debugfs.h |  14 +++
 drivers/misc/intel-nnpi/nnp_pcie.c       | 208 +++++++++++++++++++++++++++++++
 6 files changed, 319 insertions(+), 1 deletion(-)
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.c
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.h

diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index 24e1dc9..e4894b7 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -6,7 +6,8 @@
 obj-$(CONFIG_INTEL_NNPI) := intel_nnpi.o intel_nnpi_pcie.o
 
 intel_nnpi-y := device.o msg_scheduler.o hostres.o host_chardev.o nnp_user.o \
-                bootimage.o cmd_chan.o device_chardev.o device_sysfs.o
+                bootimage.o cmd_chan.o device_chardev.o device_sysfs.o \
+                device_debugfs.o
 
 intel_nnpi_pcie-y := nnp_pcie.o
 
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 5518c8a..6f40743 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -14,6 +14,7 @@
 #include "cmd_chan.h"
 #include "device.h"
 #include "device_chardev.h"
+#include "device_debugfs.h"
 #include "device_sysfs.h"
 #include "host_chardev.h"
 #include "ipc_c2h_events.h"
@@ -21,6 +22,7 @@
 #include "nnp_boot_defs.h"
 
 static DEFINE_IDA(dev_ida);
+static struct dentry *debugfs_dir;
 
 #define BITS_PER_U64 (sizeof(u64) * 8)
 #define CARD_SYS_INFO_NUM_PAGES  9
@@ -1171,6 +1173,11 @@ int nnpdev_init(struct nnp_device *nnpdev, struct device *dev,
 	hash_init(nnpdev->cmd_chan_hash);
 	init_waitqueue_head(&nnpdev->waitq);
 
+	if (debugfs_dir) {
+		nnpdev->debugfs_dir =
+			nnpdev_debugfs_init(nnpdev, debugfs_dir);
+	}
+
 	nnpdev->cmdq_sched = nnp_msched_create(nnpdev);
 	if (!nnpdev->cmdq_sched) {
 		ret = -ENOMEM;
@@ -1246,6 +1253,7 @@ int nnpdev_init(struct nnp_device *nnpdev, struct device *dev,
 err_msg_sched:
 	nnp_msched_destroy(nnpdev->cmdq_sched);
 err_ida:
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 	return ret;
 }
@@ -1428,6 +1436,8 @@ void nnpdev_destroy(struct nnp_device *nnpdev)
 			  nnpdev->bios_system_info_dma_addr);
 
 	nnp_msched_destroy(nnpdev->cmdq_sched);
+
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_destroy(&nnpdev->cmd_chan_ida);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 }
@@ -1549,6 +1559,11 @@ static int __init nnp_init(void)
 	if (ret)
 		goto err_class;
 
+	/* create NNP-I top debugfs dir */
+	debugfs_dir = debugfs_create_dir("intel_nnpi", NULL);
+	if (IS_ERR_OR_NULL(debugfs_dir))
+		debugfs_dir = NULL;
+
 	return 0;
 
 err_class:
@@ -1559,6 +1574,7 @@ static int __init nnp_init(void)
 
 static void __exit nnp_cleanup(void)
 {
+	debugfs_remove_recursive(debugfs_dir);
 	nnp_release_host_interface();
 	nnp_bootimage_fini();
 	nnpdev_cdev_class_cleanup();
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index d63a4e7..acc8a4e 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -230,6 +230,7 @@ struct nnp_device_counters {
  * @uncorrectable_dram_ecc_threshold: threshold error counter for generating
  *                                    uevent informing on uncorr dram ecc error
  * @uncorrectable_dram_ecc_counter: uncorrectable dram ecc error counter
+ * @debugfs_dir: dir entry for device's root debugfs dir
  */
 struct nnp_device {
 	const struct nnp_device_ops *ops;
@@ -291,6 +292,15 @@ struct nnp_device {
 	unsigned long  correctable_dram_ecc_counter;
 	unsigned long  uncorrectable_dram_ecc_threshold;
 	unsigned long  uncorrectable_dram_ecc_counter;
+
+	struct dentry *debugfs_dir;
+};
+
+enum nnp_einj_type {
+	NNP_PCIE_INJECT_RESTORE = 0,
+	NNP_PCIE_INJECT_CORR,
+	NNP_PCIE_INJECT_UNCORR,
+	NNP_PCIE_INJECT_UNCORR_FATAL,
 };
 
 /**
@@ -304,6 +314,7 @@ struct nnp_device {
  * @get_bios_flash_progress: return progress percentage of card's BIOS flash
  * @fw_update_complete: power cycle the NNP-I device if card's firmware update
  *                      has completed.
+ * @error_inject: request to inject the specied error to the NNP-I card device
  */
 struct nnp_device_ops {
 	int (*cmdq_flush)(struct nnp_device *hw_dev);
@@ -315,6 +326,7 @@ struct nnp_device_ops {
 	u32 (*get_postcode)(struct nnp_device *nnpdev);
 	u32 (*get_bios_flash_progress)(struct nnp_device *nnpdev);
 	int (*fw_update_complete)(struct nnp_device *nnpdev, bool start);
+	int (*error_inject)(struct nnp_device *nnpdev, enum nnp_einj_type err_type);
 };
 
 bool nnpdev_no_devices(void);
diff --git a/drivers/misc/intel-nnpi/device_debugfs.c b/drivers/misc/intel-nnpi/device_debugfs.c
new file mode 100644
index 0000000..b4ef1ee
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.c
@@ -0,0 +1,67 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#include <linux/string.h>
+#include <linux/uaccess.h>
+
+#include "device.h"
+#include "device_debugfs.h"
+
+static ssize_t pcie_inject_write(struct file *file, const char __user *data,
+				 size_t count, loff_t *ppos)
+{
+	struct nnp_device *nnpdev = file->private_data;
+	u32 pcie_err_type;
+	char type_str[16];
+	int ret;
+
+	if (count > 16)
+		return -EINVAL;
+	if (copy_from_user(type_str, data, count))
+		return -EFAULT;
+
+	if (sysfs_streq(type_str, "corr"))
+		pcie_err_type = NNP_PCIE_INJECT_CORR;
+	else if (sysfs_streq(type_str, "uncorr"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR;
+	else if (sysfs_streq(type_str, "fatal"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR_FATAL;
+	else if (sysfs_streq(type_str, "none"))
+		pcie_err_type = NNP_PCIE_INJECT_RESTORE;
+	else
+		return -EINVAL;
+
+	/*
+	 * Setup h/w layer to generate the requested error
+	 * on the next dma transaction
+	 */
+	ret = nnpdev->ops->error_inject(nnpdev, pcie_err_type);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+static const struct file_operations pcie_inject_fops = {
+	.open = simple_open,
+	.write = pcie_inject_write,
+	.llseek = generic_file_llseek,
+};
+
+struct dentry *nnpdev_debugfs_init(struct nnp_device *nnpdev,
+				   struct dentry *parent)
+{
+	struct dentry *dev_root;
+	char dev_dirname[32];
+
+	sprintf(dev_dirname, "%d", nnpdev->id);
+
+	dev_root = debugfs_create_dir(dev_dirname, parent);
+	if (IS_ERR_OR_NULL(dev_root))
+		return NULL;
+
+	debugfs_create_file("pcie_inject", 0644, dev_root, nnpdev,
+			    &pcie_inject_fops);
+
+	return dev_root;
+}
diff --git a/drivers/misc/intel-nnpi/device_debugfs.h b/drivers/misc/intel-nnpi/device_debugfs.h
new file mode 100644
index 0000000..4ee04e6
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#ifndef _NNP_DEVICE_DEBUGFS_H
+#define _NNP_DEVICE_DEBUGFS_H
+
+#include <linux/debugfs.h>
+
+struct nnp_device;
+
+struct dentry *nnpdev_debugfs_init(struct nnp_device *nnpdev,
+				   struct dentry *parent);
+
+#endif // of _NNP_DEVICE_DEBUGFS_H
diff --git a/drivers/misc/intel-nnpi/nnp_pcie.c b/drivers/misc/intel-nnpi/nnp_pcie.c
index 8625a5c..30f1add 100644
--- a/drivers/misc/intel-nnpi/nnp_pcie.c
+++ b/drivers/misc/intel-nnpi/nnp_pcie.c
@@ -60,6 +60,11 @@
  * @periodic_on: true when @interrupts_mask_timer is active. It is turns off
  *               during device reset.
  * @hang: true if device hang condition is detected.
+ * @ras_des_off: offset of ras PCIe extension in config space
+ * @aer_pos: offset of PCIe AER extension in config space
+ * @aer_cor_mask: AER corrected mask of device before error has injected
+ * @aer_uncor_mask: AER uncorrected mask of decice before error has injected
+ * @aer_uncor_severity: AER uncorrected severity settings save.
  */
 struct nnp_pci {
 	struct nnp_device nnpdev;
@@ -89,10 +94,26 @@ struct nnp_pci {
 	int             periodic_on;
 
 	bool            hang;
+
+	int             ras_des_off;
+	int             aer_pos;
+	u32             aer_cor_mask;
+	u32             aer_uncor_mask;
+	u32             aer_uncor_severity;
 };
 
 #define NNP_DRIVER_NAME  "nnp_pcie"
 
+/* error injection debug feature registers */
+#define NNP_RAS_DES_VSEC_ID   0x2
+#define EINJ_ENABLE_REG_OFF       0x30
+#define EINJ_ENABLE_REG_CRC_ERR  BIT(0)
+#define EINJ_ENABLE_REG_SEQ_ERR  BIT(1)
+#define EINJ_ENABLE_REG_DUP_ERR  BIT(5)
+#define EINJ_ENABLE_REG_TLP_ERR  BIT(6)
+
+#define EINJ0_CRC_REG_OFF         0x34
+
 /* interrupt mask bits we enable and handle at interrupt level */
 static u32 card_status_int_mask = ELBI_PCI_STATUS_CMDQ_READ_UPDATE |
 				  ELBI_PCI_STATUS_RESPQ_NEW_RESPONSE |
@@ -434,6 +455,139 @@ static int nnp_cmdq_flush(struct nnp_device *nnpdev)
 	return 0;
 }
 
+static int nnp_error_inject(struct nnp_device *nnpdev, enum nnp_einj_type err_type)
+{
+	struct nnp_pci *nnp_pci = container_of(nnpdev, struct nnp_pci, nnpdev);
+	u32 inj_enable = 0;
+
+	if (nnp_pci->ras_des_off == 0)
+		return -EFAULT;
+
+	switch (err_type) {
+	case NNP_PCIE_INJECT_RESTORE:
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       nnp_pci->aer_cor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       nnp_pci->aer_uncor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       nnp_pci->aer_uncor_severity);
+		break;
+	case NNP_PCIE_INJECT_CORR:
+		/* unmask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0x0);
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       0xffffffff);
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR_FATAL:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity |
+					PCI_ERR_UNC_COMP_TIME));
+		break;
+	default:
+		return -EFAULT;
+	}
+
+	if (err_type != NNP_PCIE_INJECT_RESTORE) {
+		/*
+		 * insert new TLP with ECRC error - will cause completion
+		 * timeout error
+		 */
+		inj_enable = EINJ_ENABLE_REG_CRC_ERR;
+
+		dev_info(&nnp_pci->pdev->dev,
+			 "Injecting %s PCIe error\n",
+			 (err_type == NNP_PCIE_INJECT_CORR ? "corrected" :
+			  err_type == NNP_PCIE_INJECT_UNCORR ?
+			   "uncorrected" : "uncorrected-fatal"));
+		if (err_type != NNP_PCIE_INJECT_CORR) {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x3 << 8 | 1);
+		} else {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x4 << 8 | 1);
+		}
+	} else {
+		dev_info(&nnp_pci->pdev->dev,
+			 "Restoring PCIe error masks\n");
+	}
+
+#ifdef DEBUG
+	{
+		u32 cor_mask, uncor_mask, uncor_sev;
+
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				      &cor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				      &uncor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				      &uncor_sev);
+
+		dev_dbg(nnp_pci->pdev,
+			"inj_enable = %d\n", inj_enable);
+		dev_dbg(nnp_pci->pdev,
+			"corr_mask = 0x%x\n", cor_mask);
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_mask = 0x%x ComplTO%c\n", uncor_mask,
+			(uncor_mask & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_sever = 0x%x ComplTO%c\n", uncor_sev,
+			(uncor_sev & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+	}
+#endif
+
+	pci_write_config_word(nnp_pci->pdev,
+			      nnp_pci->ras_des_off + EINJ_ENABLE_REG_OFF,
+			      inj_enable);
+
+	return 0;
+}
+
 static int nnp_set_host_doorbell_value(struct nnp_device *nnpdev, u32 value)
 {
 	struct nnp_pci *nnp_pci = container_of(nnpdev, struct nnp_pci, nnpdev);
@@ -533,6 +687,7 @@ static int nnp_get_membar_addr(struct nnp_device *nnpdev,
 	.get_postcode = nnp_get_postcode,
 	.get_bios_flash_progress = nnp_get_bios_flash_progress,
 	.fw_update_complete = nnp_fw_update_complete,
+	.error_inject = nnp_error_inject,
 };
 
 static void set_host_boot_state(struct nnp_pci *nnp_pci, int boot_state)
@@ -593,6 +748,30 @@ static void stop_hang_detect_timer(struct nnp_pci *nnp_pci)
 		cancel_work_sync(&nnp_pci->reset_work);
 }
 
+static void find_ras_des_cap(struct nnp_pci *nnp_pci)
+{
+	int vsec = 0;
+	u16 val;
+
+	/* find vendor-specific capability matches RAS_DES */
+	do {
+		nnp_pci->ras_des_off =
+			pci_find_next_ext_capability(nnp_pci->pdev, vsec,
+						     PCI_EXT_CAP_ID_VNDR);
+		if (nnp_pci->ras_des_off) {
+			pci_read_config_word(nnp_pci->pdev,
+					     nnp_pci->ras_des_off + 0x4,
+					     &val);
+			if (val == NNP_RAS_DES_VSEC_ID)
+				break;
+		}
+	} while (nnp_pci->ras_des_off);
+
+	if (!nnp_pci->ras_des_off)
+		dev_err(&nnp_pci->pdev->dev,
+			"failed to find RAS DES vendor-specific capability - PCIe error injection will not be available!!\n");
+}
+
 static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct device *dev = &pdev->dev;
@@ -646,6 +825,24 @@ static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 		dev_dbg(&nnp_pci->pdev->dev,
 			"pci_enable_pcie_error_reporting returned %d\n", rc);
 
+	/* Initialize aer masks and severity settings */
+	nnp_pci->aer_pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_ERR);
+	if (!nnp_pci->aer_pos)
+		return -EFAULT;
+
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			      &nnp_pci->aer_cor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			      &nnp_pci->aer_uncor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			      &nnp_pci->aer_uncor_severity);
+
+	/* find vendor-specific capability for error injection */
+	find_ras_des_cap(nnp_pci);
+
 	/*
 	 * done setting up the new pci device,
 	 * add it to the NNP-I framework.
@@ -701,6 +898,17 @@ static void nnp_remove(struct pci_dev *pdev)
 	/* inform card that host driver is down */
 	set_host_boot_state(nnp_pci, NNP_HOST_BOOT_STATE_IMAGE_NOT_READY);
 
+	/* restore device aer mask and severity settings */
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			       nnp_pci->aer_cor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			       nnp_pci->aer_uncor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			       nnp_pci->aer_uncor_severity);
+
 	nnpdev_destroy(&nnp_pci->nnpdev);
 
 	mutex_unlock(&nnp_pci->remove_reset_mutex);
-- 
1.8.3.1

