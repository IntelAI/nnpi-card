From b9627726695cbeb5c59cb8f8737092740489359a Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 16 Nov 2020 15:34:25 +0200
Subject: [PATCH v15 27/30] misc: nnpi: tracing

Allow tracing of selected IPC commands using ftrace.
Each of the command and responses opcodes can be selected to generate
the 'nnpi_ipc' trace event at the time it is sent or received from the
device. Selection is made through the following sysfs attributes:
(all under /sys/class/nnpi/nnpi%d/)

ipc_event_h2c_en - RW attribute, write ipc opcode value to enable trace point
                   when command with that opcode is sent to device.
                   show mask of all enabled command opcodes (LSB for opcode 0).
ipc_event_h2c_dis - WO attribute, write ipc opcode value to disable trace point
                   when command with that opcode is sent to device.
ipc_event_c2h_en - RW attribute, write ipc opcode value to enable trace point
                   when response with that opcode is received from device.
                   show mask of all enabled responses opcodes (LSB for opcode 0).
ipc_event_c2h_dis - WO attribute, write ipc opcode value to disable trace point
                   when response with that opcode is received from device.
clock_stamp - WO attribute, send a command to the device to generate an
              event in the device event log. Also trace this event.
              This is used to synchronize host and device traces.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 Documentation/ABI/testing/sysfs-driver-intel_nnpi |  39 +++++
 drivers/misc/intel-nnpi/Makefile                  |   4 +-
 drivers/misc/intel-nnpi/device.c                  |  19 +++
 drivers/misc/intel-nnpi/device.h                  |   9 ++
 drivers/misc/intel-nnpi/device_sysfs.c            | 166 ++++++++++++++++++++++
 drivers/misc/intel-nnpi/msg_scheduler.c           |   5 +-
 drivers/misc/intel-nnpi/trace.c                   |   5 +
 drivers/misc/intel-nnpi/trace.h                   | 114 +++++++++++++++
 8 files changed, 356 insertions(+), 5 deletions(-)
 create mode 100644 drivers/misc/intel-nnpi/trace.c
 create mode 100644 drivers/misc/intel-nnpi/trace.h

diff --git a/Documentation/ABI/testing/sysfs-driver-intel_nnpi b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
index deb7c11..640aa5e 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel_nnpi
+++ b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
@@ -224,3 +224,42 @@ Date:           Sep 2020
 Kernelversion:  5.11
 Contact:        guy.zadicario@intel.com
 Description:    Counter of device correctable DRAM ECC error events reported by the device.
+
+What:           /sys/class/nnpi/nnpi<n>/clock_stamp
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Send a trace event to the device that will be visible
+                in the device trace log.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_h2c_en
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Enable tracing of commands send to device based on
+                command op-code. Writing command op-code will generate
+                ftrace event each time the command is sent to device.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_h2c_dis
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Disable tracing of commands send to device based on
+                command op-code. Writing command op-code will disable
+                ftrace event generation for this command op-code.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_c2h_en
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Enable tracing of responses received from device based on
+                response code. Writing response code will generate
+                ftrace event each time such response received from device.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_c2h_dis
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Disable tracing of responses received from device based on
+                response code. Writing response code will disable
+                ftrace event generation when such response is received.
diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index e4894b7..5f9b811 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -7,8 +7,8 @@ obj-$(CONFIG_INTEL_NNPI) := intel_nnpi.o intel_nnpi_pcie.o
 
 intel_nnpi-y := device.o msg_scheduler.o hostres.o host_chardev.o nnp_user.o \
                 bootimage.o cmd_chan.o device_chardev.o device_sysfs.o \
-                device_debugfs.o
+                device_debugfs.o trace.o
 
 intel_nnpi_pcie-y := nnp_pcie.o
 
-ccflags-y += -I$(srctree)/$(src)/ipc_include
+ccflags-y += -I$(srctree)/$(src)/ipc_include -I$(srctree)/$(src)
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 6f40743..754c770 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -20,6 +20,7 @@
 #include "ipc_c2h_events.h"
 #include "msg_scheduler.h"
 #include "nnp_boot_defs.h"
+#include "trace.h"
 
 static DEFINE_IDA(dev_ida);
 static struct dentry *debugfs_dir;
@@ -859,6 +860,11 @@ void nnpdev_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
 
 		msg_size = (*handler)(nnpdev, &msg[j], (nof_msg - j));
 
+		if (nnpdev->ipc_c2h_en[op_code] && msg_size) {
+			trace_nnpi_host_ipc(1, &msg[j], msg_size,
+					    nnpdev->id);
+		}
+
 		j += msg_size;
 	} while (j < nof_msg || !msg_size);
 
@@ -888,6 +894,16 @@ void nnpdev_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
 }
 EXPORT_SYMBOL(nnpdev_process_messages);
 
+int nnpdev_send_command(struct nnp_device *nnpdev, u64 *msg, int size)
+{
+	int op_code = FIELD_GET(NNP_C2H_OP_MASK, msg[0]);
+
+	if (nnpdev->ipc_h2c_en[op_code])
+		trace_nnpi_host_ipc(0, msg, size, nnpdev->id);
+
+	return nnpdev->ops->cmdq_write_mesg(nnpdev, msg, size);
+}
+
 static void send_sysinfo_request_to_bios(struct nnp_device *nnpdev)
 {
 	u64 cmd[3];
@@ -1231,6 +1247,9 @@ int nnpdev_init(struct nnp_device *nnpdev, struct device *dev,
 	/* set host driver state to "Not ready" */
 	nnpdev->ops->set_host_doorbell_value(nnpdev, 0);
 
+	memset(nnpdev->ipc_h2c_en, 0, sizeof(nnpdev->ipc_h2c_en));
+	memset(nnpdev->ipc_c2h_en, 0, sizeof(nnpdev->ipc_c2h_en));
+
 	spin_lock_init(&nnpdev->lock);
 	/* set boot image path to be the default */
 	strcpy(nnpdev->reset_boot_image_path, NNP_FIRMWARE_NAME);
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index acc8a4e..82b7d55 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -231,6 +231,8 @@ struct nnp_device_counters {
  *                                    uevent informing on uncorr dram ecc error
  * @uncorrectable_dram_ecc_counter: uncorrectable dram ecc error counter
  * @debugfs_dir: dir entry for device's root debugfs dir
+ * @ipc_h2c_en: per-host-to-card command opcode ipc trace enable flag
+ * @ipc_c2h_en: per-card-to-host response opcode ipc trace enable flag
  */
 struct nnp_device {
 	const struct nnp_device_ops *ops;
@@ -294,6 +296,9 @@ struct nnp_device {
 	unsigned long  uncorrectable_dram_ecc_counter;
 
 	struct dentry *debugfs_dir;
+
+	bool ipc_h2c_en[IPC_OP_MAX];
+	bool ipc_c2h_en[IPC_OP_MAX];
 };
 
 enum nnp_einj_type {
@@ -367,5 +372,9 @@ void nnpdev_submit_device_event_to_channels(struct nnp_device *nnpdev,
 					    bool force);
 void nnpdev_disable(struct nnp_device *nnpdev);
 void nnpdev_enable(struct nnp_device *nnpdev);
+int nnpdev_send_command(struct nnp_device *nnpdev, u64 *msg, int size);
+
+#define nnpdev_queue_msg(q, m) \
+	nnp_msched_queue_add_msg((q), (u64 *)&(m), sizeof((m)) / sizeof(u64))
 
 #endif
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index e91ca95..b1d53f9 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -3,16 +3,21 @@
 
 #define pr_fmt(fmt)   KBUILD_MODNAME ": " fmt
 
+#include <linux/bitfield.h>
 #include <linux/dev_printk.h>
 #include <linux/device.h>
 #include <linux/kobject.h>
 #include <linux/slab.h>
 #include <linux/sysfs.h>
+#include <linux/trace_clock.h>
 
 #include "cmd_chan.h"
 #include "device_sysfs.h"
 #include "ipc_c2h_events.h"
 #include "nnp_inbound_mem.h"
+#include "trace.h"
+
+#define CLOCK_TYPE_STR_MAX_SIZE 7
 
 static ssize_t enable_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
@@ -108,6 +113,60 @@ static ssize_t boot_image_store(struct device *dev,
 }
 static DEVICE_ATTR_RW(boot_image);
 
+static ssize_t clock_stamp_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t count)
+{
+	struct nnp_device *nnpdev;
+	u64 cmd[2];
+	char clock_type_host[CLOCK_TYPE_STR_MAX_SIZE + 1];
+	unsigned long long stamp;
+	unsigned long clock_type = 0;
+	int i;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	memset(clock_type_host, 0, sizeof(clock_type_host));
+
+	/*
+	 * user's input is a string specifying the stamp type.
+	 * (up to 7 characters).
+	 */
+	for (i = 0; i < count; i++) {
+		if (buf[i] == '\n')
+			break;
+
+		clock_type |= ((unsigned long)buf[i]) << i * 8;
+		clock_type_host[i] = buf[i];
+	}
+
+#ifdef CONFIG_TRACING
+	/*
+	 * The stamp value will is used by user to sync between host ftrace
+	 * events and card event traces.
+	 * So, take stamp value to be local trace clock, if available.
+	 */
+	stamp = trace_clock_local();
+#else
+	stamp = sched_clock();
+#endif
+
+	/* prepare a clock stamp command and send it to the device */
+	cmd[0] = FIELD_PREP(NNP_H2C_OP_MASK, NNP_IPC_H2C_OP_CLOCK_STAMP);
+	cmd[0] |= FIELD_PREP(NNP_H2C_CLOCK_STAMP_QW0_TYPE_MASK, clock_type);
+	cmd[1] = stamp;
+
+	nnpdev->ops->cmdq_write_mesg(nnpdev, cmd, sizeof(cmd) / sizeof(u64));
+
+	/* trace this event */
+	trace_nnpi_host_clock_stamp(clock_type_host, stamp, nnpdev->id);
+
+	return count;
+}
+static DEVICE_ATTR_WO(clock_stamp);
+
 void nnpdev_sysfs_get_state_strings(struct nnp_device *nnpdev,
 				    const char **state, const char **boot_state,
 				    const char **fail_reason)
@@ -640,6 +699,97 @@ static ssize_t crashlog_size_show(struct device *dev,
 }
 static DEVICE_ATTR_RO(crashlog_size);
 
+static int ipc_event_set(struct device *dev, const char *buf, size_t count,
+			 bool is_cmd, bool enable)
+{
+	unsigned long index;
+	struct nnp_device *nnpdev;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (kstrtoul(buf, 0, &index) < 0)
+		return -EINVAL;
+
+	if (index >= IPC_OP_MAX)
+		return -EINVAL;
+
+	if (is_cmd)
+		nnpdev->ipc_h2c_en[index] = enable;
+	else
+		nnpdev->ipc_c2h_en[index] = enable;
+
+	return count;
+}
+
+static int ipc_event_get(struct device *dev, char *buf, bool is_cmd)
+{
+	bool *arr;
+	struct nnp_device *nnpdev;
+	int i = 0;
+	u64 mask = 0;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (is_cmd)
+		arr = nnpdev->ipc_h2c_en;
+	else
+		arr = nnpdev->ipc_c2h_en;
+
+	for (i = 0 ; i < IPC_OP_MAX ; i++)
+		if (arr[i])
+			mask |= BIT_ULL(i);
+
+	return sprintf(buf, "0x%llx\n", mask);
+}
+
+static ssize_t ipc_event_h2c_en_store(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, true, true);
+}
+
+static ssize_t ipc_event_h2c_en_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	return ipc_event_get(dev, buf, true);
+}
+static DEVICE_ATTR_RW(ipc_event_h2c_en);
+
+static ssize_t ipc_event_h2c_dis_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, true, false);
+}
+static DEVICE_ATTR_WO(ipc_event_h2c_dis);
+
+static ssize_t ipc_event_c2h_en_store(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, false, true);
+}
+
+static ssize_t ipc_event_c2h_en_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	return ipc_event_get(dev, buf, false);
+}
+static DEVICE_ATTR_RW(ipc_event_c2h_en);
+
+static ssize_t ipc_event_c2h_dis_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, false, false);
+}
+static DEVICE_ATTR_WO(ipc_event_c2h_dis);
+
 static ssize_t os_crashed_show(struct device *dev,
 			       struct device_attribute *attr, char *buf)
 {
@@ -787,6 +937,7 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 static struct attribute *nnp_dev_attrs[] = {
 	&dev_attr_enable.attr,
 	&dev_attr_boot_image.attr,
+	&dev_attr_clock_stamp.attr,
 	&dev_attr_total_unprotected_mem.attr,
 	&dev_attr_total_protected_mem.attr,
 	&dev_attr_protocol_version.attr,
@@ -819,6 +970,10 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 	&dev_attr_dma_hang_fatal.attr,
 	&dev_attr_ecc_correctable.attr,
 	&dev_attr_dram_ecc_correctable.attr,
+	&dev_attr_ipc_event_h2c_en.attr,
+	&dev_attr_ipc_event_h2c_dis.attr,
+	&dev_attr_ipc_event_c2h_en.attr,
+	&dev_attr_ipc_event_c2h_dis.attr,
 	NULL
 };
 
@@ -872,6 +1027,17 @@ int nnpdev_sysfs_init(struct nnp_device *nnpdev)
 	/* set crashlog attributes be accessible by root only */
 	ret = sysfs_chmod_file(&nnpdev->chardev->kobj,
 			       &dev_attr_crashlog_size.attr, 0400);
+	/* set ipc event permissions to 0666 */
+	ret |= sysfs_chmod_file(&nnpdev->chardev->kobj,
+				&dev_attr_ipc_event_h2c_en.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->chardev->kobj,
+				&dev_attr_ipc_event_h2c_dis.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->chardev->kobj,
+				&dev_attr_ipc_event_c2h_en.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->chardev->kobj,
+				&dev_attr_ipc_event_c2h_dis.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->chardev->kobj,
+				&dev_attr_clock_stamp.attr, 0666);
 	if (ret)
 		goto fail_chmod;
 
diff --git a/drivers/misc/intel-nnpi/msg_scheduler.c b/drivers/misc/intel-nnpi/msg_scheduler.c
index b23c1839..38e7521 100644
--- a/drivers/misc/intel-nnpi/msg_scheduler.c
+++ b/drivers/misc/intel-nnpi/msg_scheduler.c
@@ -89,7 +89,7 @@ static int do_sched(struct nnp_msched *sched, struct nnp_msched_queue *q)
 
 	/*
 	 * Write the fetched messages out.
-	 * Note that cmdq_write_mesg function may sleep.
+	 * Note that nnpdev_send_command function may sleep.
 	 * (may fail if the device gets reset)
 	 */
 	list_for_each_entry_safe(msg, n, &send_list, node) {
@@ -100,8 +100,7 @@ static int do_sched(struct nnp_msched *sched, struct nnp_msched_queue *q)
 		 * be sent.
 		 */
 		if (!ret)
-			ret = nnpdev->ops->cmdq_write_mesg(nnpdev, msg->msg,
-							   msg->size);
+			ret = nnpdev_send_command(nnpdev, msg->msg, msg->size);
 		list_del(&msg->node);
 		kmem_cache_free(sched->slab_cache_ptr, msg);
 	}
diff --git a/drivers/misc/intel-nnpi/trace.c b/drivers/misc/intel-nnpi/trace.c
new file mode 100644
index 0000000..522438b
--- /dev/null
+++ b/drivers/misc/intel-nnpi/trace.c
@@ -0,0 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#define CREATE_TRACE_POINTS
+#include "trace.h"
diff --git a/drivers/misc/intel-nnpi/trace.h b/drivers/misc/intel-nnpi/trace.h
new file mode 100644
index 0000000..00522f9
--- /dev/null
+++ b/drivers/misc/intel-nnpi/trace.h
@@ -0,0 +1,114 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#undef TRACE_SYSTEM
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE trace
+#define TRACE_SYSTEM nnpdrv
+
+#if !defined(_NNPDRV_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _NNPDRV_TRACE_H
+
+#include <linux/tracepoint.h>
+
+#include "ipc_protocol.h"
+
+#define NNP_TP_STRUCT__entry TP_STRUCT__entry
+#define NNP_TP_fast_assign   TP_fast_assign
+#define NNP_TP_printk        TP_printk
+
+/* Define functions to convert protocol opcode codes to names */
+#ifndef TRACE_HEADER_MULTI_READ
+static inline const char *H2C_HWQ_MSG_STR(u8 x)
+{
+	switch (x) {
+	case H2C_OPCODE_NAME(QUERY_VERSION):
+		return H2C_OPCODE_NAME_STR(QUERY_VERSION);
+	case H2C_OPCODE_NAME(CLOCK_STAMP):
+		return H2C_OPCODE_NAME_STR(CLOCK_STAMP);
+	case H2C_OPCODE_NAME(SETUP_CRASH_DUMP):
+		return H2C_OPCODE_NAME_STR(SETUP_CRASH_DUMP);
+	case H2C_OPCODE_NAME(SETUP_SYS_INFO_PAGE):
+		return H2C_OPCODE_NAME_STR(SETUP_SYS_INFO_PAGE);
+	case H2C_OPCODE_NAME(CHANNEL_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_OP);
+	case H2C_OPCODE_NAME(CHANNEL_RB_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_RB_OP);
+	case H2C_OPCODE_NAME(CHANNEL_HOSTRES_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_HOSTRES_OP);
+	case H2C_OPCODE_NAME(BIOS_PROTOCOL):
+		return H2C_OPCODE_NAME_STR(BIOS_PROTOCOL);
+	default:
+		return "not found";
+	}
+}
+
+static inline const char *C2H_HWQ_MSG_STR(u8 x)
+{
+	switch (x) {
+	case C2H_OPCODE_NAME(EVENT_REPORT):
+		return C2H_OPCODE_NAME_STR(EVENT_REPORT);
+	case C2H_OPCODE_NAME(QUERY_VERSION_REPLY):
+		return C2H_OPCODE_NAME_STR(QUERY_VERSION_REPLY);
+	case C2H_OPCODE_NAME(QUERY_VERSION_REPLY2):
+		return C2H_OPCODE_NAME_STR(QUERY_VERSION_REPLY2);
+	case C2H_OPCODE_NAME(SYS_INFO):
+		return C2H_OPCODE_NAME_STR(SYS_INFO);
+	case C2H_OPCODE_NAME(BIOS_PROTOCOL):
+		return C2H_OPCODE_NAME_STR(BIOS_PROTOCOL);
+	default:
+		return "not found";
+	}
+}
+#endif
+
+TRACE_EVENT(nnpi_host_ipc,
+	    TP_PROTO(u8 dir, u64 *msg, u32 size, u8 card_id),
+	    TP_ARGS(dir, msg, size, card_id),
+	    NNP_TP_STRUCT__entry(__field(u64, msg[4])
+				 __field(u32, size)
+				 __field(u8, dir)
+				 __field(u8, card_id)),
+	    NNP_TP_fast_assign(__entry->msg[0] = msg[0];
+			       __entry->msg[1] = (size > 1 ? msg[1] : 0);
+			       __entry->msg[2] = (size > 2 ? msg[2] : 0);
+			       __entry->msg[3] = (size > 3 ? msg[3] : 0);
+			       __entry->size = size;
+			       __entry->card_id = card_id;
+			       __entry->dir = dir),
+	    NNP_TP_printk("card_id=%u dir=%s op=%s size=%u payload=0x%llx,0x%llx,0x%llx,0x%llx",
+			  __entry->card_id,
+			  __entry->dir == 0 ? "command" : "response",
+			  __entry->dir == 0 ?
+			  H2C_HWQ_MSG_STR(__entry->msg[0] & NNP_IPC_OPCODE_MASK) :
+			  C2H_HWQ_MSG_STR(__entry->msg[0] & NNP_IPC_OPCODE_MASK),
+			  __entry->size, __entry->msg[0], __entry->msg[1],
+			  __entry->msg[2], __entry->msg[3])
+);
+
+TRACE_EVENT(nnpi_host_clock_stamp,
+	    TP_PROTO(char *type, u64 clock, u8 card_id),
+	    TP_ARGS(type, clock, card_id),
+	    NNP_TP_STRUCT__entry(__field(char, type[8])
+				 __field(u64, clock)
+				 __field(u8, card_id)),
+	    NNP_TP_fast_assign(__entry->type[0] = type[0];
+			       __entry->type[1] = type[1];
+			       __entry->type[2] = type[2];
+			       __entry->type[3] = type[3];
+			       __entry->type[4] = type[4];
+			       __entry->type[5] = type[5];
+			       __entry->type[6] = type[6];
+			       __entry->type[7] = type[7];
+			       __entry->clock = clock;
+			       __entry->card_id = card_id;),
+	NNP_TP_printk("card_id=%u type=%s clock=%llu",
+		      __entry->card_id,
+		      __entry->type,
+		      __entry->clock)
+);
+
+#endif /* if !defined(_TRACE_SYNC_H) || defined(TRACE_HEADER_MULTI_READ) */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
-- 
1.8.3.1

