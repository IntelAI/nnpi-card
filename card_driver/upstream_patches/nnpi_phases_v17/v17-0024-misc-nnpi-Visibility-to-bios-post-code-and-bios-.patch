From 14080c4b2b478a06b7214741dbe594d951b2c0a9 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 16 Nov 2020 12:34:31 +0200
Subject: [PATCH v17 24/30] misc: nnpi: Visibility to bios post code and bios
 flash progress

Add sysfs attributes which expose device BIOS post code which is
updating while the card is booting as well as to card's BIOS flash
progress (percentage) which is updated while card BIOS capsule
update is performed.

Also, Add fw_update_completion sysfs attribute which allows to
start device cold-reset after device firmware update has completed.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 Documentation/ABI/testing/sysfs-driver-intel_nnpi | 22 +++++++
 drivers/misc/intel-nnpi/device.h                  |  7 +++
 drivers/misc/intel-nnpi/device_sysfs.c            | 71 +++++++++++++++++++++++
 drivers/misc/intel-nnpi/nnp_pcie.c                | 58 ++++++++++++++++++
 4 files changed, 158 insertions(+)

diff --git a/Documentation/ABI/testing/sysfs-driver-intel_nnpi b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
index 4780084..1362541 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel_nnpi
+++ b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
@@ -44,6 +44,28 @@ Contact:        guy.zadicario@intel.com
 Description:    A version string describing the version of the device
                 command protocol version.
 
+What:           /sys/class/nnpi/nnpi<n>/post_code
+Date:           Mar 2021
+Kernelversion:  5.13
+Contact:        guy.zadicario@intel.com
+Description:    Device boot stage post code, updated by device BIOS during device boot.
+
+What:           /sys/class/nnpi/nnpi<n>/flash_progress
+Date:           Mar 2021
+Kernelversion:  5.13
+Contact:        guy.zadicario@intel.com
+Description:    Device bios flash progress in percent. Valid only when device BIOS flash
+                is in progress.
+
+What:           /sys/class/nnpi/nnpi<n>/fw_update_completion
+Date:           Mar 2021
+Kernelversion:  5.13
+Contact:        guy.zadicario@intel.com
+Description:    Shows 0/1 indicating if device has completed a firmware update and
+                and requires device cold-reset to start use the new firmware.
+                Writing "go" to this attribute will flag the device it may reset for
+                completing the update. PCIe link may go down!
+
 What:           /sys/class/nnpi/nnpi<n>/ice_units
 Date:           Mar 2021
 Kernelversion:  5.13
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 75d31ad..2287d8c 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -273,6 +273,10 @@ struct nnp_device {
  * @cmdq_write_mesg: inserts a command message to the card's command queue.
  * @set_host_doorbell_value: change the host doorbell value on device.
  * @nnp_get_membar_addr: retrieve address of mapped card's inbound memory area
+ * @get_postcode: returns NNP-I card's BIOS boot post code
+ * @get_bios_flash_progress: return progress percentage of card's BIOS flash
+ * @fw_update_complete: power cycle the NNP-I device if card's firmware update
+ *                      has completed.
  */
 struct nnp_device_ops {
 	int (*cmdq_flush)(struct nnp_device *hw_dev);
@@ -281,6 +285,9 @@ struct nnp_device_ops {
 	int (*get_membar_addr)(struct nnp_device *nnpdev,
 			       phys_addr_t *out_phy_addr,
 			       void __iomem **out_vaddr, size_t *out_len);
+	u32 (*get_postcode)(struct nnp_device *nnpdev);
+	u32 (*get_bios_flash_progress)(struct nnp_device *nnpdev);
+	int (*fw_update_complete)(struct nnp_device *nnpdev, bool start);
 };
 
 bool nnpdev_no_devices(void);
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index 2d38f4b..1fb7067 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -195,6 +195,74 @@ void nnpdev_sysfs_get_state_strings(struct nnp_device *nnpdev,
 	}
 }
 
+static ssize_t post_code_show(struct device *dev, struct device_attribute *attr,
+			      char *buf)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	return sprintf(buf, "0x%04x\n", nnpdev->ops->get_postcode(nnpdev));
+}
+static DEVICE_ATTR_RO(post_code);
+
+static ssize_t bios_flash_progress_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	return sprintf(buf, "%03d %%\n",
+		       nnpdev->ops->get_bios_flash_progress(nnpdev));
+}
+static DEVICE_ATTR_RO(bios_flash_progress);
+
+static ssize_t fw_update_completion_store(struct device *dev,
+					  struct device_attribute *attr,
+					  const char *buf, size_t count)
+{
+	struct nnp_device *nnpdev;
+	int rc;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev || count < 3)
+		return -EINVAL;
+
+	if (!sysfs_streq(buf, "go"))
+		return -EINVAL;
+
+	rc = nnpdev->ops->fw_update_complete(nnpdev, true);
+	if (rc < 0)
+		return rc;
+
+	return count;
+}
+
+static ssize_t fw_update_completion_show(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	struct nnp_device *nnpdev;
+	int needed;
+
+	nnpdev = dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	needed = nnpdev->ops->fw_update_complete(nnpdev, false);
+	if (needed < 0)
+		return needed;
+
+	return sprintf(buf, "%d\n", needed);
+}
+static DEVICE_ATTR_RW(fw_update_completion);
+
 static ssize_t ice_units_show(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
@@ -724,6 +792,9 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 	&dev_attr_cecc_threshold.attr,
 	&dev_attr_ucecc_threshold.attr,
 	&dev_attr_crashlog_size.attr,
+	&dev_attr_post_code.attr,
+	&dev_attr_bios_flash_progress.attr,
+	&dev_attr_fw_update_completion.attr,
 	&dev_attr_ice_units.attr,
 	&dev_attr_bios_version.attr,
 	&dev_attr_image_version.attr,
diff --git a/drivers/misc/intel-nnpi/nnp_pcie.c b/drivers/misc/intel-nnpi/nnp_pcie.c
index 7a3683c..f5d5845 100644
--- a/drivers/misc/intel-nnpi/nnp_pcie.c
+++ b/drivers/misc/intel-nnpi/nnp_pcie.c
@@ -411,6 +411,61 @@ static int nnp_set_host_doorbell_value(struct nnp_device *nnpdev, u32 value)
 	return 0;
 }
 
+static u32 nnp_get_postcode(struct nnp_device *nnpdev)
+{
+	struct nnp_pci *nnp_pci = container_of(nnpdev, struct nnp_pci, nnpdev);
+	u32 val;
+
+	/* bios post-code is reported in CPU_STATUS_0 register */
+	val = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_0);
+
+	return val;
+}
+
+static u32 nnp_get_bios_flash_progress(struct nnp_device *nnpdev)
+{
+	struct nnp_pci *nnp_pci = container_of(nnpdev, struct nnp_pci, nnpdev);
+	u32 val;
+
+	/* bios flash progress is reported in CPU_STATUS_1 register */
+	val = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_1);
+
+	return val;
+}
+
+static int nnp_fw_update_complete(struct nnp_device *nnpdev, bool start)
+{
+	struct nnp_pci *nnp_pci = container_of(nnpdev, struct nnp_pci, nnpdev);
+	u32 card_state;
+	u32 host_db_val;
+	bool need;
+
+	if (nnp_pci->in_reset)
+		return -ENODEV;
+
+	card_state = nnp_mmio_read(nnp_pci, ELBI_CPU_STATUS_2);
+	need = (FIELD_GET(ELBI_CPU_STATUS_2_FLR_MODE_MASK, card_state) == 1);
+
+	/* return 0 if fw update complete flow is not required */
+	if (!need)
+		return 0;
+
+	/* just return required state if not requested to act */
+	if (!start)
+		return 1;
+
+	/*
+	 * flag the device it may start firmware update completion.
+	 * NOTE: PCIe link may drop during this flow!
+	 */
+	host_db_val = nnp_mmio_read(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE);
+	host_db_val |= NNP_HOST_DRV_REQUEST_SELF_RESET_MASK;
+	nnp_mmio_write(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE, host_db_val);
+
+	/* required and started */
+	return 1;
+}
+
 static int nnp_get_membar_addr(struct nnp_device *nnpdev,
 			       phys_addr_t *out_phy_addr,
 			       void __iomem **out_vaddr, size_t *out_len)
@@ -434,6 +489,9 @@ static int nnp_get_membar_addr(struct nnp_device *nnpdev,
 	.cmdq_write_mesg = nnp_cmdq_write_mesg,
 	.set_host_doorbell_value = nnp_set_host_doorbell_value,
 	.get_membar_addr = nnp_get_membar_addr,
+	.get_postcode = nnp_get_postcode,
+	.get_bios_flash_progress = nnp_get_bios_flash_progress,
+	.fw_update_complete = nnp_fw_update_complete,
 };
 
 static void set_host_boot_state(struct nnp_pci *nnp_pci, int boot_state)
-- 
1.8.3.1

