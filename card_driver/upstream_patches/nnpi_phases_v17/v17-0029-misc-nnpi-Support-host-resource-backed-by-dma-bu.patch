From fb355f085cfff4f076ef9d01be0208813e51d182 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 16 Nov 2020 16:11:48 +0200
Subject: [PATCH v17 29/30] misc: nnpi: Support host resource backed by dma-buf
 object

Add ability to create a host resource from dma-buf object created
by another driver.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/host_chardev.c |  35 +++++--
 drivers/misc/intel-nnpi/hostres.c      | 182 +++++++++++++++++++++++++--------
 drivers/misc/intel-nnpi/hostres.h      |  21 ++++
 drivers/misc/intel-nnpi/nnp_user.c     |   4 +-
 drivers/misc/intel-nnpi/nnp_user.h     |   3 +
 include/uapi/misc/intel_nnpi.h         |  10 ++
 6 files changed, 202 insertions(+), 53 deletions(-)

diff --git a/drivers/misc/intel-nnpi/host_chardev.c b/drivers/misc/intel-nnpi/host_chardev.c
index ad9cff0..42c76ec 100644
--- a/drivers/misc/intel-nnpi/host_chardev.c
+++ b/drivers/misc/intel-nnpi/host_chardev.c
@@ -42,33 +42,50 @@ static enum dma_data_direction to_dma_dir(unsigned int nnp_dir)
 	return DMA_NONE;
 }
 
+struct nnpdrv_ioctl_create_hostres_compat1 {
+	__u64 user_ptr;
+	__u64 size;
+	__u32 usage_flags;
+	__s32 user_handle;
+};
+
 static long create_hostres(struct nnp_user_info *user_info, void __user *arg,
 			   unsigned int size)
 {
 	int ret;
 	struct nnpdrv_ioctl_create_hostres req;
+	int fd;
 	struct host_resource *hostres;
 	struct user_hostres *user_hostres_entry;
-	void __user *uptr;
-	unsigned int io_size = sizeof(req);
 
-	if (size != io_size)
+	/* compat1 version of arg does not have dma_buf field */
+	if (size == sizeof(struct nnpdrv_ioctl_create_hostres_compat1))
+		req.dma_buf = 0;
+	else if (size != sizeof(req))
 		return -EINVAL;
 
-	if (copy_from_user(&req, arg, io_size))
+	if (copy_from_user(&req, arg, size))
 		return -EFAULT;
 
 	if (req.usage_flags & ~(IOCTL_RES_USAGE_VALID_MASK))
 		return -EINVAL;
 
-	uptr = u64_to_user_ptr(req.user_ptr);
-	hostres = nnp_hostres_from_usermem(uptr, req.size,
-					   to_dma_dir(req.usage_flags));
+	if (req.user_ptr != 0) {
+		void __user *uptr = u64_to_user_ptr(req.user_ptr);
+
+		hostres = nnp_hostres_from_usermem(uptr, req.size,
+						   to_dma_dir(req.usage_flags));
+		fd = -1;
+	} else {
+		hostres = nnp_hostres_from_dma_buf(req.dma_buf,
+						   to_dma_dir(req.usage_flags));
+		fd = req.dma_buf;
+	}
 
 	if (IS_ERR(hostres))
 		return PTR_ERR(hostres);
 
-	ret = nnp_user_add_hostres(user_info, hostres, &user_hostres_entry);
+	ret = nnp_user_add_hostres(user_info, hostres, fd, &user_hostres_entry);
 	if (ret < 0) {
 		nnp_hostres_put(hostres);
 		return ret;
@@ -83,7 +100,7 @@ static long create_hostres(struct nnp_user_info *user_info, void __user *arg,
 	nnp_hostres_put(hostres);
 
 	req.user_handle = user_hostres_entry->user_handle;
-	if (copy_to_user(arg, &req, io_size)) {
+	if (copy_to_user(arg, &req, size)) {
 		ret = -EFAULT;
 		goto destroy_hostres_entry;
 	}
diff --git a/drivers/misc/intel-nnpi/hostres.c b/drivers/misc/intel-nnpi/hostres.c
index 4b1f953..4df9f83 100644
--- a/drivers/misc/intel-nnpi/hostres.c
+++ b/drivers/misc/intel-nnpi/hostres.c
@@ -4,6 +4,7 @@
 #define pr_fmt(fmt)   KBUILD_MODNAME ": " fmt
 
 #include <linux/bitfield.h>
+#include <linux/dma-buf.h>
 #include <linux/err.h>
 #include <linux/mutex.h>
 #include <linux/pagemap.h>
@@ -23,14 +24,17 @@
  * @devices: list of devices this resource is mapped to (list of nnpdev_mapping)
  * @lock: protects @devices
  * @dir: DMA direction mask possible for this resource, when mapped to device.
+ * @external_buf: true if the memory of the resource is attachment to dma-buf
+ *                object, created by another entity.
  * @pinned_mm: mm object used to pin the user allocated resource memory. NULL
  *             if the resource was not allocated by user-space.
  * @vptr: virtual pointer to the resource memory if allocated by
  *        nnp_hostres_alloc(). NULL otherwise.
  * @start_offset: holds the offset within the first pinned page where resource
  *                memory starts (relevant only when @pinned_mm is not NULL).
- * @pages: array of resource memory pages.
- * @n_pages: size of pages array.
+ * @pages: array of resource memory pages. valid only when external_buf is false.
+ * @n_pages: size of pages array, valid only when external_buf is false.
+ * @buf: pointer to attached dma-buf object, valid only when external_buf is true.
  */
 struct host_resource {
 	struct kref       ref;
@@ -39,12 +43,20 @@ struct host_resource {
 	spinlock_t        lock;
 	enum dma_data_direction dir;
 
+	bool              external_buf;
 	struct mm_struct  *pinned_mm;
 	void              *vptr;
 	unsigned int      start_offset;
 
-	struct page       **pages;
-	unsigned int      n_pages;
+	union {
+		struct {
+			struct page **pages;
+			unsigned int n_pages;
+		};
+		struct {
+			struct dma_buf *buf;
+		};
+	};
 };
 
 /**
@@ -56,6 +68,8 @@ struct host_resource {
  * @dma_chain_sgt: sg_table of dma_chain blocks (see description below).
  * @dma_chain_order: order used to allocate scatterlist of @dma_chain_sgt.
  * @node: list head to attach this object to a list of mappings
+ * @dma_att: dma-buf attachment in case the resource created from dma-buf,
+ *           if it is not a dma-buf resource, this will remain NULL.
  *
  * This structure holds mapping information of one host resource to one
  * NNP-I device. @sgt is the sg_table describes the DMA addresses of the
@@ -85,6 +99,7 @@ struct nnpdev_mapping {
 	struct sg_table             dma_chain_sgt;
 	unsigned int                dma_chain_order;
 	struct list_head            node;
+	struct dma_buf_attachment   *dma_att;
 };
 
 /*
@@ -100,6 +115,11 @@ static void release_hostres(struct kref *kref)
 {
 	struct host_resource *r = container_of(kref, struct host_resource, ref);
 
+	if (r->external_buf) {
+		dma_buf_put(r->buf);
+		goto out_free;
+	}
+
 	if (r->pinned_mm) {
 		unpin_user_pages(r->pages, r->n_pages);
 		account_locked_vm(r->pinned_mm, r->n_pages, false);
@@ -112,6 +132,8 @@ static void release_hostres(struct kref *kref)
 	mutex_lock(&total_size_mutex);
 	total_hostres_size -= r->size;
 	mutex_unlock(&total_size_mutex);
+
+out_free:
 	kfree(r);
 }
 
@@ -137,9 +159,15 @@ static void release_mapping(struct kref *kref)
 	dma_unmap_sgtable(m->dev, &m->dma_chain_sgt, DMA_TO_DEVICE, 0);
 	sgl_free_order(m->dma_chain_sgt.sgl, m->dma_chain_order);
 
-	dma_unmap_sg(m->dev, m->sgt->sgl, m->sgt->orig_nents, m->res->dir);
-	sg_free_table(m->sgt);
-	kfree(m->sgt);
+	if (m->res->external_buf) {
+		dma_buf_unmap_attachment(m->dma_att, m->sgt, m->res->dir);
+		dma_buf_detach(m->res->buf, m->dma_att);
+	} else {
+		dma_unmap_sg(m->dev, m->sgt->sgl,
+			     m->sgt->orig_nents, m->res->dir);
+		sg_free_table(m->sgt);
+		kfree(m->sgt);
+	}
 
 	nnp_hostres_put(m->res);
 
@@ -176,6 +204,8 @@ struct host_resource *nnp_hostres_alloc(size_t size, enum dma_data_direction dir
 	if (!r)
 		return ERR_PTR(-ENOMEM);
 
+	r->external_buf = false;
+
 	r->n_pages = PFN_UP(size);
 	r->vptr = vmalloc(r->n_pages * PAGE_SIZE);
 	if (!r->vptr)
@@ -233,6 +263,8 @@ struct host_resource *nnp_hostres_from_usermem(void __user *user_ptr, size_t siz
 	if (!r)
 		return ERR_PTR(-ENOMEM);
 
+	r->external_buf = false;
+
 	r->start_offset = offset_in_page(user_addr);
 	user_addr &= PAGE_MASK;
 
@@ -286,6 +318,36 @@ struct host_resource *nnp_hostres_from_usermem(void __user *user_ptr, size_t siz
 	return ERR_PTR(err);
 }
 
+struct host_resource *nnp_hostres_from_dma_buf(int dma_buf_fd,
+					       enum dma_data_direction dir)
+{
+	struct host_resource *r;
+	struct dma_buf *dmabuf;
+
+	if (dma_buf_fd < 0 || dir == DMA_NONE)
+		return ERR_PTR(-EINVAL);
+
+	dmabuf = dma_buf_get(dma_buf_fd);
+	if (PTR_ERR_OR_ZERO(dmabuf))
+		/*
+		 * EBADF in case of dma_buf_fd is not fd;
+		 * EINVAL in case dma_buf_fd is fd, but not of dma_buf
+		 * in any case report invalid value
+		 */
+		return ERR_PTR(-EINVAL);
+
+	r = alloc_hostres(dmabuf->size, dir);
+	if (!r) {
+		dma_buf_put(dmabuf);
+		return ERR_PTR(-ENOMEM);
+	}
+
+	r->buf = dmabuf;
+	r->external_buf = true;
+
+	return r;
+}
+
 /* Finds mapping by device and increase its refcount. NULL if not found */
 static struct nnpdev_mapping *get_mapping_for_dev(struct host_resource *res,
 						  struct device *dev)
@@ -495,29 +557,45 @@ struct nnpdev_mapping *nnp_hostres_map_device(struct host_resource *res,
 	m->dev = nnpdev->dev;
 	m->res = res;
 
-	m->sgt = kmalloc(sizeof(*m->sgt), GFP_KERNEL);
-	if (!m->sgt) {
-		ret = -ENOMEM;
-		goto free_mapping;
-	}
+	if (res->external_buf) {
+		m->dma_att = dma_buf_attach(res->buf, m->dev);
+		ret = PTR_ERR_OR_ZERO(m->dma_att);
+		if (ret < 0)
+			goto free_mapping;
+
+		m->sgt = dma_buf_map_attachment(m->dma_att, res->dir);
+		ret = PTR_ERR_OR_ZERO(m->sgt);
+		if (ret < 0) {
+			ret = -ENOMEM;
+			goto buf_detach;
+		}
+	} else {
+		m->sgt = kmalloc(sizeof(*m->sgt), GFP_KERNEL);
+		if (!m->sgt) {
+			ret = -ENOMEM;
+			goto free_mapping;
+		}
 
-	sge = __sg_alloc_table_from_pages(m->sgt, res->pages, res->n_pages, 0,
-					  res->size + res->start_offset,
-					  NNP_MAX_CHUNK_SIZE, NULL, 0,
-					  GFP_KERNEL);
-	if (IS_ERR(sge)) {
-		ret = PTR_ERR(sge);
-		goto free_sgt_struct;
-	}
+		sge = __sg_alloc_table_from_pages(m->sgt, res->pages,
+						  res->n_pages, 0,
+						  res->size + res->start_offset,
+						  NNP_MAX_CHUNK_SIZE, NULL, 0,
+						  GFP_KERNEL);
+		if (IS_ERR(sge)) {
+			ret = PTR_ERR(sge);
+			goto free_sgt_struct;
+		}
 
-	ret = dma_map_sg(m->dev, m->sgt->sgl, m->sgt->orig_nents, res->dir);
-	if (ret <= 0) {
-		/* dma_map_sg returns 0 on error with no error value */
-		ret = -ENOMEM;
-		goto free_sgt;
-	}
+		ret = dma_map_sg(m->dev, m->sgt->sgl,
+				 m->sgt->orig_nents, res->dir);
+		if (ret <= 0) {
+			/* dma_map_sg returns 0 on error with no error value */
+			ret = -ENOMEM;
+			goto free_sgt;
+		}
 
-	m->sgt->nents = ret;
+		m->sgt->nents = ret;
+	}
 
 	ret = build_ipc_dma_chain_array(m, use_one_entry, res->start_offset);
 	if (ret < 0)
@@ -535,12 +613,18 @@ struct nnpdev_mapping *nnp_hostres_map_device(struct host_resource *res,
 	return m;
 
 unmap:
-	dma_unmap_sg(m->dev, m->sgt->sgl,
-		     m->sgt->orig_nents, res->dir);
+	if (res->external_buf) {
+		dma_buf_unmap_attachment(m->dma_att, m->sgt, res->dir);
+buf_detach:
+		dma_buf_detach(res->buf, m->dma_att);
+	} else {
+		dma_unmap_sg(m->dev, m->sgt->sgl,
+			     m->sgt->orig_nents, res->dir);
 free_sgt:
-	sg_free_table(m->sgt);
+		sg_free_table(m->sgt);
 free_sgt_struct:
-	kfree(m->sgt);
+		kfree(m->sgt);
+	}
 free_mapping:
 	kfree(m);
 put_resource:
@@ -555,25 +639,37 @@ void nnp_hostres_unmap_device(struct nnpdev_mapping *mapping)
 
 int nnp_hostres_user_lock(struct host_resource *res)
 {
-	struct nnpdev_mapping *m;
+	int ret = 0;
 
-	spin_lock(&res->lock);
-	list_for_each_entry(m, &res->devices, node)
-		dma_sync_sg_for_cpu(m->dev, m->sgt->sgl, m->sgt->orig_nents, res->dir);
-	spin_unlock(&res->lock);
+	if (res->external_buf) {
+		ret = dma_buf_begin_cpu_access(res->buf, res->dir);
+	} else {
+		struct nnpdev_mapping *m;
 
-	return 0;
+		spin_lock(&res->lock);
+		list_for_each_entry(m, &res->devices, node) {
+			dma_sync_sg_for_cpu(m->dev, m->sgt->sgl,
+					    m->sgt->orig_nents, res->dir);
+		}
+		spin_unlock(&res->lock);
+	}
+
+	return ret;
 }
 
 int nnp_hostres_user_unlock(struct host_resource *res)
 {
-	struct nnpdev_mapping *m;
+	if (res->external_buf) {
+		dma_buf_end_cpu_access(res->buf, res->dir);
+	} else {
+		struct nnpdev_mapping *m;
 
-	spin_lock(&res->lock);
-	list_for_each_entry(m, &res->devices, node)
-		dma_sync_sg_for_device(m->dev, m->sgt->sgl,
-				       m->sgt->orig_nents, res->dir);
-	spin_unlock(&res->lock);
+		spin_lock(&res->lock);
+		list_for_each_entry(m, &res->devices, node)
+			dma_sync_sg_for_device(m->dev, m->sgt->sgl,
+					       m->sgt->orig_nents, res->dir);
+		spin_unlock(&res->lock);
+	}
 
 	return 0;
 }
diff --git a/drivers/misc/intel-nnpi/hostres.h b/drivers/misc/intel-nnpi/hostres.h
index 8878ee1..3ae1dfa 100644
--- a/drivers/misc/intel-nnpi/hostres.h
+++ b/drivers/misc/intel-nnpi/hostres.h
@@ -29,6 +29,27 @@
 struct host_resource *nnp_hostres_alloc(size_t size, enum dma_data_direction dir);
 
 /**
+ * nnp_hostres_from_dma_buf() - creates host resource form dma-buf
+ * @dma_buf_fd: File descriptor of struct dma_buf
+ * @dir: Resource direction (read or write or both)
+ *
+ * This function attaches to a dma-buf object memory and creates a host
+ * resource handle backed by the dma-buf memory pages.
+ * The resource can be Input(read by device), Output(write by device) and both.
+ * If this function fails, it returns error.
+ *
+ * The return handle can be used the same as described for the handle created
+ * by nnp_hostres_alloc.
+ *
+ * The handle should be released when no longer needed by a call to
+ * nnp_hostres_put.
+ *
+ * Return: pointer to created resource or error value
+ */
+struct host_resource *nnp_hostres_from_dma_buf(int dma_buf_fd,
+					       enum dma_data_direction dir);
+
+/**
  * nnp_hostres_from_usermem() - Creates host resource from user-space memory
  * @user_ptr: user virtual memory to pin
  * @size: size of user buffer to pin
diff --git a/drivers/misc/intel-nnpi/nnp_user.c b/drivers/misc/intel-nnpi/nnp_user.c
index 51d7418..864368b 100644
--- a/drivers/misc/intel-nnpi/nnp_user.c
+++ b/drivers/misc/intel-nnpi/nnp_user.c
@@ -35,7 +35,7 @@ void nnp_user_put(struct nnp_user_info *user_info)
 }
 
 int nnp_user_add_hostres(struct nnp_user_info *user_info,
-			 struct host_resource *hostres,
+			 struct host_resource *hostres, int fd,
 			 struct user_hostres **user_hostres_entry)
 {
 	struct user_hostres *hr_entry;
@@ -59,6 +59,8 @@ int nnp_user_add_hostres(struct nnp_user_info *user_info,
 	nnp_user_get(user_info);
 	hr_entry->user_info = user_info;
 
+	hr_entry->fd = fd;
+
 	mutex_lock(&user_info->mutex);
 	/*
 	 * We allocate handle starting from 1 and not 0 to allow
diff --git a/drivers/misc/intel-nnpi/nnp_user.h b/drivers/misc/intel-nnpi/nnp_user.h
index 429ac13..1e990a4 100644
--- a/drivers/misc/intel-nnpi/nnp_user.h
+++ b/drivers/misc/intel-nnpi/nnp_user.h
@@ -46,6 +46,7 @@ struct nnp_user_info {
  * @hostres: the actual host resource object
  * @user_handle: handle allocated from idr object, used as handle to this
  *               object in ioctl ABI.
+ * @fd: non-zero if the host resource is created from existing dma-buf object
  * @user_info: pointer to "user" which created this resource.
  *             it is used only during destruction of the object.
  *
@@ -59,6 +60,7 @@ struct user_hostres {
 	struct list_head             node;
 	struct host_resource         *hostres;
 	int                          user_handle;
+	int                          fd;
 	struct nnp_user_info         *user_info;
 };
 
@@ -69,6 +71,7 @@ struct user_hostres {
 
 int nnp_user_add_hostres(struct nnp_user_info *user_info,
 			 struct host_resource *hostres,
+			 int fd,
 			 struct user_hostres **user_hostres_entry);
 
 void nnp_user_remove_hostres(struct user_hostres *hr_entry);
diff --git a/include/uapi/misc/intel_nnpi.h b/include/uapi/misc/intel_nnpi.h
index 8caccf0..9f9f63b 100644
--- a/include/uapi/misc/intel_nnpi.h
+++ b/include/uapi/misc/intel_nnpi.h
@@ -90,12 +90,21 @@
  * @size: User memory size on input. Host resource size on output.
  * @usage_flags: resource usage flag bits, IOCTL_INF_RES_*
  * @user_handle: resource handle on output.
+ * @dma_buf: fd of dma-buf to attach to. Ignored if @user_handle is non-zero.
  *
  * argument structure for IOCTL_INF_CREATE_HOST_RESOURCE ioctl
  *
  * @user_ptr should be initialized to a user virtual address and @size
+ *
+ * argument structure for IOCTL_INF_CREATE_HOST_RESOURCE ioctl
+ *
+ * The value of @user_ptr on input determines whether the host resource is
+ * backed by user memory or by dma-buf object allocated by another driver.
+ * If @user_ptr is non-zero it specified a user virtual address and @size
  * should be initialized with it's size, the user memory will be pinned and will
  * hold the host resource content.
+ * If @user_ptr is zero on input, then @dma_buf should be initialized with a
+ * dma-buf file descriptor, this dma-buf will be attached.
  *
  * On output, @user_handle is a handle to the created host resource that can be
  * used later with other IOCTLs and @size is the size of the host resource.
@@ -105,6 +114,7 @@ struct nnpdrv_ioctl_create_hostres {
 	__u64 size;
 	__u32 usage_flags;
 	__s32 user_handle;
+	__u32 dma_buf;
 };
 
 /**
-- 
1.8.3.1

