From 0bc0ea15d19894b1f3b365aa57947b49cdc1b456 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Fri, 3 Apr 2020 10:12:52 +0300
Subject: [PATCH v7 15/17] misc: nnpi: PCIe error injection

This patch adds the following debugfs file:
<debugfs>/intel_nnpi/%d/pcie_inject

That allows controlling device debug registers to generate various PCIe
errors which is usefull for error handling debugging.

The following strings can be written to that debugfs file:
corr - will set up the device to generate corractable PCIe error on next
       DMA transaction issued by the card.
uncorr - will set up the device to generate uncorractable PCIe error on next
       DMA transaction issued by the card.
fatal - will set up the device to generate fatal-uncorractable PCIe error on next
       DMA transaction issued by the card.
none - restore any error injection and AER masks (which was set if error injection was used).

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 Documentation/ABI/testing/sysfs-driver-intel_nnpi |   1 +
 drivers/misc/intel-nnpi/Makefile                  |   2 +-
 drivers/misc/intel-nnpi/device.c                  |  19 ++
 drivers/misc/intel-nnpi/device.h                  |   2 +
 drivers/misc/intel-nnpi/device_debugfs.c          |  65 +++++++
 drivers/misc/intel-nnpi/device_debugfs.h          |  17 ++
 drivers/misc/intel-nnpi/pcie.c                    | 201 ++++++++++++++++++++++
 drivers/misc/intel-nnpi/pcie.h                    |  16 ++
 8 files changed, 322 insertions(+), 1 deletion(-)
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.c
 create mode 100644 drivers/misc/intel-nnpi/device_debugfs.h

diff --git a/Documentation/ABI/testing/sysfs-driver-intel_nnpi b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
index ce2175b..553bd54 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel_nnpi
+++ b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
@@ -165,3 +165,4 @@ Date:           Sep 2020
 Kernelversion:  5.9
 Contact:        guy.zadicario@intel.com
 Description:    Dumps counters of various device corrected errors.
+
diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index 631850b..e4c1db3 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -8,6 +8,6 @@ obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o pcie.o device.o msg_scheduler.o \
 		   hostres.o host_chardev.o nnp_user.o bootimage.o \
-                   device_chardev.o cmd_chan.o device_sysfs.o
+                   device_chardev.o cmd_chan.o device_sysfs.o device_debugfs.o
 
 ccflags-y += -I$(srctree)/$(src)/ipc_include
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 5ba49d3..1f5d660 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -20,6 +20,7 @@
 #include "bootimage.h"
 #include "cmd_chan.h"
 #include "device_chardev.h"
+#include "device_debugfs.h"
 #include "device_sysfs.h"
 #include "host_chardev.h"
 #include "ipc_c2h_events.h"
@@ -61,15 +62,25 @@ static void nnpdrv_last_device_fini(void)
 }
 
 static struct ida dev_ida;
+static struct dentry *debugfs_dir;
 
 int nnpdrv_device_init(void)
 {
 	ida_init(&dev_ida);
+
+	debugfs_dir = debugfs_create_dir("intel_nnpi", NULL);
+	if (IS_ERR_OR_NULL(debugfs_dir)) {
+		pr_err("Failed to initialize debugfs dir %ld\n",
+		       PTR_ERR(debugfs_dir));
+		debugfs_dir = NULL;
+	}
+
 	return 0;
 }
 
 void nnpdrv_device_fini(void)
 {
+	debugfs_remove_recursive(debugfs_dir);
 	ida_destroy(&dev_ida);
 }
 
@@ -1285,6 +1296,12 @@ struct nnp_device *nnpdrv_device_create(struct nnp_pci_device        *hw_handle,
 	hash_init(nnpdev->cmd_chan_hash);
 	init_waitqueue_head(&nnpdev->waitq);
 
+	if (debugfs_dir) {
+		nnpdev->debugfs_dir =
+			nnpdrv_device_debugfs_init(nnpdev, &nnpdev->name[6],
+						   debugfs_dir);
+	}
+
 	ret = nnpdrv_first_device_init();
 	if (ret)
 		goto err_ida;
@@ -1377,6 +1394,7 @@ struct nnp_device *nnpdrv_device_create(struct nnp_pci_device        *hw_handle,
 err_first_device:
 	nnpdrv_last_device_fini();
 err_ida:
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 err_exit:
 	kfree(nnpdev);
@@ -1612,6 +1630,7 @@ static void nnpdrv_free_device(struct work_struct *work)
 	if (msg_scheduler_destroy(nnpdev->cmdq_sched))
 		pr_err("cmd queue scheduler destruction went wrong\n");
 
+	debugfs_remove_recursive(nnpdev->debugfs_dir);
 	ida_simple_remove(&dev_ida, nnpdev->id);
 	ida_destroy(&nnpdev->cmd_chan_ida);
 	kfree(nnpdev);
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 9c25981..b8e38dc 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -8,6 +8,7 @@
 
 #include <linux/cdev.h>
 #include <linux/completion.h>
+#include <linux/debugfs.h>
 #include <linux/hashtable.h>
 #include <linux/idr.h>
 #include <linux/kernel.h>
@@ -190,6 +191,7 @@ struct nnp_device {
 	u8   ipc_chan_resp_op_size[32];
 	u8   ipc_chan_cmd_op_size[32];
 	struct nnp_device_counters counters;
+	struct dentry *debugfs_dir;
 };
 
 int nnpdrv_device_init(void);
diff --git a/drivers/misc/intel-nnpi/device_debugfs.c b/drivers/misc/intel-nnpi/device_debugfs.c
new file mode 100644
index 0000000..a8803e8
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.c
@@ -0,0 +1,65 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#include "device_debugfs.h"
+#include <linux/string.h>
+#include "device.h"
+
+static ssize_t pcie_inject_write(struct file       *file,
+				 const char __user *data,
+				 size_t             count,
+				 loff_t            *ppos)
+{
+	struct nnp_device *nnpdev = file->private_data;
+	u32 pcie_err_type;
+	int ret;
+
+	if (sysfs_streq(data, "corr"))
+		pcie_err_type = NNP_PCIE_INJECT_CORR;
+	else if (sysfs_streq(data, "uncorr"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR;
+	else if (sysfs_streq(data, "fatal"))
+		pcie_err_type = NNP_PCIE_INJECT_UNCORR_FATAL;
+	else if (sysfs_streq(data, "none"))
+		pcie_err_type = NNP_PCIE_INJECT_RESTORE;
+	else
+		return -EINVAL;
+
+	/*
+	 * Setup h/w layer to generate the requested error
+	 * on the next dma transaction
+	 */
+	ret = nnp_error_inject(nnpdev->hw_handle, pcie_err_type);
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+static const struct file_operations pcie_inject_fops = {
+	.open = simple_open,
+	.write = pcie_inject_write,
+	.llseek = generic_file_llseek
+};
+
+struct dentry *nnpdrv_device_debugfs_init(struct nnp_device *nnpdev,
+					  const char        *dev_dirname,
+					  struct dentry     *parent)
+{
+	struct dentry *dev_root;
+
+	dev_root = debugfs_create_dir(dev_dirname, parent);
+	if (IS_ERR_OR_NULL(dev_root))
+		return NULL;
+
+	debugfs_create_file("pcie_inject",
+			    0644,
+			    dev_root,
+			    nnpdev,
+			    &pcie_inject_fops);
+
+	return dev_root;
+}
diff --git a/drivers/misc/intel-nnpi/device_debugfs.h b/drivers/misc/intel-nnpi/device_debugfs.h
new file mode 100644
index 0000000..febe398
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_debugfs.h
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+#ifndef _NNP_DEVICE_DEBUGFS_H
+#define _NNP_DEVICE_DEBUGFS_H
+
+#include <linux/debugfs.h>
+
+struct nnp_device;
+
+struct dentry *nnpdrv_device_debugfs_init(struct nnp_device *nnpdev,
+					  const char        *dev_dirname,
+					  struct dentry     *parent);
+
+#endif // of _NNP_DEVICE_DEBUGFS_H
diff --git a/drivers/misc/intel-nnpi/pcie.c b/drivers/misc/intel-nnpi/pcie.c
index 5a154bb..c5e2ca4 100644
--- a/drivers/misc/intel-nnpi/pcie.c
+++ b/drivers/misc/intel-nnpi/pcie.c
@@ -43,6 +43,16 @@
 #define RESPQ_READ_PTR_MASK         ELBI_RESPONSE_PCI_CONTROL_READ_POINTER_MASK
 #define RESPQ_WRITE_PTR_MASK        ELBI_RESPONSE_PCI_CONTROL_WRITE_POINTER_MASK
 
+/* error injection debug feature registers */
+#define NNP_RAS_DES_VSEC_ID   0x2
+#define EINJ_ENABLE_REG_OFF       0x30
+#define EINJ_ENABLE_REG_CRC_ERR  BIT(0)
+#define EINJ_ENABLE_REG_SEQ_ERR  BIT(1)
+#define EINJ_ENABLE_REG_DUP_ERR  BIT(5)
+#define EINJ_ENABLE_REG_TLP_ERR  BIT(6)
+
+#define EINJ0_CRC_REG_OFF         0x34
+
 static const char nnp_driver_name[] = "nnp_pcie";
 
 static DEFINE_MUTEX(mutex);
@@ -555,6 +565,139 @@ int nnp_get_membar_addr(struct nnp_pci_device *nnp_pci,
 	return 0;
 }
 
+int nnp_error_inject(struct nnp_pci_device *nnp_pci,
+		    int                     err_type)
+{
+	u32 inj_enable = 0;
+
+	if (nnp_pci->ras_des_off == 0)
+		return -EFAULT;
+
+	switch (err_type) {
+	case NNP_PCIE_INJECT_RESTORE:
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       nnp_pci->aer_cor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       nnp_pci->aer_uncor_mask);
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       nnp_pci->aer_uncor_severity);
+		break;
+	case NNP_PCIE_INJECT_CORR:
+		/* unmask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0x0);
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       0xffffffff);
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be non-fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		break;
+	case NNP_PCIE_INJECT_UNCORR_FATAL:
+		/* mask all corrected errors */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				       0xffffffff);
+		/* unmask completion timeout error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				       (nnp_pci->aer_uncor_mask &
+					~(PCI_ERR_UNC_COMP_TIME)));
+		/* set completion timeout error to be fatal error */
+		pci_write_config_dword(nnp_pci->pdev,
+				       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				       (nnp_pci->aer_uncor_severity |
+					PCI_ERR_UNC_COMP_TIME));
+		break;
+	default:
+		return -EFAULT;
+	}
+
+	if (err_type != NNP_PCIE_INJECT_RESTORE) {
+		/*
+		 * insert new TLP with ECRC error - will cause completion
+		 * timeout error
+		 */
+		inj_enable = EINJ_ENABLE_REG_CRC_ERR;
+
+		dev_info(nnp_pci->dev,
+			 "Injecting %s PCIe error\n",
+			 (err_type == NNP_PCIE_INJECT_CORR ? "corrected" :
+			  err_type == NNP_PCIE_INJECT_UNCORR ?
+			   "uncorrected" : "uncorrected-fatal"));
+		if (err_type != NNP_PCIE_INJECT_CORR) {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x3 << 8 | 1);
+		} else {
+			pci_write_config_word(nnp_pci->pdev,
+					      nnp_pci->ras_des_off +
+					      EINJ0_CRC_REG_OFF,
+					      0x4 << 8 | 1);
+		}
+	} else {
+		dev_info(nnp_pci->dev,
+			 "Restoring pcie error masks\n");
+	}
+
+#ifdef DEBUG
+	{
+		u32 cor_mask, uncor_mask, uncor_sev;
+
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+				      &cor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+				      &uncor_mask);
+		pci_read_config_dword(nnp_pci->pdev,
+				      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+				      &uncor_sev);
+
+		dev_dbg(nnp_pci->pdev,
+			"inj_enable = %d\n", inj_enable);
+		dev_dbg(nnp_pci->pdev,
+			"corr_mask = 0x%x\n", cor_mask);
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_mask = 0x%x ComplTO%c\n", uncor_mask,
+			(uncor_mask & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+		dev_dbg(nnp_pci->pdev,
+			"uncorr_sever = 0x%x ComplTO%c\n", uncor_sev,
+			(uncor_sev & PCI_ERR_UNC_COMP_TIME) ? '+' : '-');
+	}
+#endif
+
+	pci_write_config_word(nnp_pci->pdev,
+			      nnp_pci->ras_des_off + EINJ_ENABLE_REG_OFF,
+			      inj_enable);
+
+	return 0;
+}
+
 dma_addr_t nnp_get_host_doorbell_addr(struct nnp_pci_device *nnp_pci)
 {
 	/* Doorbell is a shared resource. For peer-to-peer we use only MSB */
@@ -851,6 +994,31 @@ static void nnp_fini_pci_device(struct nnp_pci_device *nnp_pci)
 	pci_disable_device(nnp_pci->pdev);
 }
 
+static void find_ras_des_cap(struct nnp_pci_device *nnp_pci)
+{
+	int vsec = 0;
+	u16 val;
+
+	/* find vendor-specific capability matches RAS_DES */
+	do {
+		nnp_pci->ras_des_off =
+			pci_find_next_ext_capability(nnp_pci->pdev,
+						     vsec,
+						     PCI_EXT_CAP_ID_VNDR);
+		if (nnp_pci->ras_des_off) {
+			pci_read_config_word(nnp_pci->pdev,
+					     nnp_pci->ras_des_off + 0x4,
+					     &val);
+			if (val == NNP_RAS_DES_VSEC_ID)
+				break;
+		}
+	} while (nnp_pci->ras_des_off);
+
+	if (!nnp_pci->ras_des_off)
+		dev_err(nnp_pci->dev,
+			"failed to find RAS DES vendor-specific capability - pcie error injection will not be available!!\n");
+}
+
 static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct nnp_pci_device *nnp_pci = NULL;
@@ -908,6 +1076,28 @@ static int nnp_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	if (rc)
 		goto do_exit;
 
+	/* Initialize aer masks and severity settings */
+	nnp_pci->aer_pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_ERR);
+	if (!nnp_pci->aer_pos) {
+		rc = -EFAULT;
+		dev_err(nnp_pci->dev,
+			"Device does not have AER extension? Is it possible?\n");
+		goto do_exit;
+	}
+
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			      &nnp_pci->aer_cor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			      &nnp_pci->aer_uncor_mask);
+	pci_read_config_dword(nnp_pci->pdev,
+			      nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			      &nnp_pci->aer_uncor_severity);
+
+	/* find vendor-specific capability for error injection */
+	find_ras_des_cap(nnp_pci);
+
 	/*
 	 * Take refcount to the device which will be released only when
 	 * nnpi_pci struct is freed
@@ -947,6 +1137,17 @@ static void nnp_remove(struct pci_dev *pdev)
 	if (nnp_pci->initted)
 		nnp_mmio_write(nnp_pci, ELBI_PCI_HOST_DOORBELL_VALUE, 0);
 
+	/* restore device aer mask and severity settings */
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_COR_MASK,
+			       nnp_pci->aer_cor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_MASK,
+			       nnp_pci->aer_uncor_mask);
+	pci_write_config_dword(nnp_pci->pdev,
+			       nnp_pci->aer_pos + PCI_ERR_UNCOR_SEVER,
+			       nnp_pci->aer_uncor_severity);
+
 	nnpdrv_device_destroy(nnp_pci->nnpdev, true);
 	nnp_fini_pci_device(nnp_pci);
 	mutex_unlock(&nnp_pci->remove_reset_mutex);
diff --git a/drivers/misc/intel-nnpi/pcie.h b/drivers/misc/intel-nnpi/pcie.h
index 1ee1577..d596296 100644
--- a/drivers/misc/intel-nnpi/pcie.h
+++ b/drivers/misc/intel-nnpi/pcie.h
@@ -45,6 +45,12 @@ struct nnp_pci_device {
 	struct nnp_memdesc mmio;
 	struct nnp_memdesc mem_bar;
 
+	int                ras_des_off;
+	int                aer_pos;
+	u32                aer_cor_mask;
+	u32                aer_uncor_mask;
+	u32                aer_uncor_severity;
+
 	spinlock_t      irq_lock; /* protects cmdq_free_slots calculation */
 	u64             response_buf[ELBI_RESPONSE_FIFO_DEPTH];
 	atomic_t        new_response;
@@ -86,6 +92,8 @@ int nnp_get_membar_addr(struct nnp_pci_device *nnp_pci,
 			void **out_vaddr,
 			size_t  *out_len);
 dma_addr_t nnp_get_host_doorbell_addr(struct nnp_pci_device *nnp_pci);
+int nnp_error_inject(struct nnp_pci_device *nnp_pci,
+		    int                     err_type);
 
 /*
  * Functions implemented by the nnp "device" layer,
@@ -116,4 +124,12 @@ int nnpdrv_device_pci_error_detected(struct nnp_device *nnpdev,
 #define NNP_PCIE_PERMANENT_FAILURE 3
 #define NNP_PCIE_LINK_RETRAIN_REQUIRED 4
 
+/*
+ * Possible values for 'err_type' argument of error_inject function
+ */
+#define NNP_PCIE_INJECT_RESTORE           0
+#define NNP_PCIE_INJECT_CORR              1
+#define NNP_PCIE_INJECT_UNCORR            2
+#define NNP_PCIE_INJECT_UNCORR_FATAL      3
+
 #endif
-- 
1.8.3.1

