From 11662dc78eadca10c6ee91b8f63b62de8d1f16dc Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Sun, 15 Nov 2020 10:00:51 +0200
Subject: [PATCH v11 08/28] misc: nnpi: Device response messages processing

Adds processing for response messages sent from the NNP-I device.
The nnpdrv_device_process_messages function handles all messages coming
from a NNP-I device. Based on an opcode field attached to each message, it
calls the correct response processing handler.

The function is called from the "hw" layer, from a threaded interrupt
handler, when responses arrive in the HW response queue.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 drivers/misc/intel-nnpi/device.c      | 119 ++++++++++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/device.h      |   7 ++
 drivers/misc/intel-nnpi/nnp_hw.h      |   2 +
 drivers/misc/intel-nnpi/nnp_hw_pcie.c |   3 +
 4 files changed, 131 insertions(+)

diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index e4a99ff..d4f8cb7 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -63,6 +63,125 @@ void nnpdev_module_fini(void)
 	ida_destroy(&dev_ida);
 }
 
+/*
+ * handle_bios_protocol - process a message from HWQ coming from bios.
+ * bios protocol may have different size messages.
+ * avail_size is the number of 64-bit units available from the msg pointer
+ * if the message size is larger, the function should return 0 and do not
+ * processthe message, otherwise the function should process the message
+ * and return the actual processed message size (in 64-bit units).
+ */
+static int handle_bios_protocol(struct nnp_device *nnpdev, const u64 *msgbuf,
+				int avail_qwords)
+{
+	int msg_size, msg_qwords;
+
+	msg_size = FIELD_GET(NNP_C2H_BIOS_PROTOCOL_TYPE_MASK, msgbuf[0]);
+
+	/* The +1 is because size field does not include header */
+	msg_qwords = DIV_ROUND_UP(msg_size, 8) + 1;
+
+	if (msg_qwords > avail_qwords)
+		return 0;
+
+	return msg_qwords;
+}
+
+typedef int (*response_handler)(struct nnp_device *nnpdev, const u64 *msgbuf,
+				int avail_qwords);
+
+static response_handler resp_handlers[NNP_IPC_C2H_OPCODE_LAST + 1] = {
+	[NNP_IPC_C2H_OP_BIOS_PROTOCOL] = handle_bios_protocol
+};
+
+/**
+ * nnpdev_process_messages() - process response messages from nnpi device
+ * @nnpdev: The nnp device
+ * @hw_msg: pointer to response message content
+ * @hw_nof_msg: number of 64-bit units available in hw_msg buffer.
+ *
+ * This function is called from the pci layer when response messages are arrived
+ * in the HWQ.
+ * It is called from bottom-half context and is *NOT* re-entrant!
+ * The function may not block !
+ */
+void nnpdev_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
+			     unsigned int hw_nof_msg)
+{
+	int j = 0;
+	u64 *msg;
+	unsigned int nof_msg;
+	bool fatal_protocol_error = false;
+
+	/* ignore any response if protocol error detected */
+	if ((nnpdev->state & NNP_DEVICE_PROTOCOL_ERROR) != 0)
+		return;
+
+	/*
+	 * if we have pending messages from previous round
+	 * copy the new messages to the pending list and process
+	 * the pending list.
+	 * otherwise process the messages reveived from hw directly
+	 */
+	if (nnpdev->response_num_msgs > 0) {
+		if (WARN_ON_ONCE(hw_nof_msg + nnpdev->response_num_msgs >=
+				 NNP_DEVICE_RESPONSE_BUFFER_LEN))
+			return; /* prevent buffer overrun */
+
+		memcpy(&nnpdev->response_buf[nnpdev->response_num_msgs],
+		       hw_msg, hw_nof_msg * sizeof(u64));
+		msg = nnpdev->response_buf;
+		nof_msg = nnpdev->response_num_msgs + hw_nof_msg;
+	} else {
+		msg = hw_msg;
+		nof_msg = hw_nof_msg;
+	}
+
+	/*
+	 * loop for each message
+	 */
+	do {
+		int op_code = FIELD_GET(NNP_C2H_OP_MASK, msg[j]);
+		int msg_size = 0;
+		int partial_msg = 0;
+		response_handler handler = resp_handlers[op_code];
+
+		/* dispatch the message request */
+		if (!handler) {
+			/* Should not happen! */
+			dev_err(nnpdev->hw_dev->dev,
+				"Unknown response opcode received %d (0x%llx)\n",
+				op_code, msg[j]);
+			fatal_protocol_error = true;
+			partial_msg = true;
+		} else {
+			msg_size = (*handler)(nnpdev, &msg[j], (nof_msg - j));
+			partial_msg = (msg_size == 0);
+		}
+
+		/* exit the loop if not a full sized message arrived */
+		if (partial_msg)
+			break;
+
+		j += msg_size;
+	} while (j < nof_msg);
+
+	if (fatal_protocol_error)
+		nnpdev->state |= NNP_DEVICE_PROTOCOL_ERROR;
+
+	/*
+	 * if unprocessed messages left, copy it to the pending messages buffer
+	 * for the next time
+	 */
+	if (j < nof_msg) {
+		memcpy(&nnpdev->response_buf[0], &msg[j],
+		       (nof_msg - j) * sizeof(u64));
+		nnpdev->response_num_msgs = nof_msg - j;
+	} else {
+		nnpdev->response_num_msgs = 0;
+	}
+}
+
 static void send_sysinfo_request_to_bios(struct nnp_device *nnpdev)
 {
 	u64 cmd[3];
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 7f2141f..296b307 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -50,6 +50,8 @@
 #define NNP_DEVICE_CORRUPTED_BOOT_IMAGE BIT(30)
 #define NNP_DEVICE_ERROR_MASK        GENMASK(31, 16)
 
+#define NNP_DEVICE_RESPONSE_BUFFER_LEN  32
+
 /**
  * struct nnp_device - structure for NNP-I "logical" device info
  * @ref: refcount this object
@@ -69,6 +71,8 @@
  * @lock: protects accesses to @state
  * @is_recovery_bios: true if device has booted from the recovery bios flash
  * @boot_image_loaded: true if boot image load has started
+ * @response_buf: buffer of device response messages arrived from "pci" layer.
+ * @response_num_msgs: number of qwords available in @response_buf
  * @bios_system_info_dma_addr: dma page allocated for bios system info.
  * @bios_system_info: virtual pointer to bios system info page
  * @bios_version_str: the device's started bios version string
@@ -94,6 +98,9 @@ struct nnp_device {
 	bool           is_recovery_bios;
 	bool           boot_image_loaded;
 
+	u64            response_buf[NNP_DEVICE_RESPONSE_BUFFER_LEN];
+	unsigned int   response_num_msgs;
+
 	dma_addr_t                  bios_system_info_dma_addr;
 	struct nnp_c2h_system_info  *bios_system_info;
 	char                        bios_version_str[NNP_BIOS_VERSION_LEN];
diff --git a/drivers/misc/intel-nnpi/nnp_hw.h b/drivers/misc/intel-nnpi/nnp_hw.h
index bd8b0a4..f93cb9c 100644
--- a/drivers/misc/intel-nnpi/nnp_hw.h
+++ b/drivers/misc/intel-nnpi/nnp_hw.h
@@ -38,6 +38,8 @@ struct nnp_hw_dev {
 void nnpdev_destroy(struct nnp_device *nnpdev, bool prepare_only);
 void nnpdev_card_doorbell_value_changed(struct nnp_device *nnpdev,
 					u32 doorbell_val);
+void nnpdev_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
+			     unsigned int hw_nof_msg);
 
 int nnp_hw_init(void);
 void nnp_hw_fini(void);
diff --git a/drivers/misc/intel-nnpi/nnp_hw_pcie.c b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
index ba01505..7c24b41 100644
--- a/drivers/misc/intel-nnpi/nnp_hw_pcie.c
+++ b/drivers/misc/intel-nnpi/nnp_hw_pcie.c
@@ -206,6 +206,9 @@ static void nnp_process_commands(struct nnp_pci *nnp_pci)
 	response_pci_control |= FIELD_PREP(RESPQ_READ_PTR_MASK, read_pointer);
 	nnp_mmio_write(nnp_pci, ELBI_RESPONSE_PCI_CONTROL,
 		       response_pci_control);
+
+	nnpdev_process_messages(nnp_pci->nnpdev, nnp_pci->response_buf,
+				avail_slots);
 }
 
 static irqreturn_t interrupt_handler(int irq, void *data)
-- 
1.8.3.1

