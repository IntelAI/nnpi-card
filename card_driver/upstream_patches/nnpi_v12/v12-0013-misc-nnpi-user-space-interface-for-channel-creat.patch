From 70f8aa9d951a3470379db2ee05d3817cd37ccb0f Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Sun, 15 Nov 2020 11:43:33 +0200
Subject: [PATCH v12 13/14] misc: nnpi: user-space interface for channel
 creation

Expose a character device for each NNP-I device (/dev/nnpi%d) with IOCTL
interface. Using this character device, user-space can create a command
channel object, through which it can send and receive messages to and from
the device.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 drivers/misc/intel-nnpi/Makefile         |   2 +-
 drivers/misc/intel-nnpi/cmd_chan.h       |   1 +
 drivers/misc/intel-nnpi/device.c         |  31 ++++
 drivers/misc/intel-nnpi/device.h         |   4 +
 drivers/misc/intel-nnpi/device_chardev.c | 294 +++++++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/device_chardev.h |  17 ++
 drivers/misc/intel-nnpi/nnpdrv_main.c    |  12 +-
 include/uapi/misc/intel_nnpi.h           |  43 +++++
 8 files changed, 402 insertions(+), 2 deletions(-)
 create mode 100644 drivers/misc/intel-nnpi/device_chardev.c
 create mode 100644 drivers/misc/intel-nnpi/device_chardev.h

diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index c942692..672fc87 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -7,6 +7,6 @@ obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o nnp_hw_pcie.o device.o msg_scheduler.o \
 		   hostres.o host_chardev.o nnp_user.o bootimage.o \
-                   cmd_chan.o
+                   device_chardev.o cmd_chan.o
 
 ccflags-y += -I$(srctree)/$(src)/ipc_include
diff --git a/drivers/misc/intel-nnpi/cmd_chan.h b/drivers/misc/intel-nnpi/cmd_chan.h
index 803ad0c..5153a41 100644
--- a/drivers/misc/intel-nnpi/cmd_chan.h
+++ b/drivers/misc/intel-nnpi/cmd_chan.h
@@ -66,6 +66,7 @@ struct nnp_chan {
 };
 
 #define chan_broken(chan) ((chan)->card_critical_error.event_code)
+#define chan_drv_fatal(chan) (is_card_fatal_drv_event(chan_broken(chan)))
 
 int nnpdev_chan_create(struct nnp_device *nnpdev, int host_fd,
 		       unsigned int min_id, unsigned int max_id,
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index cb06567..2001ef8 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -18,6 +18,7 @@
 #include <linux/workqueue.h>
 #include "bootimage.h"
 #include "cmd_chan.h"
+#include "device_chardev.h"
 #include "host_chardev.h"
 #include "ipc_c2h_events.h"
 #include "nnp_boot_defs.h"
@@ -301,6 +302,20 @@ void nnpdev_submit_device_event_to_channels(struct nnp_device *nnpdev,
 		destroy_all_channels(nnpdev);
 }
 
+static void handle_channel_create_response(struct nnp_device *nnpdev,
+					   union c2h_event_report *event_msg)
+{
+	struct nnp_chan *cmd_chan;
+
+	cmd_chan = nnpdev_find_channel(nnpdev, event_msg->obj_id);
+	if (!cmd_chan)
+		return;
+
+	cmd_chan->event_msg.value = event_msg->value;
+	nnp_chan_put(cmd_chan);
+	wake_up_all(&nnpdev->waitq);
+}
+
 static void handle_channel_destroy(struct nnp_device *nnpdev,
 				   union c2h_event_report *event_msg)
 {
@@ -341,6 +356,10 @@ static void process_device_event(struct nnp_device *nnpdev,
 		nnpdev_submit_device_event_to_channels(nnpdev, event_msg, true);
 	} else {
 		switch (event_msg->event_code) {
+		case NNP_IPC_CREATE_CHANNEL_SUCCESS:
+		case NNP_IPC_CREATE_CHANNEL_FAILED:
+			handle_channel_create_response(nnpdev, event_msg);
+			break;
 		case NNP_IPC_DESTROY_CHANNEL_FAILED:
 			dev_err(nnpdev->hw_dev->dev,
 				"Channel destroyed failed channel %d val %d\n",
@@ -846,6 +865,11 @@ struct nnp_device *nnpdev_create(struct nnp_hw_dev *hw_dev)
 		goto err_wq;
 	}
 
+	/* Create the character device interface to this device */
+	ret = nnpdev_cdev_create(nnpdev);
+	if (ret)
+		goto err_sys_info;
+
 	/* set host driver state to "Not ready" */
 	nnp_set_host_doorbell_value(nnpdev->hw_dev, 0);
 
@@ -856,6 +880,10 @@ struct nnp_device *nnpdev_create(struct nnp_hw_dev *hw_dev)
 
 	return nnpdev;
 
+err_sys_info:
+	dma_free_coherent(nnpdev->hw_dev->dev, NNP_PAGE_SIZE,
+			  nnpdev->bios_system_info,
+			  nnpdev->bios_system_info_dma_addr);
 err_wq:
 	destroy_workqueue(nnpdev->wq);
 err_cmdq:
@@ -1036,6 +1064,9 @@ static void free_device(struct work_struct *work)
 	if (nnpdev->boot_image_loaded)
 		unload_boot_image(nnpdev);
 
+	/* destroy device character device */
+	nnpdev_cdev_destroy(nnpdev);
+
 	dma_free_coherent(nnpdev->hw_dev->dev, NNP_PAGE_SIZE,
 			  nnpdev->bios_system_info,
 			  nnpdev->bios_system_info_dma_addr);
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 561379d..a9acfc8 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -131,6 +131,8 @@ struct query_version_work {
  * @card_doorbell_val: last received device doorbell register value.
  * @query_version_work: work struct used to schedule processing of version
  *                      reply response message arrived from device.
+ * @cdev: cdev object of NNP-I device char dev.
+ * @dev: character device for this device
  * @ipc_chan_resp_op_size: holds response size for each possible channel
  *                         response.
  * @ipc_chan_cmd_op_size: holds command size for each possible channel command.
@@ -176,6 +178,8 @@ struct nnp_device {
 
 	struct query_version_work query_version_work;
 
+	struct cdev cdev;
+	struct device *dev;
 	u8   ipc_chan_resp_op_size[32];
 	u8   ipc_chan_cmd_op_size[32];
 };
diff --git a/drivers/misc/intel-nnpi/device_chardev.c b/drivers/misc/intel-nnpi/device_chardev.c
new file mode 100644
index 0000000..a10f2d2
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_chardev.c
@@ -0,0 +1,294 @@
+// SPDX-License-Identifier: GPL-2.0-only
+
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#define pr_fmt(fmt)   KBUILD_MODNAME ": " fmt
+
+#include <linux/bitfield.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/slab.h>
+#include <uapi/misc/intel_nnpi.h>
+#include "cmd_chan.h"
+#include "device_chardev.h"
+#include "ipc_c2h_events.h"
+
+static dev_t       devnum;
+static struct class *class;
+
+struct device_client_info {
+	struct nnp_device *nnpdev;
+};
+
+#define NNPDRV_DEVICE_DEV_NAME "nnpi"
+
+static inline bool is_nnp_device_file(struct file *f);
+
+static int nnp_device_open(struct inode *inode, struct file *f)
+{
+	struct device_client_info *client;
+
+	if (!is_nnp_device_file(f))
+		return -EINVAL;
+
+	if (!inode->i_cdev)
+		return -EINVAL;
+
+	client = kzalloc(sizeof(*client), GFP_KERNEL);
+	if (!client)
+		return -ENOMEM;
+
+	client->nnpdev = container_of(inode->i_cdev, struct nnp_device, cdev);
+
+	f->private_data = client;
+
+	return 0;
+}
+
+static int nnp_device_release(struct inode *inode, struct file *f)
+{
+	struct device_client_info *client = f->private_data;
+
+	if (!is_nnp_device_file(f))
+		return -EINVAL;
+
+	kfree(client);
+	f->private_data = NULL;
+
+	return 0;
+}
+
+static int event_val_to_nnp_error(enum event_val event_val)
+{
+	switch (event_val) {
+	case NNP_IPC_NO_ERROR:
+		return 0;
+	case NNP_IPC_NO_MEMORY:
+		return -ENOMEM;
+	default:
+		return -EFAULT;
+	}
+}
+
+static long create_channel(struct device_client_info *cinfo, void __user *arg,
+			   unsigned int size)
+{
+	struct nnp_device *nnpdev = cinfo->nnpdev;
+	struct ioctl_nnpi_create_channel req;
+	struct nnp_chan *chan;
+	u64 cmd;
+	u32 error_mask;
+	long ret = 0;
+	unsigned int io_size = sizeof(req);
+
+	/* only single size structure is currently supported */
+	if (size != io_size)
+		return -EINVAL;
+
+	if (copy_from_user(&req, arg, io_size))
+		return -EFAULT;
+
+	/* o_errno must be cleared on entry */
+	if (req.o_errno)
+		return -EINVAL;
+
+	if (req.i_max_id < req.i_min_id ||
+	    req.i_max_id > 1023)
+		return -EINVAL;
+
+	/*
+	 * Do not allow create command channel if device is in
+	 * error state.
+	 * However allow new non infer context channels in case
+	 * of fatal ICE error in order to allow retrieve debug
+	 * information.
+	 */
+	error_mask = NNP_DEVICE_ERROR_MASK;
+	if (req.i_max_id >= 256)
+		error_mask &= ~(NNP_DEVICE_FATAL_ICE_ERROR);
+
+	if ((nnpdev->state & error_mask) ||
+	    !(nnpdev->state & NNP_DEVICE_CARD_DRIVER_READY) ||
+	    (req.i_max_id < 256 &&
+	     (nnpdev->state & NNP_DEVICE_ACTIVE_MASK) !=
+	     NNP_DEVICE_ACTIVE_MASK)) {
+		req.o_errno = NNPER_DEVICE_NOT_READY;
+		goto done;
+	}
+
+	/* Validate channel protocol version */
+	if (NNP_VERSION_MAJOR(req.i_protocol_version) !=
+	    NNP_VERSION_MAJOR(nnpdev->chan_protocol_version) ||
+	    NNP_VERSION_MINOR(req.i_protocol_version) !=
+	    NNP_VERSION_MINOR(nnpdev->chan_protocol_version)) {
+		req.o_errno = NNPER_VERSIONS_MISMATCH;
+		goto done;
+	}
+
+	ret = nnpdev_chan_create(nnpdev, req.i_host_fd,
+				 req.i_min_id, req.i_max_id,
+				 req.i_get_device_events, &chan);
+	if (ret < 0)
+		goto done;
+
+	/*
+	 * send the create request to card
+	 */
+	cmd = FIELD_PREP(NNP_H2C_OP_MASK, NNP_IPC_H2C_OP_CHANNEL_OP);
+	cmd |= FIELD_PREP(NNP_H2C_CHANNEL_OP_CHAN_ID_MASK, chan->chan_id);
+	cmd |= FIELD_PREP(NNP_H2C_CHANNEL_OP_UID_MASK, 0);
+	cmd |= FIELD_PREP(NNP_H2C_CHANNEL_OP_PRIV_MASK, 1);
+
+	ret = nnpdev_queue_msg(nnpdev->cmdq, cmd);
+	if (ret < 0) {
+		if (!nnp_chan_set_destroyed(chan))
+			nnp_chan_put(chan);
+		goto done;
+	}
+
+	ret = wait_event_interruptible(nnpdev->waitq,
+				       chan->event_msg.value != 0 ||
+				       chan_drv_fatal(chan));
+	if (chan->event_msg.value == 0) {
+		if (ret < 0) {
+			ret = -EINTR;
+			nnp_chan_send_destroy(chan);
+		} else {
+			req.o_errno = NNPER_DEVICE_ERROR;
+			ret = 0;
+			if (!nnp_chan_set_destroyed(chan))
+				nnp_chan_put(chan);
+		}
+		goto done;
+	} else if (chan->event_msg.event_code ==
+		   NNP_IPC_CREATE_CHANNEL_FAILED) {
+		req.o_errno = event_val_to_nnp_error(chan->event_msg.event_val);
+		ret = 0;
+		if (!nnp_chan_set_destroyed(chan))
+			nnp_chan_put(chan);
+		goto done;
+	}
+
+	req.o_channel_id = chan->chan_id;
+
+	/*
+	 * Attach file descriptor to the channel object - if created
+	 * successfully
+	 */
+	req.o_fd = nnp_chan_create_file(chan);
+
+	/* remove channel object if failed */
+	if (req.o_fd < 0) {
+		ret = req.o_fd;
+		nnp_chan_send_destroy(chan);
+	}
+
+done:
+	if (copy_to_user(arg, &req, io_size))
+		return -EFAULT;
+
+	return ret;
+}
+
+static long nnp_device_ioctl(struct file *f, unsigned int cmd,
+			     unsigned long arg)
+{
+	struct device_client_info *client = f->private_data;
+	unsigned int ioc_nr, size;
+
+	if (!is_nnp_device_file(f))
+		return -ENOTTY;
+
+	if (_IOC_TYPE(cmd) != 'D')
+		return -EINVAL;
+
+	ioc_nr = _IOC_NR(cmd);
+	size = _IOC_SIZE(cmd);
+
+	switch (ioc_nr) {
+	case _IOC_NR(IOCTL_NNPI_DEVICE_CREATE_CHANNEL):
+		return create_channel(client, (void __user *)arg, size);
+	default:
+		break;
+	}
+
+	return -EINVAL;
+}
+
+static const struct file_operations nnp_device_fops = {
+	.owner = THIS_MODULE,
+	.open = nnp_device_open,
+	.release = nnp_device_release,
+	.unlocked_ioctl = nnp_device_ioctl,
+	.compat_ioctl = nnp_device_ioctl,
+};
+
+static inline bool is_nnp_device_file(struct file *f)
+{
+	return f->f_op == &nnp_device_fops;
+}
+
+int nnpdev_cdev_create(struct nnp_device *nnpdev)
+{
+	int ret;
+
+	if (!nnpdev)
+		return -EINVAL;
+
+	cdev_init(&nnpdev->cdev, &nnp_device_fops);
+	nnpdev->cdev.owner = THIS_MODULE;
+	ret = cdev_add(&nnpdev->cdev,
+		       MKDEV(MAJOR(devnum), nnpdev->id),
+		       1);
+	if (ret)
+		return ret;
+
+	nnpdev->dev = device_create(class, NULL,
+				    MKDEV(MAJOR(devnum), nnpdev->id), nnpdev,
+				    NNPI_DEVICE_DEV_FMT, nnpdev->id);
+	if (IS_ERR(nnpdev->dev)) {
+		cdev_del(&nnpdev->cdev);
+		return PTR_ERR(nnpdev->dev);
+	}
+
+	return 0;
+}
+
+void nnpdev_cdev_destroy(struct nnp_device *nnpdev)
+{
+	device_destroy(class, MKDEV(MAJOR(devnum), nnpdev->id));
+	cdev_del(&nnpdev->cdev);
+}
+
+int nnpdev_cdev_init(void)
+{
+	int ret;
+
+	ret = alloc_chrdev_region(&devnum, 0, NNP_MAX_DEVS,
+				  NNPDRV_DEVICE_DEV_NAME);
+	if (ret < 0) {
+		pr_err("failed to allocate devnum %d\n", ret);
+		return ret;
+	}
+
+	class = class_create(THIS_MODULE, NNPDRV_DEVICE_DEV_NAME);
+	if (IS_ERR(class)) {
+		ret = PTR_ERR(class);
+		pr_err("failed to register class %d\n", ret);
+		unregister_chrdev_region(devnum, NNP_MAX_DEVS);
+		return ret;
+	}
+
+	return 0;
+}
+
+void nnpdev_cdev_cleanup(void)
+{
+	class_destroy(class);
+	unregister_chrdev_region(devnum, NNP_MAX_DEVS);
+}
+
diff --git a/drivers/misc/intel-nnpi/device_chardev.h b/drivers/misc/intel-nnpi/device_chardev.h
new file mode 100644
index 0000000..1f08d85
--- /dev/null
+++ b/drivers/misc/intel-nnpi/device_chardev.h
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+
+/* Copyright (C) 2019-2020 Intel Corporation */
+
+#ifndef _NNPDRV_DEVICE_CHARDEV_H
+#define _NNPDRV_DEVICE_CHARDEV_H
+
+#include "device.h"
+#include <linux/fs.h>
+#include <linux/list.h>
+
+int nnpdev_cdev_create(struct nnp_device *nnpdev);
+void nnpdev_cdev_destroy(struct nnp_device *nnpdev);
+int nnpdev_cdev_init(void);
+void nnpdev_cdev_cleanup(void);
+
+#endif
diff --git a/drivers/misc/intel-nnpi/nnpdrv_main.c b/drivers/misc/intel-nnpi/nnpdrv_main.c
index 9f41b54..ca5f77f 100644
--- a/drivers/misc/intel-nnpi/nnpdrv_main.c
+++ b/drivers/misc/intel-nnpi/nnpdrv_main.c
@@ -10,6 +10,7 @@
 #include <linux/printk.h>
 #include <linux/stringify.h>
 #include "device.h"
+#include "device_chardev.h"
 #include "nnp_hw.h"
 
 static int __init nnp_init_module(void)
@@ -18,14 +19,22 @@ static int __init nnp_init_module(void)
 
 	nnpdev_module_init();
 
+	ret = nnpdev_cdev_init();
+	if (ret) {
+		pr_err("failed to init chardev class\n");
+		goto err_dev;
+	}
+
 	ret = nnp_hw_init();
 	if (ret) {
 		pr_err("failed to init pcie\n");
-		goto err_dev;
+		goto err_char;
 	}
 
 	return 0;
 
+err_char:
+	nnpdev_cdev_cleanup();
 err_dev:
 	nnpdev_module_fini();
 	return ret;
@@ -34,6 +43,7 @@ static int __init nnp_init_module(void)
 static void __exit nnp_cleanup(void)
 {
 	nnp_hw_fini();
+	nnpdev_cdev_cleanup();
 	nnpdev_module_fini();
 }
 
diff --git a/include/uapi/misc/intel_nnpi.h b/include/uapi/misc/intel_nnpi.h
index 756e625..5c026ba 100644
--- a/include/uapi/misc/intel_nnpi.h
+++ b/include/uapi/misc/intel_nnpi.h
@@ -136,6 +136,49 @@ struct nnpdrv_ioctl_destroy_hostres {
 	__u32 o_errno;
 };
 
+/*
+ * ioctls for /dev/nnpi%d device
+ */
+#define NNPI_DEVICE_DEV_FMT "nnpi%u"
+
+/**
+ * IOCTL_NNPI_DEVICE_CREATE_CHANNEL:
+ *
+ * A request to create a new communication "channel" with an NNP-I device.
+ * This channel can be used to send command and receive responses from the
+ * device.
+ */
+#define IOCTL_NNPI_DEVICE_CREATE_CHANNEL      \
+	_IOWR('D', 0, struct ioctl_nnpi_create_channel)
+
+/**
+ * struct ioctl_nnpi_create_channel - IOCTL_NNPI_DEVICE_CREATE_CHANNEL payload
+ * @i_host_fd: opened file descriptor to /dev/nnpi_host
+ * @i_min_id: minimum range for channel id allocation
+ * @i_max_id: maximum range for channel id allocation
+ * @i_get_device_events: if true, device-level event responses will be
+ *            delivered to be read from the channel.
+ * @i_protocol_version: The NNP_IPC_CHAN_PROTOCOL_VERSION the user-space has
+ *                      compiled with.
+ * @o_fd: returns file-descriptor through which commands/responses can be
+ *        write/read.
+ * @o_errno: On input, must be set to 0.
+ *           On output, 0 on success, one of the NNPERR_* error codes on error.
+ * @o_channel_id: returns the unique id of the channel
+ *
+ * Argument structure for IOCTL_NNPI_DEVICE_CREATE_CHANNEL ioctl.
+ */
+struct ioctl_nnpi_create_channel {
+	__s32    i_host_fd;
+	__u32    i_min_id;
+	__u32    i_max_id;
+	__s32    i_get_device_events;
+	__u32    i_protocol_version;
+	__s32    o_fd;
+	__u32    o_errno;
+	__u16    o_channel_id;
+};
+
 /****************************************************************
  * Error code values - errors returned in o_errno fields of
  * above structures.
-- 
1.8.3.1

