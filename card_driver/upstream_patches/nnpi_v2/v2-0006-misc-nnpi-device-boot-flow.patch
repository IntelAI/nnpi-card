From cc366eaa8f8dcb1362090926d983d5799afbadec Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 30 Mar 2020 16:39:32 +0300
Subject: [PATCH v2 06/20] misc: nnpi: device boot flow

This adds handling of NNP-I device boot flow. When the NNP-I device
is powered-on or reset, the host driver should load and provide the
device bootimage firmware to the device BIOS.

The bootimage firmware is located at /lib/firmware/intel/nnpi/disk.img
and it is loaded using the firmware API.

Since the boot image may be big (bigger than 100MB in some configs) the
driver share the same memory region for booting all the NNP-I devices in
the system and free the memory when all devices has received the image.

The functions in bootimage.c handles the boot images loading, mapping
to devices and also has a 30 seconds periodic timer which garbage collect all
images in memory that can be freed (the timer stops when all images are freed).

Normally all devices use the same boot image, however uppon user-request a different
boot image may be requested for different devices. The interface for such request is
not part of this patch however this is the reason why nnpdrv_bootimage manages a list
of different boot images and a list of requesting devices for each.

The added code to device.c handles the communication flow with the NNP-I device
BIOS, the flow is as follow:
1) The device report its boot state through a "card doorbell" register, that signals an
   interrupt to the host and the "pci" layer in the driver calls the nnpdrv_card_doorbell_value_changed.
2) When the device signals that it is "Ready to boot", the host driver sends it through the
   "command queue" an address of page in host memory.
3) The card BIOS fills the page of memory with card system info and change the doorbell value to "sysinfo ready"
4) The host driver then initiate the boot image loading.
5) When boot image is ready in memory, the host driver send a "Boot image ready" message and the card BIOS start to
   boot and changes the doorbell value to indicate success or failure.
6) When receiving indication about success/failure the host driver signals that the device no longer needs the
   boot image in memory. When all devices no longer need the image it will be removed.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/Makefile      |   2 +-
 drivers/misc/intel-nnpi/bootimage.c   | 534 ++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/bootimage.h   |  23 ++
 drivers/misc/intel-nnpi/device.c      | 288 +++++++++++++-
 drivers/misc/intel-nnpi/device.h      |  50 ++-
 drivers/misc/intel-nnpi/nnpdrv_main.c |   1 +
 6 files changed, 893 insertions(+), 5 deletions(-)
 create mode 100644 drivers/misc/intel-nnpi/bootimage.c
 create mode 100644 drivers/misc/intel-nnpi/bootimage.h

diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index f776ae9b10e0..3c926e5938a4 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -7,6 +7,6 @@
 obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o pcie.o device.o msg_scheduler.o \
-		   hostres.o host_chardev.o inf_proc.o
+		   hostres.o host_chardev.o inf_proc.o bootimage.o
 
 ccflags-y += -I$(src)/if_include
diff --git a/drivers/misc/intel-nnpi/bootimage.c b/drivers/misc/intel-nnpi/bootimage.c
new file mode 100644
index 000000000000..7301f94988ce
--- /dev/null
+++ b/drivers/misc/intel-nnpi/bootimage.c
@@ -0,0 +1,534 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/namei.h>
+#include <linux/poll.h>
+#include <linux/wait.h>
+#include <linux/slab.h>
+#include <linux/kmod.h>
+#include <linux/workqueue.h>
+#include <linux/sched.h>
+#include <linux/firmware.h>
+#include <linux/timer.h>
+#include "bootimage.h"
+#include "device.h"
+#include "nnp_log.h"
+#include "nnp_boot_defs.h"
+#include "ipc_protocol.h"
+
+enum image_state {
+	IMAGE_REQUESTED = 0,
+	IMAGE_LOAD_FAILED,
+	IMAGE_AVAILABLE
+};
+
+struct image_wait_list {
+	struct nnp_device *nnpdev;
+	struct list_head   node;
+};
+
+#define MAX_IMAGE_NAME_LEN   256
+
+struct image_info {
+	char             name[MAX_IMAGE_NAME_LEN];
+	enum image_state state;
+	struct nnp_device *requested_nnpdev;
+	struct nnpdrv_host_resource  *hostres;
+	struct list_head wait_list;
+	struct work_struct work;
+	struct list_head node;
+};
+
+struct nnpdrv_bootimage {
+	struct list_head  boot_images;
+	struct timer_list garbage_collect_timer;
+	struct work_struct garbage_collect_work;
+	u32               unloading_module;
+};
+
+static struct nnpdrv_bootimage *s_boot_loader;
+static DEFINE_MUTEX(s_lock);
+
+static void garbage_collect_work_handler(struct work_struct *work);
+
+static void loaded_images_garbage_collect(struct timer_list *timer)
+{
+	schedule_work(&s_boot_loader->garbage_collect_work);
+
+	mod_timer(&s_boot_loader->garbage_collect_timer,
+		  jiffies + msecs_to_jiffies(30000));
+}
+
+static int alloc_bootloader(void)
+{
+	nnp_log_debug(GENERAL_LOG, "allocating bootloader\n");
+
+	s_boot_loader = kzalloc(sizeof(*s_boot_loader), GFP_KERNEL);
+	if (!s_boot_loader)
+		return -ENOMEM;
+
+	INIT_LIST_HEAD(&s_boot_loader->boot_images);
+	INIT_WORK(&s_boot_loader->garbage_collect_work,
+		  garbage_collect_work_handler);
+
+	timer_setup(&s_boot_loader->garbage_collect_timer,
+		    loaded_images_garbage_collect,
+		    0);
+	mod_timer(&s_boot_loader->garbage_collect_timer,
+		  jiffies + msecs_to_jiffies(30000));
+
+	return 0;
+}
+
+static void free_bootloader(void)
+{
+	nnp_log_debug(GENERAL_LOG,
+		      "unloading_module=%d\n",
+		      s_boot_loader->unloading_module);
+
+	if (!s_boot_loader->unloading_module)
+		del_timer(&s_boot_loader->garbage_collect_timer);
+
+	kfree(s_boot_loader);
+	s_boot_loader = NULL;
+}
+
+/*
+ * must be called when s_boot_loader->lock is held.
+ * informs all waiting devices about the image load state
+ */
+static void image_load_state_changed(struct image_info *image)
+{
+	struct image_wait_list *wait_list_node, *n;
+
+	/* inform all waiting devices about the load image state */
+	list_for_each_entry_safe(wait_list_node, n, &image->wait_list, node) {
+		mutex_unlock(&s_lock);
+		nnpdrv_bootimage_load_boot_image(wait_list_node->nnpdev,
+						 image->name);
+		mutex_lock(&s_lock);
+		list_del(&wait_list_node->node);
+		kfree(wait_list_node);
+	}
+}
+
+static int load_firmware_no_copy(struct image_info *image_info)
+{
+	const struct firmware *fw;
+	struct kstat stat;
+	struct path path;
+	char *fname;
+	void *vptr;
+	int ret;
+
+	fname = kzalloc(PATH_MAX, GFP_KERNEL);
+	if (!fname)
+		return -ENOMEM;
+
+	ret = snprintf(fname, PATH_MAX, "/lib/firmware/%s", image_info->name);
+	if (ret < 0 || ret >= PATH_MAX) {
+		nnp_log_err(GENERAL_LOG,
+			    "Could not aggregate path name: /lib/firmware/%s\n",
+			    image_info->name);
+		kfree(fname);
+		return -EFAULT;
+	}
+
+	ret = kern_path(fname, LOOKUP_FOLLOW, &path);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "Could not find image under /lib/firmware\n");
+		kfree(fname);
+		return ret;
+	}
+
+	ret = vfs_getattr(&path, &stat, STATX_SIZE, 0);
+	path_put(&path);
+	kfree(fname);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to get boot image size %s error=%d\n",
+			    image_info->name,
+			    ret);
+		return ret;
+	}
+
+	nnp_log_debug(GENERAL_LOG,
+		      "Found boot image size %lld\n", stat.size);
+
+	ret = nnpdrv_hostres_create(stat.size,
+				    DMA_TO_DEVICE,
+				    &image_info->hostres);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to create host resource for boot image size=%lld error=%d\n",
+			    stat.size,
+			    ret);
+		return ret;
+	}
+
+	ret = nnpdrv_hostres_vmap(image_info->hostres, &vptr);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to vmap host resource error=%d\n",
+			    ret);
+		nnpdrv_hostres_destroy(image_info->hostres);
+		image_info->hostres = 0;
+		return ret;
+	}
+
+	ret = request_firmware_into_buf(&fw,
+			image_info->name,
+			image_info->requested_nnpdev->hw_device_info->hw_device,
+			vptr,
+			stat.size);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to load firmware %s ret==%d\n",
+			    image_info->name, ret);
+		nnpdrv_hostres_vunmap(image_info->hostres, vptr);
+		nnpdrv_hostres_destroy(image_info->hostres);
+		image_info->hostres = 0;
+		return ret;
+	}
+
+	nnpdrv_hostres_vunmap(image_info->hostres, vptr);
+	release_firmware(fw);
+	image_info->state = IMAGE_AVAILABLE;
+
+	return 0;
+}
+
+static void load_image_handler(struct work_struct *work)
+{
+	struct image_info *image_info = container_of(work,
+						     struct image_info,
+						     work);
+
+	const struct firmware *fw;
+	void *vptr;
+	int ret;
+
+	mutex_lock(&s_lock);
+
+	/* First, try to load image without extra memcpy */
+	ret = load_firmware_no_copy(image_info);
+	if (ret == 0)
+		goto done;
+
+	/* Try to load firmware to kernel allocated memory */
+	ret = request_firmware(&fw,
+		image_info->name,
+		image_info->requested_nnpdev->hw_device_info->hw_device);
+
+	if (ret) {
+		nnp_log_err(GENERAL_LOG, "failed to load boot image %s error=%d\n",
+			    image_info->name,
+			    ret);
+		image_info->state = IMAGE_LOAD_FAILED;
+		goto done;
+	}
+
+	ret = nnpdrv_hostres_create(fw->size,
+				    DMA_TO_DEVICE,
+				    &image_info->hostres);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to create host resource for boot image size=%ld error=%d\n",
+			    fw->size,
+			    ret);
+		image_info->state = IMAGE_LOAD_FAILED;
+		goto free_fw;
+	}
+
+	ret = nnpdrv_hostres_vmap(image_info->hostres, &vptr);
+	if (ret) {
+		nnp_log_err(GENERAL_LOG,
+			    "failed to vmap host resource error=%d\n", ret);
+		image_info->state = IMAGE_LOAD_FAILED;
+		nnpdrv_hostres_destroy(image_info->hostres);
+		image_info->hostres = 0;
+		goto free_fw;
+	}
+
+	/* Copy image data */
+	memcpy(vptr, fw->data, fw->size);
+	nnpdrv_hostres_vunmap(image_info->hostres, vptr);
+
+	image_info->state = IMAGE_AVAILABLE;
+
+free_fw:
+	release_firmware(fw);
+done:
+	/* give the boot image to waiting devices */
+	image_load_state_changed(image_info);
+	mutex_unlock(&s_lock);
+}
+
+static int map_image(struct nnp_device    *nnpdev,
+		     const char           *image_name,
+		     struct image_info   **out_image_info,
+		     dma_addr_t           *out_page_list_addr,
+		     u32                  *out_total_chunks)
+{
+	struct image_info *image_info;
+	struct image_wait_list *wait_list_node;
+	int ret;
+	bool found = false;
+
+	mutex_lock(&s_lock);
+	if (!s_boot_loader) {
+		ret = alloc_bootloader();
+		if (ret != 0) {
+			mutex_unlock(&s_lock);
+			return ret;
+		}
+	}
+
+	if (!list_empty(&s_boot_loader->boot_images))
+		list_for_each_entry(image_info,
+				    &s_boot_loader->boot_images, node)
+			if (!strncmp(image_name,
+				     image_info->name, MAX_IMAGE_NAME_LEN)) {
+				found = true;
+				break;
+			}
+
+	if (found) {
+		if (image_info->state == IMAGE_AVAILABLE) {
+			ret = nnpdrv_hostres_map_device(image_info->hostres,
+							nnpdev,
+							true,
+							out_page_list_addr,
+							out_total_chunks);
+		} else if (image_info->state == IMAGE_LOAD_FAILED) {
+			ret = -EFAULT;
+		} else {
+			wait_list_node = kzalloc(sizeof(*wait_list_node),
+						 GFP_NOWAIT);
+			if (!wait_list_node) {
+				ret = -ENOMEM;
+			} else {
+				wait_list_node->nnpdev = nnpdev;
+				list_add_tail(&wait_list_node->node,
+					      &image_info->wait_list);
+				ret = -ENOENT;
+			}
+		}
+	} else {
+		/* not available, add the requested image to the wait list */
+		image_info = kzalloc(sizeof(*image_info), GFP_KERNEL);
+		wait_list_node = kzalloc(sizeof(*wait_list_node), GFP_KERNEL);
+
+		if (image_info && wait_list_node) {
+			if (strlen(image_name) >= sizeof(image_info->name)) {
+				kfree(image_info);
+				kfree(wait_list_node);
+				ret = -EINVAL;
+			} else {
+				strncpy(image_info->name, image_name,
+					MAX_IMAGE_NAME_LEN - 1);
+				image_info->state = IMAGE_REQUESTED;
+				image_info->requested_nnpdev = nnpdev;
+				INIT_LIST_HEAD(&image_info->wait_list);
+				INIT_WORK(&image_info->work,
+					  load_image_handler);
+				list_add_tail(&image_info->node,
+					      &s_boot_loader->boot_images);
+
+				wait_list_node->nnpdev = nnpdev;
+				list_add_tail(&wait_list_node->node,
+					      &image_info->wait_list);
+
+				/* schedule work to load the image */
+				schedule_work(&image_info->work);
+
+				ret = -ENOENT;
+			}
+		} else {
+			kfree(image_info);
+			kfree(wait_list_node);
+			ret = -ENOMEM;
+		}
+	}
+
+	mutex_unlock(&s_lock);
+
+	if (!ret && out_image_info)
+		*out_image_info = image_info;
+	return ret;
+}
+
+static bool image_remove(struct image_info *image)
+{
+	if (!image)
+		return false;
+
+	/*
+	 * Check if the image can be removed,
+	 * unless we are during unload time, in which case we
+	 * force deletion of the image
+	 */
+	if (!s_boot_loader->unloading_module) {
+		/* do not remove an image in a REQUESTED state */
+		if (image->state == IMAGE_REQUESTED)
+			return false;
+
+		/* do not remove an image with non empty device wait list */
+		if (!list_empty(&image->wait_list))
+			return false;
+
+		/* do not remove an image which is used by some device */
+		if (image->state == IMAGE_AVAILABLE &&
+		    nnpdrv_hostres_read_refcount(image->hostres) > 1)
+			return false;
+	}
+
+	/* OK to destroy and delete image */
+	if (image->hostres)
+		nnpdrv_hostres_destroy(image->hostres);
+
+	list_del(&image->node);
+
+	return true;
+}
+
+static void garbage_collect_work_handler(struct work_struct *work)
+{
+	struct image_info *image, *n;
+
+	mutex_lock(&s_lock);
+
+	if (!s_boot_loader) {
+		mutex_unlock(&s_lock);
+		return;
+	}
+
+	if (!list_empty(&s_boot_loader->boot_images)) {
+		list_for_each_entry_safe(image, n,
+					 &s_boot_loader->boot_images, node) {
+			if (image_remove(image)) {
+				nnp_log_info(GENERAL_LOG,
+					     "Removed boot image %s from memory\n",
+					     image->name);
+				kfree(image);
+			}
+		}
+	}
+
+	if (list_empty(&s_boot_loader->boot_images))
+		free_bootloader();
+
+	mutex_unlock(&s_lock);
+}
+
+bool nnpdrv_bootimage_image_list_empty(void)
+{
+	return list_empty(&s_boot_loader->boot_images);
+}
+
+int nnpdrv_bootimage_load_boot_image(struct nnp_device    *nnpdev,
+				     const char           *boot_image_name)
+{
+	struct image_info *image_info;
+	dma_addr_t page_list_addr;
+	u32        total_chunks;
+	union h2c_boot_image_ready msg;
+	int ret;
+
+	ret = map_image(nnpdev,
+			boot_image_name,
+			&image_info,
+			&page_list_addr,
+			&total_chunks);
+	if (!ret) {
+		nnp_log_info(GENERAL_LOG,
+			     "Mapped boot image %s num_chunks=%d total_size=%d\n",
+			     image_info->name, total_chunks,
+			     (u32)nnpdrv_hostres_get_size(image_info->hostres));
+
+		/* write image address directly to the command Q */
+		memset(msg.value, 0, sizeof(msg));
+		msg.opcode = NNP_IPC_H2C_OP_BIOS_PROTOCOL;
+		msg.msg_type = NNP_IPC_H2C_TYPE_BOOT_IMAGE_READY;
+		msg.size = 2 * sizeof(u64);
+		msg.descriptor_addr =
+			(u64)page_list_addr + sizeof(struct dma_chain_header);
+		msg.descriptor_size =
+			total_chunks * sizeof(struct dma_chain_entry);
+		msg.image_size =
+			(u32)nnpdrv_hostres_get_size(image_info->hostres);
+
+		ret = nnpdev->hw_ops->write_mesg(nnpdev->hw_handle,
+					   &msg.value[0],
+					   sizeof(msg) / sizeof(u64),
+					   NULL);
+
+	} else if (ret != -ENOENT) {
+		/* notify card that boot image cannot be loaded */
+		nnpdev->hw_ops->set_host_doorbell_value(
+			nnpdev->hw_handle,
+			NNP_HOST_ERROR_CANNOT_LOAD_IMAGE <<
+			NNP_HOST_ERROR_SHIFT);
+	}
+	return ret;
+}
+
+int nnpdrv_bootimage_unload_boot_image(struct nnp_device    *nnpdev,
+				       const char           *boot_image_name)
+{
+	struct image_info *image_info;
+	int ret;
+	bool found = false;
+
+	mutex_lock(&s_lock);
+
+	if (!s_boot_loader) {
+		mutex_unlock(&s_lock);
+		return -EFAULT;
+	}
+
+	list_for_each_entry(image_info, &s_boot_loader->boot_images, node)
+		if (!strncmp(boot_image_name, image_info->name,
+			     MAX_IMAGE_NAME_LEN)) {
+			found = true;
+			break;
+		}
+
+	if (found && image_info->hostres)
+		ret = nnpdrv_hostres_unmap_device(image_info->hostres, nnpdev);
+	else
+		ret = -ENOENT;
+
+	mutex_unlock(&s_lock);
+	return ret;
+}
+
+void nnpdrv_bootimage_fini(void)
+{
+	mutex_lock(&s_lock);
+	if (!s_boot_loader) {
+		mutex_unlock(&s_lock);
+		return;
+	}
+
+	/*
+	 * delete the garbage collect timer and call its
+	 * callback one last time in order to remove any
+	 * boot image still in memory
+	 */
+	del_timer(&s_boot_loader->garbage_collect_timer);
+	cancel_work_sync(&s_boot_loader->garbage_collect_work);
+	s_boot_loader->unloading_module = 1;
+	mutex_unlock(&s_lock);
+	garbage_collect_work_handler(&s_boot_loader->garbage_collect_work);
+}
diff --git a/drivers/misc/intel-nnpi/bootimage.h b/drivers/misc/intel-nnpi/bootimage.h
new file mode 100644
index 000000000000..27cac9bb4e26
--- /dev/null
+++ b/drivers/misc/intel-nnpi/bootimage.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#ifndef _NNPDRV_BOOTIMAGE_H
+#define _NNPDRV_BOOTIMAGE_H
+
+#include "hostres.h"
+
+struct nnp_device;
+
+void nnpdrv_bootimage_fini(void);
+
+int nnpdrv_bootimage_load_boot_image(struct nnp_device *nnpdev,
+				     const char        *boot_image_name);
+int nnpdrv_bootimage_unload_boot_image(struct nnp_device *nnpdev,
+				       const char        *boot_image_name);
+
+bool nnpdrv_bootimage_image_list_empty(void);
+
+#endif /* _NNPDRV_BOOTIMAGE_H */
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 10d132031ec2..3c79ff52d91d 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -19,6 +19,8 @@
 #include "nnp_debug.h"
 #include "pcie.h"
 #include "host_chardev.h"
+#include "bootimage.h"
+#include "nnp_boot_defs.h"
 
 static u32 s_num_devices;
 static DEFINE_MUTEX(s_device_num_mutex);
@@ -45,8 +47,9 @@ static void nnpdrv_last_device_fini(void)
 	mutex_lock(&s_device_num_mutex);
 	s_num_devices--;
 	if (s_num_devices == 0) {
-		/* Release host interface */
+		/* Release host interface and bootimage timer */
 		release_host_interface();
+		nnpdrv_bootimage_fini();
 	}
 	mutex_unlock(&s_device_num_mutex);
 }
@@ -112,6 +115,196 @@ int nnpdrv_destroy_cmd_queue(struct nnp_device          *nnpdev,
 	return msg_scheduler_queue_destroy(nnpdev->cmdq_sched, q);
 }
 
+static void dump_system_info(struct nnp_device *nnpdev)
+{
+	char    bios_version_str[NNP_BIOS_VERSION_LEN];
+	unsigned int i;
+	u16    *v;
+
+	if (!nnpdev->bios_system_info)
+		return;
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%u)\n\tversion=%hhu board_id=0x%x fab_id=0x%x bom_id=0x%x\n"
+		      "\tplatform_type=0x%x platform_flavor=0x%x\n",
+		      nnpdev->id, nnpdev->bios_system_info->version,
+		      nnpdev->bios_system_info->board_id,
+		      nnpdev->bios_system_info->fab_id,
+		      nnpdev->bios_system_info->bom_id,
+		      nnpdev->bios_system_info->platform_type,
+		      nnpdev->bios_system_info->platform_flavor);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%u) cpu_family=0x%x Step=%hhu Sku=0x%x Did=0x%x num_cores=%hu num_threads=%hu\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->cpu_info.cpu_family,
+		      nnpdev->bios_system_info->cpu_info.cpu_stepping,
+		      nnpdev->bios_system_info->cpu_info.cpu_sku,
+		      nnpdev->bios_system_info->cpu_info.cpu_did,
+		      nnpdev->bios_system_info->cpu_info.cpu_core_count,
+		      nnpdev->bios_system_info->cpu_info.cpu_thread_count);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%u) ice_count=%hu Mask=0x%x\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->ice_info.ice_count,
+		      nnpdev->bios_system_info->ice_info.ice_available_mask);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%u) csme_version Code: %u.%u.%u hotfix=%u\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->csme_version.code_major,
+		      nnpdev->bios_system_info->csme_version.code_minor,
+		      nnpdev->bios_system_info->csme_version.code_build_no,
+		      nnpdev->bios_system_info->csme_version.code_hot_fix);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%u) csme_version Rcvy: %u.%u.%u hotfix=%u\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->csme_version.rcvymajor,
+		      nnpdev->bios_system_info->csme_version.rcvyminor,
+		      nnpdev->bios_system_info->csme_version.rcvybuildno,
+		      nnpdev->bios_system_info->csme_version.rcvy_hot_fix);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%d) csme_version Fitc: %u.%u.%u hotfix=%u\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->csme_version.fitc_major,
+		      nnpdev->bios_system_info->csme_version.fitc_minor,
+		      nnpdev->bios_system_info->csme_version.fitcbuildno,
+		      nnpdev->bios_system_info->csme_version.fitc_hot_fix);
+
+	nnp_log_debug(START_UP_LOG,
+		      "sysinfo(%d) pmc_version: %u.%u.%u hotfix=%u\n",
+		      nnpdev->id,
+		      nnpdev->bios_system_info->pmc_version.major,
+		      nnpdev->bios_system_info->pmc_version.minor,
+		      nnpdev->bios_system_info->pmc_version.build,
+		      nnpdev->bios_system_info->pmc_version.hotfix);
+
+	v = (u16 *)&nnpdev->bios_system_info->bios_ver;
+
+	NNP_ASSERT(nnpdev->bios_system_info->bios_ver.null_terminator == 0);
+	for (i = 0; i < NNP_BIOS_VERSION_LEN - 1 && v[i] != 0; ++i) {
+#ifdef DEBUG
+		if ((v[i] & 0xff00) != 0)
+			nnp_log_err(START_UP_LOG,
+				    "sysinfo(%u) bios version upper bits of char(%u) are truncated: %hu\n",
+				    nnpdev->id, i, v[i]);
+#endif
+		bios_version_str[i] = v[i];
+	}
+	bios_version_str[i] = '\0';
+
+	nnp_log_debug(START_UP_LOG, "sysinfo(%u) bios version: %s\n",
+		      nnpdev->id,
+		      bios_version_str);
+}
+
+static void nnpdrv_device_set_boot_state(struct nnp_device *nnpdev, u32 mask)
+{
+	u32 state, prev_state;
+	union h2c_bios_system_info_req sysinfo_msg;
+	bool becomes_ready = false;
+	int ret;
+
+	spin_lock(&nnpdev->lock);
+	prev_state = nnpdev->state;
+	if ((mask & NNP_DEVICE_CARD_BOOT_STATE_MASK) != 0) {
+		nnpdev->state &= ~(NNP_DEVICE_CARD_BOOT_STATE_MASK);
+		nnpdev->state &= ~(NNP_DEVICE_ERROR_MASK);
+	}
+	nnpdev->state |= mask;
+	state = nnpdev->state;
+	spin_unlock(&nnpdev->lock);
+
+	nnp_log_debug(GENERAL_LOG, "device state change 0x%x --> 0x%x\n",
+		      prev_state, state);
+
+	/* unload boot image if boot started or failed */
+	if (nnpdev->boot_image_loaded &&
+	    (((state & NNP_DEVICE_BOOT_STARTED) &&
+	      !(prev_state & NNP_DEVICE_BOOT_STARTED)) ||
+	     (state & NNP_DEVICE_BOOT_FAILED))) {
+		nnpdev->boot_image_loaded = 0;
+		if (nnpdev->reset_boot_image_path[0] == '\0') {
+			ret = nnpdrv_bootimage_unload_boot_image(
+							nnpdev,
+							NNP_FIRMWARE_NAME);
+		} else {
+			ret = nnpdrv_bootimage_unload_boot_image(
+						nnpdev,
+						nnpdev->reset_boot_image_path);
+			nnpdev->reset_boot_image_path[0] = '\0';
+		}
+		if (ret)
+			nnp_log_err(GENERAL_LOG,
+				    "Unexpected error while unloading boot image. rc=%d\n",
+				    ret);
+	}
+
+	if (state & NNP_DEVICE_ERROR_MASK)
+		return;
+
+	if ((state & NNP_DEVICE_BOOT_BIOS_READY) &&
+	    !(prev_state & NNP_DEVICE_BOOT_BIOS_READY)) {
+		becomes_ready = true;
+	}
+
+	if (becomes_ready || mask == NNP_DEVICE_BOOT_BIOS_READY) {
+		if (!becomes_ready)
+			nnp_log_err(START_UP_LOG,
+				    "Re-sending sysinfo page to bios!!\n");
+
+		/* Send request to fill system_info buffer */
+		memset(sysinfo_msg.value, 0, sizeof(sysinfo_msg));
+		sysinfo_msg.opcode = NNP_IPC_H2C_OP_BIOS_PROTOCOL;
+		sysinfo_msg.msg_type = NNP_IPC_H2C_TYPE_SYSTEM_INFO_REQ;
+		sysinfo_msg.size = 2 * sizeof(u64);
+		sysinfo_msg.sysinfo_addr =
+			(u64)nnpdev->bios_system_info_dma_addr;
+		sysinfo_msg.sysinfo_size = NNP_PAGE_SIZE;
+
+		nnp_log_info(START_UP_LOG,
+			     "Sending sysinfo page to bios for device %d\n",
+			     nnpdev->id);
+
+		if (nnpdev->hw_ops->flush_command_fifo)
+			nnpdev->hw_ops->flush_command_fifo(nnpdev->hw_handle);
+
+		nnpdev->hw_ops->write_mesg(nnpdev->hw_handle,
+					   &sysinfo_msg.value[0],
+					   sizeof(sysinfo_msg) / sizeof(u64),
+					   NULL);
+		return;
+	}
+
+	/* Handle boot image request */
+	if ((state & NNP_DEVICE_BOOT_SYSINFO_READY) &&
+	    !(prev_state & NNP_DEVICE_BOOT_SYSINFO_READY) &&
+	    !nnpdev->boot_image_loaded) {
+		dump_system_info(nnpdev);
+		nnpdev->bios_system_info_valid = true;
+		nnpdev->boot_image_loaded = 1;
+		if (nnpdev->reset_boot_image_path[0] == '\0') {
+			ret = nnpdrv_bootimage_load_boot_image(nnpdev,
+							     NNP_FIRMWARE_NAME);
+		} else {
+			ret = nnpdrv_bootimage_load_boot_image(
+						nnpdev,
+						nnpdev->reset_boot_image_path);
+		}
+		/*
+		 * ENOENT means the image not available in memory
+		 * but staged to be loaded
+		 */
+		if (ret && ret != -ENOENT)
+			nnp_log_err(GENERAL_LOG,
+				    "Unexpected error while loading boot image. rc=%d\n",
+				    ret);
+	}
+}
+
 int nnpdrv_device_create(void                              *hw_handle,
 			 const struct nnp_hw_device_info   *hw_device_info,
 			 const struct nnpdrv_device_hw_ops *hw_ops,
@@ -171,11 +364,31 @@ int nnpdrv_device_create(void                              *hw_handle,
 
 	nnpdev->public_cmdq = nnpdrv_create_cmd_queue(nnpdev, 1);
 	if (!nnpdev->public_cmdq) {
-		nnp_log_err(START_UP_LOG, "failed to create public command q\n");
+		nnp_log_err(START_UP_LOG,
+			    "failed to create public command q\n");
+		goto err_exit;
+	}
+
+	nnpdev->wq = create_singlethread_workqueue("nnpdev_wq");
+	if (!nnpdev->wq) {
+		ret = -ENOMEM;
+		goto err_exit;
+	}
+
+	/* setup memory for bios system info */
+	nnpdev->bios_system_info = dma_alloc_coherent(
+					nnpdev->hw_device_info->hw_device,
+					NNP_PAGE_SIZE,
+					&nnpdev->bios_system_info_dma_addr,
+					GFP_KERNEL);
+	if (!nnpdev->bios_system_info) {
+		nnp_log_err(START_UP_LOG,
+			    "FATAL: failed to allocate system info buffer\n");
 		goto err_exit;
 	}
 
 	kref_init(&nnpdev->ref);
+	spin_lock_init(&nnpdev->lock);
 	*out_nnpdev = nnpdev;
 
 	nnp_log_debug(START_UP_LOG, "Created NNP-I device %u\n", nnpdev->id);
@@ -183,6 +396,13 @@ int nnpdrv_device_create(void                              *hw_handle,
 	return 0;
 
 err_exit:
+	if (nnpdev->bios_system_info)
+		dma_free_coherent(nnpdev->hw_device_info->hw_device,
+				  NNP_PAGE_SIZE,
+				  nnpdev->bios_system_info,
+				  nnpdev->bios_system_info_dma_addr);
+	if (nnpdev->wq)
+		destroy_workqueue(nnpdev->wq);
 	nnpdrv_destroy_cmd_queue(nnpdev, nnpdev->public_cmdq);
 	if (nnpdev->cmdq_sched)
 		msg_scheduler_destroy(nnpdev->cmdq_sched);
@@ -196,11 +416,68 @@ int nnpdrv_device_create(void                              *hw_handle,
 	return ret;
 }
 
+struct doorbell_work {
+	struct work_struct work;
+	struct nnp_device *nnpdev;
+	u32                val;
+};
+
+static void doorbell_changed_handler(struct work_struct *work)
+{
+	struct doorbell_work *req = container_of(work,
+						 struct doorbell_work,
+						 work);
+	u32 boot_state;
+	u32 error_state;
+	u32 doorbell_val = req->val;
+	struct nnp_device *nnpdev = req->nnpdev;
+
+	nnpdev->card_doorbell_val = doorbell_val;
+
+	error_state = (doorbell_val & NNP_CARD_ERROR_MASK) >>
+			NNP_CARD_ERROR_SHIFT;
+	boot_state = (doorbell_val & NNP_CARD_BOOT_STATE_MASK) >>
+			NNP_CARD_BOOT_STATE_SHIFT;
+
+	if (error_state) {
+		nnpdrv_device_set_boot_state(nnpdev, NNP_DEVICE_BOOT_FAILED);
+	} else if (boot_state != nnpdev->curr_boot_state) {
+		nnpdev->curr_boot_state = boot_state;
+		if (boot_state == NNP_CARD_BOOT_STATE_BIOS_READY) {
+			nnpdrv_device_set_boot_state(nnpdev,
+						   NNP_DEVICE_BOOT_BIOS_READY);
+		} else if (boot_state == NNP_CARD_BOOT_STATE_BIOS_READY_EMMC) {
+			nnpdrv_device_set_boot_state(nnpdev,
+					NNP_DEVICE_BOOT_BIOS_READY_EMMC);
+		} else if (boot_state ==
+			   NNP_CARD_BOOT_STATE_BIOS_SYSINFO_READY) {
+			nnpdrv_device_set_boot_state(nnpdev,
+						NNP_DEVICE_BOOT_SYSINFO_READY);
+		} else if (boot_state == NNP_CARD_BOOT_STATE_BOOT_STARTED) {
+			nnpdrv_device_set_boot_state(nnpdev,
+						     NNP_DEVICE_BOOT_STARTED);
+		}
+	}
+
+	kfree(req);
+}
+
 void nnpdrv_card_doorbell_value_changed(struct nnp_device *nnpdev,
 					u32                doorbell_val)
 {
+	struct doorbell_work *req;
+
 	nnp_log_debug(GENERAL_LOG,
 		      "Got card doorbell value 0x%x\n", doorbell_val);
+
+	req = kzalloc(sizeof(*req), GFP_NOWAIT);
+	if (!req)
+		return;
+
+	req->nnpdev = nnpdev;
+	req->val = doorbell_val;
+	INIT_WORK(&req->work, doorbell_changed_handler);
+	queue_work(nnpdev->wq, &req->work);
 }
 
 int nnpdrv_device_destroy(struct nnp_device *nnpdev)
@@ -238,6 +515,13 @@ static void nnpdrv_free_device(struct work_struct *work)
 
 	NNP_ASSERT(nnpdev->release_completion);
 
+	dma_free_coherent(nnpdev->hw_device_info->hw_device,
+			  NNP_PAGE_SIZE,
+			  nnpdev->bios_system_info,
+			  nnpdev->bios_system_info_dma_addr);
+
+	destroy_workqueue(nnpdev->wq);
+
 	if (nnpdrv_destroy_cmd_queue(nnpdev, nnpdev->public_cmdq))
 		nnp_log_err(GO_DOWN_LOG, "cmd queue destruction went wrong\n");
 
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 73a2681ee0aa..519b10b26c24 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -12,25 +12,71 @@
 #include <linux/kref.h>
 #include <linux/completion.h>
 #include <linux/idr.h>
+#include <linux/spinlock.h>
 #include "pcie.h"
 #include "msg_scheduler.h"
 
 #define NNP_MAX_DEVS		32
 #define DEVICE_NAME_LEN         32
+#define NNP_DEVICE_MAX_BOOT_IMAGE_PATH_SIZE 256
+
+#define NNP_FIRMWARE_NAME "intel/nnpi/disk.img"
+
+/* device state bits */
+#define NNP_DEVICE_BOOT_BIOS_READY        BIT(1)
+#define NNP_DEVICE_BOOT_BIOS_READY_EMMC   BIT(2)
+#define NNP_DEVICE_BOOT_SYSINFO_READY     BIT(3)
+#define NNP_DEVICE_BOOT_STARTED           BIT(4)
+#define NNP_DEVICE_BIOS_UPDATE_READY      BIT(5)
+#define NNP_DEVICE_BIOS_UPDATE_STARTED    BIT(6)
+#define NNP_DEVICE_BIOS_UPDATE_DONE       BIT(7)
+#define NNP_DEVICE_CARD_DRIVER_READY      BIT(8)
+#define NNP_DEVICE_CARD_READY             BIT(9)
+#define NNP_DEVICE_CARD_ENABLED           BIT(10)
+
+#define NNP_DEVICE_CARD_BOOT_STATE_MASK   GENMASK(9, 1)
+
+#define NNP_DEVICE_ACTIVE_MASK       (NNP_DEVICE_CARD_READY | \
+				      NNP_DEVICE_CARD_ENABLED)
+
+#define NNP_DEVICE_FAILED_VERSION    BIT(16)
+#define NNP_DEVICE_BOOT_FAILED       BIT(17)
+#define NNP_DEVICE_HOST_DRIVER_ERROR BIT(18)
+#define NNP_DEVICE_KERNEL_CRASH	     BIT(20)
+#define NNP_DEVICE_PCI_ERROR         BIT(21)
+#define NNP_DEVICE_CARD_IN_RESET     BIT(22)
+#define NNP_DEVICE_FATAL_MCE_ERROR   BIT(23)
+#define NNP_DEVICE_FATAL_DRAM_ECC_ERROR   BIT(24)
+#define NNP_DEVICE_FATAL_ICE_ERROR   BIT(25)
+#define NNP_DEVICE_HANG              BIT(26)
+#define NNP_DEVICE_PROTOCOL_ERROR    BIT(27)
+#define NNP_DEVICE_ERROR_MASK        GENMASK(31, 16)
 
 struct nnp_device {
 	struct kref    ref;
 	void          *hw_handle;
 	const struct nnp_hw_device_info   *hw_device_info;
 	const struct nnpdrv_device_hw_ops *hw_ops;
+	struct workqueue_struct *wq;
+	spinlock_t     lock; /* protects boot state and other fields */
 	struct completion *release_completion;
 	struct work_struct free_work;
 
 	struct msg_scheduler       *cmdq_sched;
 	struct msg_scheduler_queue *public_cmdq;
 
-	u32            id;
-	char           name[DEVICE_NAME_LEN];
+	u32          id;
+	char         name[DEVICE_NAME_LEN];
+	u32          boot_image_loaded;
+	char         reset_boot_image_path[NNP_DEVICE_MAX_BOOT_IMAGE_PATH_SIZE];
+
+	dma_addr_t                  bios_system_info_dma_addr;
+	struct nnp_c2h_system_info *bios_system_info;
+	bool                        bios_system_info_valid;
+
+	u32            state;
+	u32            curr_boot_state;
+	u32            card_doorbell_val;
 
 	struct dentry *debugfs_dir;
 };
diff --git a/drivers/misc/intel-nnpi/nnpdrv_main.c b/drivers/misc/intel-nnpi/nnpdrv_main.c
index 7810ba76bcfc..3d98a3f9ecc5 100644
--- a/drivers/misc/intel-nnpi/nnpdrv_main.c
+++ b/drivers/misc/intel-nnpi/nnpdrv_main.c
@@ -59,3 +59,4 @@ module_exit(nnpdrv_cleanup);
 MODULE_LICENSE("GPL v2");
 MODULE_DESCRIPTION("Intel(R) NNPI Host Driver");
 MODULE_AUTHOR("Intel Corporation");
+MODULE_FIRMWARE(NNP_FIRMWARE_NAME);
-- 
2.22.0

