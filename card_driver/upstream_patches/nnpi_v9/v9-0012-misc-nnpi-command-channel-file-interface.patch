From a46626dae63fb48ea40516b61ef23d29b41798d3 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 5 Oct 2020 12:05:31 +0300
Subject: [PATCH v9 12/22] misc: nnpi: command channel file interface

This adds an anon file descriptor interface to a command channel object
which allows user-space to send commands to the device by writing to that
file as well as consume device response messages by reading the file.
When the file is released (closed), a message is sent to the device to
destroy the command channel object, the command channel object remain
to exist and should be dropped only when the device response with
a "channel destroyed" message.
---
 drivers/misc/intel-nnpi/cmd_chan.c | 311 ++++++++++++++++++++++++++++++++++++-
 drivers/misc/intel-nnpi/cmd_chan.h |  13 +-
 drivers/misc/intel-nnpi/device.c   |  92 ++++++++++-
 3 files changed, 407 insertions(+), 9 deletions(-)

diff --git a/drivers/misc/intel-nnpi/cmd_chan.c b/drivers/misc/intel-nnpi/cmd_chan.c
index a7fdc97..09c3deb 100644
--- a/drivers/misc/intel-nnpi/cmd_chan.c
+++ b/drivers/misc/intel-nnpi/cmd_chan.c
@@ -13,17 +13,13 @@
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include "host_chardev.h"
+#include "ipc_c2h_events.h"
 #include "ipc_protocol.h"
 
 #define RESPQ_BUF_SIZE    2048   /* must be power of 2 */
 
 #define USER_MIN_OPCODE (NNP_IPC_C2H_OPCODE_LAST + 1)
 
-static inline int respq_free_bytes(struct nnpdrv_cmd_chan *chan)
-{
-	return CIRC_SPACE(chan->respq.head, chan->respq.tail, RESPQ_BUF_SIZE);
-}
-
 static inline void respq_push(struct nnpdrv_cmd_chan *chan, char *buf,
 			      int count)
 {
@@ -56,6 +52,217 @@ static inline void respq_pop(struct nnpdrv_cmd_chan *chan, char *buf, int count)
 }
 
 /**
+ * respq_is_msg_avail() - check if a response message is available to be popped
+ * @chan: the cmd_chan object
+ *
+ * Checks if new response message is available or channel has been destroyed.
+ *
+ * Return: true if either message is available or channel has destoyed.
+ */
+static inline bool respq_is_msg_avail(struct nnpdrv_cmd_chan *chan)
+{
+	bool ret;
+
+	spin_lock_bh(&chan->resp_lock_bh);
+	/*
+	 * response messages are pushed into the respq ring-buffer by pushing
+	 * the size of the message (as u32) followed by message content.
+	 * So an entire message is available only if more than sizeof(u32)
+	 * bytes are available (there is no message with zero size).
+	 */
+	ret = chan->destroyed ||
+	      (CIRC_CNT(chan->respq.head, chan->respq.tail, RESPQ_BUF_SIZE) >
+	       sizeof(u32));
+	spin_unlock_bh(&chan->resp_lock_bh);
+
+	return ret;
+}
+
+static inline int is_cmd_chan_file(struct file *f);
+
+static int cmd_chan_file_release(struct inode *inode, struct file *f)
+{
+	struct nnpdrv_cmd_chan *chan = f->private_data;
+	struct file *host_file;
+
+	if (!is_cmd_chan_file(f))
+		return -EINVAL;
+
+	nnpdrv_cmd_chan_send_destroy(chan);
+
+	host_file = chan->host_file;
+	nnpdrv_cmd_chan_put(chan);
+	fput(host_file);
+
+	return 0;
+}
+
+static inline int respq_free_bytes(struct nnpdrv_cmd_chan *chan)
+{
+	return CIRC_SPACE(chan->respq.head, chan->respq.tail, RESPQ_BUF_SIZE);
+}
+
+/**
+ * cmd_chan_file_read() - reads a single response message arrived from device
+ * @f: cmd_chan file descriptor
+ * @buf: buffer to receive the message
+ * @size: size of buf, must be at least 16 qwords (16 * sizeof(u64))
+ * @off: ignored.
+ *
+ * This function will block and wait until interrupted or a response
+ * message from device is available.
+ * When message(s) are available, it reads a single message, copy it to
+ * @buf and returns the message size.
+ * the givven @buf and @size must be large enough to receive the largest
+ * possible message which is 16 qwords, otherwise -EINVAL is returned.
+ *
+ * Return: if positive, the size in bytes of the read message,
+ *         error code otherwise
+ */
+static ssize_t cmd_chan_file_read(struct file *f, char __user *buf, size_t size,
+				  loff_t *off)
+{
+	struct nnpdrv_cmd_chan *chan = f->private_data;
+	u32 packet_size;
+	u64 msg[16];  /* maximum possible message in the response queue */
+	int ret;
+
+	if (!is_cmd_chan_file(f))
+		return -EINVAL;
+
+	if (size < sizeof(msg))
+		return -EINVAL;
+
+	/*
+	 * wait for response message to be available, interrupted or channel
+	 * has been destroyed on us.
+	 */
+	ret = wait_event_interruptible(chan->resp_waitq,
+				       respq_is_msg_avail(chan));
+	if (ret < 0)
+		return ret;
+
+	spin_lock_bh(&chan->resp_lock_bh);
+
+	if (chan->destroyed) {
+		spin_unlock_bh(&chan->resp_lock_bh);
+		return -EPIPE;
+	}
+
+	respq_pop(chan, (u8 *)&packet_size, sizeof(u32));
+	/* Check packet_size does not overrun msg size */
+	if (packet_size > sizeof(msg))
+		return -EINVAL;
+	respq_pop(chan, (u8 *)msg, packet_size);
+
+	spin_unlock_bh(&chan->resp_lock_bh);
+
+	ret = copy_to_user(buf, msg, packet_size);
+	if (ret)
+		return -EFAULT;
+
+	return (ssize_t)packet_size;
+}
+
+/**
+ * cmd_chan_file_write() - schedule a command message to be sent to the device.
+ * @f: a cmd_chan file descriptor
+ * @buf: the command message content
+ * @size: size in bytes of the message, must be multiple of 8 and not larger
+ *        than 3 qwords.
+ * @off: ignored
+ *
+ * This function reads a command message from buffer and puts it in the
+ * channel's message queue to schedule it to be delivered to the device.
+ * The function returns when the message is copied to the message scheduler
+ * queue without waiting for it to be sent out.
+ * A valid command message size must be qword aligned and not larger than
+ * the maximum size the message scheduler support, which is 3 qwords.
+ *
+ * The function also validate the command content and fail if the chan_id
+ * field of the command header does not belong to the same channel of this
+ * file descriptor, or the command opcode is out of range, or the command
+ * size does not fit the size of this opcode.
+ *
+ * Return: the size of the message written or error code.
+ */
+static ssize_t cmd_chan_file_write(struct file *f, const char __user *buf,
+				   size_t size, loff_t *off)
+{
+	struct nnpdrv_cmd_chan *chan = f->private_data;
+	u64 msg[MSG_SCHED_MAX_MSG_SIZE];
+	union h2c_chan_msg_header *hdr;
+	unsigned int op;
+	int ret;
+
+	if (!is_cmd_chan_file(f))
+		return -EINVAL;
+
+	/*
+	 * size must be multiple of 8 bytes and cannot exceed maximum message
+	 * size
+	 */
+	if ((size > MSG_SCHED_MAX_MSG_SIZE * 8) ||
+	    (size &  0x7) != 0)
+		return -EINVAL;
+
+	ret = copy_from_user(msg, buf, size);
+	if (ret != 0)
+		return -EFAULT;
+
+	/*
+	 * Check chan_id, opcode and message size are valid
+	 */
+	hdr = (union h2c_chan_msg_header *)&msg[0];
+	if (hdr->chan_id != chan->chan_id)
+		return -EINVAL;
+	if (hdr->opcode < USER_MIN_OPCODE)
+		return -EINVAL;
+	op = hdr->opcode - USER_MIN_OPCODE;
+	if (size != (chan->nnpdev->ipc_chan_cmd_op_size[op] * 8))
+		return -EINVAL;
+
+	if (!is_card_fatal_drv_event(chan_broken(chan)))
+		ret  = msg_sched_queue_add_msg(chan->cmdq, msg, size / 8);
+	else
+		ret = -EPIPE;
+
+	if (ret < 0)
+		return ret;
+	else
+		return size;
+}
+
+static unsigned int cmd_chan_file_poll(struct file *f,
+				       struct poll_table_struct *pt)
+{
+	struct nnpdrv_cmd_chan *chan = f->private_data;
+	unsigned int mask = (POLLOUT | POLLWRNORM);
+
+	if (!is_cmd_chan_file(f))
+		return 0;
+
+	poll_wait(f, &chan->resp_waitq, pt);
+	if (respq_is_msg_avail(chan))
+		mask |= (POLLIN | POLLRDNORM);
+
+	return mask;
+}
+
+static const struct file_operations nnpdrv_cmd_chan_fops = {
+	.owner = THIS_MODULE,
+	.release = cmd_chan_file_release,
+	.read = cmd_chan_file_read,
+	.write = cmd_chan_file_write,
+	.poll = cmd_chan_file_poll,
+};
+
+static inline int is_cmd_chan_file(struct file *f)
+{
+	return f->f_op == &nnpdrv_cmd_chan_fops;
+}
+
+/**
  * nnpdrv_cmd_chan_create() - creates a command channel object
  * @nnpdev: the device
  * @host_fd: opened file descriptor to "/dev/nnpi_host"
@@ -121,6 +328,7 @@ int nnpdrv_cmd_chan_create(struct nnp_device *nnpdev, int host_fd, u32 weight,
 	cmd_chan->chan_id = chan_id;
 	nnpdrv_device_get(nnpdev);
 	cmd_chan->nnpdev = nnpdev;
+	cmd_chan->fd = -1;
 	cmd_chan->get_device_events = get_device_events;
 
 	cmd_chan->nnp_user = cmd_chan->host_file->private_data;
@@ -180,6 +388,9 @@ static void nnpdrv_cmd_chan_release(struct kref *kref)
 	ida_simple_remove(&cmd_chan->nnpdev->cmd_chan_ida,
 			  cmd_chan->chan_id);
 
+	if (cmd_chan->fd < 0)
+		fput(cmd_chan->host_file);
+
 	nnp_user_put(cmd_chan->nnp_user);
 
 	kfree(cmd_chan->respq_buf);
@@ -201,6 +412,96 @@ int nnpdrv_cmd_chan_put(struct nnpdrv_cmd_chan *cmd_chan)
 	return kref_put(&cmd_chan->ref, nnpdrv_cmd_chan_release);
 }
 
+int nnpdrv_cmd_chan_create_file(struct nnpdrv_cmd_chan *cmd_chan)
+{
+	/* this should never fail, but if it does we need to fail */
+	if (!nnpdrv_cmd_chan_get(cmd_chan))
+		return -EFAULT;
+
+	cmd_chan->fd = anon_inode_getfd("nnpi_chan", &nnpdrv_cmd_chan_fops,
+					cmd_chan, O_RDWR | O_CLOEXEC);
+	if (cmd_chan->fd < 0)
+		nnpdrv_cmd_chan_put(cmd_chan);
+
+	return cmd_chan->fd;
+}
+
+/**
+ * nnpdrv_cmd_chan_set_destroyed() - atomically mark the channel "destroyed"
+ * @chan: the cmd_chan
+ *
+ * This function sets the command channel state to "destroyed" and returns
+ * the previous destroyed state.
+ * This function should be called once the channel has been destructed on the
+ * device and a "channel destroyed" response message arrived.
+ *
+ * Return: true if the channel was already marked destroyed.
+ */
+bool nnpdrv_cmd_chan_set_destroyed(struct nnpdrv_cmd_chan *chan)
+{
+	bool ret;
+
+	spin_lock(&chan->resp_lock_bh);
+	ret = chan->destroyed;
+	chan->destroyed = true;
+	spin_unlock(&chan->resp_lock_bh);
+
+	wake_up_all(&chan->resp_waitq);
+
+	return ret;
+}
+
+/**
+ * nnpdrv_cmd_chan_send_destroy() - sends a "destroy channel" command to device
+ * @chan: the cmd_chan to destroy.
+ *
+ * This function sends a command to the device to destroy a command channel,
+ * The channel object remains to exist, it will be dropped only when the device
+ * send back a "channel destroyed" response message, or when the device is in
+ * critical error where we treat it as "not function".
+ *
+ * Return: 0 on success, error value otherwise.
+ */
+int nnpdrv_cmd_chan_send_destroy(struct nnpdrv_cmd_chan *chan)
+{
+	union h2c_channel_op msg;
+	int ret = 0;
+	bool do_put = false;
+
+	spin_lock(&chan->resp_lock_bh);
+	if (chan->destroyed)
+		goto done;
+
+	msg.value = 0;
+	msg.opcode = NNP_IPC_H2C_OP_CHANNEL_OP;
+	msg.chan_id = chan->chan_id;
+	msg.destroy = 1;
+
+	chan->event_msg.value = 0;
+
+	/*
+	 * If card is in critical state (or was during the channel lifetime)
+	 * we destroy the channel.
+	 * otherwise, we send a destroy command to card and will destroy when
+	 * the destroy reply arrives.
+	 */
+	if (is_card_fatal_drv_event(chan_broken(chan))) {
+		chan->destroyed = true;
+		do_put = true;
+		goto done;
+	}
+
+	ret = nnpdrv_queue_msg(chan->nnpdev->public_cmdq, msg);
+
+done:
+	spin_unlock(&chan->resp_lock_bh);
+	if (do_put) {
+		wake_up_all(&chan->resp_waitq);
+		nnpdrv_cmd_chan_put(chan);
+	}
+	return ret;
+}
+
 /**
  * nnpdrv_cmd_chan_add_response() - adds a response message targeting this channel
  * @cmd_chan: the command channel object
diff --git a/drivers/misc/intel-nnpi/cmd_chan.h b/drivers/misc/intel-nnpi/cmd_chan.h
index 3ca1d45..e1f7b89 100644
--- a/drivers/misc/intel-nnpi/cmd_chan.h
+++ b/drivers/misc/intel-nnpi/cmd_chan.h
@@ -30,6 +30,7 @@
  * @card_critical_error: last critical event report received from device
  * @get_device_events: true if device-level events received from device should
  *                     be sent over this channel to user.
+ * @fd: file descriptor created for the channel (implements read/write)
  * @cmdq: message queue added to msg_scheduler, for user commands to be sent
  *        to the device.
  * @host_file: reference to opened "/dev/nnpi_host" object which defines the
@@ -37,7 +38,9 @@
  * @nnp_user: the nnp_user this channel belongs to.
  *             the channel can reference host resources created by this
  *             nnp_user object.
- * @resp_lock_bh: protects @respq
+ * @resp_lock_bh: protects accesses to @respq and @destroyed
+ * @destroyed: a state indicating that the channel should be not-yet-exist on
+ *             the device.
  * @resp_waitq: waitqueue used for waiting for response messages be available.
  * @respq: circular buffer object that receive response messages from device.
  * @respq_buf: buffer space allocated for circular response buffer.
@@ -51,13 +54,15 @@ struct nnpdrv_cmd_chan {
 	union c2h_event_report card_critical_error;
 	bool                   get_device_events;
 
+	int fd;
 	struct msg_sched_queue     *cmdq;
 	struct file                *host_file;
 	struct nnp_user_info       *nnp_user;
 
 	wait_queue_head_t resp_waitq;
+	bool              destroyed;
 
-	spinlock_t        resp_lock_bh; /* protects respq modifications */
+	spinlock_t        resp_lock_bh; /* protects @respq, @destroyed */
 	struct circ_buf   respq;
 	char             *respq_buf;
 };
@@ -72,6 +77,10 @@ int nnpdrv_cmd_chan_create(struct nnp_device *nnpdev, int host_fd, u32 weight,
 bool nnpdrv_cmd_chan_get(struct nnpdrv_cmd_chan *cmd_chan);
 int nnpdrv_cmd_chan_put(struct nnpdrv_cmd_chan *cmd_chan);
 
+int nnpdrv_cmd_chan_create_file(struct nnpdrv_cmd_chan *cmd_chan);
+int nnpdrv_cmd_chan_send_destroy(struct nnpdrv_cmd_chan *chan);
+bool nnpdrv_cmd_chan_set_destroyed(struct nnpdrv_cmd_chan *chan);
+
 int nnpdrv_cmd_chan_add_response(struct nnpdrv_cmd_chan *cmd_chan,
 				 u64 *hw_msg, u32 size);
 
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index b1c193a..4760715 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -230,6 +230,38 @@ struct nnpdrv_cmd_chan *nnpdrv_find_channel(struct nnp_device *nnpdev,
 	return NULL;
 }
 
+static struct nnpdrv_cmd_chan *undestroyed_channel(struct nnp_device *nnpdev)
+{
+	struct nnpdrv_cmd_chan *cmd_chan;
+	int i;
+
+	spin_lock(&nnpdev->lock);
+	hash_for_each(nnpdev->cmd_chan_hash, i, cmd_chan, hash_node) {
+		if (!nnpdrv_cmd_chan_set_destroyed(cmd_chan)) {
+			spin_unlock(&nnpdev->lock);
+			return cmd_chan;
+		}
+	}
+	spin_unlock(&nnpdev->lock);
+
+	return NULL;
+}
+
+static void nnpdrv_destroy_all_channels(struct nnp_device *nnpdev)
+{
+	struct nnpdrv_cmd_chan *cmd_chan;
+
+	/*
+	 * re-iterate on all channel hash until it does not include any
+	 * channel which does not yet marked destroyed.
+	 */
+	cmd_chan = undestroyed_channel(nnpdev);
+	while (cmd_chan) {
+		nnpdrv_cmd_chan_put(cmd_chan);
+		cmd_chan = undestroyed_channel(nnpdev);
+	}
+}
+
 void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
 					    union c2h_event_report *event_msg,
 					    bool force)
@@ -250,6 +282,44 @@ void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
 						     sizeof(*event_msg));
 	}
 	spin_unlock(&nnpdev->lock);
+
+	/*
+	 * On card fatal event, we consider the device dead and there is
+	 * no point communicating with it. The user will destroy the channel
+	 * and initiate a device reset to fix this.
+	 * We destroy all channels here since the NNP_IPC_CHANNEL_DESTROYED
+	 * response, which normally do that, will never arrive.
+	 */
+	if (is_card_fatal_drv_event(event_msg->event_code))
+		nnpdrv_destroy_all_channels(nnpdev);
+}
+
+static void handle_channel_destroy(struct nnp_device *nnpdev,
+				   union c2h_event_report *event_msg)
+{
+	struct nnpdrv_cmd_chan *cmd_chan;
+
+	cmd_chan = nnpdrv_find_channel(nnpdev, event_msg->obj_id);
+	if (!cmd_chan) {
+		dev_err(&nnpdev->nnp_pci->pdev->dev,
+			"Got channel destroyed reply for not existing channel %d\n",
+			event_msg->obj_id);
+		return;
+	}
+
+	/*
+	 * channel is destroyed on device, put the main ref of cmd_chan if it
+	 * did not already done.
+	 * This if will not be entered only in cases where we got some card
+	 * fatal event and flagged the channel as destroyed but the destroy
+	 * resonse still arrived, although we did not expect the device to be
+	 * responsive.
+	 */
+	if (!nnpdrv_cmd_chan_set_destroyed(cmd_chan))
+		nnpdrv_cmd_chan_put(cmd_chan);
+
+	/* put against the get from find_channel */
+	nnpdrv_cmd_chan_put(cmd_chan);
 }
 
 /*
@@ -259,9 +329,27 @@ void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
 static void nnpdrv_process_device_event(struct nnp_device *nnpdev,
 					union c2h_event_report *event_msg)
 {
-	bool force = is_card_fatal_event(event_msg->event_code);
+	if (is_card_fatal_event(event_msg->event_code)) {
+		nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, true);
+	} else {
+		switch (event_msg->event_code) {
+		case NNP_IPC_DESTROY_CHANNEL_FAILED:
+			dev_err(&nnpdev->nnp_pci->pdev->dev,
+				"Channel destroyed failed channel %d val %d\n",
+				event_msg->obj_id, event_msg->event_val);
+			fallthrough;
+		case NNP_IPC_CHANNEL_DESTROYED:
+			handle_channel_destroy(nnpdev, event_msg);
+			break;
+		default:
+			dev_err(&nnpdev->nnp_pci->pdev->dev,
+				"Unknown event received - %u\n",
+				event_msg->event_code);
+			return;
+		}
 
-	nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, force);
+		nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, false);
+	}
 }
 
 struct event_report_work {
-- 
1.8.3.1

