From 86b809d8d5e61309e50174d21bec21abf838f32c Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Wed, 1 Apr 2020 14:25:21 +0300
Subject: [PATCH v9 21/22] misc: nnpi: tracing

Added ftrace tracing on command queue insertion point  for
selected ipc commands and host resource lock/unlock events.

Added the following sysfs attributes under /sys/class/nnpi/nnpi%d/:

clock_stamp - WO attribute, send command to device to insert trace point
              and insert ftrace event as well.
ipc_event_h2c_en - RW attribute, write ipc opcode value to enable trace point
                   when command with that opcode is sent to device.
                   show lists all enabled opcodes.
ipc_event_h2c_dis - WO attribute, write ipc opcode value to disable trace point
                   when command with that opcode is sent to device.
ipc_event_c2h_en - RW attribute, write ipc opcode value to enable trace point
                   when response with that opcode is received from device.
                   show lists all enabled opcodes.
ipc_event_c2h_dis - WO attribute, write ipc opcode value to disable trace point
                   when response with that opcode is received from device.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
Reviewed-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
---
 Documentation/ABI/testing/sysfs-driver-intel_nnpi |  39 +++++
 drivers/misc/intel-nnpi/Makefile                  |   5 +-
 drivers/misc/intel-nnpi/device.c                  |  12 ++
 drivers/misc/intel-nnpi/device.h                  |   5 +
 drivers/misc/intel-nnpi/device_sysfs.c            | 187 ++++++++++++++++++++++
 drivers/misc/intel-nnpi/trace.c                   |   8 +
 drivers/misc/intel-nnpi/trace.h                   | 116 ++++++++++++++
 7 files changed, 370 insertions(+), 2 deletions(-)
 create mode 100644 drivers/misc/intel-nnpi/trace.c
 create mode 100644 drivers/misc/intel-nnpi/trace.h

diff --git a/Documentation/ABI/testing/sysfs-driver-intel_nnpi b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
index 826621b..8a649d3 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel_nnpi
+++ b/Documentation/ABI/testing/sysfs-driver-intel_nnpi
@@ -232,3 +232,42 @@ Date:           Sep 2020
 Kernelversion:  5.11
 Contact:        guy.zadicario@intel.com
 Description:    Counter of device correctable DRAM ECC error events reported by the device.
+
+What:           /sys/class/nnpi/nnpi<n>/clock_stamp
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Send a trace event to the device that will be visible
+                in the device trace log.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_h2c_en
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Enable tracing of commands send to device based on
+                command op-code. Writing command op-code will generate
+                ftrace event each time the command is sent to device.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_h2c_dis
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Disable tracing of commands send to device based on
+                command op-code. Writing command op-code will disable
+                ftrace event generation for this command op-code.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_c2h_en
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Enable tracing of responses received from device based on
+                response code. Writing response code will generate
+                ftrace event each time such response received from device.
+
+What:           /sys/class/nnpi/nnpi<n>/ipc_event_c2h_dis
+Date:           Sep 2020
+Kernelversion:  5.11
+Contact:        guy.zadicario@intel.com
+Description:    Disable tracing of responses received from device based on
+                response code. Writing response code will disable
+                ftrace event generation when such response is received.
diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index e4c1db3..2a02285 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -8,6 +8,7 @@ obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o pcie.o device.o msg_scheduler.o \
 		   hostres.o host_chardev.o nnp_user.o bootimage.o \
-                   device_chardev.o cmd_chan.o device_sysfs.o device_debugfs.o
+                   device_chardev.o cmd_chan.o device_sysfs.o device_debugfs.o \
+                   trace.o
 
-ccflags-y += -I$(srctree)/$(src)/ipc_include
+ccflags-y += -I$(srctree)/$(src)/ipc_include -I$(srctree)/$(src)
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 03a180e..803abbb 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -27,6 +27,7 @@
 #include "ipc_c2h_events.h"
 #include "nnp_boot_defs.h"
 #include "pcie.h"
+#include "trace.h"
 
 static unsigned int num_devices;
 static DEFINE_MUTEX(device_num_mutex);
@@ -891,6 +892,10 @@ void nnpdrv_device_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
 			partial_msg = true;
 		} else {
 			msg_size = (*handler)(nnpdev, &msg[j], (nof_msg - j));
+			if (nnpdev->ipc_c2h_en[op_code] && msg_size) {
+				trace_nnpi_host_ipc(1, &msg[j], msg_size,
+						    nnpdev->id);
+			}
 			partial_msg = (msg_size == 0);
 		}
 
@@ -928,8 +933,12 @@ void nnpdrv_device_process_messages(struct nnp_device *nnpdev, u64 *hw_msg,
 
 int nnpdrv_send_command(struct nnp_device *nnpdev, u64 *msg, int size)
 {
+	int op_code = ((union h2c_chan_msg_header *)msg)->opcode;
 	int ret;
 
+	if (nnpdev->ipc_h2c_en[op_code])
+		trace_nnpi_host_ipc(0, msg, size, nnpdev->id);
+
 	ret = nnp_cmdq_write_mesg(nnpdev->nnp_pci, msg, size, NULL);
 
 	return ret;
@@ -1267,6 +1276,9 @@ struct nnp_device *nnpdrv_device_create(struct nnp_pci_device *nnp_pci)
 			"Doorbel call to set driver state ready failure rc=%d\n",
 			ret);
 
+	memset(nnpdev->ipc_h2c_en, 0, sizeof(nnpdev->ipc_h2c_en));
+	memset(nnpdev->ipc_c2h_en, 0, sizeof(nnpdev->ipc_c2h_en));
+
 	kref_init(&nnpdev->ref);
 	spin_lock_init(&nnpdev->lock);
 	/* set boot image path to be the default */
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index 667aa91..696f07e 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -208,6 +208,8 @@ struct nnp_device_counters {
  *                                    uevent informing on uncorr dram ecc error
  * @uncorrectable_dram_ecc_counter: uncorrectable dram ecc error counter
  * @debugfs_dir: dir entry for device's root debugfs dir
+ * @ipc_h2c_en: per-host-to-card command opcode ipc trace enable flag
+ * @ipc_c2h_en: per-card-to-host response opcode ipc trace enable flag
  */
 struct nnp_device {
 	struct kref            ref;
@@ -276,6 +278,9 @@ struct nnp_device {
 	unsigned long  uncorrectable_dram_ecc_counter;
 
 	struct dentry *debugfs_dir;
+
+	bool ipc_h2c_en[IPC_OP_MAX];
+	bool ipc_c2h_en[IPC_OP_MAX];
 };
 
 void nnpdrv_device_module_init(void);
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index 2027cf6..9157656 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -15,9 +15,14 @@
 #include <linux/kobject.h>
 #include <linux/slab.h>
 #include <linux/sysfs.h>
+#include <linux/trace_clock.h>
 #include "cmd_chan.h"
 #include "ipc_c2h_events.h"
 #include "nnp_inbound_mem.h"
+#include "trace.h"
+
+#define CLOCK_TYPE_STR_MAX_SIZE 7
+#define CLOCK_VALUE_STR_MAX_SIZE 32
 
 static ssize_t enable_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
@@ -113,6 +118,76 @@ static ssize_t boot_image_store(struct device *dev,
 }
 static DEVICE_ATTR_RW(boot_image);
 
+#ifdef CONFIG_TRACING
+static ssize_t clock_stamp_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t count)
+{
+	struct nnp_device *nnpdev;
+	union clock_stamp_msg clock_msg;
+	char clock_type_host[CLOCK_TYPE_STR_MAX_SIZE + 1];
+	int i;
+
+	if (count <= 1 ||
+	    (count > (CLOCK_VALUE_STR_MAX_SIZE + CLOCK_TYPE_STR_MAX_SIZE))) {
+		dev_err(dev,
+			"Invalid Input. Input should be: <type_str,clock> or <type_str>. size: %zu\n",
+			count);
+		return -EINVAL;
+	}
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	clock_msg.value[0] = 0;
+	clock_msg.value[1] = 0;
+	memset(clock_type_host, '\0', CLOCK_TYPE_STR_MAX_SIZE + 1);
+	clock_msg.opcode = NNP_IPC_H2C_OP_CLOCK_STAMP;
+
+	/*
+	 * user's input can be one of these options:
+	 * 1. <type_str,clock_value_decimal>
+	 * 2. <type_str>
+	 */
+	for (i = 0; i < count; i++) {
+		if (buf[i] == ',' || buf[i] == '\n') {
+			break;
+		} else if (i >= CLOCK_TYPE_STR_MAX_SIZE) {
+			dev_err(dev,
+				"Invalid clock. Input should be: <type_str,clock> or <type_str>. size: %zu\n",
+				count);
+			return -EINVAL;
+		}
+
+		clock_msg.i_type[i] = buf[i];
+		clock_type_host[i] = buf[i];
+	}
+
+	if (buf[i] != ',') {
+		/* ',' was not found */
+		clock_msg.i_clock = trace_clock_local();
+	} else {
+		/* both type_str and clock were found */
+		if (kstrtoull(&buf[i + 1], 0, &clock_msg.i_clock) < 0) {
+			dev_err(dev,
+				"Invalid clock. Input should be: <type_str,clock> or <type_str>. size: %zu\n",
+				count);
+			return -EINVAL;
+		}
+	}
+
+	nnp_cmdq_write_mesg(nnpdev->nnp_pci, &clock_msg.value[0],
+			    sizeof(clock_msg) / sizeof(u64), NULL);
+
+	trace_nnpi_host_clock_stamp(clock_type_host, clock_msg.i_clock,
+				    nnpdev->id);
+
+	return count;
+}
+static DEVICE_ATTR_WO(clock_stamp);
+#endif
+
 void nnpdrv_device_sysfs_get_state_strings(struct nnp_device *nnpdev,
 					   const char **state,
 					   const char **boot_state,
@@ -645,6 +720,96 @@ static ssize_t crashlog_size_show(struct device *dev,
 }
 static DEVICE_ATTR_RO(crashlog_size);
 
+static int ipc_event_set(struct device *dev, const char *buf, size_t count,
+			 bool is_cmd, bool enable)
+{
+	unsigned long index;
+	struct nnp_device *nnpdev;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (kstrtoul(buf, 0, &index) < 0)
+		return -EINVAL;
+
+	if (index >= IPC_OP_MAX)
+		return -EINVAL;
+
+	if (is_cmd)
+		nnpdev->ipc_h2c_en[index] = enable;
+	else
+		nnpdev->ipc_c2h_en[index] = enable;
+
+	return count;
+}
+
+static int ipc_event_get(struct device *dev, char *buf, bool is_cmd)
+{
+	bool *arr;
+	struct nnp_device *nnpdev;
+	int ret = 0, i = 0;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (is_cmd)
+		arr = nnpdev->ipc_h2c_en;
+	else
+		arr = nnpdev->ipc_c2h_en;
+
+	for (i = 0 ; i < IPC_OP_MAX ; i++)
+		if (arr[i])
+			ret += snprintf(buf + ret, PAGE_SIZE, "%d\n", i);
+
+	return ret;
+}
+
+static ssize_t ipc_event_h2c_en_store(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, true, true);
+}
+
+static ssize_t ipc_event_h2c_en_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	return ipc_event_get(dev, buf, true);
+}
+static DEVICE_ATTR_RW(ipc_event_h2c_en);
+
+static ssize_t ipc_event_h2c_dis_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, true, false);
+}
+static DEVICE_ATTR_WO(ipc_event_h2c_dis);
+
+static ssize_t ipc_event_c2h_en_store(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, false, true);
+}
+
+static ssize_t ipc_event_c2h_en_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	return ipc_event_get(dev, buf, false);
+}
+static DEVICE_ATTR_RW(ipc_event_c2h_en);
+
+static ssize_t ipc_event_c2h_dis_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	return ipc_event_set(dev, buf, count, false, false);
+}
+static DEVICE_ATTR_WO(ipc_event_c2h_dis);
+
 static ssize_t os_crashed_show(struct device *dev,
 			       struct device_attribute *attr, char *buf)
 {
@@ -792,6 +957,9 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 static struct attribute *nnp_dev_attrs[] = {
 	&dev_attr_enable.attr,
 	&dev_attr_boot_image.attr,
+#ifdef CONFIG_TRACING
+	&dev_attr_clock_stamp.attr,
+#endif
 	&dev_attr_total_unprotected_mem.attr,
 	&dev_attr_total_protected_mem.attr,
 	&dev_attr_protocol_version.attr,
@@ -824,6 +992,10 @@ static ssize_t dram_ecc_correctable_show(struct device *dev,
 	&dev_attr_dma_hang_fatal.attr,
 	&dev_attr_ecc_correctable.attr,
 	&dev_attr_dram_ecc_correctable.attr,
+	&dev_attr_ipc_event_h2c_en.attr,
+	&dev_attr_ipc_event_h2c_dis.attr,
+	&dev_attr_ipc_event_c2h_en.attr,
+	&dev_attr_ipc_event_c2h_dis.attr,
 	NULL
 };
 
@@ -871,6 +1043,21 @@ int nnpdrv_device_sysfs_init(struct nnp_device *nnpdev)
 	/* set crashlog attributes be accessible by root only */
 	ret = sysfs_chmod_file(&nnpdev->dev->kobj,
 			       &dev_attr_crashlog_size.attr, 0400);
+
+	/* set ipc event permissions to 0666 */
+	ret |= sysfs_chmod_file(&nnpdev->dev->kobj,
+				&dev_attr_ipc_event_h2c_en.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->dev->kobj,
+				&dev_attr_ipc_event_h2c_dis.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->dev->kobj,
+				&dev_attr_ipc_event_c2h_en.attr, 0666);
+	ret |= sysfs_chmod_file(&nnpdev->dev->kobj,
+				&dev_attr_ipc_event_c2h_dis.attr, 0666);
+#ifdef CONFIG_TRACING
+	ret |= sysfs_chmod_file(&nnpdev->dev->kobj,
+				&dev_attr_clock_stamp.attr, 0666);
+#endif
+
 	if (ret)
 		return ret;
 
diff --git a/drivers/misc/intel-nnpi/trace.c b/drivers/misc/intel-nnpi/trace.c
new file mode 100644
index 0000000..70b1174
--- /dev/null
+++ b/drivers/misc/intel-nnpi/trace.c
@@ -0,0 +1,8 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/*
+ * Copyright (C) 2019-2020 Intel Corporation
+ */
+
+#define CREATE_TRACE_POINTS
+#include "trace.h"
diff --git a/drivers/misc/intel-nnpi/trace.h b/drivers/misc/intel-nnpi/trace.h
new file mode 100644
index 0000000..f7c6840
--- /dev/null
+++ b/drivers/misc/intel-nnpi/trace.h
@@ -0,0 +1,116 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * Copyright (C) 2019-2020 Intel Corporation
+ */
+#undef TRACE_SYSTEM
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE trace
+#define TRACE_SYSTEM nnpdrv
+
+#if !defined(_NNPDRV_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _NNPDRV_TRACE_H
+
+#include <linux/tracepoint.h>
+#include "device.h"
+#include "ipc_protocol.h"
+
+#define NNP_TP_STRUCT__entry TP_STRUCT__entry
+#define NNP_TP_fast_assign   TP_fast_assign
+#define NNP_TP_printk        TP_printk
+
+/* Define functions to convert protocol opcode codes to names */
+#ifndef TRACE_HEADER_MULTI_READ
+static inline const char *H2C_HWQ_MSG_STR(u8 x)
+{
+	switch (x) {
+	case H2C_OPCODE_NAME(QUERY_VERSION):
+		return H2C_OPCODE_NAME_STR(QUERY_VERSION);
+	case H2C_OPCODE_NAME(CLOCK_STAMP):
+		return H2C_OPCODE_NAME_STR(CLOCK_STAMP);
+	case H2C_OPCODE_NAME(SETUP_CRASH_DUMP):
+		return H2C_OPCODE_NAME_STR(SETUP_CRASH_DUMP);
+	case H2C_OPCODE_NAME(SETUP_SYS_INFO_PAGE):
+		return H2C_OPCODE_NAME_STR(SETUP_SYS_INFO_PAGE);
+	case H2C_OPCODE_NAME(CHANNEL_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_OP);
+	case H2C_OPCODE_NAME(CHANNEL_RB_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_RB_OP);
+	case H2C_OPCODE_NAME(CHANNEL_HOSTRES_OP):
+		return H2C_OPCODE_NAME_STR(CHANNEL_HOSTRES_OP);
+	case H2C_OPCODE_NAME(BIOS_PROTOCOL):
+		return H2C_OPCODE_NAME_STR(BIOS_PROTOCOL);
+	default:
+		return "not found";
+	}
+}
+
+static inline const char *C2H_HWQ_MSG_STR(u8 x)
+{
+	switch (x) {
+	case C2H_OPCODE_NAME(EVENT_REPORT):
+		return C2H_OPCODE_NAME_STR(EVENT_REPORT);
+	case C2H_OPCODE_NAME(QUERY_VERSION_REPLY):
+		return C2H_OPCODE_NAME_STR(QUERY_VERSION_REPLY);
+	case C2H_OPCODE_NAME(QUERY_VERSION_REPLY2):
+		return C2H_OPCODE_NAME_STR(QUERY_VERSION_REPLY2);
+	case C2H_OPCODE_NAME(SYS_INFO):
+		return C2H_OPCODE_NAME_STR(SYS_INFO);
+	case C2H_OPCODE_NAME(BIOS_PROTOCOL):
+		return C2H_OPCODE_NAME_STR(BIOS_PROTOCOL);
+	default:
+		return "not found";
+	}
+}
+#endif
+
+TRACE_EVENT(nnpi_host_ipc,
+	    TP_PROTO(u8 dir, u64 *msg, u32 size, u8 card_id),
+	    TP_ARGS(dir, msg, size, card_id),
+	    NNP_TP_STRUCT__entry(__field(u64, msg[4])
+				 __field(u32, size)
+				 __field(u8, dir)
+				 __field(u8, card_id)),
+	    NNP_TP_fast_assign(__entry->msg[0] = msg[0];
+			       __entry->msg[1] = (size > 1 ? msg[1] : 0);
+			       __entry->msg[2] = (size > 2 ? msg[2] : 0);
+			       __entry->msg[3] = (size > 3 ? msg[3] : 0);
+			       __entry->size = size;
+			       __entry->card_id = card_id;
+			       __entry->dir = dir),
+	    NNP_TP_printk("card_id=%u dir=%s op=%s size=%u payload=0x%llx,0x%llx,0x%llx,0x%llx",
+			  __entry->card_id,
+			  __entry->dir == 0 ? "command" : "response",
+			  __entry->dir == 0 ?
+			  H2C_HWQ_MSG_STR(__entry->msg[0] & NNP_IPC_OPCODE_MASK) :
+			  C2H_HWQ_MSG_STR(__entry->msg[0] & NNP_IPC_OPCODE_MASK),
+			  __entry->size, __entry->msg[0], __entry->msg[1],
+			  __entry->msg[2], __entry->msg[3])
+);
+
+TRACE_EVENT(nnpi_host_clock_stamp,
+	    TP_PROTO(char *type, u64 clock, u8 card_id),
+	    TP_ARGS(type, clock, card_id),
+	    NNP_TP_STRUCT__entry(__field(char, type[8])
+				 __field(u64, clock)
+				 __field(u8, card_id)),
+	    NNP_TP_fast_assign(__entry->type[0] = type[0];
+			       __entry->type[1] = type[1];
+			       __entry->type[2] = type[2];
+			       __entry->type[3] = type[3];
+			       __entry->type[4] = type[4];
+			       __entry->type[5] = type[5];
+			       __entry->type[6] = type[6];
+			       __entry->type[7] = type[7];
+			       __entry->clock = clock;
+			       __entry->card_id = card_id;),
+	NNP_TP_printk("card_id=%u type=%s clock=%llu",
+		      __entry->card_id,
+		      __entry->type,
+		      __entry->clock)
+);
+
+#endif /* if !defined(_TRACE_SYNC_H) || defined(TRACE_HEADER_MULTI_READ) */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
-- 
1.8.3.1

