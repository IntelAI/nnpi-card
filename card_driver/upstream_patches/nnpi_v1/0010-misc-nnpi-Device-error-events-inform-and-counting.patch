From f11e434b1664dabcd7543c3552dcf1326c146528 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Wed, 1 Apr 2020 09:04:22 +0300
Subject: [PATCH 10/19] misc: nnpi: Device error events inform and counting

Handles error events reported by the device. Added counters
to count those events.

Also informs the event by sending a uevent on the device (/dev/nnpi%d)
with information of the event. Some events can have threshold setting to
control how often to inform the event.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/device.c | 190 +++++++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/device.h |  27 +++++
 2 files changed, 217 insertions(+)

diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 43452ff65981..3b15d6fd3f7d 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -304,6 +304,100 @@ static void nnpdrv_destroy_all_channels(struct nnp_device *nnpdev)
 	spin_unlock(&nnpdev->lock);
 }
 
+static void nnpdrv_device_inform_event(struct nnp_device     *nnpdev,
+				       union c2h_EventReport *event)
+{
+	char *event_env[10];
+	int num_env = 0;
+	int i;
+
+	/*
+	 * if event has threshold update event counter and return
+	 * without generating event if threshold have not riched
+	 */
+	spin_lock(&nnpdev->lock);
+	if (event->eventCode == NNP_IPC_ERROR_MCE_CORRECTABLE) {
+		nnpdev->correctable_ecc_counter++;
+		if (nnpdev->correctable_ecc_counter < nnpdev->correctable_ecc_threshold) {
+			spin_unlock(&nnpdev->lock);
+			return;
+		}
+		nnpdev->correctable_ecc_counter = 0;
+	} else if (event->eventCode == NNP_IPC_ERROR_MCE_UNCORRECTABLE &&
+		   event->eventVal != 0) {
+		nnpdev->uncorrectable_ecc_counter++;
+		if (nnpdev->uncorrectable_ecc_counter < nnpdev->uncorrectable_ecc_threshold) {
+			spin_unlock(&nnpdev->lock);
+			return;
+		}
+		nnpdev->uncorrectable_ecc_counter = 0;
+	} else if (event->eventCode == NNP_IPC_ERROR_DRAM_ECC_CORRECTABLE) {
+		nnpdev->correctable_dram_ecc_counter++;
+		if (nnpdev->correctable_dram_ecc_counter < nnpdev->correctable_dram_ecc_threshold) {
+			spin_unlock(&nnpdev->lock);
+			return;
+		}
+		nnpdev->correctable_dram_ecc_counter = 0;
+	} else if (event->eventCode == NNP_IPC_CTX_DRAM_ECC_UNCORRECTABLE) {
+		nnpdev->uncorrectable_dram_ecc_counter++;
+		if (nnpdev->uncorrectable_dram_ecc_counter < nnpdev->uncorrectable_dram_ecc_threshold) {
+			spin_unlock(&nnpdev->lock);
+			return;
+		}
+		nnpdev->uncorrectable_dram_ecc_counter = 0;
+	}
+	spin_unlock(&nnpdev->lock);
+
+	if (event->eventCode == NNP_IPC_ERROR_OS_CRASHED) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=crash");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=fatal");
+	} else if (event->eventCode == NNP_IPC_ERROR_PCI_ERROR ||
+		   event->eventCode == NNP_IPC_ERROR_PROTOCOL_ERROR) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=pci_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=fatal");
+	} else if (event->eventCode == NNP_IPC_ERROR_MCE_CORRECTABLE) {
+		if (event->eventVal != 0)
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=ecc_error");
+		else
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=mce_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=correctable");
+	} else if (event->eventCode == NNP_IPC_ERROR_MCE_UNCORRECTABLE) {
+		if (event->eventVal != 0)
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=ecc_error");
+		else
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=mce_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=uncorrectable");
+	} else if (event->eventCode == NNP_IPC_ERROR_MCE_UNCORRECTABLE_FATAL) {
+		if (event->eventVal != 0)
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=ecc_error");
+		else
+			event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=mce_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=fatal");
+	} else if (event->eventCode == NNP_IPC_THERMAL_TRIP_EVENT) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=thermal");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=no_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_THERMAL_TRIP=%d", event->eventVal);
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_THERMAL_TRIP_DIR=%s",
+						 (event->objID_2 >= event->objID ? "up" : "down"));
+	} else if (event->eventCode == NNP_IPC_ERROR_DRAM_ECC_CORRECTABLE) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=dram_ecc_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=correctable");
+	} else if (event->eventCode == NNP_IPC_CTX_DRAM_ECC_UNCORRECTABLE) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=dram_ecc_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=uncorrectable");
+	} else if (event->eventCode == NNP_IPC_ERROR_DRAM_ECC_UNCORRECTABLE_FATAL) {
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_EVENT=dram_ecc_error");
+		event_env[num_env++] = kasprintf(GFP_KERNEL, "NNPI_ERROR_CLASS=fatal");
+	}
+
+	if (num_env > 0) {
+		event_env[num_env] = NULL;
+		kobject_uevent_env(&nnpdev->cdev->kobj, KOBJ_CHANGE, event_env);
+		for (i = 0; i < num_env; ++i)
+			kfree(event_env[i]);
+	}
+}
+
 void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
 					    union c2h_EventReport *event_msg,
 					    bool                   force)
@@ -341,9 +435,68 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 	struct chan_hostres_map *hostres_map;
 
 	if (is_card_fatal_event(event_msg->eventCode)) {
+		/* Handle device critical error */
+		spin_lock(&nnpdev->lock);
+		switch (event_msg->eventCode) {
+		case NNP_IPC_ERROR_OS_CRASHED:
+			nnpdev->state |= NNP_DEVICE_KERNEL_CRASH;
+			nnpdev->host_crash_dump.dump_size =
+				((uint32_t)event_msg->objID_2 << 16) |
+				(uint32_t)event_msg->objID;
+			nnpdev->counters.uncorr.os_crashed++;
+			break;
+		case NNP_IPC_ERROR_PROTOCOL_ERROR:
+			nnpdev->state |= NNP_DEVICE_PROTOCOL_ERROR;
+			break;
+		case NNP_IPC_ERROR_MCE_UNCORRECTABLE_FATAL:
+			nnpdev->state |= NNP_DEVICE_FATAL_MCE_ERROR;
+			nnpdev->counters.uncorr.os_crashed++;
+			if (event_msg->eventVal == 1)
+				nnpdev->counters.uncorr.ecc_fatal++;
+			else
+				nnpdev->counters.uncorr.mce_fatal++;
+			break;
+		case NNP_IPC_ERROR_DRAM_ECC_UNCORRECTABLE_FATAL:
+			nnpdev->state |= NNP_DEVICE_FATAL_DRAM_ECC_ERROR;
+			nnpdev->counters.uncorr.dram_ecc_fatal++;
+			break;
+		case NNP_IPC_ERROR_FATAL_ICE_ERROR:
+			nnpdev->state |= NNP_DEVICE_FATAL_ICE_ERROR;
+			break;
+		case NNP_IPC_ERROR_CARD_RESET:
+			if (nnpdev->state & NNP_DEVICE_HANG)
+				nnp_log_info(GENERAL_LOG, "Device#%d hang detected - reset is needed\n", nnpdev->id);
+			else
+				nnp_log_info(GENERAL_LOG, "ERROR_CARD_RESET event received for device#%d\n", nnpdev->id);
+			break;
+		default:
+			nnp_log_err(GENERAL_LOG, "Unknown event received - %u\n", event_msg->eventCode);
+		}
+		spin_unlock(&nnpdev->lock);
+
 		nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, true);
 	} else {
 		switch (event_msg->eventCode) {
+		case NNP_IPC_ERROR_MCE_CORRECTABLE:
+			nnpdev->counters.corr.ecc++;
+			break;
+		case NNP_IPC_ERROR_DRAM_ECC_CORRECTABLE:
+			nnpdev->counters.corr.dram_ecc++;
+			break;
+		case NNP_IPC_ERROR_MCE_UNCORRECTABLE:
+			nnp_log_debug(GENERAL_LOG, "ECC error received code - %u\n", event_msg->eventCode);
+			if (event_msg->eventVal == 1)
+				nnpdev->counters.uncorr.ecc_nonfatal++;
+			else
+				nnpdev->counters.uncorr.mce_nonfatal++;
+			break;
+		case NNP_IPC_CTX_DRAM_ECC_UNCORRECTABLE:
+			nnpdev->counters.uncorr.dram_ecc_nonfatal++;
+			break;
+		case NNP_IPC_THERMAL_TRIP_EVENT:
+			nnp_log_debug(GENERAL_LOG, "Thermal trip event num=%d temp=%u\n",
+				      event_msg->eventVal, event_msg->objID_2);
+			break;
 		case NNP_IPC_CREATE_CHANNEL_SUCCESS:
 		case NNP_IPC_CREATE_CHANNEL_FAILED:
 		case NNP_IPC_CHANNEL_SET_RB_SUCCESS:
@@ -423,6 +576,32 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 
 		nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, false);
 	}
+
+	/*
+	 * ECC errors may be context specific - call to notify channel
+	 */
+	if (event_msg->objValid &&
+	    event_msg->eventCode == NNP_IPC_CTX_DRAM_ECC_UNCORRECTABLE) {
+		union c2h_EventReport ev;
+		struct nnpdrv_cmd_chan *cmd_chan;
+
+		ev.value = event_msg->value;
+		ev.contextID = event_msg->objID;
+		ev.ctxValid = 1;
+
+		cmd_chan = nnpdrv_device_find_channel(nnpdev, ev.contextID);
+		if (cmd_chan != NULL) {
+			nnpdrv_cmd_chan_add_response(cmd_chan, (u64 *)&ev, sizeof(ev));
+			nnpdrv_cmd_chan_put(cmd_chan);
+		} else {
+			nnp_log_err(GENERAL_LOG,
+				    "Got context severity DRAM ECC error for non existing context id %d!!\n",
+				    ev.contextID);
+		}
+	}
+
+	/* inform device event */
+	nnpdrv_device_inform_event(nnpdev, event_msg);
 }
 
 struct event_report_work {
@@ -650,6 +829,17 @@ int nnpdrv_device_process_messages(struct nnp_device *nnpdev,
 		j += msg_size;
 	} while (j < nof_msg);
 
+	if (fatal_protocol_error) {
+		union c2h_EventReport event;
+
+		event.value = 0;
+		event.opcode = NNP_IPC_C2H_OP_EVENT_REPORT;
+		event.eventCode = NNP_IPC_ERROR_PROTOCOL_ERROR;
+
+		nnpdev->state |= NNP_DEVICE_PROTOCOL_ERROR;
+		IPC_OPCODE_HANDLER(EVENT_REPORT)(nnpdev, &event);
+	}
+
 	/*
 	 * if unprocessed messages left, copy it to the pending messages buffer
 	 * for the next time
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index e2060832484f..15b52be4e9e3 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -60,6 +60,23 @@ struct host_crash_dump {
 	uint32_t dump_size;
 };
 
+struct nnp_device_counters {
+	struct {
+		u64 os_crashed;  /* Number of times device needed to be reset due to device fatal error */
+		u64 ecc_nonfatal;  /* Number of times a non-fatal uncorrectable ECC error happened on device */
+		u64 ecc_fatal; /* Number of times a fatal, uncorrectable ECC error happened on device */
+		u64 dram_ecc_nonfatal;  /* Number of times a non-fatal uncorrectable ECC error happened on device DRAM */
+		u64 dram_ecc_fatal; /* Number of times a fatal, uncorrectable ECC error happened on device DRAM */
+		u64 mce_nonfatal;  /* Number of times a non-fatal uncorrectable MCE error happened on device */
+		u64 mce_fatal; /* Number of times a fatal, uncorrectable MCE error happened on device */
+	} uncorr;
+
+	struct {
+		u64 ecc; /* Number of times a correctable ECC error happened on device */
+		u64 dram_ecc; /* Number of times a correctable ECC error happened on device DRAM */
+	} corr;
+};
+
 struct nnp_device {
 	struct kref    ref;
 	void          *hw_handle;
@@ -103,10 +120,20 @@ struct nnp_device {
 	u32            num_active_contexts;
 	u32            card_doorbell_val;
 
+	uint32_t correctable_ecc_threshold;
+	uint32_t correctable_ecc_counter;
+	uint32_t uncorrectable_ecc_threshold;
+	uint32_t uncorrectable_ecc_counter;
+	uint32_t correctable_dram_ecc_threshold;
+	uint32_t correctable_dram_ecc_counter;
+	uint32_t uncorrectable_dram_ecc_threshold;
+	uint32_t uncorrectable_dram_ecc_counter;
+
 	struct dentry *debugfs_dir;
 
 	u8   ipc_chan_resp_op_size[32];
 	u8   ipc_chan_cmd_op_size[32];
+	struct nnp_device_counters counters;
 };
 
 int nnpdrv_device_create(void                              *hw_handle,
-- 
2.22.0

