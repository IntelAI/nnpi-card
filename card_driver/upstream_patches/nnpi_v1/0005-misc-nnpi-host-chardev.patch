From 6245b847257de253e415c2dba7a4b6cfa3478812 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Mon, 30 Mar 2020 13:47:25 +0300
Subject: [PATCH 05/19] misc: nnpi: host chardev

This adds a character device (/dev/nnpi_host) which provides
IOCTL interface to create/destroy and mmap host resources.

The char device is created on the first NNP-I device creation and
is destroyed when the last device is removed. So that char device will
not exist on systems without any NNP-I PCIe card installed.

The list of host resources allocated is stored in the "inf_proc" object,
an inference application suppose to open single instance to the nnpi_host
char device. Resources created on a single client cannot be shared with other
clients but they can map to user-space as well as one or more NNP-I devices.

All resources will be destroyed when the application closes the connection or
exits.

The total memory occupied by host resources in the system can be viewed by the
following read-only sysfs entry:

     /sys/class/nnpi_host/nnpi_host/total_hostres_size

The IOCTL interface is defined in: include/uapi/misc/intel_nnpi.h

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 MAINTAINERS                             |   1 +
 drivers/misc/intel-nnpi/Makefile        |   2 +-
 drivers/misc/intel-nnpi/device.c        |  15 +-
 drivers/misc/intel-nnpi/host_chardev.c  | 481 ++++++++++++++++++++++++
 drivers/misc/intel-nnpi/host_chardev.h  |  18 +
 drivers/misc/intel-nnpi/idr_allocator.h |  72 ++++
 drivers/misc/intel-nnpi/inf_proc.c      | 150 ++++++++
 drivers/misc/intel-nnpi/inf_proc.h      |  56 +++
 include/uapi/misc/intel_nnpi.h          |  72 ++++
 9 files changed, 864 insertions(+), 3 deletions(-)
 create mode 100644 drivers/misc/intel-nnpi/host_chardev.c
 create mode 100644 drivers/misc/intel-nnpi/host_chardev.h
 create mode 100644 drivers/misc/intel-nnpi/idr_allocator.h
 create mode 100644 drivers/misc/intel-nnpi/inf_proc.c
 create mode 100644 drivers/misc/intel-nnpi/inf_proc.h
 create mode 100644 include/uapi/misc/intel_nnpi.h

diff --git a/MAINTAINERS b/MAINTAINERS
index ce6d7f73fafe..bddbba549760 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -8710,6 +8710,7 @@ INTEL NNP-I PCI DRIVER
 M:	Guy Zadicario <guy.zadicario@intel.com>
 S:	Supported
 F:	drivers/misc/intel-nnpi/
+F:	include/uapi/misc/intel_nnpi.h
 
 INTEL PMC CORE DRIVER
 M:	Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>
diff --git a/drivers/misc/intel-nnpi/Makefile b/drivers/misc/intel-nnpi/Makefile
index 62e24319287e..f776ae9b10e0 100644
--- a/drivers/misc/intel-nnpi/Makefile
+++ b/drivers/misc/intel-nnpi/Makefile
@@ -7,6 +7,6 @@
 obj-m	:= intel_nnpidrv.o
 
 intel_nnpidrv-y := nnpdrv_main.o pcie.o device.o msg_scheduler.o \
-		   hostres.o
+		   hostres.o host_chardev.o inf_proc.o
 
 ccflags-y += -I$(src)/if_include
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 5edea7872490..744bd24aa2a5 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -17,6 +17,7 @@
 #include "nnp_log.h"
 #include "nnp_debug.h"
 #include "pcie.h"
+#include "host_chardev.h"
 
 static struct nnp_device *s_devices[NNP_MAX_DEVS];
 static uint32_t s_num_devices;
@@ -34,8 +35,14 @@ static int nnpdrv_device_list_add(struct nnp_device *nnpdev)
 	if (s_devices[nnpdev->id]) {
 		ret = -EBUSY;
 	} else {
-		s_devices[nnpdev->id] = nnpdev;
-		s_num_devices++;
+		/* initialize host chardev interface on first device creation */
+		if (s_num_devices == 0)
+			ret = init_host_interface();
+
+		if (likely(ret == 0)) {
+			s_devices[nnpdev->id] = nnpdev;
+			s_num_devices++;
+		}
 	}
 	mutex_unlock(&s_device_list_mutex);
 
@@ -53,6 +60,10 @@ static int nnpdrv_device_list_remove(struct nnp_device *nnpdev)
 	} else {
 		s_devices[nnpdev->id] = NULL;
 		s_num_devices--;
+
+		/* Release host interface on last device removal */
+		if (s_num_devices == 0)
+			release_host_interface();
 	}
 	mutex_unlock(&s_device_list_mutex);
 
diff --git a/drivers/misc/intel-nnpi/host_chardev.c b/drivers/misc/intel-nnpi/host_chardev.c
new file mode 100644
index 000000000000..c38dcf99b445
--- /dev/null
+++ b/drivers/misc/intel-nnpi/host_chardev.c
@@ -0,0 +1,481 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/hashtable.h>
+#include <linux/idr.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/wait.h>
+#include <linux/string.h>
+#include <linux/file.h>
+#include <linux/atomic.h>
+#include <uapi/misc/intel_nnpi.h>
+#include "nnp_log.h"
+#include "device.h"
+#include "ipc_protocol.h"
+#include "idr_allocator.h"
+#include "inf_proc.h"
+
+static struct cdev s_cdev;
+static dev_t       s_devnum;
+static struct class *s_class;
+static struct device *s_dev;
+
+static LIST_HEAD(s_proc_list);
+static DEFINE_MUTEX(s_proc_list_lock);
+
+#define NNP_IDR_ALLOC(p) \
+	nnp_idr_alloc(&procInfo->objects_idr, (p))
+#define NNP_IDR_GET_OBJECT(id, fn_check_and_get) \
+	nnp_idr_get_object(&procInfo->objects_idr, (int)(id), (fn_check_and_get))
+#define NNP_IDR_REMOVE_OBJECT(id) \
+	nnp_idr_remove_object(&procInfo->objects_idr, (int)(id))
+#define NNP_IDR_CHECK_AND_REMOVE_OBJECT(id, fn_check) \
+	nnp_idr_check_and_remove_object(&procInfo->objects_idr, (int)(id), (fn_check))
+
+
+/**
+ * transfer network utilities and macros
+ *
+ */
+
+static inline int is_host_file(struct file *f);
+
+static enum dma_data_direction convert_nnp2dma_direction(uint32_t nnp_dir)
+{
+	// Ignore IOCTL_INF_RES_NETWORK
+	if (nnp_dir & (IOCTL_INF_RES_INPUT | IOCTL_INF_RES_OUTPUT))
+		return DMA_BIDIRECTIONAL;
+
+	if (nnp_dir & IOCTL_INF_RES_INPUT)
+		return DMA_TO_DEVICE;
+
+	if (nnp_dir & IOCTL_INF_RES_OUTPUT)
+		return DMA_FROM_DEVICE;
+
+	return DMA_NONE;
+}
+
+static long create_hostres(struct inf_process_info *procInfo,
+			   void __user             *arg)
+{
+	int ret;
+	int id = 0;
+	struct nnpdrv_ioctl_create_hostres create_args;
+	int32_t fd;
+	struct nnpdrv_host_resource *hostres;
+	struct inf_hostres *inf_hostres_entry;
+
+	ret = copy_from_user(&create_args, arg, sizeof(create_args));
+	if (unlikely(ret != 0))
+		return -EIO;
+
+	if (unlikely(create_args.version != NNPI_IOCTL_INTERFACE_VERSION)) {
+		create_args.o_errno = NNPER_VERSIONS_MISMATCH;
+		nnp_log_err(CREATE_COMMAND_LOG, "Error: kernel(v0x%x) and user space(v0x%x) use different versions\n",
+						 NNPI_IOCTL_INTERFACE_VERSION, create_args.version);
+		goto done;
+	}
+
+	if (create_args.byte_size == 0) { //dma_buf fd is valid
+		ret = nnpdrv_hostres_dma_buf_create(create_args.dma_buf,
+			convert_nnp2dma_direction(create_args.usage_flags),
+			&hostres);
+		fd = create_args.dma_buf;
+		if (likely(ret == 0))
+			create_args.byte_size = nnpdrv_hostres_get_size(hostres);
+	} else if (create_args.user_handle != 0) {
+		ret = nnpdrv_hostres_create_usermem(create_args.user_handle,
+						    create_args.byte_size,
+						    convert_nnp2dma_direction(create_args.usage_flags),
+						    &hostres);
+		fd = -1;
+	} else {
+		ret = nnpdrv_hostres_create(create_args.byte_size,
+			convert_nnp2dma_direction(create_args.usage_flags),
+			&hostres);
+		fd = -1;
+	}
+	if (unlikely(ret < 0))
+		return ret;
+
+	ret = inf_proc_add_hostres(procInfo, hostres, fd, &inf_hostres_entry);
+	if (unlikely(ret < 0))
+		goto destroy_hostres;
+
+	id = NNP_IDR_ALLOC(inf_hostres_entry);
+	if (unlikely(id < 0)) {
+		ret = -ENOSPC;
+		goto destroy_hostres_entry;
+	}
+
+	create_args.user_handle = (uint64_t)id;
+done:
+	ret = copy_to_user(arg, &create_args, sizeof(create_args));
+	if (unlikely(ret != 0)) {
+		ret = -EIO;
+		if (id > 0)
+			goto idr_remove;
+	}
+
+	return 0;
+
+idr_remove:
+	NNP_IDR_REMOVE_OBJECT(id);
+destroy_hostres_entry:
+	inf_hostres_put(inf_hostres_entry);
+destroy_hostres:
+	nnpdrv_hostres_destroy(hostres);
+
+	return ret;
+}
+
+static long destroy_hostres(struct inf_process_info *procInfo,
+			    void __user             *arg)
+{
+	int ret;
+	struct nnpdrv_ioctl_destroy_hostres destroyArgs;
+	struct inf_hostres *inf_hostres_entry;
+	struct nnpdrv_host_resource *hostres;
+
+	ret = copy_from_user(&destroyArgs, arg, sizeof(destroyArgs));
+	if (unlikely(ret))
+		return -EIO;
+
+	inf_hostres_entry = NNP_IDR_CHECK_AND_REMOVE_OBJECT(destroyArgs.user_handle,
+							   is_inf_hostres_ptr);
+	if (unlikely(inf_hostres_entry == NULL)) {
+		destroyArgs.o_errno = NNPER_NO_SUCH_RESOURCE;
+		ret = -EFAULT;
+		goto finish;
+	}
+	hostres = inf_hostres_entry->hostres;
+
+	inf_hostres_put(inf_hostres_entry);
+	nnpdrv_hostres_destroy(hostres);
+
+finish:
+	if (unlikely(copy_to_user(arg, &destroyArgs, sizeof(destroyArgs)) != 0))
+		nnp_log_err(CREATE_COMMAND_LOG, "Couldn't copy host resource destroy args for unmapping\n");
+
+	return ret;
+}
+
+static long lock_hostres(struct inf_process_info *procInfo,
+			 void __user             *arg)
+{
+	int ret;
+	struct nnpdrv_ioctl_lock_hostres lock_args;
+	struct inf_hostres *inf_hostres_entry;
+	struct nnpdrv_host_resource *hostres;
+
+	ret = copy_from_user(&lock_args, arg, sizeof(lock_args));
+	if (unlikely(ret != 0)) {
+		nnp_log_err(GENERAL_LOG, "copy from user failed\n");
+		return -EIO;
+	}
+
+	lock_args.o_errno = 0;
+
+	inf_hostres_entry = NNP_IDR_GET_OBJECT(lock_args.user_handle,
+						inf_hostres_check_and_get);
+	if (unlikely(inf_hostres_entry == NULL)) {
+		lock_args.o_errno = NNPER_NO_SUCH_RESOURCE;
+		ret = -EFAULT;
+		goto no_put;
+	}
+	hostres = inf_hostres_entry->hostres;
+
+	ret = nnpdrv_hostres_user_lock(hostres, lock_args.timeout_us);
+	if (unlikely(ret < 0)) {
+		nnp_log_debug(GENERAL_LOG, "Failed to lock host resource 0x%llx. err:%d\n", lock_args.user_handle, ret);
+		goto finish;
+	}
+
+finish:
+	inf_hostres_put(inf_hostres_entry);
+no_put:
+	if (lock_args.o_errno == 0)
+		return ret;
+
+	if (unlikely(copy_to_user(arg, &lock_args, sizeof(lock_args)) != 0))
+		return -EIO;
+	return ret;
+}
+
+static long unlock_hostres(struct inf_process_info *procInfo,
+			   void __user             *arg)
+{
+	int ret = 0;
+	struct inf_hostres *inf_hostres_entry;
+	struct nnpdrv_ioctl_lock_hostres lock_args;
+
+	ret = copy_from_user(&lock_args, arg, sizeof(lock_args));
+	if (unlikely(ret)) {
+		nnp_log_err(GENERAL_LOG, "copy from user failed\n");
+		return -EIO;
+	}
+
+	lock_args.o_errno = 0;
+
+	inf_hostres_entry = NNP_IDR_GET_OBJECT(lock_args.user_handle,
+						inf_hostres_check_and_get);
+	if (unlikely(inf_hostres_entry == NULL)) {
+		lock_args.o_errno = NNPER_NO_SUCH_RESOURCE;
+		ret = -EFAULT;
+		goto no_put;
+	}
+
+	ret = nnpdrv_hostres_user_unlock(inf_hostres_entry->hostres);
+	if (unlikely(ret < 0)) {
+		nnp_log_err(GENERAL_LOG, "Failed to unlock hostres 0x%llx. err:%d.\n", lock_args.user_handle, ret);
+		goto finish;
+	}
+
+finish:
+	inf_hostres_put(inf_hostres_entry);
+no_put:
+	if (lock_args.o_errno == 0)
+		return ret;
+
+	if (unlikely(copy_to_user(arg, &lock_args, sizeof(lock_args)) != 0))
+		return -EIO;
+
+	return ret;
+}
+
+struct file *nnpdrv_host_file_get(int host_fd)
+{
+	struct file *host_file;
+
+	host_file = fget(host_fd);
+	if (!is_host_file(host_file)) {
+		if (host_file) {
+			fput(host_file);
+			host_file = NULL;
+		}
+	}
+
+	return host_file;
+}
+
+/***********************************************************************************
+ * Inference host cdev (/dev/nnpi_host) file operation functions
+ ***********************************************************************************/
+
+static int host_open(struct inode *inode, struct file *f)
+{
+	struct inf_process_info *procInfo;
+
+	if (unlikely(!is_host_file(f)))
+		return -EINVAL;
+
+	nnp_log_debug(START_UP_LOG, "inf_open started");
+
+	procInfo = kzalloc(sizeof(*procInfo), GFP_KERNEL);
+	if (!procInfo)
+		return -ENOMEM;
+
+	inf_proc_init(procInfo, task_pid_nr(current));
+
+	mutex_lock(&s_proc_list_lock);
+	list_add_tail(&procInfo->proc_list_node, &s_proc_list);
+	mutex_unlock(&s_proc_list_lock);
+
+	f->private_data = procInfo;
+
+	return 0;
+}
+
+static int host_release(struct inode *inode, struct file *f)
+{
+	struct inf_process_info *procInfo;
+
+	if (unlikely(!is_host_file(f)))
+		return -EINVAL;
+
+	nnp_log_debug(GO_DOWN_LOG, "inf_release started");
+
+	procInfo = (struct inf_process_info *)f->private_data;
+	NNP_ASSERT(procInfo != NULL);
+
+	mutex_lock(&s_proc_list_lock);
+	list_del(&procInfo->proc_list_node);
+	mutex_unlock(&s_proc_list_lock);
+
+	inf_proc_destroy_all(procInfo);
+	f->private_data = NULL;
+
+	return 0;
+}
+
+static long host_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
+{
+	long ret = 0;
+	struct inf_process_info *procInfo = (struct inf_process_info *)f->private_data;
+
+	if (unlikely(!is_host_file(f)))
+		return -EINVAL;
+
+	switch (cmd) {
+	case IOCTL_INF_CREATE_HOST_RESOURCE:
+		ret = create_hostres(procInfo, (void __user *)arg);
+		break;
+	case IOCTL_INF_DESTROY_HOST_RESOURCE:
+		ret = destroy_hostres(procInfo, (void __user *)arg);
+		break;
+	case IOCTL_INF_UNLOCK_HOST_RESOURCE:
+		ret = unlock_hostres(procInfo, (void __user *)arg);
+		break;
+	case IOCTL_INF_LOCK_HOST_RESOURCE:
+		ret = lock_hostres(procInfo, (void __user *)arg);
+		break;
+	default:
+		nnp_log_err(GENERAL_LOG, "Unsupported inference host IOCTL 0x%x\n", cmd);
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int host_mmap(struct file *f, struct vm_area_struct *vma)
+{
+	struct inf_process_info *procInfo;
+	struct inf_hostres *inf_hostres_entry;
+	int ret;
+
+	if (unlikely(!is_host_file(f))) {
+		nnp_log_err(GENERAL_LOG, "Not an inference file descriptor\n");
+		return -EINVAL;
+	}
+	if (unlikely(vma == NULL)) {
+		nnp_log_err(GENERAL_LOG, "vma should not be NULL\n");
+		return -EINVAL;
+
+	}
+	procInfo = (struct inf_process_info *)f->private_data;
+	if (unlikely(procInfo == NULL)) {
+		nnp_log_err(GENERAL_LOG, "Process info should not be NULL\n");
+		return -EFAULT;
+	}
+
+	inf_hostres_entry = NNP_IDR_GET_OBJECT(vma->vm_pgoff,
+						inf_hostres_check_and_get);
+	if (unlikely(inf_hostres_entry == NULL)) {
+		nnp_log_err(GENERAL_LOG, "Host resource 0x%lx does not exist\n", vma->vm_pgoff);
+		return -EINVAL;
+	}
+
+	ret = nnpdrv_hostres_map_user(inf_hostres_entry->hostres, vma);
+	if (unlikely(ret < 0))
+		nnp_log_err(GENERAL_LOG, "Failed to map host resource 0x%lx to user address\n", vma->vm_pgoff);
+
+	inf_hostres_put(inf_hostres_entry);
+
+	return ret;
+}
+
+static const struct file_operations nnpdrv_host_fops = {
+	.owner = THIS_MODULE,
+	.open = host_open,
+	.release = host_release,
+	.unlocked_ioctl = host_ioctl,
+	.compat_ioctl = host_ioctl,
+	.mmap = host_mmap
+};
+
+static inline int is_host_file(struct file *f)
+{
+	return f != NULL && f->f_op == &nnpdrv_host_fops;
+}
+
+bool is_not_in_use_hostres_ptr(void *ptr)
+{
+	struct inf_hostres *inf_hostres_entry = (struct inf_hostres *)ptr;
+	struct nnpdrv_host_resource *hostres;
+
+	if (ptr == NULL ||
+	    ((struct inf_hostres *)ptr)->magic != inf_proc_add_hostres)
+		return false;
+
+	hostres = inf_hostres_entry->hostres;
+
+	/* Do not allow to give host resource if it is used */
+	if (kref_read(&inf_hostres_entry->ref) > 1)
+		return false;
+
+	/* Do not allow to give host resource if it is used */
+	if (nnpdrv_hostres_read_refcount(hostres) > 1+1)
+		return false;
+
+	return true;
+}
+
+int init_host_interface(void)
+{
+	int ret;
+
+	ret = alloc_chrdev_region(&s_devnum, 0, 1, NNPDRV_INF_HOST_DEV_NAME);
+	if (ret < 0) {
+		nnp_log_err(START_UP_LOG, "nnp_host: failed to allocate devnum %d\n", ret);
+		return ret;
+	}
+
+	cdev_init(&s_cdev, &nnpdrv_host_fops);
+	s_cdev.owner = THIS_MODULE;
+
+	ret = cdev_add(&s_cdev, s_devnum, 1);
+	if (ret < 0) {
+		nnp_log_err(START_UP_LOG, "nnp_host: failed to add cdev %d\n", ret);
+		unregister_chrdev_region(s_devnum, 1);
+		return ret;
+	}
+
+	s_class = class_create(THIS_MODULE, NNPDRV_INF_HOST_DEV_NAME);
+	if (IS_ERR(s_class)) {
+		ret = PTR_ERR(s_class);
+		nnp_log_err(START_UP_LOG, "nnp_inf: failed to register class %d\n", ret);
+		cdev_del(&s_cdev);
+		unregister_chrdev_region(s_devnum, 1);
+		return ret;
+	}
+
+	s_dev = device_create(s_class, NULL, s_devnum, NULL, NNPDRV_INF_HOST_DEV_NAME);
+	if (IS_ERR(s_dev)) {
+		ret = PTR_ERR(s_dev);
+		class_destroy(s_class);
+		cdev_del(&s_cdev);
+		unregister_chrdev_region(s_devnum, 1);
+		return ret;
+	}
+
+	ret = nnpdrv_hostres_init_sysfs(&s_dev->kobj);
+	if (ret) {
+		device_destroy(s_class, s_devnum);
+		class_destroy(s_class);
+		cdev_del(&s_cdev);
+		unregister_chrdev_region(s_devnum, 1);
+		return ret;
+	}
+
+	nnp_log_info(START_UP_LOG, "inf_host: chardev inited at MAJOR=%u\n", MAJOR(s_devnum));
+	return 0;
+}
+
+void release_host_interface(void)
+{
+	nnpdrv_hostres_fini_sysfs(&s_dev->kobj);
+	device_destroy(s_class, s_devnum);
+	class_destroy(s_class);
+	cdev_del(&s_cdev);
+	unregister_chrdev_region(s_devnum, 1);
+}
diff --git a/drivers/misc/intel-nnpi/host_chardev.h b/drivers/misc/intel-nnpi/host_chardev.h
new file mode 100644
index 000000000000..7c09784f7c47
--- /dev/null
+++ b/drivers/misc/intel-nnpi/host_chardev.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#ifndef _NNPDRV_INFERENCE_H
+#define _NNPDRV_INFERENCE_H
+
+#include "ipc_protocol.h"
+#include "hostres.h"
+
+int init_host_interface(void);
+void release_host_interface(void);
+
+struct file *nnpdrv_host_file_get(int host_fd);
+
+#endif
diff --git a/drivers/misc/intel-nnpi/idr_allocator.h b/drivers/misc/intel-nnpi/idr_allocator.h
new file mode 100644
index 000000000000..f56dc357764f
--- /dev/null
+++ b/drivers/misc/intel-nnpi/idr_allocator.h
@@ -0,0 +1,72 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#ifndef _NNPDRV_IDR_ALLOCATOR_H
+#define _NNPDRV_IDR_ALLOCATOR_H
+
+#include <linux/spinlock.h>
+#include <linux/idr.h>
+#include "nnp_debug.h"
+
+struct nnp_proc_idr {
+	struct idr idr;
+	spinlock_t lock;
+};
+
+static inline void nnp_idr_init(struct nnp_proc_idr *idr)
+{
+	idr_init(&idr->idr);
+	spin_lock_init(&idr->lock);
+}
+
+static inline int nnp_idr_alloc(struct nnp_proc_idr *idr, void *p)
+{
+	int id;
+
+	spin_lock(&idr->lock);
+	id = idr_alloc(&idr->idr, p, 1, -1, GFP_NOWAIT);
+	spin_unlock(&idr->lock);
+
+	return id;
+}
+
+static inline void *nnp_idr_get_object(struct nnp_proc_idr *idr, int id, bool (*fn_check_and_get)(void *))
+{
+	void *p;
+
+	spin_lock(&idr->lock);
+	p = idr_find(&idr->idr, id);
+	NNP_ASSERT(fn_check_and_get != NULL);
+	if (unlikely(!fn_check_and_get(p)))
+		p = NULL;
+	spin_unlock(&idr->lock);
+
+	return p;
+}
+
+static inline void nnp_idr_remove_object(struct nnp_proc_idr *idr, int id)
+{
+	spin_lock(&idr->lock);
+	idr_remove(&idr->idr, id);
+	spin_unlock(&idr->lock);
+}
+
+static inline void *nnp_idr_check_and_remove_object(struct nnp_proc_idr *idr, int id, bool (*fn_check)(void *))
+{
+	void *p;
+
+	spin_lock(&idr->lock);
+	p = idr_find(&idr->idr, id);
+	if (likely(fn_check(p)))
+		idr_remove(&idr->idr, id);
+	else
+		p = NULL;
+	spin_unlock(&idr->lock);
+
+	return p;
+}
+
+#endif
diff --git a/drivers/misc/intel-nnpi/inf_proc.c b/drivers/misc/intel-nnpi/inf_proc.c
new file mode 100644
index 000000000000..22b9e8c3fc50
--- /dev/null
+++ b/drivers/misc/intel-nnpi/inf_proc.c
@@ -0,0 +1,150 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include "nnp_log.h"
+#include "inf_proc.h"
+
+
+void inf_proc_init(struct inf_process_info *procInfo, pid_t curr_pid)
+{
+	INIT_LIST_HEAD(&procInfo->hostres_list);
+	mutex_init(&procInfo->lock);
+	kref_init(&procInfo->ref);
+	nnp_idr_init(&procInfo->objects_idr);
+	procInfo->pid = curr_pid;
+}
+
+void inf_proc_get(struct inf_process_info *procInfo)
+{
+	int ret;
+
+	ret = kref_get_unless_zero(&procInfo->ref);
+	NNP_ASSERT(ret != 0); // Can happen only after close(fd)
+}
+
+static void proc_release(struct kref *kref)
+{
+	struct inf_process_info *procInfo = container_of(kref,
+						     struct inf_process_info,
+						     ref);
+	struct completion *done = procInfo->close_completion;
+
+	NNP_ASSERT(procInfo->close_completion != NULL);
+	complete(done);
+}
+
+int inf_proc_put(struct inf_process_info *procInfo)
+{
+	if (unlikely(procInfo == NULL))
+		return 0;
+	return kref_put(&procInfo->ref, proc_release);
+}
+
+int inf_proc_add_hostres(struct inf_process_info *procInfo,
+			 struct nnpdrv_host_resource *hostres,
+			 int32_t fd,
+			 struct inf_hostres **inf_hostres_entry)
+{
+	struct inf_hostres *hr_entry;
+
+	hr_entry = kmalloc(sizeof(*hr_entry), GFP_KERNEL);
+	if (unlikely(hr_entry == NULL))
+		return -ENOMEM;
+
+	nnpdrv_hostres_get(hostres);
+	hr_entry->hostres = hostres;
+
+	inf_proc_get(procInfo);
+	hr_entry->procInfo = procInfo;
+
+	kref_init(&hr_entry->ref);
+	hr_entry->magic = inf_proc_add_hostres;
+	hr_entry->fd = fd;
+
+	mutex_lock(&procInfo->lock);
+	list_add(&hr_entry->node, &procInfo->hostres_list);
+	mutex_unlock(&procInfo->lock);
+
+	*inf_hostres_entry = hr_entry;
+
+	return 0;
+}
+
+bool is_inf_hostres_ptr(void *ptr)
+{
+	return ptr != NULL &&
+		((struct inf_hostres *)ptr)->magic == inf_proc_add_hostres;
+}
+
+static void inf_proc_remove_hostres(struct kref *kref)
+{
+	struct inf_hostres *hr_entry = container_of(kref, struct inf_hostres,
+							 ref);
+	struct inf_process_info *procInfo = hr_entry->procInfo;
+
+	mutex_lock(&procInfo->lock);
+	list_del(&hr_entry->node);
+	mutex_unlock(&procInfo->lock);
+
+	nnpdrv_hostres_put(hr_entry->hostres);
+
+	kfree(hr_entry);
+	inf_proc_put(procInfo);
+}
+
+bool inf_hostres_check_and_get(void *ptr)
+{
+	struct inf_hostres *hostres_entry = (struct inf_hostres *)ptr;
+	int ret;
+
+	if (!is_inf_hostres_ptr(ptr))
+		return false;
+
+	ret = kref_get_unless_zero(&hostres_entry->ref);
+	NNP_ASSERT(ret != 0);
+
+	return true;
+}
+
+bool inf_hostres_put(struct inf_hostres *inf_hostres_entry)
+{
+	return kref_put(&inf_hostres_entry->ref, inf_proc_remove_hostres);
+}
+
+void inf_proc_destroy_all(struct inf_process_info *procInfo)
+{
+	struct inf_hostres *inf_hostres_entry;
+	struct completion completion;
+
+	mutex_lock(&procInfo->lock);
+
+	/* destroy all hostreses owned by the process */
+	while (!list_empty(&procInfo->hostres_list)) {
+		inf_hostres_entry = list_first_entry(&procInfo->hostres_list, struct inf_hostres, node);
+		mutex_unlock(&procInfo->lock);
+
+		nnpdrv_hostres_destroy(inf_hostres_entry->hostres);
+		inf_hostres_put(inf_hostres_entry);
+
+		mutex_lock(&procInfo->lock);
+	}
+	mutex_unlock(&procInfo->lock);
+
+	/* wait for all contexts and hostreses to be destroyed */
+	init_completion(&completion);
+	procInfo->close_completion = &completion;
+	inf_proc_put(procInfo);
+	wait_for_completion(&completion);
+
+
+	mutex_destroy(&procInfo->lock);
+	idr_destroy(&procInfo->objects_idr.idr);
+
+	procInfo->close_completion = NULL;
+	kfree(procInfo);
+}
diff --git a/drivers/misc/intel-nnpi/inf_proc.h b/drivers/misc/intel-nnpi/inf_proc.h
new file mode 100644
index 000000000000..ef09a0100d6d
--- /dev/null
+++ b/drivers/misc/intel-nnpi/inf_proc.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+
+#ifndef _NNPDRV_INF_PROC_H
+#define _NNPDRV_INF_PROC_H
+
+#include <linux/workqueue.h>
+#include <linux/kref.h>
+#include "idr_allocator.h"
+#include "hostres.h"
+
+
+/**
+ * @struct inf_process_info
+ * structure to hold per process inference related data
+ */
+struct inf_process_info {
+	struct list_head hostres_list;
+	struct kref ref;
+	struct completion *close_completion;
+	struct mutex lock;
+	struct nnp_proc_idr objects_idr;
+	pid_t  pid;
+	struct list_head proc_list_node;
+};
+
+struct inf_hostres {
+	void             *magic;
+	struct list_head  node;
+	struct kref       ref;
+	struct nnpdrv_host_resource   *hostres;
+	int32_t           fd;
+	struct inf_process_info *procInfo;
+};
+
+
+void inf_proc_init(struct inf_process_info *procInfo, pid_t curr_pid);
+
+void inf_proc_get(struct inf_process_info *procInfo);
+int inf_proc_put(struct inf_process_info *procInfo);
+
+int inf_proc_add_hostres(struct inf_process_info *procInfo,
+			 struct nnpdrv_host_resource *hostres,
+			 int32_t fd,
+			 struct inf_hostres **inf_hostres_entry);
+
+bool is_inf_hostres_ptr(void *ptr);
+bool inf_hostres_check_and_get(void *ptr);
+bool inf_hostres_put(struct inf_hostres *inf_hostres_entry);
+
+void inf_proc_destroy_all(struct inf_process_info *procInfo);
+
+#endif
diff --git a/include/uapi/misc/intel_nnpi.h b/include/uapi/misc/intel_nnpi.h
new file mode 100644
index 000000000000..7208772864ba
--- /dev/null
+++ b/include/uapi/misc/intel_nnpi.h
@@ -0,0 +1,72 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later WITH Linux-syscall-note */
+
+/********************************************
+ * Copyright (C) 2019-2020 Intel Corporation
+ ********************************************/
+#ifndef _NNP_UAPI_H
+#define _NNP_UAPI_H
+
+#include <linux/ioctl.h>
+#include <stdbool.h>
+#ifndef __KERNEL__
+#include <stdint.h>
+#else
+#include <linux/types.h>
+#endif
+
+#define NNPDRV_INF_HOST_DEV_NAME "nnpi_host"
+#define NNPI_IOCTL_INTERFACE_VERSION 0x00010100
+
+/*
+ * ioctls for /dev/nnpi_host device
+ */
+#define IOCTL_INF_CREATE_HOST_RESOURCE      _IOWR('h', 0, struct nnpdrv_ioctl_create_hostres)
+#define IOCTL_INF_DESTROY_HOST_RESOURCE     _IOWR('h', 2, struct nnpdrv_ioctl_destroy_hostres)
+#define IOCTL_INF_LOCK_HOST_RESOURCE        _IOWR('h', 3, struct nnpdrv_ioctl_lock_hostres)
+#define IOCTL_INF_UNLOCK_HOST_RESOURCE      _IOWR('h', 4, struct nnpdrv_ioctl_lock_hostres)
+
+/* Resource usage_flags bits */
+#define IOCTL_INF_RES_INPUT          1
+#define IOCTL_INF_RES_OUTPUT         2
+#define IOCTL_INF_RES_NETWORK        4
+#define IOCTL_INF_RES_FORCE_4G_ALLOC 8
+#define IOCTL_INF_RES_ECC            16
+#define IOCTL_INF_RES_P2P_DST        32
+#define IOCTL_INF_RES_P2P_SRC        64
+
+struct nnpdrv_ioctl_create_hostres {
+	__u64 byte_size;
+	__u32 dma_buf;
+	__u32 usage_flags;
+	__u64 user_handle;
+	__u32 version;
+	__u8  o_errno;
+};
+
+struct nnpdrv_ioctl_lock_hostres {
+	__u64 user_handle;
+	__u32 timeout_us;
+	__u8  o_errno;
+};
+
+struct nnpdrv_ioctl_destroy_hostres {
+	__u64 user_handle;
+	__u8  o_errno;
+};
+
+
+/****************************************************************
+ * Error code values - errors returned in o_errno fields of
+ * above structures may be base linux errno values as well as
+ * the below error codes.
+ ****************************************************************/
+#define	NNP_ERRNO_BASE	                        200
+#define	NNPER_DEVICE_NOT_READY			(NNP_ERRNO_BASE + 1)   /* Device not ready */
+#define	NNPER_NO_SUCH_RESOURCE			(NNP_ERRNO_BASE + 2)   /* No such resource */
+#define	NNPER_INCOMPATIBLE_RESOURCES		(NNP_ERRNO_BASE + 3)   /* Incompatible resources */
+#define	NNPER_DEVICE_ERROR			(NNP_ERRNO_BASE + 4)   /* Device error */
+#define NNPER_NO_SUCH_CHANNEL                   (NNP_ERRNO_BASE + 5)   /* Channel id does not exit on device */
+#define NNPER_NO_SUCH_HOSTRES_MAP               (NNP_ERRNO_BASE + 6)   /* Host resource mapping to channel not exist */
+#define NNPER_VERSIONS_MISMATCH                 (NNP_ERRNO_BASE + 7)   /* Kernel and user spaces version are not match */
+
+#endif /* of _NNP_UAPI_H */
-- 
2.22.0

