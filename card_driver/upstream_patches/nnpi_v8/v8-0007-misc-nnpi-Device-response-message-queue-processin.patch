From 0171f6c1a325d9c8795f0ca70cfe4e8e837de7b2 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Tue, 31 Mar 2020 09:17:51 +0300
Subject: [PATCH v8 07/22] misc: nnpi: Device response message queue processing

This patch implements nnpdrv_device_process_messages function which is
called from the "pci" layer from threaded interrupt handler when responses
arrived in the h/w response queue.

This function handles all responses from the device based on an opcode
field attached to each response.

This patch adds only a single response processing handler, more handlers
will be added on next patches.
---
 drivers/misc/intel-nnpi/device.c | 120 +++++++++++++++++++++++++++++++++++++++
 drivers/misc/intel-nnpi/device.h |   7 +++
 drivers/misc/intel-nnpi/pcie.c   |   4 ++
 drivers/misc/intel-nnpi/pcie.h   |   3 +
 4 files changed, 134 insertions(+)

diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 6155791..afbe254 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -66,6 +66,126 @@ void nnpdrv_device_module_fini(void)
 	ida_destroy(&dev_ida);
 }
 
+/*
+ * handle_bios_protocol - process a message from HWQ coming from bios.
+ * bios protocol may have different size messages.
+ * avail_size is the number of 64-bit units available from the msg pointer
+ * if the message size is larger, the function should return 0 and do not
+ * processthe message, otherwise the function should process the message
+ * and return the actual processed message size (in 64-bit units).
+ */
+static int handle_bios_protocol(struct nnp_device *nnpdev,
+				const void        *msgbuf,
+				int               avail_qwords)
+{
+	const union nnp_bios_ipc_header *msg = msgbuf;
+
+	/* The +1 is because size field does not include header */
+	int msg_qwords = DIV_ROUND_UP(msg->size, 8) + 1;
+
+	if (msg_qwords > avail_qwords)
+		return 0;
+
+	return msg_qwords;
+}
+
+typedef int (*response_handler)(struct nnp_device *nnpdev,
+				const void        *msgbuf,
+				int               avail_qwords);
+
+static response_handler resp_handlers[NNP_IPC_C2H_OPCODE_LAST + 1] = {
+	[NNP_IPC_C2H_OP_BIOS_PROTOCOL] = handle_bios_protocol
+};
+
+/**
+ * nnpdrv_device_process_messages() - process response messages from nnpi device
+ * @nnpdev: The nnp device
+ * @hw_msg: pointer to response message content
+ * @hw_nof_msg: number of 64-bit units available in hw_msg buffer.
+ *
+ * This function is called from the pci layer when response messages are arrived
+ * in the HWQ.
+ * It is called from bottom-half context and is *NOT* re-entrant!
+ * The function may not block !
+ */
+void nnpdrv_device_process_messages(struct nnp_device *nnpdev,
+				    u64               *hw_msg,
+				    unsigned int      hw_nof_msg)
+{
+	int j = 0;
+	u64 *msg;
+	unsigned int nof_msg;
+	bool fatal_protocol_error = false;
+
+	/* ignore any response if protocol error detected */
+	if ((nnpdev->state & NNP_DEVICE_PROTOCOL_ERROR) != 0)
+		return;
+
+	/*
+	 * if we have pending messages from previous round
+	 * copy the new messages to the pending list and process
+	 * the pending list.
+	 * otherwise process the messages reveived from hw directly
+	 */
+	if (nnpdev->response_num_msgs > 0) {
+		if (WARN_ON_ONCE(hw_nof_msg + nnpdev->response_num_msgs >=
+				 NNP_DEVICE_RESPONSE_BUFFER_LEN))
+			return; /* prevent buffer overrun */
+
+		memcpy(&nnpdev->response_buf[nnpdev->response_num_msgs],
+		       hw_msg, hw_nof_msg * sizeof(u64));
+		msg = nnpdev->response_buf;
+		nof_msg = nnpdev->response_num_msgs + hw_nof_msg;
+	} else {
+		msg = hw_msg;
+		nof_msg = hw_nof_msg;
+	}
+
+	/*
+	 * loop for each message
+	 */
+	do {
+		int op_code =
+			((union c2h_query_version_reply_msg *)&msg[j])->opcode;
+		int msg_size = 0;
+		int partial_msg = 0;
+		response_handler handler = resp_handlers[op_code];
+
+		/* dispatch the message request */
+		if (!handler) {
+			/* Should not happen! */
+			pr_err("Unknown response opcode received %d (0x%llx)\n",
+			       op_code, msg[j]);
+			fatal_protocol_error = true;
+			partial_msg = true;
+		} else {
+			msg_size = (*handler)(nnpdev, &msg[j], (nof_msg - j));
+			partial_msg = (msg_size == 0);
+		}
+
+		/* exit the loop if not a full sized message arrived */
+		if (partial_msg)
+			break;
+
+		j += msg_size;
+	} while (j < nof_msg);
+
+	if (fatal_protocol_error)
+		nnpdev->state |= NNP_DEVICE_PROTOCOL_ERROR;
+
+	/*
+	 * if unprocessed messages left, copy it to the pending messages buffer
+	 * for the next time
+	 */
+	if (j < nof_msg) {
+		memcpy(&nnpdev->response_buf[0], &msg[j],
+		       (nof_msg - j) * sizeof(u64));
+		nnpdev->response_num_msgs = nof_msg - j;
+	} else {
+		nnpdev->response_num_msgs = 0;
+	}
+}
+
 int nnpdrv_send_command(struct nnp_device *nnpdev, u64 *msg, int size)
 {
 	int ret;
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index c93f3c2..789851f 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -53,6 +53,8 @@
 #define NNP_DEVICE_CURRUPTED_BOOT_IMAGE BIT(30)
 #define NNP_DEVICE_ERROR_MASK        GENMASK(31, 16)
 
+#define NNP_DEVICE_RESPONSE_BUFFER_LEN  32
+
 /**
  * struct nnp_device - structure for NNP-I "logical" device info
  * @ref: refcount this object
@@ -73,6 +75,8 @@
  * @is_recovery_bios: true if device has booted from the recovery bios flash
  * @boot_image_loaded: true if boot image load has started
  * @reset_boot_image_path: boot image to load on next device reset.
+ * @response_buf: buffer of device response messages arrived from "pci" layer.
+ * @response_num_msgs: number of qwords available in @response_buf
  * @bios_system_info_dma_addr: dma page allocated for bios system info.
  * @bios_system_info: virtual pointer to bios system info page
  * @bios_version_str: the device's started bios version string
@@ -99,6 +103,9 @@ struct nnp_device {
 	bool           boot_image_loaded;
 	char         reset_boot_image_path[PATH_MAX];
 
+	u64            response_buf[NNP_DEVICE_RESPONSE_BUFFER_LEN];
+	unsigned int   response_num_msgs;
+
 	dma_addr_t                  bios_system_info_dma_addr;
 	struct nnp_c2h_system_info  *bios_system_info;
 	char                        bios_version_str[NNP_BIOS_VERSION_LEN];
diff --git a/drivers/misc/intel-nnpi/pcie.c b/drivers/misc/intel-nnpi/pcie.c
index ca6e100..2d075ff 100644
--- a/drivers/misc/intel-nnpi/pcie.c
+++ b/drivers/misc/intel-nnpi/pcie.c
@@ -148,6 +148,10 @@ static void nnp_process_commands(struct nnp_pci_device *nnp_pci)
 	nnp_mmio_write(nnp_pci,
 		       ELBI_RESPONSE_PCI_CONTROL,
 		       response_pci_control);
+
+	nnpdrv_device_process_messages(nnp_pci->nnpdev,
+				       nnp_pci->response_buf,
+				       avail_slots);
 }
 
 static irqreturn_t interrupt_handler(int irq, void *data)
diff --git a/drivers/misc/intel-nnpi/pcie.h b/drivers/misc/intel-nnpi/pcie.h
index ccb95ca..afbba69 100644
--- a/drivers/misc/intel-nnpi/pcie.h
+++ b/drivers/misc/intel-nnpi/pcie.h
@@ -110,6 +110,9 @@ int nnp_cmdq_write_mesg(struct nnp_pci_device *nnp_pci,
 void nnpdrv_device_destroy(struct nnp_device *nnpdev, bool prepare_only);
 void nnpdrv_card_doorbell_value_changed(struct nnp_device *nnpdev,
 					u32                doorbell_val);
+void nnpdrv_device_process_messages(struct nnp_device *nnpdev,
+				    u64               *hw_msg,
+				    unsigned int      hw_nof_msg);
 
 int nnpdrv_pci_module_init(void);
 void nnpdrv_pci_module_fini(void);
-- 
1.8.3.1

