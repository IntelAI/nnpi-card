From 5a024b39f97a9e697b47fdc13e7650f97bf82be9 Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Fri, 3 Apr 2020 09:21:01 +0300
Subject: [PATCH v3 12/20] misc: nnpi: enable/disable + boot image name

This adds two sysfs attributes in /sys/class/nnpi/nnpi%d/:

enable - writing 0/1 will enable/disable the device for new inference
         context creation.
         writing "abort" will disable the device and notify all inference
         applications to exit.

boot_image - writing a filename to that attribute will set the boot image
         that will be loaded for the device on its next reset.
         Overrides the default /lib/firmware/intel/nnpi/disk.img
         (File must still exist under /lib/firmware since the firmware API
          is used to load it).

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/device.c       |  14 ++++
 drivers/misc/intel-nnpi/device.h       |   7 ++
 drivers/misc/intel-nnpi/device_sysfs.c | 104 +++++++++++++++++++++++++
 3 files changed, 125 insertions(+)

diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index ebeda6379541..b3bc4736681d 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -1604,3 +1604,17 @@ int nnpdrv_device_put(struct nnp_device *nnpdev)
 {
 	return kref_put(&nnpdev->ref, release_nnp_device);
 }
+
+void nnpdrv_device_disable(struct nnp_device *nnpdev)
+{
+	spin_lock(&nnpdev->lock);
+	nnpdev->state &= ~(NNP_DEVICE_CARD_ENABLED);
+	spin_unlock(&nnpdev->lock);
+}
+
+void nnpdrv_device_enable(struct nnp_device *nnpdev)
+{
+	spin_lock(&nnpdev->lock);
+	nnpdev->state |= NNP_DEVICE_CARD_ENABLED;
+	spin_unlock(&nnpdev->lock);
+}
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index f63499716781..3befd5229551 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -18,6 +18,7 @@
 #include "pcie.h"
 #include "msg_scheduler.h"
 #include "nnp_inbound_mem.h"
+#include "ipc_protocol.h"
 
 #define NNP_MAX_DEVS		256
 #define DEVICE_NAME_LEN         32
@@ -208,4 +209,10 @@ int nnpdrv_device_process_messages(struct nnp_device *nnpdev,
 void nnpdrv_device_set_boot_state(struct nnp_device *nnpdev, u32 mask);
 struct nnpdrv_cmd_chan *nnpdrv_device_find_channel(struct nnp_device *nnpdev,
 						   u16             protocol_id);
+void nnpdrv_submit_device_event_to_channels(struct nnp_device *nnpdev,
+					    union c2h_event_report *event_msg,
+					    bool                   force);
+void nnpdrv_device_disable(struct nnp_device *nnpdev);
+void nnpdrv_device_enable(struct nnp_device *nnpdev);
+
 #endif
diff --git a/drivers/misc/intel-nnpi/device_sysfs.c b/drivers/misc/intel-nnpi/device_sysfs.c
index 366477dc890f..342ed360d1f9 100644
--- a/drivers/misc/intel-nnpi/device_sysfs.c
+++ b/drivers/misc/intel-nnpi/device_sysfs.c
@@ -14,6 +14,108 @@
 #include "cmd_chan.h"
 #include "nnp_inbound_mem.h"
 #include "nnp_log.h"
+#include "ipc_c2h_events.h"
+
+static ssize_t enable_show(struct device           *dev,
+			   struct device_attribute *attr,
+			   char                    *buf)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if ((nnpdev->state & NNP_DEVICE_CARD_ENABLED) != 0)
+		buf[0] = '1';
+	else
+		buf[0] = '0';
+	buf[1] = '\n';
+
+	return 2;
+}
+
+static ssize_t enable_store(struct device           *dev,
+			    struct device_attribute *attr,
+			    const char              *buf,
+			    size_t                   count)
+{
+	struct nnp_device *nnpdev;
+	unsigned long val;
+	bool do_abort = false;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (!strncmp(buf, "abort", 5)) {
+		val = 0;
+		do_abort = true;
+	} else if (kstrtoul(buf, 0, &val) < 0) {
+		return -EINVAL;
+	}
+
+	if (val != 0) {
+		nnpdrv_device_enable(nnpdev);
+	} else {
+		nnpdrv_device_disable(nnpdev);
+
+		if (do_abort) {
+			union c2h_event_report abort_req;
+
+			abort_req.value = 0;
+			abort_req.opcode = NNP_IPC_C2H_OP_EVENT_REPORT;
+			abort_req.event_code = NNP_IPC_ABORT_REQUEST;
+
+			nnpdrv_submit_device_event_to_channels(nnpdev,
+							       &abort_req,
+							       true);
+		}
+	}
+
+	return count;
+}
+static DEVICE_ATTR_RW(enable);
+
+static ssize_t boot_image_show(struct device           *dev,
+			       struct device_attribute *attr,
+			       char                    *buf)
+{
+	struct nnp_device *nnpdev;
+	ssize_t ret;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	if (nnpdev->reset_boot_image_path[0] == '\0')
+		ret = snprintf(buf, PAGE_SIZE, "%s\n", NNP_FIRMWARE_NAME);
+	else
+		ret = snprintf(buf, PAGE_SIZE,
+			       "%s\n", nnpdev->reset_boot_image_path);
+
+	return ret;
+}
+
+static ssize_t boot_image_store(struct device           *dev,
+				struct device_attribute *attr,
+				const char              *buf,
+				size_t                   count)
+{
+	struct nnp_device *nnpdev;
+
+	nnpdev = (struct nnp_device *)dev_get_drvdata(dev);
+	if (!nnpdev)
+		return -EINVAL;
+
+	strncpy(nnpdev->reset_boot_image_path, buf,
+		NNP_DEVICE_MAX_BOOT_IMAGE_PATH_SIZE - 1);
+	nnpdev->reset_boot_image_path[NNP_DEVICE_MAX_BOOT_IMAGE_PATH_SIZE - 1] =
+		'\0';
+
+	return count;
+}
+static DEVICE_ATTR_RW(boot_image);
 
 void nnpdrv_device_sysfs_get_state_strings(struct nnp_device *nnpdev,
 					   const char **state,
@@ -637,6 +739,8 @@ static ssize_t corr_counters_show(struct device           *dev,
 static DEVICE_ATTR_RO(corr_counters);
 
 static struct attribute *nnp_dev_attrs[] = {
+	&dev_attr_enable.attr,
+	&dev_attr_boot_image.attr,
 	&dev_attr_total_unprotected_mem.attr,
 	&dev_attr_total_protected_mem.attr,
 	&dev_attr_protocol_version.attr,
-- 
2.22.0

