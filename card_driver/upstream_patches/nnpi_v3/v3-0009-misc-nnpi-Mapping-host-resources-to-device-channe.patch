From 74fa2cd494f49574c74f90b0b8342b119fdcdf3e Mon Sep 17 00:00:00 2001
From: Guy Zadicario <guy.zadicario@intel.com>
Date: Wed, 1 Apr 2020 08:21:47 +0300
Subject: [PATCH v3 09/20] misc: nnpi: Mapping host resources to device channel

This patch add IOCTLs to /dev/nnpi%d device to map and unmap host
resource to the channel. The mapping gets a uniqueue ID and the
page table of the host resource is transferred to the device, later
commands to the device can reference the resource by the channel ID
and map ID.

There is special interface to map host resources which serve as
host-to-card and card-to-host ring buffers. That results in the same
host resource mapping except that the mapping is referenced by the
ring-buffer direction and index (up to two for each direction) instead
of by map ID.

Signed-off-by: Guy Zadicario <guy.zadicario@intel.com>
---
 drivers/misc/intel-nnpi/cmd_chan.c            | 105 +++++
 drivers/misc/intel-nnpi/cmd_chan.h            |  24 +
 drivers/misc/intel-nnpi/device.c              |  52 +++
 drivers/misc/intel-nnpi/device.h              |   2 +
 drivers/misc/intel-nnpi/device_chardev.c      | 425 ++++++++++++++++++
 .../misc/intel-nnpi/if_include/ipc_protocol.h |   2 +-
 6 files changed, 609 insertions(+), 1 deletion(-)

diff --git a/drivers/misc/intel-nnpi/cmd_chan.c b/drivers/misc/intel-nnpi/cmd_chan.c
index f6edac7d642a..ec2460ea71cb 100644
--- a/drivers/misc/intel-nnpi/cmd_chan.c
+++ b/drivers/misc/intel-nnpi/cmd_chan.c
@@ -288,6 +288,8 @@ int nnpdrv_cmd_chan_create(struct nnp_device       *nnpdev,
 	INIT_LIST_HEAD(&cmd_chan->respq_list);
 
 	spin_lock_init(&cmd_chan->lock);
+	ida_init(&cmd_chan->hostres_map_ida);
+	hash_init(cmd_chan->hostres_hash);
 
 	INIT_LIST_HEAD(&cmd_chan->curr_respq->node);
 	nnp_ringbuf_init(&cmd_chan->curr_respq->rb,
@@ -318,6 +320,7 @@ static void cmd_chan_release(struct kref *kref)
 {
 	struct nnpdrv_cmd_chan *cmd_chan;
 	struct nnp_device *nnpdev;
+	int i;
 
 	cmd_chan = container_of(kref, struct nnpdrv_cmd_chan, ref);
 	nnpdev = cmd_chan->nnpdev;
@@ -336,6 +339,14 @@ static void cmd_chan_release(struct kref *kref)
 	ida_simple_remove(&cmd_chan->nnpdev->cmd_chan_ida,
 			  cmd_chan->protocol_id);
 
+	nnpdrv_chan_unmap_hostres_all(cmd_chan);
+	ida_destroy(&cmd_chan->hostres_map_ida);
+
+	for (i = 0; i < NNP_IPC_MAX_CHANNEL_RB; i++) {
+		nnpdrv_cmd_chan_set_ringbuf(cmd_chan, true, i, NULL);
+		nnpdrv_cmd_chan_set_ringbuf(cmd_chan, false, i, NULL);
+	}
+
 	if (cmd_chan->fd < 0)
 		fput(cmd_chan->host_file);
 
@@ -467,3 +478,97 @@ int nnpdrv_cmd_chan_add_response(struct nnpdrv_cmd_chan *cmd_chan,
 	return 0;
 }
 
+int nnpdrv_cmd_chan_set_ringbuf(struct nnpdrv_cmd_chan *chan,
+				bool                    h2c,
+				u8                      id,
+				struct nnpdrv_host_resource *hostres)
+{
+	if (id >= NNP_IPC_MAX_CHANNEL_RB)
+		return -EINVAL;
+
+	if (h2c) {
+		if (chan->h2c_rb_hostres[id])
+			nnpdrv_hostres_unmap_device(chan->h2c_rb_hostres[id],
+						    chan->nnpdev);
+		chan->h2c_rb_hostres[id] = hostres;
+	} else {
+		if (chan->c2h_rb_hostres[id])
+			nnpdrv_hostres_unmap_device(chan->c2h_rb_hostres[id],
+						    chan->nnpdev);
+		chan->c2h_rb_hostres[id] = hostres;
+	}
+
+	return 0;
+}
+
+struct chan_hostres_map *nnpdrv_cmd_chan_find_hostres(
+					struct nnpdrv_cmd_chan *chan,
+					u16                     protocol_id)
+{
+	struct chan_hostres_map *hostres_map;
+
+	spin_lock(&chan->lock);
+	hash_for_each_possible(chan->hostres_hash,
+			       hostres_map,
+			       hash_node,
+			       protocol_id)
+		if (hostres_map->protocol_id == protocol_id) {
+			spin_unlock(&chan->lock);
+			return hostres_map;
+		}
+	spin_unlock(&chan->lock);
+
+	return NULL;
+}
+
+int nnpdrv_chan_unmap_hostres(struct nnpdrv_cmd_chan *chan, u16 protocol_id)
+{
+	struct chan_hostres_map *hostres_map;
+	bool found = false;
+
+	spin_lock(&chan->lock);
+	hash_for_each_possible(chan->hostres_hash,
+			       hostres_map,
+			       hash_node,
+			       protocol_id)
+		if (hostres_map->protocol_id == protocol_id) {
+			found = true;
+			hash_del(&hostres_map->hash_node);
+			break;
+		}
+	spin_unlock(&chan->lock);
+
+	if (!found)
+		return -ENXIO;
+
+	ida_simple_remove(&chan->hostres_map_ida,
+			  hostres_map->protocol_id);
+	nnpdrv_hostres_unmap_device(hostres_map->hostres, chan->nnpdev);
+	kfree(hostres_map);
+
+	return 0;
+}
+
+void nnpdrv_chan_unmap_hostres_all(struct nnpdrv_cmd_chan *chan)
+{
+	struct chan_hostres_map *hostres_map;
+	bool found = true;
+	int i;
+
+	do {
+		found = false;
+		spin_lock(&chan->lock);
+		hash_for_each(chan->hostres_hash, i, hostres_map, hash_node) {
+			hash_del(&hostres_map->hash_node);
+			spin_unlock(&chan->lock);
+			ida_simple_remove(&chan->hostres_map_ida,
+					  hostres_map->protocol_id);
+			nnpdrv_hostres_unmap_device(hostres_map->hostres,
+						    chan->nnpdev);
+			kfree(hostres_map);
+			found = true;
+			break;
+		}
+	} while (found);
+	spin_unlock(&chan->lock);
+}
diff --git a/drivers/misc/intel-nnpi/cmd_chan.h b/drivers/misc/intel-nnpi/cmd_chan.h
index cc79fa14892d..fa1b1501ae50 100644
--- a/drivers/misc/intel-nnpi/cmd_chan.h
+++ b/drivers/misc/intel-nnpi/cmd_chan.h
@@ -15,11 +15,19 @@
 #include <linux/atomic.h>
 #include <linux/fs.h>
 #include "device.h"
+#include "hostres.h"
 #include "inf_proc.h"
 #include "ipc_protocol.h"
 
 struct respq_elem;
 
+struct chan_hostres_map {
+	u16 protocol_id;
+	struct hlist_node hash_node;
+	struct nnpdrv_host_resource *hostres;
+	union c2h_event_report event_msg;
+};
+
 struct nnpdrv_cmd_chan {
 	void             *magic;
 	struct kref       ref;
@@ -38,11 +46,16 @@ struct nnpdrv_cmd_chan {
 	int    closing;
 
 	spinlock_t        lock; /* protects struct fields modifications */
+	struct ida        hostres_map_ida;
+	DECLARE_HASHTABLE(hostres_hash, 6);
 
 	spinlock_t        resp_lock_bh; /* protects respq_list del/ins */
 	wait_queue_head_t resp_waitq;
 	struct list_head  respq_list;
 	struct respq_elem *curr_respq;
+
+	struct nnpdrv_host_resource *h2c_rb_hostres[NNP_IPC_MAX_CHANNEL_RB];
+	struct nnpdrv_host_resource *c2h_rb_hostres[NNP_IPC_MAX_CHANNEL_RB];
 };
 
 int nnpdrv_cmd_chan_create(struct nnp_device       *nnpdev,
@@ -66,4 +79,15 @@ int nnpdrv_cmd_chan_add_response(struct nnpdrv_cmd_chan *cmd_chan,
 				 u64                    *hw_msg,
 				 u32                     byte_size);
 
+int nnpdrv_cmd_chan_set_ringbuf(struct nnpdrv_cmd_chan *chan,
+				bool                    h2c,
+				u8                      id,
+				struct nnpdrv_host_resource *hostres);
+
+struct chan_hostres_map *nnpdrv_cmd_chan_find_hostres(
+					struct nnpdrv_cmd_chan *chan,
+					u16 protocol_id);
+int nnpdrv_chan_unmap_hostres(struct nnpdrv_cmd_chan *chan, u16 protocol_id);
+void nnpdrv_chan_unmap_hostres_all(struct nnpdrv_cmd_chan *chan);
+
 #endif
diff --git a/drivers/misc/intel-nnpi/device.c b/drivers/misc/intel-nnpi/device.c
index 5b5ed81961ed..4f94e7da714e 100644
--- a/drivers/misc/intel-nnpi/device.c
+++ b/drivers/misc/intel-nnpi/device.c
@@ -345,6 +345,7 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 				union c2h_event_report *event_msg)
 {
 	struct nnpdrv_cmd_chan *cmd_chan;
+	struct chan_hostres_map *hostres_map;
 
 	if (is_card_fatal_event(event_msg->event_code)) {
 		nnpdrv_submit_device_event_to_channels(nnpdev, event_msg, true);
@@ -352,6 +353,8 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 		switch (event_msg->event_code) {
 		case NNP_IPC_CREATE_CHANNEL_SUCCESS:
 		case NNP_IPC_CREATE_CHANNEL_FAILED:
+		case NNP_IPC_CHANNEL_SET_RB_SUCCESS:
+		case NNP_IPC_CHANNEL_SET_RB_FAILED:
 			cmd_chan = nnpdrv_device_find_channel(nnpdev,
 							     event_msg->obj_id);
 			if (!cmd_chan) {
@@ -364,6 +367,32 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 				wake_up_all(&nnpdev->waitq);
 			}
 			break;
+		case NNP_IPC_CHANNEL_MAP_HOSTRES_SUCCESS:
+		case NNP_IPC_CHANNEL_MAP_HOSTRES_FAILED:
+			cmd_chan =
+				nnpdrv_device_find_channel(nnpdev,
+							   event_msg->obj_id);
+			if (!cmd_chan) {
+				nnp_log_err(GENERAL_LOG,
+					    "Got channel create reply for not existing channel %d\n",
+					    event_msg->obj_id);
+			} else {
+				hostres_map =
+					nnpdrv_cmd_chan_find_hostres(cmd_chan,
+							event_msg->obj_id_2);
+				if (!hostres_map) {
+					nnp_log_err(GENERAL_LOG,
+						    "Got channel(%d) hostres reply for not existing hostres %d\n",
+						    event_msg->obj_id,
+						    event_msg->obj_id_2);
+				} else {
+					hostres_map->event_msg.value =
+						event_msg->value;
+					wake_up_all(&nnpdev->waitq);
+				}
+				nnpdrv_cmd_chan_put(cmd_chan);
+			}
+			break;
 		case NNP_IPC_DESTROY_CHANNEL_FAILED:
 			nnp_log_err(GENERAL_LOG,
 				    "Channel destroyed failed channel %d val %d\n",
@@ -386,6 +415,29 @@ static void nnpdrv_device_process_events(struct nnp_device *nnpdev,
 				nnpdrv_cmd_chan_put(cmd_chan);
 			}
 			break;
+		case NNP_IPC_CHANNEL_UNMAP_HOSTRES_FAILED:
+			nnp_log_err(GENERAL_LOG,
+				    "Channel hostres unmap failed on device channel %d map %d val %d\n",
+				    event_msg->obj_id, event_msg->obj_id_2,
+				    event_msg->event_val);
+			fallthrough;
+		case NNP_IPC_CHANNEL_UNMAP_HOSTRES_SUCCESS:
+			cmd_chan = nnpdrv_device_find_channel(nnpdev,
+							     event_msg->obj_id);
+			if (!cmd_chan) {
+				nnp_log_err(GENERAL_LOG,
+					    "Got channel unmap hostres reply for not existing channel %d\n",
+					    event_msg->obj_id);
+			} else {
+				if (nnpdrv_chan_unmap_hostres(cmd_chan,
+						event_msg->obj_id_2) != 0)
+					nnp_log_err(GENERAL_LOG,
+						    "channel hostres unmap failed for chan %d map %d\n",
+						    event_msg->obj_id,
+						    event_msg->obj_id_2);
+				nnpdrv_cmd_chan_put(cmd_chan);
+			}
+			break;
 		default:
 			nnp_log_err(GENERAL_LOG,
 				    "Unknown event received - %u\n",
diff --git a/drivers/misc/intel-nnpi/device.h b/drivers/misc/intel-nnpi/device.h
index df8d1923b559..7313860842b4 100644
--- a/drivers/misc/intel-nnpi/device.h
+++ b/drivers/misc/intel-nnpi/device.h
@@ -149,4 +149,6 @@ int nnpdrv_device_process_messages(struct nnp_device *nnpdev,
 				   u32                size);
 
 void nnpdrv_device_set_boot_state(struct nnp_device *nnpdev, u32 mask);
+struct nnpdrv_cmd_chan *nnpdrv_device_find_channel(struct nnp_device *nnpdev,
+						   u16             protocol_id);
 #endif
diff --git a/drivers/misc/intel-nnpi/device_chardev.c b/drivers/misc/intel-nnpi/device_chardev.c
index 39f1b2fca3f7..a100639b3c73 100644
--- a/drivers/misc/intel-nnpi/device_chardev.c
+++ b/drivers/misc/intel-nnpi/device_chardev.c
@@ -11,6 +11,7 @@
 #include <linux/device.h>
 #include <linux/slab.h>
 #include <uapi/misc/intel_nnpi.h>
+#include <linux/dma-noncoherent.h>
 #include "device_chardev.h"
 #include "nnp_log.h"
 #include "cmd_chan.h"
@@ -208,6 +209,422 @@ long create_channel(struct device_client_info *cinfo, void __user *arg)
 	return ret;
 }
 
+long create_channel_data_ringbuf(struct device_client_info *cinfo,
+				 void __user               *arg)
+{
+	struct nnp_device *nnpdev = cinfo->nnpdev;
+	struct ioctl_nnpi_create_channel_data_ringbuf req;
+	struct nnpdrv_cmd_chan *chan = NULL;
+	struct inf_hostres *hostres_entry = NULL;
+	struct nnpdrv_host_resource *hostres;
+	union h2c_channel_data_ringbuf_op msg;
+	struct inf_process_info *proc_info = NULL;
+	dma_addr_t page_list;
+	u32 total_chunks;
+	int ret;
+
+	ret = copy_from_user(&req, arg, sizeof(req));
+	if (ret != 0)
+		return -EIO;
+
+	req.o_errno = 0;
+
+	chan = nnpdrv_device_find_channel(nnpdev, req.i_channel_id);
+	if (!chan) {
+		nnp_dev_err(nnpdev->dev,
+			    CREATE_COMMAND_LOG, "channel not found\n");
+		req.o_errno = NNPER_NO_SUCH_CHANNEL;
+		ret = -EFAULT;
+		goto do_exit;
+	}
+
+	NNP_ASSERT(req.i_hostres_handle < INT_MAX);
+	proc_info = chan->proc_info;
+	hostres_entry = nnp_idr_get_object(&proc_info->objects_idr,
+					   (int)req.i_hostres_handle,
+					   inf_hostres_check_and_get);
+	if (!hostres_entry) {
+		nnp_dev_err(nnpdev->dev,
+			    CREATE_COMMAND_LOG, "host resource not found\n");
+		req.o_errno = NNPER_NO_SUCH_RESOURCE;
+		ret = -EFAULT;
+		goto do_exit;
+	}
+
+	hostres = hostres_entry->hostres;
+
+	if (!req.i_h2c) {
+		/* check host resource is output resource */
+		if (!nnpdrv_hostres_is_output(hostres)) {
+			nnp_dev_err(nnpdev->dev,
+				    CREATE_COMMAND_LOG, "Wrong direction\n");
+			req.o_errno = NNPER_INCOMPATIBLE_RESOURCES;
+			ret = -EINVAL;
+			goto do_exit;
+		}
+	} else {
+		/* check host resource is input resource */
+		if (!nnpdrv_hostres_is_input(hostres)) {
+			nnp_dev_err(nnpdev->dev,
+				    CREATE_COMMAND_LOG, "Wrong direction\n");
+			req.o_errno = NNPER_INCOMPATIBLE_RESOURCES;
+			ret = -EINVAL;
+			goto do_exit;
+		}
+	}
+
+	ret = nnpdrv_hostres_map_device(hostres,
+					nnpdev,
+					false,
+					&page_list,
+					&total_chunks);
+	if (ret != 0) {
+		nnp_dev_err(nnpdev->dev,
+			    CREATE_COMMAND_LOG, "hostresource map failed\n");
+		ret = -EFAULT;
+		goto do_exit;
+	}
+
+	msg.opcode = NNP_IPC_H2C_OP_CHANNEL_RB_OP;
+	msg.chan_id = chan->protocol_id;
+	msg.h2c = req.i_h2c ? 1 : 0;
+	msg.rb_id = req.i_id;
+	msg.destroy = 0;
+	msg.host_ptr = NNP_IPC_DMA_ADDR_TO_PFN(page_list);
+
+	chan->event_msg.value = 0;
+
+	ret = -EPIPE;
+	if (!is_card_fatal_drv_event(chan->card_critical_error.event_code))
+		ret = nnpdrv_msg_scheduler_queue_add_msg(nnpdev->public_cmdq,
+							 &msg.value,
+							 1);
+	if (ret < 0)
+		goto fail;
+
+	ret = wait_event_interruptible(nnpdev->waitq,
+				       chan->event_msg.value != 0 ||
+				       is_card_fatal_drv_event(
+					chan->card_critical_error.event_code));
+	if (chan->event_msg.value == 0) {
+		if (ret < 0) {
+			ret = -EINTR;
+		} else {
+			req.o_errno = NNPER_DEVICE_ERROR;
+			ret = -EFAULT;
+		}
+	} else if (chan->event_msg.event_code ==
+		   NNP_IPC_CHANNEL_SET_RB_FAILED) {
+		req.o_errno = event_valToNNPErrno(chan->event_msg.event_val);
+	}
+
+	if (ret == 0 && req.o_errno == 0) {
+		ret = nnpdrv_cmd_chan_set_ringbuf(chan,
+						  req.i_h2c,
+						  req.i_id,
+						  hostres);
+	}
+
+	if (ret == 0)
+		goto do_exit;
+
+fail:
+	nnpdrv_hostres_unmap_device(hostres, chan->nnpdev);
+
+do_exit:
+	if (hostres_entry)
+		inf_hostres_put(hostres_entry);
+	if (chan)
+		nnpdrv_cmd_chan_put(chan);
+	if (copy_to_user(arg, &req, sizeof(req)) != 0)
+		return -EIO;
+
+	return ret;
+}
+
+long destroy_channel_data_ringbuf(struct device_client_info *cinfo,
+				  void __user *arg)
+{
+	struct nnp_device *nnpdev = cinfo->nnpdev;
+	struct ioctl_nnpi_destroy_channel_data_ringbuf req;
+	struct nnpdrv_cmd_chan *chan;
+	union h2c_channel_data_ringbuf_op msg;
+	int ret;
+
+	ret = copy_from_user(&req, arg, sizeof(req));
+	if (ret != 0)
+		return -EIO;
+
+	req.o_errno = 0;
+
+	chan = nnpdrv_device_find_channel(nnpdev, req.i_channel_id);
+	if (!chan) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "channel not found\n");
+		req.o_errno = NNPER_NO_SUCH_CHANNEL;
+		ret = -EFAULT;
+		goto done;
+	}
+
+	msg.opcode = NNP_IPC_H2C_OP_CHANNEL_RB_OP;
+	msg.chan_id = chan->protocol_id;
+	msg.h2c = req.i_h2c ? 1 : 0;
+	msg.rb_id = req.i_id;
+	msg.destroy = 1;
+	msg.host_ptr = 0;
+
+	chan->event_msg.value = 0;
+
+	ret = -EPIPE;
+	if (!is_card_fatal_drv_event(chan->card_critical_error.event_code))
+		ret = nnpdrv_msg_scheduler_queue_add_msg(nnpdev->public_cmdq,
+							 &msg.value,
+							 1);
+	if (ret < 0)
+		goto put_chan;
+
+	ret = wait_event_interruptible(nnpdev->waitq,
+				       chan->event_msg.value != 0 ||
+				       is_card_fatal_drv_event(
+					chan->card_critical_error.event_code));
+	if (chan->event_msg.value == 0) {
+		if (ret < 0) {
+			ret = -EINTR;
+		} else {
+			req.o_errno = NNPER_DEVICE_ERROR;
+			ret = -EFAULT;
+		}
+	} else if (chan->event_msg.event_code ==
+		   NNP_IPC_CHANNEL_SET_RB_FAILED) {
+		req.o_errno = event_valToNNPErrno(chan->event_msg.event_val);
+	}
+
+	if (ret == 0 && req.o_errno == 0) {
+		ret = nnpdrv_cmd_chan_set_ringbuf(chan,
+						  req.i_h2c,
+						  req.i_id,
+						  NULL);
+	}
+
+put_chan:
+	nnpdrv_cmd_chan_put(chan);
+done:
+	if (copy_to_user(arg, &req, sizeof(req)) != 0)
+		return -EIO;
+
+	return ret;
+}
+
+static long map_hostres(struct device_client_info *cinfo, void __user *arg)
+{
+	struct nnp_device *nnpdev = cinfo->nnpdev;
+	struct ioctl_nnpi_channel_map_hostres req;
+	struct nnpdrv_cmd_chan *chan = NULL;
+	struct inf_hostres *hostres_entry = NULL;
+	struct nnpdrv_host_resource *hostres;
+	union h2c_channel_hostres_op msg;
+	struct inf_process_info *proc_info = NULL;
+	struct chan_hostres_map *hostres_map = NULL;
+	dma_addr_t page_list;
+	u32 total_chunks;
+	int map_protocol_id;
+	long ret;
+	unsigned long rc;
+
+	rc = copy_from_user(&req, arg, sizeof(req));
+	if (rc != 0)
+		return -EIO;
+
+	req.o_errno = 0;
+
+	chan = nnpdrv_device_find_channel(nnpdev, req.i_channel_id);
+	if (!chan) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "channel not found\n");
+		req.o_errno = NNPER_NO_SUCH_CHANNEL;
+		ret = -EFAULT;
+		goto do_exit;
+	}
+
+	hostres_map = kzalloc(sizeof(*hostres_map), GFP_KERNEL);
+	if (!hostres_map) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "no memory for hostres_map\n");
+		req.o_errno = ENOMEM;
+		ret = -EFAULT;
+		goto do_exit;
+	}
+
+	map_protocol_id = -1;
+	ret = ida_simple_get(&chan->hostres_map_ida,
+			     0,
+			     0xffff,
+			     GFP_KERNEL);
+	if (ret < 0) {
+		req.o_errno = ENOMEM;
+		ret = -EFAULT;
+		goto fail;
+	}
+	map_protocol_id = (int)ret;
+
+	NNP_ASSERT(req.i_hostres_handle < INT_MAX);
+	proc_info = chan->proc_info;
+	hostres_entry = nnp_idr_get_object(&proc_info->objects_idr,
+					   (int)req.i_hostres_handle,
+					   inf_hostres_check_and_get);
+	if (!hostres_entry) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "host resource not found\n");
+		req.o_errno = NNPER_NO_SUCH_RESOURCE;
+		ret = -EFAULT;
+		goto fail;
+	}
+
+	hostres = hostres_entry->hostres;
+
+	ret = nnpdrv_hostres_map_device(hostres,
+					nnpdev,
+					false,
+					&page_list,
+					&total_chunks);
+	if (ret != 0) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "hostresource map failed\n");
+		ret = -EFAULT;
+		goto fail;
+	}
+
+	msg.opcode = NNP_IPC_H2C_OP_CHANNEL_HOSTRES_OP;
+	msg.chan_id = chan->protocol_id;
+	msg.hostres_id = (u16)map_protocol_id;
+	msg.unmap = 0;
+	msg.host_ptr = NNP_IPC_DMA_ADDR_TO_PFN(page_list);
+
+	hostres_map->event_msg.value = 0;
+	hostres_map->protocol_id = (u16)map_protocol_id;
+	hostres_map->hostres = hostres;
+
+	spin_lock(&chan->lock);
+	hash_add(chan->hostres_hash,
+		 &hostres_map->hash_node,
+		 hostres_map->protocol_id);
+	spin_unlock(&chan->lock);
+
+	ret = -EPIPE;
+	if (!is_card_fatal_drv_event(
+				chan->card_critical_error.event_code))
+		ret = msg_scheduler_queue_add_msg(chan->cmdq,
+						  msg.value,
+						  2);
+	if (ret < 0) {
+		req.o_errno = NNPER_DEVICE_ERROR;
+		ret = -EFAULT;
+	} else {
+		ret = wait_event_interruptible(nnpdev->waitq,
+		 hostres_map->event_msg.value != 0 ||
+		 is_card_fatal_drv_event(chan->card_critical_error.event_code));
+		if (hostres_map->event_msg.value == 0) {
+			if (ret < 0) {
+				ret = -EINTR;
+			} else {
+				req.o_errno = NNPER_DEVICE_ERROR;
+				ret = -EFAULT;
+			}
+		} else if (hostres_map->event_msg.event_code ==
+			   NNP_IPC_CHANNEL_MAP_HOSTRES_FAILED) {
+			req.o_errno =
+			  event_valToNNPErrno(hostres_map->event_msg.event_val);
+		}
+	}
+
+	inf_hostres_put(hostres_entry);
+
+	if (ret == 0 && req.o_errno == 0) {
+		const struct dma_map_ops *ops =
+			get_dma_ops(nnpdev->hw_device_info->hw_device);
+
+		if (dma_is_direct(ops))
+			req.o_sync_needed = !dev_is_dma_coherent(
+					nnpdev->hw_device_info->hw_device);
+		else
+			req.o_sync_needed = (ops->sync_sg_for_cpu != NULL);
+
+		req.o_map_id = (u16)map_protocol_id;
+	} else {
+		nnpdrv_chan_unmap_hostres(chan, (u16)map_protocol_id);
+	}
+
+	goto do_exit;
+
+fail:
+	if (hostres_entry)
+		inf_hostres_put(hostres_entry);
+	if (-1 != map_protocol_id)
+		ida_simple_remove(&chan->hostres_map_ida, map_protocol_id);
+	kfree(hostres_map);
+
+do_exit:
+	if (chan)
+		nnpdrv_cmd_chan_put(chan);
+	rc = copy_to_user(arg, &req, sizeof(req));
+	if (rc != 0 && ret == 0)
+		ret = -EIO;
+
+	return ret;
+}
+
+static long unmap_hostres(struct device_client_info *cinfo, void __user *arg)
+{
+	struct nnp_device *nnpdev = cinfo->nnpdev;
+	struct ioctl_nnpi_channel_unmap_hostres req;
+	struct nnpdrv_cmd_chan *chan = NULL;
+	struct chan_hostres_map *hostres_map;
+	union h2c_channel_hostres_op msg;
+	long ret;
+
+	ret = copy_from_user(&req, arg, sizeof(req));
+	if (ret != 0)
+		return -EIO;
+
+	req.o_errno = 0;
+
+	chan = nnpdrv_device_find_channel(nnpdev, req.i_channel_id);
+	if (!chan) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "channel not found\n");
+		req.o_errno = NNPER_NO_SUCH_CHANNEL;
+		ret = -EFAULT;
+		goto done;
+	}
+
+	hostres_map = nnpdrv_cmd_chan_find_hostres(chan, req.i_map_id);
+	if (!hostres_map) {
+		nnp_dev_err(nnpdev->dev, CREATE_COMMAND_LOG,
+			    "host resource mapping not found\n");
+		req.o_errno = NNPER_NO_SUCH_HOSTRES_MAP;
+		ret = -EFAULT;
+		goto done;
+	}
+
+	msg.opcode = NNP_IPC_H2C_OP_CHANNEL_HOSTRES_OP;
+	msg.chan_id = chan->protocol_id;
+	msg.hostres_id = req.i_map_id;
+	msg.unmap = 1;
+
+	ret = msg_scheduler_queue_add_msg(chan->cmdq,
+					  msg.value,
+					  2);
+
+done:
+	if (chan)
+		nnpdrv_cmd_chan_put(chan);
+
+	if (copy_to_user(arg, &req, sizeof(req)) != 0)
+		return -EIO;
+
+	return ret;
+}
+
 static long nnpdrv_device_ioctl(struct file  *f,
 				unsigned int  cmd,
 				unsigned long arg)
@@ -221,6 +638,14 @@ static long nnpdrv_device_ioctl(struct file  *f,
 	switch (cmd) {
 	case IOCTL_NNPI_DEVICE_CREATE_CHANNEL:
 		return create_channel(client, (void __user *)arg);
+	case IOCTL_NNPI_DEVICE_CREATE_CHANNEL_RB:
+		return create_channel_data_ringbuf(client, (void __user *)arg);
+	case IOCTL_NNPI_DEVICE_DESTROY_CHANNEL_RB:
+		return destroy_channel_data_ringbuf(client, (void __user *)arg);
+	case IOCTL_NNPI_DEVICE_CHANNEL_MAP_HOSTRES:
+		return map_hostres(client, (void __user *)arg);
+	case IOCTL_NNPI_DEVICE_CHANNEL_UNMAP_HOSTRES:
+		return unmap_hostres(client, (void __user *)arg);
 	default:
 		nnp_dev_err(client->nnpdev->dev, GENERAL_LOG,
 			    "Unsupported device IOCTL 0x%x\n", cmd);
diff --git a/drivers/misc/intel-nnpi/if_include/ipc_protocol.h b/drivers/misc/intel-nnpi/if_include/ipc_protocol.h
index 79d84497427c..48f3c2197e98 100644
--- a/drivers/misc/intel-nnpi/if_include/ipc_protocol.h
+++ b/drivers/misc/intel-nnpi/if_include/ipc_protocol.h
@@ -60,7 +60,7 @@ NNP_STATIC_ASSERT(NNP_PAGE_SHIFT <= PAGE_SHIFT,
 
 #define NNP_IPC_INF_CONTEXT_BITS 8
 #define NNP_IPC_CHANNEL_BITS     10
-#define NNP_IPC_MAX_CHANNEL_RINGBUFS 2
+#define NNP_IPC_MAX_CHANNEL_RB   2
 
 #pragma pack(push, 1)
 
-- 
2.22.0

