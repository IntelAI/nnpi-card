/*******************************************************************************
INTEL CORPORATION CONFIDENTIAL Copyright(c) 2017-2021 Intel Corporation. All Rights Reserved.

The source code contained or described herein and all documents related to the
source code ("Material") are owned by Intel Corporation or its suppliers or
licensors. Title to the Material remains with Intel Corporation or its suppliers
and licensors. The Material contains trade secrets and proprietary and
confidential information of Intel or its suppliers and licensors. The Material
is protected by worldwide copyright and trade secret laws and treaty provisions.
No part of the Material may be used, copied, reproduced, modified, published,
uploaded, posted, transmitted, distributed, or disclosed in any way without
Intel's prior express written permission.

No license under any patent, copyright, trade secret or other intellectual
property right is granted to or conferred upon you by disclosure or delivery of
the Materials, either expressly, by implication, inducement, estoppel or
otherwise. Any license under such intellectual property rights must be express
and approved by Intel in writing.
*******************************************************************************/

//                                                                             
// File:            map_GeCoE_Core_regs.h                                      
// Creator:         vdirisin                                                   
// Time:            Wednesday Nov 27, 2019 [8:42:16 am]                        
//                                                                             
// Path:            /tmp/vdirisin/nebulon_run/171088171184_2019-11-27.08:41:08 
// Arguments:       -input                                                     
//                  /p/mpg/vdirisin_wa/sph_a0_repo/source/rdl/cve_cr_top.rdl   
//                  -qualitychecker -incdirs                                   
//                  /p/mpg/vdirisin_wa/sph_a0_repo/source/rdl/cve_cr_top_incdirs
//                  -crif -html -xml -ovm -treedump -chdr -cspec -out_dir      
//                  /p/mpg/vdirisin_wa/sph_a0_repo/results/nebulon             
//                                                                             
// MRE:             5.2018.2                                                   
// Machine:         icsl11776                                                  
// OS:              Linux 3.0.101-108.87-default                               
// Nebulon version: d18ww24.4                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
                                                                          


#ifndef _MAP_GECOE_CORE_REGS_H_
#define _MAP_GECOE_CORE_REGS_H_

#define CVE_GECOE_BASE 0x23000
#define CVE_GECOE_GECOE_DEC_SURF_COMP_STATUS_MMOFFSET 0x0
#define CVE_GECOE_GECOE_DEC_SURF0_START_ADDR_MMOFFSET 0x4
#define CVE_GECOE_GECOE_DEC_SURF0_END_OFFSET_MMOFFSET 0x8
#define CVE_GECOE_GECOE_DEC_SURF1_START_ADDR_MMOFFSET 0x0C
#define CVE_GECOE_GECOE_DEC_SURF1_END_OFFSET_MMOFFSET 0x10
#define CVE_GECOE_GECOE_DEC_SURF2_START_ADDR_MMOFFSET 0x14
#define CVE_GECOE_GECOE_DEC_SURF2_END_OFFSET_MMOFFSET 0x18
#define CVE_GECOE_GECOE_DEC_SURF3_START_ADDR_MMOFFSET 0x1C
#define CVE_GECOE_GECOE_DEC_SURF3_END_OFFSET_MMOFFSET 0x20
#define CVE_GECOE_GECOE_DEC_SURF4_START_ADDR_MMOFFSET 0x24
#define CVE_GECOE_GECOE_DEC_SURF4_END_OFFSET_MMOFFSET 0x28
#define CVE_GECOE_GECOE_DEC_SURF5_START_ADDR_MMOFFSET 0x2C
#define CVE_GECOE_GECOE_DEC_SURF5_END_OFFSET_MMOFFSET 0x30
#define CVE_GECOE_GECOE_DEC_SURF6_START_ADDR_MMOFFSET 0x34
#define CVE_GECOE_GECOE_DEC_SURF6_END_OFFSET_MMOFFSET 0x38
#define CVE_GECOE_GECOE_DEC_SURF7_START_ADDR_MMOFFSET 0x3C
#define CVE_GECOE_GECOE_DEC_SURF7_END_OFFSET_MMOFFSET 0x40
#define CVE_GECOE_GECOE_DEC_SURF8_START_ADDR_MMOFFSET 0x44
#define CVE_GECOE_GECOE_DEC_SURF8_END_OFFSET_MMOFFSET 0x48
#define CVE_GECOE_GECOE_DEC_SURF9_START_ADDR_MMOFFSET 0x4C
#define CVE_GECOE_GECOE_DEC_SURF9_END_OFFSET_MMOFFSET 0x50
#define CVE_GECOE_GECOE_DEC_SURF10_START_ADDR_MMOFFSET 0x54
#define CVE_GECOE_GECOE_DEC_SURF10_END_OFFSET_MMOFFSET 0x58
#define CVE_GECOE_GECOE_DEC_SURF11_START_ADDR_MMOFFSET 0x5C
#define CVE_GECOE_GECOE_DEC_SURF11_END_OFFSET_MMOFFSET 0x60
#define CVE_GECOE_GECOE_DEC_SURF12_START_ADDR_MMOFFSET 0x64
#define CVE_GECOE_GECOE_DEC_SURF12_END_OFFSET_MMOFFSET 0x68
#define CVE_GECOE_GECOE_DEC_SURF13_START_ADDR_MMOFFSET 0x6C
#define CVE_GECOE_GECOE_DEC_SURF13_END_OFFSET_MMOFFSET 0x70
#define CVE_GECOE_GECOE_DEC_SURF14_START_ADDR_MMOFFSET 0x74
#define CVE_GECOE_GECOE_DEC_SURF14_END_OFFSET_MMOFFSET 0x78
#define CVE_GECOE_GECOE_DEC_SURF15_START_ADDR_MMOFFSET 0x7C
#define CVE_GECOE_GECOE_DEC_SURF15_END_OFFSET_MMOFFSET 0x80
#define CVE_GECOE_GECOE_DEC_META0_START_ADDR_MMOFFSET 0x84
#define CVE_GECOE_GECOE_DEC_META0_END_OFFSET_MMOFFSET 0x88
#define CVE_GECOE_GECOE_DEC_META1_START_ADDR_MMOFFSET 0x8C
#define CVE_GECOE_GECOE_DEC_META1_END_OFFSET_MMOFFSET 0x90
#define CVE_GECOE_GECOE_DEC_META2_START_ADDR_MMOFFSET 0x94
#define CVE_GECOE_GECOE_DEC_META2_END_OFFSET_MMOFFSET 0x98
#define CVE_GECOE_GECOE_DEC_META3_START_ADDR_MMOFFSET 0x9C
#define CVE_GECOE_GECOE_DEC_META3_END_OFFSET_MMOFFSET 0x0A0
#define CVE_GECOE_GECOE_DEC_META4_START_ADDR_MMOFFSET 0x0A4
#define CVE_GECOE_GECOE_DEC_META4_END_OFFSET_MMOFFSET 0x0A8
#define CVE_GECOE_GECOE_DEC_META5_START_ADDR_MMOFFSET 0x0AC
#define CVE_GECOE_GECOE_DEC_META5_END_OFFSET_MMOFFSET 0x0B0
#define CVE_GECOE_GECOE_DEC_META6_START_ADDR_MMOFFSET 0x0B4
#define CVE_GECOE_GECOE_DEC_META6_END_OFFSET_MMOFFSET 0x0B8
#define CVE_GECOE_GECOE_DEC_META7_START_ADDR_MMOFFSET 0x0BC
#define CVE_GECOE_GECOE_DEC_META7_END_OFFSET_MMOFFSET 0x0C0
#define CVE_GECOE_GECOE_DEC_META8_START_ADDR_MMOFFSET 0x0C4
#define CVE_GECOE_GECOE_DEC_META8_END_OFFSET_MMOFFSET 0x0C8
#define CVE_GECOE_GECOE_DEC_META9_START_ADDR_MMOFFSET 0x0CC
#define CVE_GECOE_GECOE_DEC_META9_END_OFFSET_MMOFFSET 0x0D0
#define CVE_GECOE_GECOE_DEC_META10_START_ADDR_MMOFFSET 0x0D4
#define CVE_GECOE_GECOE_DEC_META10_END_OFFSET_MMOFFSET 0x0D8
#define CVE_GECOE_GECOE_DEC_META11_START_ADDR_MMOFFSET 0x0DC
#define CVE_GECOE_GECOE_DEC_META11_END_OFFSET_MMOFFSET 0x0E0
#define CVE_GECOE_GECOE_DEC_META12_START_ADDR_MMOFFSET 0x0E4
#define CVE_GECOE_GECOE_DEC_META12_END_OFFSET_MMOFFSET 0x0E8
#define CVE_GECOE_GECOE_DEC_META13_START_ADDR_MMOFFSET 0x0EC
#define CVE_GECOE_GECOE_DEC_META13_END_OFFSET_MMOFFSET 0x0F0
#define CVE_GECOE_GECOE_DEC_META14_START_ADDR_MMOFFSET 0x0F4
#define CVE_GECOE_GECOE_DEC_META14_END_OFFSET_MMOFFSET 0x0F8
#define CVE_GECOE_GECOE_DEC_META15_START_ADDR_MMOFFSET 0x0FC
#define CVE_GECOE_GECOE_DEC_META15_END_OFFSET_MMOFFSET 0x100
#define CVE_GECOE_GECOE_ENC_SURF_COMP_STATUS_MMOFFSET 0x104
#define CVE_GECOE_GECOE_ENC_SURF0_START_ADDR_MMOFFSET 0x108
#define CVE_GECOE_GECOE_ENC_SURF0_END_OFFSET_MMOFFSET 0x10C
#define CVE_GECOE_GECOE_ENC_SURF1_START_ADDR_MMOFFSET 0x110
#define CVE_GECOE_GECOE_ENC_SURF1_END_OFFSET_MMOFFSET 0x114
#define CVE_GECOE_GECOE_ENC_SURF2_START_ADDR_MMOFFSET 0x118
#define CVE_GECOE_GECOE_ENC_SURF2_END_OFFSET_MMOFFSET 0x11C
#define CVE_GECOE_GECOE_ENC_SURF3_START_ADDR_MMOFFSET 0x120
#define CVE_GECOE_GECOE_ENC_SURF3_END_OFFSET_MMOFFSET 0x124
#define CVE_GECOE_GECOE_ENC_SURF4_START_ADDR_MMOFFSET 0x128
#define CVE_GECOE_GECOE_ENC_SURF4_END_OFFSET_MMOFFSET 0x12C
#define CVE_GECOE_GECOE_ENC_SURF5_START_ADDR_MMOFFSET 0x130
#define CVE_GECOE_GECOE_ENC_SURF5_END_OFFSET_MMOFFSET 0x134
#define CVE_GECOE_GECOE_ENC_SURF6_START_ADDR_MMOFFSET 0x138
#define CVE_GECOE_GECOE_ENC_SURF6_END_OFFSET_MMOFFSET 0x13C
#define CVE_GECOE_GECOE_ENC_SURF7_START_ADDR_MMOFFSET 0x140
#define CVE_GECOE_GECOE_ENC_SURF7_END_OFFSET_MMOFFSET 0x144
#define CVE_GECOE_GECOE_ENC_SURF8_START_ADDR_MMOFFSET 0x148
#define CVE_GECOE_GECOE_ENC_SURF8_END_OFFSET_MMOFFSET 0x14C
#define CVE_GECOE_GECOE_ENC_SURF9_START_ADDR_MMOFFSET 0x150
#define CVE_GECOE_GECOE_ENC_SURF9_END_OFFSET_MMOFFSET 0x154
#define CVE_GECOE_GECOE_ENC_SURF10_START_ADDR_MMOFFSET 0x158
#define CVE_GECOE_GECOE_ENC_SURF10_END_OFFSET_MMOFFSET 0x15C
#define CVE_GECOE_GECOE_ENC_SURF11_START_ADDR_MMOFFSET 0x160
#define CVE_GECOE_GECOE_ENC_SURF11_END_OFFSET_MMOFFSET 0x164
#define CVE_GECOE_GECOE_ENC_SURF12_START_ADDR_MMOFFSET 0x168
#define CVE_GECOE_GECOE_ENC_SURF12_END_OFFSET_MMOFFSET 0x16C
#define CVE_GECOE_GECOE_ENC_SURF13_START_ADDR_MMOFFSET 0x170
#define CVE_GECOE_GECOE_ENC_SURF13_END_OFFSET_MMOFFSET 0x174
#define CVE_GECOE_GECOE_ENC_SURF14_START_ADDR_MMOFFSET 0x178
#define CVE_GECOE_GECOE_ENC_SURF14_END_OFFSET_MMOFFSET 0x17C
#define CVE_GECOE_GECOE_ENC_SURF15_START_ADDR_MMOFFSET 0x180
#define CVE_GECOE_GECOE_ENC_SURF15_END_OFFSET_MMOFFSET 0x184
#define CVE_GECOE_GECOE_ENC_META0_START_ADDR_MMOFFSET 0x188
#define CVE_GECOE_GECOE_ENC_META0_END_OFFSET_MMOFFSET 0x18C
#define CVE_GECOE_GECOE_ENC_META1_START_ADDR_MMOFFSET 0x190
#define CVE_GECOE_GECOE_ENC_META1_END_OFFSET_MMOFFSET 0x194
#define CVE_GECOE_GECOE_ENC_META2_START_ADDR_MMOFFSET 0x198
#define CVE_GECOE_GECOE_ENC_META2_END_OFFSET_MMOFFSET 0x19C
#define CVE_GECOE_GECOE_ENC_META3_START_ADDR_MMOFFSET 0x1A0
#define CVE_GECOE_GECOE_ENC_META3_END_OFFSET_MMOFFSET 0x1A4
#define CVE_GECOE_GECOE_ENC_META4_START_ADDR_MMOFFSET 0x1A8
#define CVE_GECOE_GECOE_ENC_META4_END_OFFSET_MMOFFSET 0x1AC
#define CVE_GECOE_GECOE_ENC_META5_START_ADDR_MMOFFSET 0x1B0
#define CVE_GECOE_GECOE_ENC_META5_END_OFFSET_MMOFFSET 0x1B4
#define CVE_GECOE_GECOE_ENC_META6_START_ADDR_MMOFFSET 0x1B8
#define CVE_GECOE_GECOE_ENC_META6_END_OFFSET_MMOFFSET 0x1BC
#define CVE_GECOE_GECOE_ENC_META7_START_ADDR_MMOFFSET 0x1C0
#define CVE_GECOE_GECOE_ENC_META7_END_OFFSET_MMOFFSET 0x1C4
#define CVE_GECOE_GECOE_ENC_META8_START_ADDR_MMOFFSET 0x1C8
#define CVE_GECOE_GECOE_ENC_META8_END_OFFSET_MMOFFSET 0x1CC
#define CVE_GECOE_GECOE_ENC_META9_START_ADDR_MMOFFSET 0x1D0
#define CVE_GECOE_GECOE_ENC_META9_END_OFFSET_MMOFFSET 0x1D4
#define CVE_GECOE_GECOE_ENC_META10_START_ADDR_MMOFFSET 0x1D8
#define CVE_GECOE_GECOE_ENC_META10_END_OFFSET_MMOFFSET 0x1DC
#define CVE_GECOE_GECOE_ENC_META11_START_ADDR_MMOFFSET 0x1E0
#define CVE_GECOE_GECOE_ENC_META11_END_OFFSET_MMOFFSET 0x1E4
#define CVE_GECOE_GECOE_ENC_META12_START_ADDR_MMOFFSET 0x1E8
#define CVE_GECOE_GECOE_ENC_META12_END_OFFSET_MMOFFSET 0x1EC
#define CVE_GECOE_GECOE_ENC_META13_START_ADDR_MMOFFSET 0x1F0
#define CVE_GECOE_GECOE_ENC_META13_END_OFFSET_MMOFFSET 0x1F4
#define CVE_GECOE_GECOE_ENC_META14_START_ADDR_MMOFFSET 0x1F8
#define CVE_GECOE_GECOE_ENC_META14_END_OFFSET_MMOFFSET 0x1FC
#define CVE_GECOE_GECOE_ENC_META15_START_ADDR_MMOFFSET 0x200
#define CVE_GECOE_GECOE_ENC_META15_END_OFFSET_MMOFFSET 0x204
#define CVE_GECOE_GECOE_FLUSH_REQ_MMOFFSET 0x208
#define CVE_GECOE_GECOE_FLUSHED_STREAM_MMOFFSET 0x20C
#define CVE_GECOE_GECOE_FLUSH_REQ_SHADOW_MMOFFSET 0x210
#define CVE_GECOE_GECOE_MAX_BURST_LENGTH_MMOFFSET 0x214
#define CVE_GECOE_GECOE_DEC_PARTIAL_ACCESS_COUNT_MMOFFSET 0x218
#define CVE_GECOE_GECOE_ENC_PARTIAL_ACCESS_COUNT_MMOFFSET 0x21C
#define CVE_GECOE_GECOE_DEC_META_MISS_COUNT_MMOFFSET 0x220
#define CVE_GECOE_GECOE_ENC_UNCOM_MODE_COUNT_MMOFFSET 0x224
#define CVE_GECOE_GECOE_ENC_NULL_MODE_COUNT_MMOFFSET 0x228
#define CVE_GECOE_GECOE_ENC_SM_MODE_COUNT_MMOFFSET 0x22C
#define CVE_GECOE_GECOE_DBG_REG_MMOFFSET 0x230
#define CVE_GECOE_HASHING_ENABLE_MMOFFSET 0x234
#define CVE_GECOE_GECOE_DEC_SURF0_START_ADDR_MSB_MMOFFSET 0x238
#define CVE_GECOE_GECOE_DEC_SURF0_END_OFFSET_MSB_MMOFFSET 0x23C
#define CVE_GECOE_GECOE_DEC_SURF1_START_ADDR_MSB_MMOFFSET 0x240
#define CVE_GECOE_GECOE_DEC_SURF1_END_OFFSET_MSB_MMOFFSET 0x244
#define CVE_GECOE_GECOE_DEC_SURF2_START_ADDR_MSB_MMOFFSET 0x248
#define CVE_GECOE_GECOE_DEC_SURF2_END_OFFSET_MSB_MMOFFSET 0x24C
#define CVE_GECOE_GECOE_DEC_SURF3_START_ADDR_MSB_MMOFFSET 0x250
#define CVE_GECOE_GECOE_DEC_SURF3_END_OFFSET_MSB_MMOFFSET 0x254
#define CVE_GECOE_GECOE_DEC_SURF4_START_ADDR_MSB_MMOFFSET 0x258
#define CVE_GECOE_GECOE_DEC_SURF4_END_OFFSET_MSB_MMOFFSET 0x25C
#define CVE_GECOE_GECOE_DEC_SURF5_START_ADDR_MSB_MMOFFSET 0x260
#define CVE_GECOE_GECOE_DEC_SURF5_END_OFFSET_MSB_MMOFFSET 0x264
#define CVE_GECOE_GECOE_DEC_SURF6_START_ADDR_MSB_MMOFFSET 0x268
#define CVE_GECOE_GECOE_DEC_SURF6_END_OFFSET_MSB_MMOFFSET 0x26C
#define CVE_GECOE_GECOE_DEC_SURF7_START_ADDR_MSB_MMOFFSET 0x270
#define CVE_GECOE_GECOE_DEC_SURF7_END_OFFSET_MSB_MMOFFSET 0x274
#define CVE_GECOE_GECOE_DEC_SURF8_START_ADDR_MSB_MMOFFSET 0x278
#define CVE_GECOE_GECOE_DEC_SURF8_END_OFFSET_MSB_MMOFFSET 0x27C
#define CVE_GECOE_GECOE_DEC_SURF9_START_ADDR_MSB_MMOFFSET 0x280
#define CVE_GECOE_GECOE_DEC_SURF9_END_OFFSET_MSB_MMOFFSET 0x284
#define CVE_GECOE_GECOE_DEC_SURF10_START_ADDR_MSB_MMOFFSET 0x288
#define CVE_GECOE_GECOE_DEC_SURF10_END_OFFSET_MSB_MMOFFSET 0x28C
#define CVE_GECOE_GECOE_DEC_SURF11_START_ADDR_MSB_MMOFFSET 0x290
#define CVE_GECOE_GECOE_DEC_SURF11_END_OFFSET_MSB_MMOFFSET 0x294
#define CVE_GECOE_GECOE_DEC_SURF12_START_ADDR_MSB_MMOFFSET 0x298
#define CVE_GECOE_GECOE_DEC_SURF12_END_OFFSET_MSB_MMOFFSET 0x29C
#define CVE_GECOE_GECOE_DEC_SURF13_START_ADDR_MSB_MMOFFSET 0x2A0
#define CVE_GECOE_GECOE_DEC_SURF13_END_OFFSET_MSB_MMOFFSET 0x2A4
#define CVE_GECOE_GECOE_DEC_SURF14_START_ADDR_MSB_MMOFFSET 0x2A8
#define CVE_GECOE_GECOE_DEC_SURF14_END_OFFSET_MSB_MMOFFSET 0x2AC
#define CVE_GECOE_GECOE_DEC_SURF15_START_ADDR_MSB_MMOFFSET 0x2B0
#define CVE_GECOE_GECOE_DEC_SURF15_END_OFFSET_MSB_MMOFFSET 0x2B4
#define CVE_GECOE_GECOE_DEC_META0_START_ADDR_MSB_MMOFFSET 0x2B8
#define CVE_GECOE_GECOE_DEC_META0_END_OFFSET_MSB_MMOFFSET 0x2BC
#define CVE_GECOE_GECOE_DEC_META1_START_ADDR_MSB_MMOFFSET 0x2C0
#define CVE_GECOE_GECOE_DEC_META1_END_OFFSET_MSB_MMOFFSET 0x2C4
#define CVE_GECOE_GECOE_DEC_META2_START_ADDR_MSB_MMOFFSET 0x2C8
#define CVE_GECOE_GECOE_DEC_META2_END_OFFSET_MSB_MMOFFSET 0x2CC
#define CVE_GECOE_GECOE_DEC_META3_START_ADDR_MSB_MMOFFSET 0x2D0
#define CVE_GECOE_GECOE_DEC_META3_END_OFFSET_MSB_MMOFFSET 0x2D4
#define CVE_GECOE_GECOE_DEC_META4_START_ADDR_MSB_MMOFFSET 0x2D8
#define CVE_GECOE_GECOE_DEC_META4_END_OFFSET_MSB_MMOFFSET 0x2DC
#define CVE_GECOE_GECOE_DEC_META5_START_ADDR_MSB_MMOFFSET 0x2E0
#define CVE_GECOE_GECOE_DEC_META5_END_OFFSET_MSB_MMOFFSET 0x2E4
#define CVE_GECOE_GECOE_DEC_META6_START_ADDR_MSB_MMOFFSET 0x2E8
#define CVE_GECOE_GECOE_DEC_META6_END_OFFSET_MSB_MMOFFSET 0x2EC
#define CVE_GECOE_GECOE_DEC_META7_START_ADDR_MSB_MMOFFSET 0x2F0
#define CVE_GECOE_GECOE_DEC_META7_END_OFFSET_MSB_MMOFFSET 0x2F4
#define CVE_GECOE_GECOE_DEC_META8_START_ADDR_MSB_MMOFFSET 0x2F8
#define CVE_GECOE_GECOE_DEC_META8_END_OFFSET_MSB_MMOFFSET 0x2FC
#define CVE_GECOE_GECOE_DEC_META9_START_ADDR_MSB_MMOFFSET 0x300
#define CVE_GECOE_GECOE_DEC_META9_END_OFFSET_MSB_MMOFFSET 0x304
#define CVE_GECOE_GECOE_DEC_META10_START_ADDR_MSB_MMOFFSET 0x308
#define CVE_GECOE_GECOE_DEC_META10_END_OFFSET_MSB_MMOFFSET 0x30C
#define CVE_GECOE_GECOE_DEC_META11_START_ADDR_MSB_MMOFFSET 0x310
#define CVE_GECOE_GECOE_DEC_META11_END_OFFSET_MSB_MMOFFSET 0x314
#define CVE_GECOE_GECOE_DEC_META12_START_ADDR_MSB_MMOFFSET 0x318
#define CVE_GECOE_GECOE_DEC_META12_END_OFFSET_MSB_MMOFFSET 0x31C
#define CVE_GECOE_GECOE_DEC_META13_START_ADDR_MSB_MMOFFSET 0x320
#define CVE_GECOE_GECOE_DEC_META13_END_OFFSET_MSB_MMOFFSET 0x324
#define CVE_GECOE_GECOE_DEC_META14_START_ADDR_MSB_MMOFFSET 0x328
#define CVE_GECOE_GECOE_DEC_META14_END_OFFSET_MSB_MMOFFSET 0x32C
#define CVE_GECOE_GECOE_DEC_META15_START_ADDR_MSB_MMOFFSET 0x330
#define CVE_GECOE_GECOE_DEC_META15_END_OFFSET_MSB_MMOFFSET 0x334
#define CVE_GECOE_GECOE_ENC_SURF0_START_ADDR_MSB_MMOFFSET 0x338
#define CVE_GECOE_GECOE_ENC_SURF0_END_OFFSET_MSB_MMOFFSET 0x33C
#define CVE_GECOE_GECOE_ENC_SURF1_START_ADDR_MSB_MMOFFSET 0x340
#define CVE_GECOE_GECOE_ENC_SURF1_END_OFFSET_MSB_MMOFFSET 0x344
#define CVE_GECOE_GECOE_ENC_SURF2_START_ADDR_MSB_MMOFFSET 0x348
#define CVE_GECOE_GECOE_ENC_SURF2_END_OFFSET_MSB_MMOFFSET 0x34C
#define CVE_GECOE_GECOE_ENC_SURF3_START_ADDR_MSB_MMOFFSET 0x350
#define CVE_GECOE_GECOE_ENC_SURF3_END_OFFSET_MSB_MMOFFSET 0x354
#define CVE_GECOE_GECOE_ENC_SURF4_START_ADDR_MSB_MMOFFSET 0x358
#define CVE_GECOE_GECOE_ENC_SURF4_END_OFFSET_MSB_MMOFFSET 0x35C
#define CVE_GECOE_GECOE_ENC_SURF5_START_ADDR_MSB_MMOFFSET 0x360
#define CVE_GECOE_GECOE_ENC_SURF5_END_OFFSET_MSB_MMOFFSET 0x364
#define CVE_GECOE_GECOE_ENC_SURF6_START_ADDR_MSB_MMOFFSET 0x368
#define CVE_GECOE_GECOE_ENC_SURF6_END_OFFSET_MSB_MMOFFSET 0x36C
#define CVE_GECOE_GECOE_ENC_SURF7_START_ADDR_MSB_MMOFFSET 0x370
#define CVE_GECOE_GECOE_ENC_SURF7_END_OFFSET_MSB_MMOFFSET 0x374
#define CVE_GECOE_GECOE_ENC_SURF8_START_ADDR_MSB_MMOFFSET 0x378
#define CVE_GECOE_GECOE_ENC_SURF8_END_OFFSET_MSB_MMOFFSET 0x37C
#define CVE_GECOE_GECOE_ENC_SURF9_START_ADDR_MSB_MMOFFSET 0x380
#define CVE_GECOE_GECOE_ENC_SURF9_END_OFFSET_MSB_MMOFFSET 0x384
#define CVE_GECOE_GECOE_ENC_SURF10_START_ADDR_MSB_MMOFFSET 0x388
#define CVE_GECOE_GECOE_ENC_SURF10_END_OFFSET_MSB_MMOFFSET 0x38C
#define CVE_GECOE_GECOE_ENC_SURF11_START_ADDR_MSB_MMOFFSET 0x390
#define CVE_GECOE_GECOE_ENC_SURF11_END_OFFSET_MSB_MMOFFSET 0x394
#define CVE_GECOE_GECOE_ENC_SURF12_START_ADDR_MSB_MMOFFSET 0x398
#define CVE_GECOE_GECOE_ENC_SURF12_END_OFFSET_MSB_MMOFFSET 0x39C
#define CVE_GECOE_GECOE_ENC_SURF13_START_ADDR_MSB_MMOFFSET 0x3A0
#define CVE_GECOE_GECOE_ENC_SURF13_END_OFFSET_MSB_MMOFFSET 0x3A4
#define CVE_GECOE_GECOE_ENC_SURF14_START_ADDR_MSB_MMOFFSET 0x3A8
#define CVE_GECOE_GECOE_ENC_SURF14_END_OFFSET_MSB_MMOFFSET 0x3AC
#define CVE_GECOE_GECOE_ENC_SURF15_START_ADDR_MSB_MMOFFSET 0x3B0
#define CVE_GECOE_GECOE_ENC_SURF15_END_OFFSET_MSB_MMOFFSET 0x3B4
#define CVE_GECOE_GECOE_ENC_META0_START_ADDR_MSB_MMOFFSET 0x3B8
#define CVE_GECOE_GECOE_ENC_META0_END_OFFSET_MSB_MMOFFSET 0x3BC
#define CVE_GECOE_GECOE_ENC_META1_START_ADDR_MSB_MMOFFSET 0x3C0
#define CVE_GECOE_GECOE_ENC_META1_END_OFFSET_MSB_MMOFFSET 0x3C4
#define CVE_GECOE_GECOE_ENC_META2_START_ADDR_MSB_MMOFFSET 0x3C8
#define CVE_GECOE_GECOE_ENC_META2_END_OFFSET_MSB_MMOFFSET 0x3CC
#define CVE_GECOE_GECOE_ENC_META3_START_ADDR_MSB_MMOFFSET 0x3D0
#define CVE_GECOE_GECOE_ENC_META3_END_OFFSET_MSB_MMOFFSET 0x3D4
#define CVE_GECOE_GECOE_ENC_META4_START_ADDR_MSB_MMOFFSET 0x3D8
#define CVE_GECOE_GECOE_ENC_META4_END_OFFSET_MSB_MMOFFSET 0x3DC
#define CVE_GECOE_GECOE_ENC_META5_START_ADDR_MSB_MMOFFSET 0x3E0
#define CVE_GECOE_GECOE_ENC_META5_END_OFFSET_MSB_MMOFFSET 0x3E4
#define CVE_GECOE_GECOE_ENC_META6_START_ADDR_MSB_MMOFFSET 0x3E8
#define CVE_GECOE_GECOE_ENC_META6_END_OFFSET_MSB_MMOFFSET 0x3EC
#define CVE_GECOE_GECOE_ENC_META7_START_ADDR_MSB_MMOFFSET 0x3F0
#define CVE_GECOE_GECOE_ENC_META7_END_OFFSET_MSB_MMOFFSET 0x3F4
#define CVE_GECOE_GECOE_ENC_META8_START_ADDR_MSB_MMOFFSET 0x3F8
#define CVE_GECOE_GECOE_ENC_META8_END_OFFSET_MSB_MMOFFSET 0x3FC
#define CVE_GECOE_GECOE_ENC_META9_START_ADDR_MSB_MMOFFSET 0x400
#define CVE_GECOE_GECOE_ENC_META9_END_OFFSET_MSB_MMOFFSET 0x404
#define CVE_GECOE_GECOE_ENC_META10_START_ADDR_MSB_MMOFFSET 0x408
#define CVE_GECOE_GECOE_ENC_META10_END_OFFSET_MSB_MMOFFSET 0x40C
#define CVE_GECOE_GECOE_ENC_META11_START_ADDR_MSB_MMOFFSET 0x410
#define CVE_GECOE_GECOE_ENC_META11_END_OFFSET_MSB_MMOFFSET 0x414
#define CVE_GECOE_GECOE_ENC_META12_START_ADDR_MSB_MMOFFSET 0x418
#define CVE_GECOE_GECOE_ENC_META12_END_OFFSET_MSB_MMOFFSET 0x41C
#define CVE_GECOE_GECOE_ENC_META13_START_ADDR_MSB_MMOFFSET 0x420
#define CVE_GECOE_GECOE_ENC_META13_END_OFFSET_MSB_MMOFFSET 0x424
#define CVE_GECOE_GECOE_ENC_META14_START_ADDR_MSB_MMOFFSET 0x428
#define CVE_GECOE_GECOE_ENC_META14_END_OFFSET_MSB_MMOFFSET 0x42C
#define CVE_GECOE_GECOE_ENC_META15_START_ADDR_MSB_MMOFFSET 0x430
#define CVE_GECOE_GECOE_ENC_META15_END_OFFSET_MSB_MMOFFSET 0x434

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_FLAG
// GECOE_DEC_SURF_COMP_STATUS desc:  GeCoE DEC SURF0 Compress status
typedef union {
    struct {
        uint32_t  DEC_SURF0_COMPRESSED :   2;    //  Decoder Surface 0 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF1_COMPRESSED :   2;    //  Decoder Surface 1 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF2_COMPRESSED :   2;    //  Decoder Surface 2 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF3_COMPRESSED :   2;    //  Decoder Surface 3 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF4_COMPRESSED :   2;    //  Decoder Surface 4 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF5_COMPRESSED :   2;    //  Decoder Surface 5 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF6_COMPRESSED :   2;    //  Decoder Surface 6 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF7_COMPRESSED :   2;    //  Decoder Surface 7 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF8_COMPRESSED :   2;    //  Decoder Surface 8 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF9_COMPRESSED :   2;    //  Decoder Surface 9 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF10_COMPRESSED :   2;    //  Decoder Surface 10 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF11_COMPRESSED :   2;    //  Decoder Surface 11 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF12_COMPRESSED :   2;    //  Decoder Surface 12 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF13_COMPRESSED :   2;    //  Decoder Surface 13 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF14_COMPRESSED :   2;    //  Decoder Surface 14 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  DEC_SURF15_COMPRESSED :   2;    //  Decoder Surface 15 is
                                                 // compressed or uncompressed (0
                                                 // or 1)

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_OFFSET 0x00
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_BITFIELD_COUNT 0x10
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF0_COMPRESSED_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF0_COMPRESSED_MSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF0_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF0_COMPRESSED_MASK 0x00000003
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF0_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF1_COMPRESSED_LSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF1_COMPRESSED_MSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF1_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF1_COMPRESSED_MASK 0x0000000c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF1_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF2_COMPRESSED_LSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF2_COMPRESSED_MSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF2_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF2_COMPRESSED_MASK 0x00000030
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF2_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF3_COMPRESSED_LSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF3_COMPRESSED_MSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF3_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF3_COMPRESSED_MASK 0x000000c0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF3_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF4_COMPRESSED_LSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF4_COMPRESSED_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF4_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF4_COMPRESSED_MASK 0x00000300
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF4_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF5_COMPRESSED_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF5_COMPRESSED_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF5_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF5_COMPRESSED_MASK 0x00000c00
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF5_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF6_COMPRESSED_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF6_COMPRESSED_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF6_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF6_COMPRESSED_MASK 0x00003000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF6_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF7_COMPRESSED_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF7_COMPRESSED_MSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF7_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF7_COMPRESSED_MASK 0x0000c000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF7_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF8_COMPRESSED_LSB 0x0010
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF8_COMPRESSED_MSB 0x0011
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF8_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF8_COMPRESSED_MASK 0x00030000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF8_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF9_COMPRESSED_LSB 0x0012
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF9_COMPRESSED_MSB 0x0013
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF9_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF9_COMPRESSED_MASK 0x000c0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF9_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF10_COMPRESSED_LSB 0x0014
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF10_COMPRESSED_MSB 0x0015
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF10_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF10_COMPRESSED_MASK 0x00300000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF10_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF11_COMPRESSED_LSB 0x0016
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF11_COMPRESSED_MSB 0x0017
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF11_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF11_COMPRESSED_MASK 0x00c00000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF11_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF12_COMPRESSED_LSB 0x0018
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF12_COMPRESSED_MSB 0x0019
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF12_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF12_COMPRESSED_MASK 0x03000000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF12_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF13_COMPRESSED_LSB 0x001a
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF13_COMPRESSED_MSB 0x001b
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF13_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF13_COMPRESSED_MASK 0x0c000000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF13_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF14_COMPRESSED_LSB 0x001c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF14_COMPRESSED_MSB 0x001d
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF14_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF14_COMPRESSED_MASK 0x30000000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF14_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF15_COMPRESSED_LSB 0x001e
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF15_COMPRESSED_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF15_COMPRESSED_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF15_COMPRESSED_MASK 0xc0000000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_DEC_SURF15_COMPRESSED_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_FLAG
// GECOE_DEC_SURF0_START_ADDR desc:  GeCoE DEC SURF0 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_OFFSET 0x04
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_FLAG
// GECOE_DEC_SURF0_END_OFFSET desc:  GeCoE DEC SURF0 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET 0x08
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_FLAG
// GECOE_DEC_SURF1_START_ADDR desc:  GeCoE DEC SURF1 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_OFFSET 0x0c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_FLAG
// GECOE_DEC_SURF1_END_OFFSET desc:  GeCoE DEC SURF1 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET 0x10
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_FLAG
// GECOE_DEC_SURF2_START_ADDR desc:  GeCoE DEC SURF2 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_OFFSET 0x14
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_FLAG
// GECOE_DEC_SURF2_END_OFFSET desc:  GeCoE DEC SURF2 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET 0x18
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_FLAG
// GECOE_DEC_SURF3_START_ADDR desc:  GeCoE DEC SURF3 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_OFFSET 0x1c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_FLAG
// GECOE_DEC_SURF3_END_OFFSET desc:  GeCoE DEC SURF3 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET 0x20
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_FLAG
// GECOE_DEC_SURF4_START_ADDR desc:  GeCoE DEC SURF4 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_OFFSET 0x24
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_FLAG
// GECOE_DEC_SURF4_END_OFFSET desc:  GeCoE DEC SURF4 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET 0x28
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_FLAG
// GECOE_DEC_SURF5_START_ADDR desc:  GeCoE DEC SURF5 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_OFFSET 0x2c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_FLAG
// GECOE_DEC_SURF5_END_OFFSET desc:  GeCoE DEC SURF5 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET 0x30
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_FLAG
// GECOE_DEC_SURF6_START_ADDR desc:  GeCoE DEC SURF6 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_OFFSET 0x34
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_FLAG
// GECOE_DEC_SURF6_END_OFFSET desc:  GeCoE DEC SURF6 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET 0x38
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_FLAG
// GECOE_DEC_SURF7_START_ADDR desc:  GeCoE DEC SURF7 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_OFFSET 0x3c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_FLAG
// GECOE_DEC_SURF7_END_OFFSET desc:  GeCoE DEC SURF7 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET 0x40
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_FLAG
// GECOE_DEC_SURF8_START_ADDR desc:  GeCoE DEC SURF8 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_OFFSET 0x44
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_FLAG
// GECOE_DEC_SURF8_END_OFFSET desc:  GeCoE DEC SURF8 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET 0x48
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_FLAG
// GECOE_DEC_SURF9_START_ADDR desc:  GeCoE DEC SURF9 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_OFFSET 0x4c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_FLAG
// GECOE_DEC_SURF9_END_OFFSET desc:  GeCoE DEC SURF9 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET 0x50
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_FLAG
// GECOE_DEC_SURF10_START_ADDR desc:  GeCoE DEC SURF10 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_OFFSET 0x54
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_FLAG
// GECOE_DEC_SURF10_END_OFFSET desc:  GeCoE DEC SURF10 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET 0x58
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_FLAG
// GECOE_DEC_SURF11_START_ADDR desc:  GeCoE DEC SURF11 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_OFFSET 0x5c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_FLAG
// GECOE_DEC_SURF11_END_OFFSET desc:  GeCoE DEC SURF11 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET 0x60
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_FLAG
// GECOE_DEC_SURF12_START_ADDR desc:  GeCoE DEC SURF12 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_OFFSET 0x64
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_FLAG
// GECOE_DEC_SURF12_END_OFFSET desc:  GeCoE DEC SURF12 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET 0x68
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_FLAG
// GECOE_DEC_SURF13_START_ADDR desc:  GeCoE DEC SURF13 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_OFFSET 0x6c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_FLAG
// GECOE_DEC_SURF13_END_OFFSET desc:  GeCoE DEC SURF13 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET 0x70
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_FLAG
// GECOE_DEC_SURF14_START_ADDR desc:  GeCoE DEC SURF14 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_OFFSET 0x74
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_FLAG
// GECOE_DEC_SURF14_END_OFFSET desc:  GeCoE DEC SURF14 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET 0x78
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_FLAG
// GECOE_DEC_SURF15_START_ADDR desc:  GeCoE DEC SURF15 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_OFFSET 0x7c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_FLAG
// GECOE_DEC_SURF15_END_OFFSET desc:  GeCoE DEC SURF15 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET 0x80
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_FLAG
// GECOE_DEC_META0_START_ADDR desc:  GeCoE DEC META0 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_OFFSET 0x84
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_FLAG
// GECOE_DEC_META0_END_OFFSET desc:  GeCoE DEC META0 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET 0x88
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_FLAG
// GECOE_DEC_META1_START_ADDR desc:  GeCoE DEC META1 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_OFFSET 0x8c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_FLAG
// GECOE_DEC_META1_END_OFFSET desc:  GeCoE DEC META1 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET 0x90
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_FLAG
// GECOE_DEC_META2_START_ADDR desc:  GeCoE DEC META2 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_OFFSET 0x94
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_FLAG
// GECOE_DEC_META2_END_OFFSET desc:  GeCoE DEC META2 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET 0x98
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_FLAG
// GECOE_DEC_META3_START_ADDR desc:  GeCoE DEC META3 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_OFFSET 0x9c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_FLAG
// GECOE_DEC_META3_END_OFFSET desc:  GeCoE DEC META3 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET 0xa0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_FLAG
// GECOE_DEC_META4_START_ADDR desc:  GeCoE DEC META4 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_OFFSET 0xa4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_FLAG
// GECOE_DEC_META4_END_OFFSET desc:  GeCoE DEC META4 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET 0xa8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_FLAG
// GECOE_DEC_META5_START_ADDR desc:  GeCoE DEC META5 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_OFFSET 0xac
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_FLAG
// GECOE_DEC_META5_END_OFFSET desc:  GeCoE DEC META5 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET 0xb0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_FLAG
// GECOE_DEC_META6_START_ADDR desc:  GeCoE DEC META6 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_OFFSET 0xb4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_FLAG
// GECOE_DEC_META6_END_OFFSET desc:  GeCoE DEC META6 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET 0xb8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_FLAG
// GECOE_DEC_META7_START_ADDR desc:  GeCoE DEC META7 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_OFFSET 0xbc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_FLAG
// GECOE_DEC_META7_END_OFFSET desc:  GeCoE DEC META7 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET 0xc0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_FLAG
// GECOE_DEC_META8_START_ADDR desc:  GeCoE DEC META8 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_OFFSET 0xc4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_FLAG
// GECOE_DEC_META8_END_OFFSET desc:  GeCoE DEC META8 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET 0xc8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_FLAG
// GECOE_DEC_META9_START_ADDR desc:  GeCoE DEC META9 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_OFFSET 0xcc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_FLAG
// GECOE_DEC_META9_END_OFFSET desc:  GeCoE DEC META9 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET 0xd0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_FLAG
// GECOE_DEC_META10_START_ADDR desc:  GeCoE DEC META10 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_OFFSET 0xd4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_FLAG
// GECOE_DEC_META10_END_OFFSET desc:  GeCoE DEC META10 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET 0xd8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_FLAG
// GECOE_DEC_META11_START_ADDR desc:  GeCoE DEC META11 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_OFFSET 0xdc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_FLAG
// GECOE_DEC_META11_END_OFFSET desc:  GeCoE DEC META11 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET 0xe0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_FLAG
// GECOE_DEC_META12_START_ADDR desc:  GeCoE DEC META12 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_OFFSET 0xe4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_FLAG
// GECOE_DEC_META12_END_OFFSET desc:  GeCoE DEC META12 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET 0xe8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_FLAG
// GECOE_DEC_META13_START_ADDR desc:  GeCoE DEC META13 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_OFFSET 0xec
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_FLAG
// GECOE_DEC_META13_END_OFFSET desc:  GeCoE DEC META13 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET 0xf0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_FLAG
// GECOE_DEC_META14_START_ADDR desc:  GeCoE DEC META14 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_OFFSET 0xf4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_FLAG
// GECOE_DEC_META14_END_OFFSET desc:  GeCoE DEC META14 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET 0xf8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_FLAG
// GECOE_DEC_META15_START_ADDR desc:  GeCoE DEC META15 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_OFFSET 0xfc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_FLAG
// GECOE_DEC_META15_END_OFFSET desc:  GeCoE DEC META15 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET 0x00
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_FLAG
// GECOE_ENC_SURF_COMP_STATUS desc:  GeCoE ENC SURF0 Compress status
typedef union {
    struct {
        uint32_t  ENC_SURF0_COMPRESSED :   1;    //  Encoder Surface 0 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF1_COMPRESSED :   1;    //  Encoder Surface 1 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF2_COMPRESSED :   1;    //  Encoder Surface 2 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF3_COMPRESSED :   1;    //  Encoder Surface 3 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF4_COMPRESSED :   1;    //  Encoder Surface 4 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF5_COMPRESSED :   1;    //  Encoder Surface 5 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF6_COMPRESSED :   1;    //  Encoder Surface 6 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF7_COMPRESSED :   1;    //  Encoder Surface 7 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF8_COMPRESSED :   1;    //  Encoder Surface 8 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF9_COMPRESSED :   1;    //  Encoder Surface 9 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF10_COMPRESSED :   1;    //  Encoder Surface 10 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF11_COMPRESSED :   1;    //  Encoder Surface 11 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF12_COMPRESSED :   1;    //  Encoder Surface 12 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF13_COMPRESSED :   1;    //  Encoder Surface 13 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF14_COMPRESSED :   1;    //  Encoder Surface 14 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  ENC_SURF15_COMPRESSED :   1;    //  Encoder Surface 15 is
                                                 // compressed or uncompressed (0
                                                 // or 1)
        uint32_t  RSVD_0               :  16;    // Nebulon auto filled RSVD [31:16]

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_OFFSET 0x04
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_BITFIELD_COUNT 0x10
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF0_COMPRESSED_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF0_COMPRESSED_MSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF0_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF0_COMPRESSED_MASK 0x00000001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF0_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF1_COMPRESSED_LSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF1_COMPRESSED_MSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF1_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF1_COMPRESSED_MASK 0x00000002
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF1_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF2_COMPRESSED_LSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF2_COMPRESSED_MSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF2_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF2_COMPRESSED_MASK 0x00000004
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF2_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF3_COMPRESSED_LSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF3_COMPRESSED_MSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF3_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF3_COMPRESSED_MASK 0x00000008
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF3_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF4_COMPRESSED_LSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF4_COMPRESSED_MSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF4_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF4_COMPRESSED_MASK 0x00000010
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF4_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF5_COMPRESSED_LSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF5_COMPRESSED_MSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF5_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF5_COMPRESSED_MASK 0x00000020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF5_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF6_COMPRESSED_LSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF6_COMPRESSED_MSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF6_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF6_COMPRESSED_MASK 0x00000040
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF6_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF7_COMPRESSED_LSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF7_COMPRESSED_MSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF7_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF7_COMPRESSED_MASK 0x00000080
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF7_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF8_COMPRESSED_LSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF8_COMPRESSED_MSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF8_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF8_COMPRESSED_MASK 0x00000100
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF8_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF9_COMPRESSED_LSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF9_COMPRESSED_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF9_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF9_COMPRESSED_MASK 0x00000200
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF9_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF10_COMPRESSED_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF10_COMPRESSED_MSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF10_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF10_COMPRESSED_MASK 0x00000400
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF10_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF11_COMPRESSED_LSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF11_COMPRESSED_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF11_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF11_COMPRESSED_MASK 0x00000800
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF11_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF12_COMPRESSED_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF12_COMPRESSED_MSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF12_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF12_COMPRESSED_MASK 0x00001000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF12_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF13_COMPRESSED_LSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF13_COMPRESSED_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF13_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF13_COMPRESSED_MASK 0x00002000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF13_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF14_COMPRESSED_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF14_COMPRESSED_MSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF14_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF14_COMPRESSED_MASK 0x00004000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF14_COMPRESSED_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF15_COMPRESSED_LSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF15_COMPRESSED_MSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF15_COMPRESSED_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF15_COMPRESSED_MASK 0x00008000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_ENC_SURF15_COMPRESSED_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_FLAG
// GECOE_ENC_SURF0_START_ADDR desc:  GeCoE ENC SURF0 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_OFFSET 0x08
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_FLAG
// GECOE_ENC_SURF0_END_OFFSET desc:  GeCoE ENC SURF0 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET 0x0c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_FLAG
// GECOE_ENC_SURF1_START_ADDR desc:  GeCoE ENC SURF1 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_OFFSET 0x10
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_FLAG
// GECOE_ENC_SURF1_END_OFFSET desc:  GeCoE ENC SURF1 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET 0x14
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_FLAG
// GECOE_ENC_SURF2_START_ADDR desc:  GeCoE ENC SURF2 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_OFFSET 0x18
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_FLAG
// GECOE_ENC_SURF2_END_OFFSET desc:  GeCoE ENC SURF2 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET 0x1c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_FLAG
// GECOE_ENC_SURF3_START_ADDR desc:  GeCoE ENC SURF3 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_OFFSET 0x20
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_FLAG
// GECOE_ENC_SURF3_END_OFFSET desc:  GeCoE ENC SURF3 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET 0x24
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_FLAG
// GECOE_ENC_SURF4_START_ADDR desc:  GeCoE ENC SURF4 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_OFFSET 0x28
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_FLAG
// GECOE_ENC_SURF4_END_OFFSET desc:  GeCoE ENC SURF4 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET 0x2c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_FLAG
// GECOE_ENC_SURF5_START_ADDR desc:  GeCoE ENC SURF5 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_OFFSET 0x30
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_FLAG
// GECOE_ENC_SURF5_END_OFFSET desc:  GeCoE ENC SURF5 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET 0x34
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_FLAG
// GECOE_ENC_SURF6_START_ADDR desc:  GeCoE ENC SURF6 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_OFFSET 0x38
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_FLAG
// GECOE_ENC_SURF6_END_OFFSET desc:  GeCoE ENC SURF6 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET 0x3c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_FLAG
// GECOE_ENC_SURF7_START_ADDR desc:  GeCoE ENC SURF7 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_OFFSET 0x40
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_FLAG
// GECOE_ENC_SURF7_END_OFFSET desc:  GeCoE ENC SURF7 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET 0x44
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_FLAG
// GECOE_ENC_SURF8_START_ADDR desc:  GeCoE ENC SURF8 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_OFFSET 0x48
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_FLAG
// GECOE_ENC_SURF8_END_OFFSET desc:  GeCoE ENC SURF8 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET 0x4c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_FLAG
// GECOE_ENC_SURF9_START_ADDR desc:  GeCoE ENC SURF9 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_OFFSET 0x50
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_FLAG
// GECOE_ENC_SURF9_END_OFFSET desc:  GeCoE ENC SURF9 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET 0x54
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_FLAG
// GECOE_ENC_SURF10_START_ADDR desc:  GeCoE ENC SURF10 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_OFFSET 0x58
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_FLAG
// GECOE_ENC_SURF10_END_OFFSET desc:  GeCoE ENC SURF10 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET 0x5c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_FLAG
// GECOE_ENC_SURF11_START_ADDR desc:  GeCoE ENC SURF11 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_OFFSET 0x60
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_FLAG
// GECOE_ENC_SURF11_END_OFFSET desc:  GeCoE ENC SURF11 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET 0x64
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_FLAG
// GECOE_ENC_SURF12_START_ADDR desc:  GeCoE ENC SURF12 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_OFFSET 0x68
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_FLAG
// GECOE_ENC_SURF12_END_OFFSET desc:  GeCoE ENC SURF12 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET 0x6c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_FLAG
// GECOE_ENC_SURF13_START_ADDR desc:  GeCoE ENC SURF13 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_OFFSET 0x70
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_FLAG
// GECOE_ENC_SURF13_END_OFFSET desc:  GeCoE ENC SURF13 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET 0x74
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_FLAG
// GECOE_ENC_SURF14_START_ADDR desc:  GeCoE ENC SURF14 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_OFFSET 0x78
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_FLAG
// GECOE_ENC_SURF14_END_OFFSET desc:  GeCoE ENC SURF14 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET 0x7c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_FLAG
// GECOE_ENC_SURF15_START_ADDR desc:  GeCoE ENC SURF15 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the decoder
                                                 // surface is provided as a base
                                                 // ADDRESS of the compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_OFFSET 0x80
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_FLAG
// GECOE_ENC_SURF15_END_OFFSET desc:  GeCoE ENC SURF15 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end OFFSET in bytes of the
                                                 // surface is provided to check
                                                 // the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET 0x84
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_FLAG
// GECOE_ENC_META0_START_ADDR desc:  GeCoE ENC META0 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_OFFSET 0x88
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_FLAG
// GECOE_ENC_META0_END_OFFSET desc:  GeCoE ENC META0 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET 0x8c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_FLAG
// GECOE_ENC_META1_START_ADDR desc:  GeCoE ENC META1 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_OFFSET 0x90
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_FLAG
// GECOE_ENC_META1_END_OFFSET desc:  GeCoE ENC META1 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET 0x94
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_FLAG
// GECOE_ENC_META2_START_ADDR desc:  GeCoE ENC META2 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_OFFSET 0x98
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_FLAG
// GECOE_ENC_META2_END_OFFSET desc:  GeCoE ENC META2 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET 0x9c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_FLAG
// GECOE_ENC_META3_START_ADDR desc:  GeCoE ENC META3 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_OFFSET 0xa0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_FLAG
// GECOE_ENC_META3_END_OFFSET desc:  GeCoE ENC META3 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET 0xa4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_FLAG
// GECOE_ENC_META4_START_ADDR desc:  GeCoE ENC META4 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_OFFSET 0xa8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_FLAG
// GECOE_ENC_META4_END_OFFSET desc:  GeCoE ENC META4 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET 0xac
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_FLAG
// GECOE_ENC_META5_START_ADDR desc:  GeCoE ENC META5 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_OFFSET 0xb0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_FLAG
// GECOE_ENC_META5_END_OFFSET desc:  GeCoE ENC META5 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET 0xb4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_FLAG
// GECOE_ENC_META6_START_ADDR desc:  GeCoE ENC META6 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_OFFSET 0xb8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_FLAG
// GECOE_ENC_META6_END_OFFSET desc:  GeCoE ENC META6 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET 0xbc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_FLAG
// GECOE_ENC_META7_START_ADDR desc:  GeCoE ENC META7 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_OFFSET 0xc0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_FLAG
// GECOE_ENC_META7_END_OFFSET desc:  GeCoE ENC META7 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET 0xc4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_FLAG
// GECOE_ENC_META8_START_ADDR desc:  GeCoE ENC META8 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_OFFSET 0xc8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_FLAG
// GECOE_ENC_META8_END_OFFSET desc:  GeCoE ENC META8 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET 0xcc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_FLAG
// GECOE_ENC_META9_START_ADDR desc:  GeCoE ENC META9 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_OFFSET 0xd0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_FLAG
// GECOE_ENC_META9_END_OFFSET desc:  GeCoE ENC META9 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET 0xd4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_FLAG
// GECOE_ENC_META10_START_ADDR desc:  GeCoE ENC META10 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_OFFSET 0xd8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_FLAG
// GECOE_ENC_META10_END_OFFSET desc:  GeCoE ENC META10 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET 0xdc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_FLAG
// GECOE_ENC_META11_START_ADDR desc:  GeCoE ENC META11 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_OFFSET 0xe0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_FLAG
// GECOE_ENC_META11_END_OFFSET desc:  GeCoE ENC META11 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET 0xe4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_FLAG
// GECOE_ENC_META12_START_ADDR desc:  GeCoE ENC META12 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_OFFSET 0xe8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_FLAG
// GECOE_ENC_META12_END_OFFSET desc:  GeCoE ENC META12 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET 0xec
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_FLAG
// GECOE_ENC_META13_START_ADDR desc:  GeCoE ENC META13 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_OFFSET 0xf0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_FLAG
// GECOE_ENC_META13_END_OFFSET desc:  GeCoE ENC META13 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET 0xf4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_FLAG
// GECOE_ENC_META14_START_ADDR desc:  GeCoE ENC META14 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_OFFSET 0xf8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_FLAG
// GECOE_ENC_META14_END_OFFSET desc:  GeCoE ENC META14 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET 0xfc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_FLAG
// GECOE_ENC_META15_START_ADDR desc:  GeCoE ENC META15 START ADDR
typedef union {
    struct {
        uint32_t  ADDRESS              :  32;    //  start ADDRESS of the meta is
                                                 // provided as a base ADDRESS to
                                                 // corresponding compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_OFFSET 0x00
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_ADDRESS_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_ADDRESS_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_ADDRESS_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_ADDRESS_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_ADDRESS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_FLAG
// GECOE_ENC_META15_END_OFFSET desc:  GeCoE ENC META15 END OFFSET
typedef union {
    struct {
        uint32_t  OFFSET               :  32;    //  end ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET 0x04
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_OFFSET_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_FLAG
// GECOE_FLUSH_REQ desc:  GeCoE ENC FLUSH REQ
typedef union {
    struct {
        uint32_t  GECOE_FLUSH_REQ_STREAM_0 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_1 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_2 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_3 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_4 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_5 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_6 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_7 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_8 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_9 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_10 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_11 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_12 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_13 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_14 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_15 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  RSVD_0               :  16;    // Nebulon auto filled RSVD [31:16]

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_OFFSET 0x08
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_BITFIELD_COUNT 0x10
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_0_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_0_MSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_0_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_0_MASK 0x00000001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_0_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_1_LSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_1_MSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_1_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_1_MASK 0x00000002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_1_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_2_LSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_2_MSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_2_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_2_MASK 0x00000004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_2_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_3_LSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_3_MSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_3_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_3_MASK 0x00000008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_3_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_4_LSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_4_MSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_4_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_4_MASK 0x00000010
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_4_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_5_LSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_5_MSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_5_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_5_MASK 0x00000020
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_5_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_6_LSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_6_MSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_6_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_6_MASK 0x00000040
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_6_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_7_LSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_7_MSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_7_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_7_MASK 0x00000080
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_7_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_8_LSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_8_MSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_8_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_8_MASK 0x00000100
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_8_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_9_LSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_9_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_9_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_9_MASK 0x00000200
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_9_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_10_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_10_MSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_10_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_10_MASK 0x00000400
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_10_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_11_LSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_11_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_11_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_11_MASK 0x00000800
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_11_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_12_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_12_MSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_12_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_12_MASK 0x00001000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_12_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_13_LSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_13_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_13_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_13_MASK 0x00002000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_13_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_14_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_14_MSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_14_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_14_MASK 0x00004000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_14_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_15_LSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_15_MSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_15_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_15_MASK 0x00008000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_GECOE_FLUSH_REQ_STREAM_15_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_FLAG
// GECOE_FLUSHED_STREAM desc:  GeCoE ENC SURF0 FLUSH DONE
typedef union {
    struct {
        uint32_t  GECOE_FLUSHED_STREAM_0 :   1;    //  Encoder Surface 0 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 0 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_1 :   1;    //  Encoder Surface 1 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 1 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_2 :   1;    //  Encoder Surface 2 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 2 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_3 :   1;    //  Encoder Surface 3 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 3 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_4 :   1;    //  Encoder Surface 4 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 4 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_5 :   1;    //  Encoder Surface 5 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 5 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_6 :   1;    //  Encoder Surface 6 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 6 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_7 :   1;    //  Encoder Surface 7 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 7 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_8 :   1;    //  Encoder Surface 8 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 8 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_9 :   1;    //  Encoder Surface 9 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 9 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_10 :   1;    //  Encoder Surface 10 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 10 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_11 :   1;    //  Encoder Surface 11 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 11 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_12 :   1;    //  Encoder Surface 11 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 12 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_13 :   1;    //  Encoder Surface 11 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 13 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_14 :   1;    //  Encoder Surface 11 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 14 is
                                                 // flushed
        uint32_t  GECOE_FLUSHED_STREAM_15 :   1;    //  Encoder Surface 11 is flushed
                                                 // (this will be RO/V in future),
                                                 // Indication that surface 15 is
                                                 // flushed
        uint32_t  RSVD_0               :  16;    // Nebulon auto filled RSVD [31:16]

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_OFFSET 0x0c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_BITFIELD_COUNT 0x10
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_0_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_0_MSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_0_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_0_MASK 0x00000001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_0_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_1_LSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_1_MSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_1_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_1_MASK 0x00000002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_1_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_2_LSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_2_MSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_2_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_2_MASK 0x00000004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_2_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_3_LSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_3_MSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_3_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_3_MASK 0x00000008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_3_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_4_LSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_4_MSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_4_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_4_MASK 0x00000010
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_4_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_5_LSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_5_MSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_5_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_5_MASK 0x00000020
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_5_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_6_LSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_6_MSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_6_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_6_MASK 0x00000040
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_6_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_7_LSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_7_MSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_7_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_7_MASK 0x00000080
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_7_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_8_LSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_8_MSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_8_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_8_MASK 0x00000100
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_8_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_9_LSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_9_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_9_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_9_MASK 0x00000200
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_9_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_10_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_10_MSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_10_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_10_MASK 0x00000400
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_10_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_11_LSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_11_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_11_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_11_MASK 0x00000800
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_11_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_12_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_12_MSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_12_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_12_MASK 0x00001000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_12_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_13_LSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_13_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_13_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_13_MASK 0x00002000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_13_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_14_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_14_MSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_14_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_14_MASK 0x00004000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_14_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_15_LSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_15_MSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_15_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_15_MASK 0x00008000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_GECOE_FLUSHED_STREAM_15_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_FLAG
// GECOE_FLUSH_REQ_SHADOW desc:  GeCoE ENC FLUSH REQ SURF0 SHADOW
typedef union {
    struct {
        uint32_t  GECOE_FLUSH_REQ_STREAM_0 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_1 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_2 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_3 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_4 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_5 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_6 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_7 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_8 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_9 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_10 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_11 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_12 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_13 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_14 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  GECOE_FLUSH_REQ_STREAM_15 :   1;    //  This is the flush request for
                                                 // encoder per Surface, This will
                                                 // be (RW/V) in future. Since we
                                                 // have 16 surfaces, LSB 16 bits
                                                 // are used.
        uint32_t  RSVD_0               :  16;    // Nebulon auto filled RSVD [31:16]

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_OFFSET 0x10
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_BITFIELD_COUNT 0x10
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_0_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_0_MSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_0_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_0_MASK 0x00000001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_0_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_1_LSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_1_MSB 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_1_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_1_MASK 0x00000002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_1_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_2_LSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_2_MSB 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_2_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_2_MASK 0x00000004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_2_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_3_LSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_3_MSB 0x0003
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_3_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_3_MASK 0x00000008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_3_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_4_LSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_4_MSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_4_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_4_MASK 0x00000010
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_4_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_5_LSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_5_MSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_5_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_5_MASK 0x00000020
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_5_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_6_LSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_6_MSB 0x0006
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_6_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_6_MASK 0x00000040
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_6_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_7_LSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_7_MSB 0x0007
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_7_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_7_MASK 0x00000080
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_7_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_8_LSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_8_MSB 0x0008
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_8_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_8_MASK 0x00000100
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_8_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_9_LSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_9_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_9_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_9_MASK 0x00000200
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_9_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_10_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_10_MSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_10_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_10_MASK 0x00000400
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_10_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_11_LSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_11_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_11_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_11_MASK 0x00000800
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_11_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_12_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_12_MSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_12_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_12_MASK 0x00001000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_12_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_13_LSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_13_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_13_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_13_MASK 0x00002000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_13_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_14_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_14_MSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_14_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_14_MASK 0x00004000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_14_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_15_LSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_15_MSB 0x000f
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_15_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_15_MASK 0x00008000
#define MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_GECOE_FLUSH_REQ_STREAM_15_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_FLAG
// GECOE_MAX_BURST_LENGTH desc:  GeCoE DEC MAX BURST LENGTH
typedef union {
    struct {
        uint32_t  GECOE_DEC_MAX_BURST_LENGTH :   5;    //  Max burst length for decoder
        uint32_t  GECOE_ENC_MAX_BURST_LENGTH :   5;    //  Max burst length for encoder
        uint32_t  GECOE_START_BITS     :   2;    //  GeCoE start bits -- when
                                                 // these bits are set as 0x3
                                                 // (1'b11), GeCoE can start
                                                 // operating
        uint32_t  GECOE_ENCODER_BLOCK_SIZE :   1;    //  GeCoE encoder block size --
                                                 // when this bit 1 we have 512
                                                 // block size programmed for
                                                 // encoder otherwise 256
        uint32_t  GECOE_DECODER_BLOCK_SIZE :   1;    //  GeCoE decoder block size --
                                                 // when this bit 1 we have 512
                                                 // block size programmed for
                                                 // decoder otherwise 256
        uint32_t  GECOE_CLK_GATE_EN    :   1;    //  GeCoE clock gating value
                                                 // enabled - when clock gating
                                                 // option is enabled set it as 1
        uint32_t  RSVD_0               :  17;    // Nebulon auto filled RSVD [31:15]

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_OFFSET 0x14
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_BITFIELD_COUNT 0x06
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_MSB 0x0004
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_RANGE 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_MASK 0x0000001f
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_LSB 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_MSB 0x0009
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_RANGE 0x0005
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_MASK 0x000003e0
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_LSB 0x000a
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_MSB 0x000b
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_RANGE 0x0002
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_MASK 0x00000c00
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_LSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_MSB 0x000c
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_MASK 0x00001000
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_LSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_MSB 0x000d
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_MASK 0x00002000
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_LSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_MSB 0x000e
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_RANGE 0x0001
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_MASK 0x00004000
#define MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_FLAG
// GECOE_DEC_PARTIAL_ACCESS_COUNT desc:  GeCoE DECODER PARTIAL ACCESS COUNT
typedef union {
    struct {
        uint32_t  GECOE_DEC_PARTIAL_ACCESS_COUNT :  32;    //  GeCoE partial access count
                                                 // value is written in this
                                                 // registers for decoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_OFFSET 0x18
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_GECOE_DEC_PARTIAL_ACCESS_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_GECOE_DEC_PARTIAL_ACCESS_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_GECOE_DEC_PARTIAL_ACCESS_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_GECOE_DEC_PARTIAL_ACCESS_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_GECOE_DEC_PARTIAL_ACCESS_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_FLAG
// GECOE_ENC_PARTIAL_ACCESS_COUNT desc:  GeCoE ENCODER PARTIAL ACCESS COUNT
typedef union {
    struct {
        uint32_t  GECOE_ENC_PARTIAL_ACCESS_COUNT :  32;    //  GeCoE partial access count
                                                 // value is written in this
                                                 // registers for encoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_OFFSET 0x1c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_GECOE_ENC_PARTIAL_ACCESS_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_GECOE_ENC_PARTIAL_ACCESS_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_GECOE_ENC_PARTIAL_ACCESS_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_GECOE_ENC_PARTIAL_ACCESS_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_GECOE_ENC_PARTIAL_ACCESS_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_FLAG
// GECOE_DEC_META_MISS_COUNT desc:  GeCoE DECODER META MISS COUNT
typedef union {
    struct {
        uint32_t  GECOE_DEC_META_MISS_COUNT :  32;    //  GeCoE meta miss count value
                                                 // is written in this register
                                                 // for decoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_OFFSET 0x20
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_GECOE_DEC_META_MISS_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_GECOE_DEC_META_MISS_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_GECOE_DEC_META_MISS_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_GECOE_DEC_META_MISS_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_GECOE_DEC_META_MISS_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_FLAG
// GECOE_ENC_UNCOM_MODE_COUNT desc:  GeCoE ENCODER UNCOMPRESSED PACKET COUNT
typedef union {
    struct {
        uint32_t  GECOE_ENC_UNCOM_MODE_COUNT :  32;    //  GeCoE uncompressed mode count
                                                 // value is written in this
                                                 // register for encoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_OFFSET 0x24
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_GECOE_ENC_UNCOM_MODE_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_GECOE_ENC_UNCOM_MODE_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_GECOE_ENC_UNCOM_MODE_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_GECOE_ENC_UNCOM_MODE_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_GECOE_ENC_UNCOM_MODE_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_FLAG
// GECOE_ENC_NULL_MODE_COUNT desc:  GeCoE ENCODER NULL MODE COUNT
typedef union {
    struct {
        uint32_t  GECOE_ENC_NULL_MODE_COUNT :  32;    //  GeCoE null mode count value
                                                 // is written in this register
                                                 // for encoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_OFFSET 0x28
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_GECOE_ENC_NULL_MODE_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_GECOE_ENC_NULL_MODE_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_GECOE_ENC_NULL_MODE_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_GECOE_ENC_NULL_MODE_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_GECOE_ENC_NULL_MODE_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_FLAG
// GECOE_ENC_SM_MODE_COUNT desc:  GeCoE ENCODER SIG MAP MODE COUNT
typedef union {
    struct {
        uint32_t  GECOE_ENC_SM_MODE_COUNT :  32;    //  GeCoE significance map count
                                                 // value is written in this
                                                 // register for encoder

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_OFFSET 0x2c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_GECOE_ENC_SM_MODE_COUNT_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_GECOE_ENC_SM_MODE_COUNT_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_GECOE_ENC_SM_MODE_COUNT_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_GECOE_ENC_SM_MODE_COUNT_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_GECOE_ENC_SM_MODE_COUNT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DBG_REG_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_FLAG
// GECOE_DBG_REG desc:  GeCoE DEBUG REGISTER
typedef union {
    struct {
        uint32_t  GECOE_DBG_REG        :  32;    //  Debug Registers used for
                                                 // system hangs

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DBG_REG_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_OFFSET 0x30
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_GECOE_DBG_REG_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_GECOE_DBG_REG_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_GECOE_DBG_REG_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_GECOE_DBG_REG_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DBG_REG_GECOE_DBG_REG_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_HASHING_ENABLE_FLAG
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_FLAG
// HASHING_ENABLE desc:  GeCoE Encoder HASHING_ENABLE
typedef union {
    struct {
        uint32_t  ENCODE_HASHING_ENABLE :  16;    //  Address hashing enable bits
                                                 // for each write surface
        uint32_t  DECODE_HASHING_ENABLE :  16;    //  Address hashing enable bits
                                                 // for each read surface

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_HASHING_ENABLE_t;
#endif
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_OFFSET 0x34
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_SIZE 32
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_BITFIELD_COUNT 0x02
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_ENCODE_HASHING_ENABLE_LSB 0x0000
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_ENCODE_HASHING_ENABLE_MSB 0x000f
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_ENCODE_HASHING_ENABLE_RANGE 0x0010
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_ENCODE_HASHING_ENABLE_MASK 0x0000ffff
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_ENCODE_HASHING_ENABLE_RESET_VALUE 0x00000000

#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_DECODE_HASHING_ENABLE_LSB 0x0010
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_DECODE_HASHING_ENABLE_MSB 0x001f
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_DECODE_HASHING_ENABLE_RANGE 0x0010
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_DECODE_HASHING_ENABLE_MASK 0xffff0000
#define MAP_GECOE_CORE_MEM_HASHING_ENABLE_DECODE_HASHING_ENABLE_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF0_START_ADDR_MSB desc:  GeCoE DEC SURF0 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_OFFSET 0x38
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF0_END_OFFSET_MSB desc:  GeCoE DEC SURF0 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_OFFSET 0x3c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF1_START_ADDR_MSB desc:  GeCoE DEC SURF1 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_OFFSET 0x40
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF1_END_OFFSET_MSB desc:  GeCoE DEC SURF1 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_OFFSET 0x44
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF2_START_ADDR_MSB desc:  GeCoE DEC SURF2 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_OFFSET 0x48
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF2_END_OFFSET_MSB desc:  GeCoE DEC SURF2 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_OFFSET 0x4c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF3_START_ADDR_MSB desc:  GeCoE DEC SURF3 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_OFFSET 0x50
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF3_END_OFFSET_MSB desc:  GeCoE DEC SURF3 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_OFFSET 0x54
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF4_START_ADDR_MSB desc:  GeCoE DEC SURF4 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_OFFSET 0x58
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF4_END_OFFSET_MSB desc:  GeCoE DEC SURF4 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_OFFSET 0x5c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF5_START_ADDR_MSB desc:  GeCoE DEC SURF5 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_OFFSET 0x60
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF5_END_OFFSET_MSB desc:  GeCoE DEC SURF5 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_OFFSET 0x64
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF6_START_ADDR_MSB desc:  GeCoE DEC SURF6 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_OFFSET 0x68
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF6_END_OFFSET_MSB desc:  GeCoE DEC SURF6 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_OFFSET 0x6c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF7_START_ADDR_MSB desc:  GeCoE DEC SURF7 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_OFFSET 0x70
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF7_END_OFFSET_MSB desc:  GeCoE DEC SURF7 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_OFFSET 0x74
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF8_START_ADDR_MSB desc:  GeCoE DEC SURF8 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_OFFSET 0x78
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF8_END_OFFSET_MSB desc:  GeCoE DEC SURF8 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_OFFSET 0x7c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF9_START_ADDR_MSB desc:  GeCoE DEC SURF9 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_OFFSET 0x80
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF9_END_OFFSET_MSB desc:  GeCoE DEC SURF9 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_OFFSET 0x84
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF10_START_ADDR_MSB desc:  GeCoE DEC SURF10 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_OFFSET 0x88
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF10_END_OFFSET_MSB desc:  GeCoE DEC SURF10 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_OFFSET 0x8c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF11_START_ADDR_MSB desc:  GeCoE DEC SURF11 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_OFFSET 0x90
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF11_END_OFFSET_MSB desc:  GeCoE DEC SURF11 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_OFFSET 0x94
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF12_START_ADDR_MSB desc:  GeCoE DEC SURF12 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_OFFSET 0x98
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF12_END_OFFSET_MSB desc:  GeCoE DEC SURF12 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_OFFSET 0x9c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF13_START_ADDR_MSB desc:  GeCoE DEC SURF13 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_OFFSET 0xa0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF13_END_OFFSET_MSB desc:  GeCoE DEC SURF13 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_OFFSET 0xa4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF14_START_ADDR_MSB desc:  GeCoE DEC SURF14 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_OFFSET 0xa8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF14_END_OFFSET_MSB desc:  GeCoE DEC SURF14 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_OFFSET 0xac
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_FLAG
// GECOE_DEC_SURF15_START_ADDR_MSB desc:  GeCoE DEC SURF15 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_OFFSET 0xb0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_FLAG
// GECOE_DEC_SURF15_END_OFFSET_MSB desc:  GeCoE DEC SURF15 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_OFFSET 0xb4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_FLAG
// GECOE_DEC_META0_START_ADDR_MSB desc:  GeCoE DEC META0 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_OFFSET 0xb8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_FLAG
// GECOE_DEC_META0_END_OFFSET_MSB desc:  GeCoE DEC META0 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_OFFSET 0xbc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_FLAG
// GECOE_DEC_META1_START_ADDR_MSB desc:  GeCoE DEC META1 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_OFFSET 0xc0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_FLAG
// GECOE_DEC_META1_END_OFFSET_MSB desc:  GeCoE DEC META1 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_OFFSET 0xc4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_FLAG
// GECOE_DEC_META2_START_ADDR_MSB desc:  GeCoE DEC META2 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_OFFSET 0xc8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_FLAG
// GECOE_DEC_META2_END_OFFSET_MSB desc:  GeCoE DEC META2 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_OFFSET 0xcc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_FLAG
// GECOE_DEC_META3_START_ADDR_MSB desc:  GeCoE DEC META3 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_OFFSET 0xd0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_FLAG
// GECOE_DEC_META3_END_OFFSET_MSB desc:  GeCoE DEC META3 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_OFFSET 0xd4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_FLAG
// GECOE_DEC_META4_START_ADDR_MSB desc:  GeCoE DEC META4 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_OFFSET 0xd8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_FLAG
// GECOE_DEC_META4_END_OFFSET_MSB desc:  GeCoE DEC META4 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_OFFSET 0xdc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_FLAG
// GECOE_DEC_META5_START_ADDR_MSB desc:  GeCoE DEC META5 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_OFFSET 0xe0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_FLAG
// GECOE_DEC_META5_END_OFFSET_MSB desc:  GeCoE DEC META5 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_OFFSET 0xe4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_FLAG
// GECOE_DEC_META6_START_ADDR_MSB desc:  GeCoE DEC META6 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_OFFSET 0xe8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_FLAG
// GECOE_DEC_META6_END_OFFSET_MSB desc:  GeCoE DEC META6 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_OFFSET 0xec
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_FLAG
// GECOE_DEC_META7_START_ADDR_MSB desc:  GeCoE DEC META7 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_OFFSET 0xf0
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_FLAG
// GECOE_DEC_META7_END_OFFSET_MSB desc:  GeCoE DEC META7 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_OFFSET 0xf4
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_FLAG
// GECOE_DEC_META8_START_ADDR_MSB desc:  GeCoE DEC META8 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_OFFSET 0xf8
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_FLAG
// GECOE_DEC_META8_END_OFFSET_MSB desc:  GeCoE DEC META8 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_OFFSET 0xfc
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_FLAG
// GECOE_DEC_META9_START_ADDR_MSB desc:  GeCoE DEC META9 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_OFFSET 0x00
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_FLAG
// GECOE_DEC_META9_END_OFFSET_MSB desc:  GeCoE DEC META9 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_OFFSET 0x04
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_FLAG
// GECOE_DEC_META10_START_ADDR_MSB desc:  GeCoE DEC META10 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_OFFSET 0x08
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_FLAG
// GECOE_DEC_META10_END_OFFSET_MSB desc:  GeCoE DEC META10 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_OFFSET 0x0c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_FLAG
// GECOE_DEC_META11_START_ADDR_MSB desc:  GeCoE DEC META11 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_OFFSET 0x10
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_FLAG
// GECOE_DEC_META11_END_OFFSET_MSB desc:  GeCoE DEC META11 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_OFFSET 0x14
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_FLAG
// GECOE_DEC_META12_START_ADDR_MSB desc:  GeCoE DEC META12 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_OFFSET 0x18
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_FLAG
// GECOE_DEC_META12_END_OFFSET_MSB desc:  GeCoE DEC META12 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_OFFSET 0x1c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_FLAG
// GECOE_DEC_META13_START_ADDR_MSB desc:  GeCoE DEC META13 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_OFFSET 0x20
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_FLAG
// GECOE_DEC_META13_END_OFFSET_MSB desc:  GeCoE DEC META13 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_OFFSET 0x24
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_FLAG
// GECOE_DEC_META14_START_ADDR_MSB desc:  GeCoE DEC META14 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_OFFSET 0x28
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_FLAG
// GECOE_DEC_META14_END_OFFSET_MSB desc:  GeCoE DEC META14 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_OFFSET 0x2c
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_FLAG
// GECOE_DEC_META15_START_ADDR_MSB desc:  GeCoE DEC META15 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_OFFSET 0x30
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_FLAG
// GECOE_DEC_META15_END_OFFSET_MSB desc:  GeCoE DEC META15 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_OFFSET 0x34
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF0_START_ADDR_MSB desc:  GeCoE ENC SURF0 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_OFFSET 0x38
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF0_END_OFFSET_MSB desc:  GeCoE ENC SURF0 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_OFFSET 0x3c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF1_START_ADDR_MSB desc:  GeCoE ENC SURF1 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_OFFSET 0x40
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF1_END_OFFSET_MSB desc:  GeCoE ENC SURF1 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_OFFSET 0x44
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF2_START_ADDR_MSB desc:  GeCoE ENC SURF2 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_OFFSET 0x48
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF2_END_OFFSET_MSB desc:  GeCoE ENC SURF2 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_OFFSET 0x4c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF3_START_ADDR_MSB desc:  GeCoE ENC SURF3 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_OFFSET 0x50
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF3_END_OFFSET_MSB desc:  GeCoE ENC SURF3 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_OFFSET 0x54
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF4_START_ADDR_MSB desc:  GeCoE ENC SURF4 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_OFFSET 0x58
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF4_END_OFFSET_MSB desc:  GeCoE ENC SURF4 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_OFFSET 0x5c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF5_START_ADDR_MSB desc:  GeCoE ENC SURF5 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_OFFSET 0x60
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF5_END_OFFSET_MSB desc:  GeCoE ENC SURF5 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_OFFSET 0x64
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF6_START_ADDR_MSB desc:  GeCoE ENC SURF6 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_OFFSET 0x68
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF6_END_OFFSET_MSB desc:  GeCoE ENC SURF6 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_OFFSET 0x6c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF7_START_ADDR_MSB desc:  GeCoE ENC SURF7 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_OFFSET 0x70
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF7_END_OFFSET_MSB desc:  GeCoE ENC SURF7 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_OFFSET 0x74
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF8_START_ADDR_MSB desc:  GeCoE ENC SURF8 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_OFFSET 0x78
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF8_END_OFFSET_MSB desc:  GeCoE ENC SURF8 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_OFFSET 0x7c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF9_START_ADDR_MSB desc:  GeCoE ENC SURF9 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_OFFSET 0x80
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF9_END_OFFSET_MSB desc:  GeCoE ENC SURF9 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_OFFSET 0x84
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF10_START_ADDR_MSB desc:  GeCoE ENC SURF10 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_OFFSET 0x88
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF10_END_OFFSET_MSB desc:  GeCoE ENC SURF10 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_OFFSET 0x8c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF11_START_ADDR_MSB desc:  GeCoE ENC SURF11 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_OFFSET 0x90
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF11_END_OFFSET_MSB desc:  GeCoE ENC SURF11 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_OFFSET 0x94
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF12_START_ADDR_MSB desc:  GeCoE ENC SURF12 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_OFFSET 0x98
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF12_END_OFFSET_MSB desc:  GeCoE ENC SURF12 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_OFFSET 0x9c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF13_START_ADDR_MSB desc:  GeCoE ENC SURF13 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_OFFSET 0xa0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF13_END_OFFSET_MSB desc:  GeCoE ENC SURF13 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_OFFSET 0xa4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF14_START_ADDR_MSB desc:  GeCoE ENC SURF14 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_OFFSET 0xa8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF14_END_OFFSET_MSB desc:  GeCoE ENC SURF14 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_OFFSET 0xac
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_FLAG
// GECOE_ENC_SURF15_START_ADDR_MSB desc:  GeCoE ENC SURF15 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the
                                                 // decoder surface is provided as
                                                 // a base ADDRESS of the
                                                 // compressed unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_OFFSET 0xb0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_FLAG
// GECOE_ENC_SURF15_END_OFFSET_MSB desc:  GeCoE ENC SURF15 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB OFFSET in bytes of
                                                 // the surface is provided to
                                                 // check the end of the buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_OFFSET 0xb4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_FLAG
// GECOE_ENC_META0_START_ADDR_MSB desc:  GeCoE ENC META0 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_OFFSET 0xb8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_FLAG
// GECOE_ENC_META0_END_OFFSET_MSB desc:  GeCoE ENC META0 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_OFFSET 0xbc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_FLAG
// GECOE_ENC_META1_START_ADDR_MSB desc:  GeCoE ENC META1 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_OFFSET 0xc0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_FLAG
// GECOE_ENC_META1_END_OFFSET_MSB desc:  GeCoE ENC META1 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_OFFSET 0xc4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_FLAG
// GECOE_ENC_META2_START_ADDR_MSB desc:  GeCoE ENC META2 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_OFFSET 0xc8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_FLAG
// GECOE_ENC_META2_END_OFFSET_MSB desc:  GeCoE ENC META2 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_OFFSET 0xcc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_FLAG
// GECOE_ENC_META3_START_ADDR_MSB desc:  GeCoE ENC META3 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_OFFSET 0xd0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_FLAG
// GECOE_ENC_META3_END_OFFSET_MSB desc:  GeCoE ENC META3 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_OFFSET 0xd4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_FLAG
// GECOE_ENC_META4_START_ADDR_MSB desc:  GeCoE ENC META4 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_OFFSET 0xd8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_FLAG
// GECOE_ENC_META4_END_OFFSET_MSB desc:  GeCoE ENC META4 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_OFFSET 0xdc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_FLAG
// GECOE_ENC_META5_START_ADDR_MSB desc:  GeCoE ENC META5 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_OFFSET 0xe0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_FLAG
// GECOE_ENC_META5_END_OFFSET_MSB desc:  GeCoE ENC META5 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_OFFSET 0xe4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_FLAG
// GECOE_ENC_META6_START_ADDR_MSB desc:  GeCoE ENC META6 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_OFFSET 0xe8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_FLAG
// GECOE_ENC_META6_END_OFFSET_MSB desc:  GeCoE ENC META6 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_OFFSET 0xec
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_FLAG
// GECOE_ENC_META7_START_ADDR_MSB desc:  GeCoE ENC META7 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_OFFSET 0xf0
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_FLAG
// GECOE_ENC_META7_END_OFFSET_MSB desc:  GeCoE ENC META7 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_OFFSET 0xf4
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_FLAG
// GECOE_ENC_META8_START_ADDR_MSB desc:  GeCoE ENC META8 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_OFFSET 0xf8
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_FLAG
// GECOE_ENC_META8_END_OFFSET_MSB desc:  GeCoE ENC META8 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_OFFSET 0xfc
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_FLAG
// GECOE_ENC_META9_START_ADDR_MSB desc:  GeCoE ENC META9 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_OFFSET 0x00
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_FLAG
// GECOE_ENC_META9_END_OFFSET_MSB desc:  GeCoE ENC META9 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_OFFSET 0x04
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_FLAG
// GECOE_ENC_META10_START_ADDR_MSB desc:  GeCoE ENC META10 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_OFFSET 0x08
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_FLAG
// GECOE_ENC_META10_END_OFFSET_MSB desc:  GeCoE ENC META10 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_OFFSET 0x0c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_FLAG
// GECOE_ENC_META11_START_ADDR_MSB desc:  GeCoE ENC META11 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_OFFSET 0x10
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_FLAG
// GECOE_ENC_META11_END_OFFSET_MSB desc:  GeCoE ENC META11 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_OFFSET 0x14
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_FLAG
// GECOE_ENC_META12_START_ADDR_MSB desc:  GeCoE ENC META12 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_OFFSET 0x18
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_FLAG
// GECOE_ENC_META12_END_OFFSET_MSB desc:  GeCoE ENC META12 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_OFFSET 0x1c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_FLAG
// GECOE_ENC_META13_START_ADDR_MSB desc:  GeCoE ENC META13 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_OFFSET 0x20
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_FLAG
// GECOE_ENC_META13_END_OFFSET_MSB desc:  GeCoE ENC META13 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_OFFSET 0x24
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_FLAG
// GECOE_ENC_META14_START_ADDR_MSB desc:  GeCoE ENC META14 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_OFFSET 0x28
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_FLAG
// GECOE_ENC_META14_END_OFFSET_MSB desc:  GeCoE ENC META14 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_OFFSET 0x2c
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_FLAG
// GECOE_ENC_META15_START_ADDR_MSB desc:  GeCoE ENC META15 START ADDR MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  start MSB ADDRESS of the meta
                                                 // is provided as a base ADDRESS
                                                 // to corresponding compressed
                                                 // unit

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_OFFSET 0x30
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_FLAG
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_FLAG
// GECOE_ENC_META15_END_OFFSET_MSB desc:  GeCoE ENC META15 END OFFSET MSB
typedef union {
    struct {
        uint32_t  MSB                  :  32;    //  end MSB ADDRESS OFFSET of the
                                                 // surface is provided to check
                                                 // the end of the meta buffer

    }                                field;
    uint32_t                         val;
} MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_t;
#endif
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_OFFSET 0x34
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_SCOPE 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_SIZE 32
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_BITFIELD_COUNT 0x01
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_RESET 0x00000000

#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_MSB_LSB 0x0000
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_MSB_MSB 0x001f
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_MSB_RANGE 0x0020
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_MSB_MASK 0xffffffff
#define MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_MSB_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF_COMP_STATUS_t GECOE_DEC_SURF_COMP_STATUS; // offset 4'h0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_t GECOE_DEC_SURF0_START_ADDR; // offset 4'h4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_t GECOE_DEC_SURF0_END_OFFSET; // offset 4'h8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_t GECOE_DEC_SURF1_START_ADDR; // offset 8'h0C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_t GECOE_DEC_SURF1_END_OFFSET; // offset 8'h10, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_t GECOE_DEC_SURF2_START_ADDR; // offset 8'h14, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_t GECOE_DEC_SURF2_END_OFFSET; // offset 8'h18, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_t GECOE_DEC_SURF3_START_ADDR; // offset 8'h1C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_t GECOE_DEC_SURF3_END_OFFSET; // offset 8'h20, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_t GECOE_DEC_SURF4_START_ADDR; // offset 8'h24, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_t GECOE_DEC_SURF4_END_OFFSET; // offset 8'h28, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_t GECOE_DEC_SURF5_START_ADDR; // offset 8'h2C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_t GECOE_DEC_SURF5_END_OFFSET; // offset 8'h30, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_t GECOE_DEC_SURF6_START_ADDR; // offset 8'h34, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_t GECOE_DEC_SURF6_END_OFFSET; // offset 8'h38, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_t GECOE_DEC_SURF7_START_ADDR; // offset 8'h3C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_t GECOE_DEC_SURF7_END_OFFSET; // offset 8'h40, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_t GECOE_DEC_SURF8_START_ADDR; // offset 8'h44, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_t GECOE_DEC_SURF8_END_OFFSET; // offset 8'h48, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_t GECOE_DEC_SURF9_START_ADDR; // offset 8'h4C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_t GECOE_DEC_SURF9_END_OFFSET; // offset 8'h50, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_t GECOE_DEC_SURF10_START_ADDR; // offset 8'h54, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_t GECOE_DEC_SURF10_END_OFFSET; // offset 8'h58, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_t GECOE_DEC_SURF11_START_ADDR; // offset 8'h5C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_t GECOE_DEC_SURF11_END_OFFSET; // offset 8'h60, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_t GECOE_DEC_SURF12_START_ADDR; // offset 8'h64, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_t GECOE_DEC_SURF12_END_OFFSET; // offset 8'h68, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_t GECOE_DEC_SURF13_START_ADDR; // offset 8'h6C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_t GECOE_DEC_SURF13_END_OFFSET; // offset 8'h70, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_t GECOE_DEC_SURF14_START_ADDR; // offset 8'h74, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_t GECOE_DEC_SURF14_END_OFFSET; // offset 8'h78, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_t GECOE_DEC_SURF15_START_ADDR; // offset 8'h7C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_t GECOE_DEC_SURF15_END_OFFSET; // offset 8'h80, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_t GECOE_DEC_META0_START_ADDR; // offset 8'h84, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_t GECOE_DEC_META0_END_OFFSET; // offset 8'h88, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_t GECOE_DEC_META1_START_ADDR; // offset 8'h8C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_t GECOE_DEC_META1_END_OFFSET; // offset 8'h90, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_t GECOE_DEC_META2_START_ADDR; // offset 8'h94, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_t GECOE_DEC_META2_END_OFFSET; // offset 8'h98, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_t GECOE_DEC_META3_START_ADDR; // offset 8'h9C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_t GECOE_DEC_META3_END_OFFSET; // offset 12'h0A0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_t GECOE_DEC_META4_START_ADDR; // offset 12'h0A4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_t GECOE_DEC_META4_END_OFFSET; // offset 12'h0A8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_t GECOE_DEC_META5_START_ADDR; // offset 12'h0AC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_t GECOE_DEC_META5_END_OFFSET; // offset 12'h0B0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_t GECOE_DEC_META6_START_ADDR; // offset 12'h0B4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_t GECOE_DEC_META6_END_OFFSET; // offset 12'h0B8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_t GECOE_DEC_META7_START_ADDR; // offset 12'h0BC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_t GECOE_DEC_META7_END_OFFSET; // offset 12'h0C0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_t GECOE_DEC_META8_START_ADDR; // offset 12'h0C4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_t GECOE_DEC_META8_END_OFFSET; // offset 12'h0C8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_t GECOE_DEC_META9_START_ADDR; // offset 12'h0CC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_t GECOE_DEC_META9_END_OFFSET; // offset 12'h0D0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_t GECOE_DEC_META10_START_ADDR; // offset 12'h0D4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_t GECOE_DEC_META10_END_OFFSET; // offset 12'h0D8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_t GECOE_DEC_META11_START_ADDR; // offset 12'h0DC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_t GECOE_DEC_META11_END_OFFSET; // offset 12'h0E0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_t GECOE_DEC_META12_START_ADDR; // offset 12'h0E4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_t GECOE_DEC_META12_END_OFFSET; // offset 12'h0E8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_t GECOE_DEC_META13_START_ADDR; // offset 12'h0EC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_t GECOE_DEC_META13_END_OFFSET; // offset 12'h0F0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_t GECOE_DEC_META14_START_ADDR; // offset 12'h0F4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_t GECOE_DEC_META14_END_OFFSET; // offset 12'h0F8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_t GECOE_DEC_META15_START_ADDR; // offset 12'h0FC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_t GECOE_DEC_META15_END_OFFSET; // offset 12'h100, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF_COMP_STATUS_t GECOE_ENC_SURF_COMP_STATUS; // offset 12'h104, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_t GECOE_ENC_SURF0_START_ADDR; // offset 12'h108, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_t GECOE_ENC_SURF0_END_OFFSET; // offset 12'h10C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_t GECOE_ENC_SURF1_START_ADDR; // offset 12'h110, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_t GECOE_ENC_SURF1_END_OFFSET; // offset 12'h114, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_t GECOE_ENC_SURF2_START_ADDR; // offset 12'h118, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_t GECOE_ENC_SURF2_END_OFFSET; // offset 12'h11C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_t GECOE_ENC_SURF3_START_ADDR; // offset 12'h120, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_t GECOE_ENC_SURF3_END_OFFSET; // offset 12'h124, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_t GECOE_ENC_SURF4_START_ADDR; // offset 12'h128, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_t GECOE_ENC_SURF4_END_OFFSET; // offset 12'h12C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_t GECOE_ENC_SURF5_START_ADDR; // offset 12'h130, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_t GECOE_ENC_SURF5_END_OFFSET; // offset 12'h134, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_t GECOE_ENC_SURF6_START_ADDR; // offset 12'h138, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_t GECOE_ENC_SURF6_END_OFFSET; // offset 12'h13C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_t GECOE_ENC_SURF7_START_ADDR; // offset 12'h140, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_t GECOE_ENC_SURF7_END_OFFSET; // offset 12'h144, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_t GECOE_ENC_SURF8_START_ADDR; // offset 12'h148, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_t GECOE_ENC_SURF8_END_OFFSET; // offset 12'h14C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_t GECOE_ENC_SURF9_START_ADDR; // offset 12'h150, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_t GECOE_ENC_SURF9_END_OFFSET; // offset 12'h154, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_t GECOE_ENC_SURF10_START_ADDR; // offset 12'h158, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_t GECOE_ENC_SURF10_END_OFFSET; // offset 12'h15C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_t GECOE_ENC_SURF11_START_ADDR; // offset 12'h160, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_t GECOE_ENC_SURF11_END_OFFSET; // offset 12'h164, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_t GECOE_ENC_SURF12_START_ADDR; // offset 12'h168, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_t GECOE_ENC_SURF12_END_OFFSET; // offset 12'h16C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_t GECOE_ENC_SURF13_START_ADDR; // offset 12'h170, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_t GECOE_ENC_SURF13_END_OFFSET; // offset 12'h174, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_t GECOE_ENC_SURF14_START_ADDR; // offset 12'h178, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_t GECOE_ENC_SURF14_END_OFFSET; // offset 12'h17C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_t GECOE_ENC_SURF15_START_ADDR; // offset 12'h180, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_t GECOE_ENC_SURF15_END_OFFSET; // offset 12'h184, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_t GECOE_ENC_META0_START_ADDR; // offset 12'h188, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_t GECOE_ENC_META0_END_OFFSET; // offset 12'h18C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_t GECOE_ENC_META1_START_ADDR; // offset 12'h190, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_t GECOE_ENC_META1_END_OFFSET; // offset 12'h194, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_t GECOE_ENC_META2_START_ADDR; // offset 12'h198, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_t GECOE_ENC_META2_END_OFFSET; // offset 12'h19C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_t GECOE_ENC_META3_START_ADDR; // offset 12'h1A0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_t GECOE_ENC_META3_END_OFFSET; // offset 12'h1A4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_t GECOE_ENC_META4_START_ADDR; // offset 12'h1A8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_t GECOE_ENC_META4_END_OFFSET; // offset 12'h1AC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_t GECOE_ENC_META5_START_ADDR; // offset 12'h1B0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_t GECOE_ENC_META5_END_OFFSET; // offset 12'h1B4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_t GECOE_ENC_META6_START_ADDR; // offset 12'h1B8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_t GECOE_ENC_META6_END_OFFSET; // offset 12'h1BC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_t GECOE_ENC_META7_START_ADDR; // offset 12'h1C0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_t GECOE_ENC_META7_END_OFFSET; // offset 12'h1C4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_t GECOE_ENC_META8_START_ADDR; // offset 12'h1C8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_t GECOE_ENC_META8_END_OFFSET; // offset 12'h1CC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_t GECOE_ENC_META9_START_ADDR; // offset 12'h1D0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_t GECOE_ENC_META9_END_OFFSET; // offset 12'h1D4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_t GECOE_ENC_META10_START_ADDR; // offset 12'h1D8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_t GECOE_ENC_META10_END_OFFSET; // offset 12'h1DC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_t GECOE_ENC_META11_START_ADDR; // offset 12'h1E0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_t GECOE_ENC_META11_END_OFFSET; // offset 12'h1E4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_t GECOE_ENC_META12_START_ADDR; // offset 12'h1E8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_t GECOE_ENC_META12_END_OFFSET; // offset 12'h1EC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_t GECOE_ENC_META13_START_ADDR; // offset 12'h1F0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_t GECOE_ENC_META13_END_OFFSET; // offset 12'h1F4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_t GECOE_ENC_META14_START_ADDR; // offset 12'h1F8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_t GECOE_ENC_META14_END_OFFSET; // offset 12'h1FC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_t GECOE_ENC_META15_START_ADDR; // offset 12'h200, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_t GECOE_ENC_META15_END_OFFSET; // offset 12'h204, width 32
    MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_t GECOE_FLUSH_REQ;  // offset 12'h208, width 32
    MAP_GECOE_CORE_MEM_GECOE_FLUSHED_STREAM_t GECOE_FLUSHED_STREAM; // offset 12'h20C, width 32
    MAP_GECOE_CORE_MEM_GECOE_FLUSH_REQ_SHADOW_t GECOE_FLUSH_REQ_SHADOW; // offset 12'h210, width 32
    MAP_GECOE_CORE_MEM_GECOE_MAX_BURST_LENGTH_t GECOE_MAX_BURST_LENGTH; // offset 12'h214, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_PARTIAL_ACCESS_COUNT_t GECOE_DEC_PARTIAL_ACCESS_COUNT; // offset 12'h218, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_PARTIAL_ACCESS_COUNT_t GECOE_ENC_PARTIAL_ACCESS_COUNT; // offset 12'h21C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META_MISS_COUNT_t GECOE_DEC_META_MISS_COUNT; // offset 12'h220, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_UNCOM_MODE_COUNT_t GECOE_ENC_UNCOM_MODE_COUNT; // offset 12'h224, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_NULL_MODE_COUNT_t GECOE_ENC_NULL_MODE_COUNT; // offset 12'h228, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SM_MODE_COUNT_t GECOE_ENC_SM_MODE_COUNT; // offset 12'h22C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DBG_REG_t GECOE_DBG_REG;    // offset 12'h230, width 32
    MAP_GECOE_CORE_MEM_HASHING_ENABLE_t HASHING_ENABLE;   // offset 12'h234, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_START_ADDR_MSB_t GECOE_DEC_SURF0_START_ADDR_MSB; // offset 12'h238, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF0_END_OFFSET_MSB_t GECOE_DEC_SURF0_END_OFFSET_MSB; // offset 12'h23C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_START_ADDR_MSB_t GECOE_DEC_SURF1_START_ADDR_MSB; // offset 12'h240, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF1_END_OFFSET_MSB_t GECOE_DEC_SURF1_END_OFFSET_MSB; // offset 12'h244, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_START_ADDR_MSB_t GECOE_DEC_SURF2_START_ADDR_MSB; // offset 12'h248, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF2_END_OFFSET_MSB_t GECOE_DEC_SURF2_END_OFFSET_MSB; // offset 12'h24C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_START_ADDR_MSB_t GECOE_DEC_SURF3_START_ADDR_MSB; // offset 12'h250, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF3_END_OFFSET_MSB_t GECOE_DEC_SURF3_END_OFFSET_MSB; // offset 12'h254, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_START_ADDR_MSB_t GECOE_DEC_SURF4_START_ADDR_MSB; // offset 12'h258, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF4_END_OFFSET_MSB_t GECOE_DEC_SURF4_END_OFFSET_MSB; // offset 12'h25C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_START_ADDR_MSB_t GECOE_DEC_SURF5_START_ADDR_MSB; // offset 12'h260, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF5_END_OFFSET_MSB_t GECOE_DEC_SURF5_END_OFFSET_MSB; // offset 12'h264, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_START_ADDR_MSB_t GECOE_DEC_SURF6_START_ADDR_MSB; // offset 12'h268, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF6_END_OFFSET_MSB_t GECOE_DEC_SURF6_END_OFFSET_MSB; // offset 12'h26C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_START_ADDR_MSB_t GECOE_DEC_SURF7_START_ADDR_MSB; // offset 12'h270, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF7_END_OFFSET_MSB_t GECOE_DEC_SURF7_END_OFFSET_MSB; // offset 12'h274, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_START_ADDR_MSB_t GECOE_DEC_SURF8_START_ADDR_MSB; // offset 12'h278, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF8_END_OFFSET_MSB_t GECOE_DEC_SURF8_END_OFFSET_MSB; // offset 12'h27C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_START_ADDR_MSB_t GECOE_DEC_SURF9_START_ADDR_MSB; // offset 12'h280, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF9_END_OFFSET_MSB_t GECOE_DEC_SURF9_END_OFFSET_MSB; // offset 12'h284, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_START_ADDR_MSB_t GECOE_DEC_SURF10_START_ADDR_MSB; // offset 12'h288, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF10_END_OFFSET_MSB_t GECOE_DEC_SURF10_END_OFFSET_MSB; // offset 12'h28C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_START_ADDR_MSB_t GECOE_DEC_SURF11_START_ADDR_MSB; // offset 12'h290, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF11_END_OFFSET_MSB_t GECOE_DEC_SURF11_END_OFFSET_MSB; // offset 12'h294, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_START_ADDR_MSB_t GECOE_DEC_SURF12_START_ADDR_MSB; // offset 12'h298, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF12_END_OFFSET_MSB_t GECOE_DEC_SURF12_END_OFFSET_MSB; // offset 12'h29C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_START_ADDR_MSB_t GECOE_DEC_SURF13_START_ADDR_MSB; // offset 12'h2A0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF13_END_OFFSET_MSB_t GECOE_DEC_SURF13_END_OFFSET_MSB; // offset 12'h2A4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_START_ADDR_MSB_t GECOE_DEC_SURF14_START_ADDR_MSB; // offset 12'h2A8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF14_END_OFFSET_MSB_t GECOE_DEC_SURF14_END_OFFSET_MSB; // offset 12'h2AC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_START_ADDR_MSB_t GECOE_DEC_SURF15_START_ADDR_MSB; // offset 12'h2B0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_SURF15_END_OFFSET_MSB_t GECOE_DEC_SURF15_END_OFFSET_MSB; // offset 12'h2B4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META0_START_ADDR_MSB_t GECOE_DEC_META0_START_ADDR_MSB; // offset 12'h2B8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META0_END_OFFSET_MSB_t GECOE_DEC_META0_END_OFFSET_MSB; // offset 12'h2BC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META1_START_ADDR_MSB_t GECOE_DEC_META1_START_ADDR_MSB; // offset 12'h2C0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META1_END_OFFSET_MSB_t GECOE_DEC_META1_END_OFFSET_MSB; // offset 12'h2C4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META2_START_ADDR_MSB_t GECOE_DEC_META2_START_ADDR_MSB; // offset 12'h2C8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META2_END_OFFSET_MSB_t GECOE_DEC_META2_END_OFFSET_MSB; // offset 12'h2CC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META3_START_ADDR_MSB_t GECOE_DEC_META3_START_ADDR_MSB; // offset 12'h2D0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META3_END_OFFSET_MSB_t GECOE_DEC_META3_END_OFFSET_MSB; // offset 12'h2D4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META4_START_ADDR_MSB_t GECOE_DEC_META4_START_ADDR_MSB; // offset 12'h2D8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META4_END_OFFSET_MSB_t GECOE_DEC_META4_END_OFFSET_MSB; // offset 12'h2DC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META5_START_ADDR_MSB_t GECOE_DEC_META5_START_ADDR_MSB; // offset 12'h2E0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META5_END_OFFSET_MSB_t GECOE_DEC_META5_END_OFFSET_MSB; // offset 12'h2E4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META6_START_ADDR_MSB_t GECOE_DEC_META6_START_ADDR_MSB; // offset 12'h2E8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META6_END_OFFSET_MSB_t GECOE_DEC_META6_END_OFFSET_MSB; // offset 12'h2EC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META7_START_ADDR_MSB_t GECOE_DEC_META7_START_ADDR_MSB; // offset 12'h2F0, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META7_END_OFFSET_MSB_t GECOE_DEC_META7_END_OFFSET_MSB; // offset 12'h2F4, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META8_START_ADDR_MSB_t GECOE_DEC_META8_START_ADDR_MSB; // offset 12'h2F8, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META8_END_OFFSET_MSB_t GECOE_DEC_META8_END_OFFSET_MSB; // offset 12'h2FC, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META9_START_ADDR_MSB_t GECOE_DEC_META9_START_ADDR_MSB; // offset 12'h300, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META9_END_OFFSET_MSB_t GECOE_DEC_META9_END_OFFSET_MSB; // offset 12'h304, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META10_START_ADDR_MSB_t GECOE_DEC_META10_START_ADDR_MSB; // offset 12'h308, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META10_END_OFFSET_MSB_t GECOE_DEC_META10_END_OFFSET_MSB; // offset 12'h30C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META11_START_ADDR_MSB_t GECOE_DEC_META11_START_ADDR_MSB; // offset 12'h310, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META11_END_OFFSET_MSB_t GECOE_DEC_META11_END_OFFSET_MSB; // offset 12'h314, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META12_START_ADDR_MSB_t GECOE_DEC_META12_START_ADDR_MSB; // offset 12'h318, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META12_END_OFFSET_MSB_t GECOE_DEC_META12_END_OFFSET_MSB; // offset 12'h31C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META13_START_ADDR_MSB_t GECOE_DEC_META13_START_ADDR_MSB; // offset 12'h320, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META13_END_OFFSET_MSB_t GECOE_DEC_META13_END_OFFSET_MSB; // offset 12'h324, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META14_START_ADDR_MSB_t GECOE_DEC_META14_START_ADDR_MSB; // offset 12'h328, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META14_END_OFFSET_MSB_t GECOE_DEC_META14_END_OFFSET_MSB; // offset 12'h32C, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META15_START_ADDR_MSB_t GECOE_DEC_META15_START_ADDR_MSB; // offset 12'h330, width 32
    MAP_GECOE_CORE_MEM_GECOE_DEC_META15_END_OFFSET_MSB_t GECOE_DEC_META15_END_OFFSET_MSB; // offset 12'h334, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_START_ADDR_MSB_t GECOE_ENC_SURF0_START_ADDR_MSB; // offset 12'h338, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF0_END_OFFSET_MSB_t GECOE_ENC_SURF0_END_OFFSET_MSB; // offset 12'h33C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_START_ADDR_MSB_t GECOE_ENC_SURF1_START_ADDR_MSB; // offset 12'h340, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF1_END_OFFSET_MSB_t GECOE_ENC_SURF1_END_OFFSET_MSB; // offset 12'h344, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_START_ADDR_MSB_t GECOE_ENC_SURF2_START_ADDR_MSB; // offset 12'h348, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF2_END_OFFSET_MSB_t GECOE_ENC_SURF2_END_OFFSET_MSB; // offset 12'h34C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_START_ADDR_MSB_t GECOE_ENC_SURF3_START_ADDR_MSB; // offset 12'h350, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF3_END_OFFSET_MSB_t GECOE_ENC_SURF3_END_OFFSET_MSB; // offset 12'h354, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_START_ADDR_MSB_t GECOE_ENC_SURF4_START_ADDR_MSB; // offset 12'h358, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF4_END_OFFSET_MSB_t GECOE_ENC_SURF4_END_OFFSET_MSB; // offset 12'h35C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_START_ADDR_MSB_t GECOE_ENC_SURF5_START_ADDR_MSB; // offset 12'h360, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF5_END_OFFSET_MSB_t GECOE_ENC_SURF5_END_OFFSET_MSB; // offset 12'h364, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_START_ADDR_MSB_t GECOE_ENC_SURF6_START_ADDR_MSB; // offset 12'h368, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF6_END_OFFSET_MSB_t GECOE_ENC_SURF6_END_OFFSET_MSB; // offset 12'h36C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_START_ADDR_MSB_t GECOE_ENC_SURF7_START_ADDR_MSB; // offset 12'h370, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF7_END_OFFSET_MSB_t GECOE_ENC_SURF7_END_OFFSET_MSB; // offset 12'h374, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_START_ADDR_MSB_t GECOE_ENC_SURF8_START_ADDR_MSB; // offset 12'h378, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF8_END_OFFSET_MSB_t GECOE_ENC_SURF8_END_OFFSET_MSB; // offset 12'h37C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_START_ADDR_MSB_t GECOE_ENC_SURF9_START_ADDR_MSB; // offset 12'h380, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF9_END_OFFSET_MSB_t GECOE_ENC_SURF9_END_OFFSET_MSB; // offset 12'h384, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_START_ADDR_MSB_t GECOE_ENC_SURF10_START_ADDR_MSB; // offset 12'h388, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF10_END_OFFSET_MSB_t GECOE_ENC_SURF10_END_OFFSET_MSB; // offset 12'h38C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_START_ADDR_MSB_t GECOE_ENC_SURF11_START_ADDR_MSB; // offset 12'h390, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF11_END_OFFSET_MSB_t GECOE_ENC_SURF11_END_OFFSET_MSB; // offset 12'h394, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_START_ADDR_MSB_t GECOE_ENC_SURF12_START_ADDR_MSB; // offset 12'h398, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF12_END_OFFSET_MSB_t GECOE_ENC_SURF12_END_OFFSET_MSB; // offset 12'h39C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_START_ADDR_MSB_t GECOE_ENC_SURF13_START_ADDR_MSB; // offset 12'h3A0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF13_END_OFFSET_MSB_t GECOE_ENC_SURF13_END_OFFSET_MSB; // offset 12'h3A4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_START_ADDR_MSB_t GECOE_ENC_SURF14_START_ADDR_MSB; // offset 12'h3A8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF14_END_OFFSET_MSB_t GECOE_ENC_SURF14_END_OFFSET_MSB; // offset 12'h3AC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_START_ADDR_MSB_t GECOE_ENC_SURF15_START_ADDR_MSB; // offset 12'h3B0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_SURF15_END_OFFSET_MSB_t GECOE_ENC_SURF15_END_OFFSET_MSB; // offset 12'h3B4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META0_START_ADDR_MSB_t GECOE_ENC_META0_START_ADDR_MSB; // offset 12'h3B8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META0_END_OFFSET_MSB_t GECOE_ENC_META0_END_OFFSET_MSB; // offset 12'h3BC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META1_START_ADDR_MSB_t GECOE_ENC_META1_START_ADDR_MSB; // offset 12'h3C0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META1_END_OFFSET_MSB_t GECOE_ENC_META1_END_OFFSET_MSB; // offset 12'h3C4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META2_START_ADDR_MSB_t GECOE_ENC_META2_START_ADDR_MSB; // offset 12'h3C8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META2_END_OFFSET_MSB_t GECOE_ENC_META2_END_OFFSET_MSB; // offset 12'h3CC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META3_START_ADDR_MSB_t GECOE_ENC_META3_START_ADDR_MSB; // offset 12'h3D0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META3_END_OFFSET_MSB_t GECOE_ENC_META3_END_OFFSET_MSB; // offset 12'h3D4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META4_START_ADDR_MSB_t GECOE_ENC_META4_START_ADDR_MSB; // offset 12'h3D8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META4_END_OFFSET_MSB_t GECOE_ENC_META4_END_OFFSET_MSB; // offset 12'h3DC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META5_START_ADDR_MSB_t GECOE_ENC_META5_START_ADDR_MSB; // offset 12'h3E0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META5_END_OFFSET_MSB_t GECOE_ENC_META5_END_OFFSET_MSB; // offset 12'h3E4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META6_START_ADDR_MSB_t GECOE_ENC_META6_START_ADDR_MSB; // offset 12'h3E8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META6_END_OFFSET_MSB_t GECOE_ENC_META6_END_OFFSET_MSB; // offset 12'h3EC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META7_START_ADDR_MSB_t GECOE_ENC_META7_START_ADDR_MSB; // offset 12'h3F0, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META7_END_OFFSET_MSB_t GECOE_ENC_META7_END_OFFSET_MSB; // offset 12'h3F4, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META8_START_ADDR_MSB_t GECOE_ENC_META8_START_ADDR_MSB; // offset 12'h3F8, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META8_END_OFFSET_MSB_t GECOE_ENC_META8_END_OFFSET_MSB; // offset 12'h3FC, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META9_START_ADDR_MSB_t GECOE_ENC_META9_START_ADDR_MSB; // offset 12'h400, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META9_END_OFFSET_MSB_t GECOE_ENC_META9_END_OFFSET_MSB; // offset 12'h404, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META10_START_ADDR_MSB_t GECOE_ENC_META10_START_ADDR_MSB; // offset 12'h408, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META10_END_OFFSET_MSB_t GECOE_ENC_META10_END_OFFSET_MSB; // offset 12'h40C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META11_START_ADDR_MSB_t GECOE_ENC_META11_START_ADDR_MSB; // offset 12'h410, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META11_END_OFFSET_MSB_t GECOE_ENC_META11_END_OFFSET_MSB; // offset 12'h414, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META12_START_ADDR_MSB_t GECOE_ENC_META12_START_ADDR_MSB; // offset 12'h418, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META12_END_OFFSET_MSB_t GECOE_ENC_META12_END_OFFSET_MSB; // offset 12'h41C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META13_START_ADDR_MSB_t GECOE_ENC_META13_START_ADDR_MSB; // offset 12'h420, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META13_END_OFFSET_MSB_t GECOE_ENC_META13_END_OFFSET_MSB; // offset 12'h424, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META14_START_ADDR_MSB_t GECOE_ENC_META14_START_ADDR_MSB; // offset 12'h428, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META14_END_OFFSET_MSB_t GECOE_ENC_META14_END_OFFSET_MSB; // offset 12'h42C, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META15_START_ADDR_MSB_t GECOE_ENC_META15_START_ADDR_MSB; // offset 12'h430, width 32
    MAP_GECOE_CORE_MEM_GECOE_ENC_META15_END_OFFSET_MSB_t GECOE_ENC_META15_END_OFFSET_MSB; // offset 12'h434, width 32
} map_GeCoE_Core_t;                              // size:  12'h438


#endif // _MAP_GECOE_CORE_REGS_H_

