/*******************************************************************************
INTEL CORPORATION CONFIDENTIAL Copyright(c) 2017-2021 Intel Corporation. All Rights Reserved.

The source code contained or described herein and all documents related to the
source code ("Material") are owned by Intel Corporation or its suppliers or
licensors. Title to the Material remains with Intel Corporation or its suppliers
and licensors. The Material contains trade secrets and proprietary and
confidential information of Intel or its suppliers and licensors. The Material
is protected by worldwide copyright and trade secret laws and treaty provisions.
No part of the Material may be used, copied, reproduced, modified, published,
uploaded, posted, transmitted, distributed, or disclosed in any way without
Intel's prior express written permission.

No license under any patent, copyright, trade secret or other intellectual
property right is granted to or conferred upon you by disclosure or delivery of
the Materials, either expressly, by implication, inducement, estoppel or
otherwise. Any license under such intellectual property rights must be express
and approved by Intel in writing.
*******************************************************************************/

//                                                                             
// File:            idc_regs_regs.h                                            
// Creator:         vchakki                                                    
// Time:            Thursday Jan 24, 2019 [7:40:51 am]                         
//                                                                             
// Path:            /tmp/vchakki/nebulon_run/1846718467_2019-01-24.07:40:25    
// Arguments:       -input idc.rdl -chdr -out_dir .                            
//                                                                             
// MRE:             5.2018.2                                                   
// Machine:         icsl1890                                                   
// OS:              Linux 3.0.101-108.13.1.14249.0.PTF-default                 
// Nebulon version: d18ww24.4                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
                                                                         


#ifndef _IDC_REGS_REGS_H_
#define _IDC_REGS_REGS_H_

#define IDC_REGS_IDC_SAI_MSGPORT     0x0AA
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR0_SAI_CP_MSGREGADDR 0x100
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR0_SAI_RD_MSGREGADDR 0x108
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR0_SAI_WR_MSGREGADDR 0x110
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR1_SAI_CP_MSGREGADDR 0x120
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR1_SAI_RD_MSGREGADDR 0x128
#define IDC_REGS_IDC_SAI_IDC_MMIO_BAR1_SAI_WR_MSGREGADDR 0x130
#define IDC_REGS_IDC_SAI_IDC_SBPR_SAI_CP_MSGREGADDR 0x140
#define IDC_REGS_IDC_SAI_IDC_SBPR_SAI_RD_MSGREGADDR 0x148
#define IDC_REGS_IDC_SAI_IDC_SBPR_SAI_WR_MSGREGADDR 0x150
#define IDC_REGS_IDC_PCICFG_MSG_MSGPORT     0x0AA
#define IDC_REGS_IDC_PCICFG_MSG_ID_MSGREGADDR 0x0
#define IDC_REGS_IDC_PCICFG_MSG_DCTRL_MSGREGADDR 0x4
#define IDC_REGS_IDC_PCICFG_MSG_DSTS_MSGREGADDR 0x6
#define IDC_REGS_IDC_PCICFG_MSG_RID_DLCO_MSGREGADDR 0x8
#define IDC_REGS_IDC_PCICFG_MSG_CLS_MSGREGADDR 0x0C
#define IDC_REGS_IDC_PCICFG_MSG_HTYPE_MSGREGADDR 0x0E
#define IDC_REGS_IDC_PCICFG_MSG_BIST_MSGREGADDR 0x0F
#define IDC_REGS_IDC_PCICFG_MSG_IDCBAR0_MSGREGADDR 0x10
#define IDC_REGS_IDC_PCICFG_MSG_IDCBAR1_MSGREGADDR 0x18
#define IDC_REGS_IDC_PCICFG_MSG_SSVI_MSGREGADDR 0x2C
#define IDC_REGS_IDC_PCICFG_MSG_SSI_MSGREGADDR 0x2E
#define IDC_REGS_IDC_PCICFG_MSG_CAPP_MSGREGADDR 0x34
#define IDC_REGS_IDC_PCICFG_MSG_INTL_MSGREGADDR 0x3C
#define IDC_REGS_IDC_PCICFG_MSG_INTP_MSGREGADDR 0x3D
#define IDC_REGS_IDC_PCICFG_MSG_MINGNTLAT_MSGREGADDR 0x3E
#define IDC_REGS_IDC_PCICFG_MSG_OVRCFGCTL_MSGREGADDR 0x40
#define IDC_REGS_IDC_PCICFG_MSG_MSICAPID_MSGREGADDR 0x90
#define IDC_REGS_IDC_PCICFG_MSG_MC_MSGREGADDR 0x92
#define IDC_REGS_IDC_PCICFG_MSG_MA_MSGREGADDR 0x94
#define IDC_REGS_IDC_PCICFG_MSG_MD_MSGREGADDR 0x98
#define IDC_REGS_IDC_PCICFG_MSG_D0I3CAPID_MSGREGADDR 0x0A0
#define IDC_REGS_IDC_PCICFG_MSG_D0I3CAP_MSGREGADDR 0x0A2
#define IDC_REGS_IDC_PCICFG_MSG_D0I3VSEC_MSGREGADDR 0x0A4
#define IDC_REGS_IDC_PCICFG_MSG_D0I3SWLTRPTR_MSGREGADDR 0x0A8
#define IDC_REGS_IDC_PCICFG_MSG_D0I3DEVIDLEPTR_MSGREGADDR 0x0AC
#define IDC_REGS_IDC_PCICFG_MSG_D0I3DEVIDLEPOL_MSGREGADDR 0x0B0
#define IDC_REGS_IDC_PCICFG_MSG_PCE_MSGREGADDR 0x0B2
#define IDC_REGS_IDC_PCICFG_MSG_PMCAPID_MSGREGADDR 0x0DC
#define IDC_REGS_IDC_PCICFG_MSG_PMCAP_MSGREGADDR 0x0DE
#define IDC_REGS_IDC_PCICFG_MSG_PMCS_MSGREGADDR 0x0E0
#define IDC_REGS_IDC_PCICFG_MSG_FLRCAPID_MSGREGADDR 0x0F0
#define IDC_REGS_IDC_PCICFG_MSG_FLRMISC_MSGREGADDR 0x0F2
#define IDC_REGS_IDC_PCICFG_MSG_FLRCTL_MSGREGADDR 0x0F4
#define IDC_REGS_IDC_PCICFG_MSG_FLRSTS_MSGREGADDR 0x0F5
#define IDC_REGS_IDC_MMIO_BAR0_MEM_BASE 0x0FFFFFFFFFFFFFFF0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPE_MMOFFSET 0x0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICERST_MMOFFSET 0x8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICERDY_MMOFFSET 0x10
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEMASKSTS_MMOFFSET 0x18
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICENOTE_MMOFFSET 0x20
#define IDC_REGS_IDC_MMIO_BAR0_MEM_NOTCLR_MMOFFSET 0x28
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEINTST_MMOFFSET 0x40
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEINTEN_MMOFFSET 0x48
#define IDC_REGS_IDC_MMIO_BAR0_MEM_IDCINTST_MMOFFSET 0x50
#define IDC_REGS_IDC_MMIO_BAR0_MEM_IDCINTEN_MMOFFSET 0x58
#define IDC_REGS_IDC_MMIO_BAR0_MEM_IDCSPARE_MMOFFSET 0x60
#define IDC_REGS_IDC_MMIO_BAR0_MEM_IDCD0I3C_MMOFFSET 0x0A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL0_MMOFFSET 0x800
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL1_MMOFFSET 0x808
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL2_MMOFFSET 0x810
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL3_MMOFFSET 0x818
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL4_MMOFFSET 0x820
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICEPOOL5_MMOFFSET 0x828
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICENOTA0_MMOFFSET 0x840
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICENOTA1_MMOFFSET 0x848
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICENOTA2_MMOFFSET 0x850
#define IDC_REGS_IDC_MMIO_BAR0_MEM_ICENOTA3_MMOFFSET 0x858
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA0_MMOFFSET 0x1000
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC0_MMOFFSET 0x1008
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT0_MMOFFSET 0x1010
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA1_MMOFFSET 0x1020
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC1_MMOFFSET 0x1028
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT1_MMOFFSET 0x1030
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA2_MMOFFSET 0x1040
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC2_MMOFFSET 0x1048
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT2_MMOFFSET 0x1050
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA3_MMOFFSET 0x1060
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC3_MMOFFSET 0x1068
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT3_MMOFFSET 0x1070
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA4_MMOFFSET 0x1080
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC4_MMOFFSET 0x1088
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT4_MMOFFSET 0x1090
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA5_MMOFFSET 0x10A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC5_MMOFFSET 0x10A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT5_MMOFFSET 0x10B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA6_MMOFFSET 0x10C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC6_MMOFFSET 0x10C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT6_MMOFFSET 0x10D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA7_MMOFFSET 0x10E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC7_MMOFFSET 0x10E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT7_MMOFFSET 0x10F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA8_MMOFFSET 0x1100
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC8_MMOFFSET 0x1108
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT8_MMOFFSET 0x1110
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA9_MMOFFSET 0x1120
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC9_MMOFFSET 0x1128
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT9_MMOFFSET 0x1130
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA10_MMOFFSET 0x1140
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC10_MMOFFSET 0x1148
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT10_MMOFFSET 0x1150
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA11_MMOFFSET 0x1160
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC11_MMOFFSET 0x1168
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT11_MMOFFSET 0x1170
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA12_MMOFFSET 0x1180
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC12_MMOFFSET 0x1188
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT12_MMOFFSET 0x1190
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA13_MMOFFSET 0x11A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC13_MMOFFSET 0x11A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT13_MMOFFSET 0x11B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA14_MMOFFSET 0x11C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC14_MMOFFSET 0x11C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT14_MMOFFSET 0x11D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA15_MMOFFSET 0x11E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC15_MMOFFSET 0x11E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT15_MMOFFSET 0x11F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA16_MMOFFSET 0x1200
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC16_MMOFFSET 0x1208
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT16_MMOFFSET 0x1210
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA17_MMOFFSET 0x1220
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC17_MMOFFSET 0x1228
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT17_MMOFFSET 0x1230
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA18_MMOFFSET 0x1240
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC18_MMOFFSET 0x1248
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT18_MMOFFSET 0x1250
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA19_MMOFFSET 0x1260
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC19_MMOFFSET 0x1268
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT19_MMOFFSET 0x1270
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA20_MMOFFSET 0x1280
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC20_MMOFFSET 0x1288
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT20_MMOFFSET 0x1290
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA21_MMOFFSET 0x12A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC21_MMOFFSET 0x12A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT21_MMOFFSET 0x12B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA22_MMOFFSET 0x12C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC22_MMOFFSET 0x12C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT22_MMOFFSET 0x12D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA23_MMOFFSET 0x12E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC23_MMOFFSET 0x12E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT23_MMOFFSET 0x12F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA24_MMOFFSET 0x1300
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC24_MMOFFSET 0x1308
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT24_MMOFFSET 0x1310
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA25_MMOFFSET 0x1320
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC25_MMOFFSET 0x1328
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT25_MMOFFSET 0x1330
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA26_MMOFFSET 0x1340
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC26_MMOFFSET 0x1348
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT26_MMOFFSET 0x1350
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA27_MMOFFSET 0x1360
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC27_MMOFFSET 0x1368
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT27_MMOFFSET 0x1370
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA28_MMOFFSET 0x1380
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC28_MMOFFSET 0x1388
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT28_MMOFFSET 0x1390
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA29_MMOFFSET 0x13A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC29_MMOFFSET 0x13A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT29_MMOFFSET 0x13B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA30_MMOFFSET 0x13C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC30_MMOFFSET 0x13C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT30_MMOFFSET 0x13D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIA31_MMOFFSET 0x13E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTIAINC31_MMOFFSET 0x13E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTPROT31_MMOFFSET 0x13F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA0_MMOFFSET 0x1800
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES0_MMOFFSET 0x1808
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT0_MMOFFSET 0x1810
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA1_MMOFFSET 0x1820
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES1_MMOFFSET 0x1828
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT1_MMOFFSET 0x1830
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA2_MMOFFSET 0x1840
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES2_MMOFFSET 0x1848
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT2_MMOFFSET 0x1850
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA3_MMOFFSET 0x1860
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES3_MMOFFSET 0x1868
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT3_MMOFFSET 0x1870
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA4_MMOFFSET 0x1880
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES4_MMOFFSET 0x1888
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT4_MMOFFSET 0x1890
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA5_MMOFFSET 0x18A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES5_MMOFFSET 0x18A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT5_MMOFFSET 0x18B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA6_MMOFFSET 0x18C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES6_MMOFFSET 0x18C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT6_MMOFFSET 0x18D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA7_MMOFFSET 0x18E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES7_MMOFFSET 0x18E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT7_MMOFFSET 0x18F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA8_MMOFFSET 0x1900
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES8_MMOFFSET 0x1908
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT8_MMOFFSET 0x1910
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA9_MMOFFSET 0x1920
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES9_MMOFFSET 0x1928
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT9_MMOFFSET 0x1930
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA10_MMOFFSET 0x1940
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES10_MMOFFSET 0x1948
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT10_MMOFFSET 0x1950
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA11_MMOFFSET 0x1960
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES11_MMOFFSET 0x1968
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT11_MMOFFSET 0x1970
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA12_MMOFFSET 0x1980
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES12_MMOFFSET 0x1988
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT12_MMOFFSET 0x1990
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA13_MMOFFSET 0x19A0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES13_MMOFFSET 0x19A8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT13_MMOFFSET 0x19B0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA14_MMOFFSET 0x19C0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES14_MMOFFSET 0x19C8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT14_MMOFFSET 0x19D0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA15_MMOFFSET 0x19E0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES15_MMOFFSET 0x19E8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT15_MMOFFSET 0x19F0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA16_MMOFFSET 0x1A00
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES16_MMOFFSET 0x1A08
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT16_MMOFFSET 0x1A10
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA17_MMOFFSET 0x1A20
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES17_MMOFFSET 0x1A28
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT17_MMOFFSET 0x1A30
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA18_MMOFFSET 0x1A40
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES18_MMOFFSET 0x1A48
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT18_MMOFFSET 0x1A50
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA19_MMOFFSET 0x1A60
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES19_MMOFFSET 0x1A68
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT19_MMOFFSET 0x1A70
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA20_MMOFFSET 0x1A80
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES20_MMOFFSET 0x1A88
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT20_MMOFFSET 0x1A90
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA21_MMOFFSET 0x1AA0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES21_MMOFFSET 0x1AA8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT21_MMOFFSET 0x1AB0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA22_MMOFFSET 0x1AC0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES22_MMOFFSET 0x1AC8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT22_MMOFFSET 0x1AD0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA23_MMOFFSET 0x1AE0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES23_MMOFFSET 0x1AE8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT23_MMOFFSET 0x1AF0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA24_MMOFFSET 0x1B00
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES24_MMOFFSET 0x1B08
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT24_MMOFFSET 0x1B10
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA25_MMOFFSET 0x1B20
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES25_MMOFFSET 0x1B28
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT25_MMOFFSET 0x1B30
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA26_MMOFFSET 0x1B40
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES26_MMOFFSET 0x1B48
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT26_MMOFFSET 0x1B50
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA27_MMOFFSET 0x1B60
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES27_MMOFFSET 0x1B68
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT27_MMOFFSET 0x1B70
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA28_MMOFFSET 0x1B80
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES28_MMOFFSET 0x1B88
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT28_MMOFFSET 0x1B90
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA29_MMOFFSET 0x1BA0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES29_MMOFFSET 0x1BA8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT29_MMOFFSET 0x1BB0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA30_MMOFFSET 0x1BC0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES30_MMOFFSET 0x1BC8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT30_MMOFFSET 0x1BD0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAVALIA31_MMOFFSET 0x1BE0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_RSRES31_MMOFFSET 0x1BE8
#define IDC_REGS_IDC_MMIO_BAR0_MEM_SEMAPROT31_MMOFFSET 0x1BF0
#define IDC_REGS_IDC_MMIO_BAR0_MEM_IA0ATTEN_MMOFFSET 0x2000
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTNOTIA0_MMOFFSET 0x2020
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTNOTIA1_MMOFFSET 0x2028
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTNOTIA2_MMOFFSET 0x2030
#define IDC_REGS_IDC_MMIO_BAR0_MEM_EVCTNOTIA3_MMOFFSET 0x2038
#define IDC_REGS_IDC_MMIO_BAR1_MSG_MSGPORT     0x0AA
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE0_MSGREGADDR 0x0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE0_MSGREGADDR 0x8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE1_MSGREGADDR 0x20
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE1_MSGREGADDR 0x28
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE2_MSGREGADDR 0x40
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE2_MSGREGADDR 0x48
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE3_MSGREGADDR 0x60
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE3_MSGREGADDR 0x68
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE4_MSGREGADDR 0x80
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE4_MSGREGADDR 0x88
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE5_MSGREGADDR 0x0A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE5_MSGREGADDR 0x0A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE6_MSGREGADDR 0x0C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE6_MSGREGADDR 0x0C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE7_MSGREGADDR 0x0E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE7_MSGREGADDR 0x0E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE8_MSGREGADDR 0x100
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE8_MSGREGADDR 0x108
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE9_MSGREGADDR 0x120
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE9_MSGREGADDR 0x128
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE10_MSGREGADDR 0x140
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE10_MSGREGADDR 0x148
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE11_MSGREGADDR 0x160
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE11_MSGREGADDR 0x168
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE12_MSGREGADDR 0x180
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE12_MSGREGADDR 0x188
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE13_MSGREGADDR 0x1A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE13_MSGREGADDR 0x1A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE14_MSGREGADDR 0x1C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE14_MSGREGADDR 0x1C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE15_MSGREGADDR 0x1E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE15_MSGREGADDR 0x1E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE16_MSGREGADDR 0x200
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE16_MSGREGADDR 0x208
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE17_MSGREGADDR 0x220
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE17_MSGREGADDR 0x228
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE18_MSGREGADDR 0x240
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE18_MSGREGADDR 0x248
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE19_MSGREGADDR 0x260
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE19_MSGREGADDR 0x268
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE20_MSGREGADDR 0x280
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE20_MSGREGADDR 0x288
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE21_MSGREGADDR 0x2A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE21_MSGREGADDR 0x2A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE22_MSGREGADDR 0x2C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE22_MSGREGADDR 0x2C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE23_MSGREGADDR 0x2E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE23_MSGREGADDR 0x2E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE24_MSGREGADDR 0x300
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE24_MSGREGADDR 0x308
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE25_MSGREGADDR 0x320
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE25_MSGREGADDR 0x328
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE26_MSGREGADDR 0x340
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE26_MSGREGADDR 0x348
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE27_MSGREGADDR 0x360
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE27_MSGREGADDR 0x368
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE28_MSGREGADDR 0x380
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE28_MSGREGADDR 0x388
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE29_MSGREGADDR 0x3A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE29_MSGREGADDR 0x3A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE30_MSGREGADDR 0x3C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE30_MSGREGADDR 0x3C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTICE31_MSGREGADDR 0x3E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTINCICE31_MSGREGADDR 0x3E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_EVCTNOTICE_MSGREGADDR 0x800
#define IDC_REGS_IDC_MMIO_BAR1_MSG_ICEATTEN_MSGREGADDR 0x810
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE0_MSGREGADDR 0x1000
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE0_MSGREGADDR 0x1008
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW00_MSGREGADDR 0x1010
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW10_MSGREGADDR 0x1018
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW20_MSGREGADDR 0x1020
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW30_MSGREGADDR 0x1028
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE1_MSGREGADDR 0x1040
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE1_MSGREGADDR 0x1048
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW01_MSGREGADDR 0x1050
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW11_MSGREGADDR 0x1058
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW21_MSGREGADDR 0x1060
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW31_MSGREGADDR 0x1068
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE2_MSGREGADDR 0x1080
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE2_MSGREGADDR 0x1088
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW02_MSGREGADDR 0x1090
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW12_MSGREGADDR 0x1098
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW22_MSGREGADDR 0x10A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW32_MSGREGADDR 0x10A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE3_MSGREGADDR 0x10C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE3_MSGREGADDR 0x10C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW03_MSGREGADDR 0x10D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW13_MSGREGADDR 0x10D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW23_MSGREGADDR 0x10E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW33_MSGREGADDR 0x10E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE4_MSGREGADDR 0x1100
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE4_MSGREGADDR 0x1108
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW04_MSGREGADDR 0x1110
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW14_MSGREGADDR 0x1118
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW24_MSGREGADDR 0x1120
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW34_MSGREGADDR 0x1128
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE5_MSGREGADDR 0x1140
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE5_MSGREGADDR 0x1148
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW05_MSGREGADDR 0x1150
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW15_MSGREGADDR 0x1158
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW25_MSGREGADDR 0x1160
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW35_MSGREGADDR 0x1168
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE6_MSGREGADDR 0x1180
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE6_MSGREGADDR 0x1188
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW06_MSGREGADDR 0x1190
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW16_MSGREGADDR 0x1198
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW26_MSGREGADDR 0x11A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW36_MSGREGADDR 0x11A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE7_MSGREGADDR 0x11C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE7_MSGREGADDR 0x11C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW07_MSGREGADDR 0x11D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW17_MSGREGADDR 0x11D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW27_MSGREGADDR 0x11E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW37_MSGREGADDR 0x11E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE8_MSGREGADDR 0x1200
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE8_MSGREGADDR 0x1208
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW08_MSGREGADDR 0x1210
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW18_MSGREGADDR 0x1218
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW28_MSGREGADDR 0x1220
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW38_MSGREGADDR 0x1228
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE9_MSGREGADDR 0x1240
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE9_MSGREGADDR 0x1248
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW09_MSGREGADDR 0x1250
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW19_MSGREGADDR 0x1258
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW29_MSGREGADDR 0x1260
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW39_MSGREGADDR 0x1268
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE10_MSGREGADDR 0x1280
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE10_MSGREGADDR 0x1288
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW010_MSGREGADDR 0x1290
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW110_MSGREGADDR 0x1298
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW210_MSGREGADDR 0x12A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW310_MSGREGADDR 0x12A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE11_MSGREGADDR 0x12C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE11_MSGREGADDR 0x12C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW011_MSGREGADDR 0x12D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW111_MSGREGADDR 0x12D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW211_MSGREGADDR 0x12E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW311_MSGREGADDR 0x12E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE12_MSGREGADDR 0x1300
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE12_MSGREGADDR 0x1308
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW012_MSGREGADDR 0x1310
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW112_MSGREGADDR 0x1318
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW212_MSGREGADDR 0x1320
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW312_MSGREGADDR 0x1328
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE13_MSGREGADDR 0x1340
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE13_MSGREGADDR 0x1348
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW013_MSGREGADDR 0x1350
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW113_MSGREGADDR 0x1358
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW213_MSGREGADDR 0x1360
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW313_MSGREGADDR 0x1368
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE14_MSGREGADDR 0x1380
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE14_MSGREGADDR 0x1388
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW014_MSGREGADDR 0x1390
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW114_MSGREGADDR 0x1398
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW214_MSGREGADDR 0x13A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW314_MSGREGADDR 0x13A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE15_MSGREGADDR 0x13C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE15_MSGREGADDR 0x13C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW015_MSGREGADDR 0x13D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW115_MSGREGADDR 0x13D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW215_MSGREGADDR 0x13E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW315_MSGREGADDR 0x13E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE16_MSGREGADDR 0x1400
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE16_MSGREGADDR 0x1408
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW016_MSGREGADDR 0x1410
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW116_MSGREGADDR 0x1418
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW216_MSGREGADDR 0x1420
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW316_MSGREGADDR 0x1428
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE17_MSGREGADDR 0x1440
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE17_MSGREGADDR 0x1448
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW017_MSGREGADDR 0x1450
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW117_MSGREGADDR 0x1458
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW217_MSGREGADDR 0x1460
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW317_MSGREGADDR 0x1468
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE18_MSGREGADDR 0x1480
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE18_MSGREGADDR 0x1488
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW018_MSGREGADDR 0x1490
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW118_MSGREGADDR 0x1498
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW218_MSGREGADDR 0x14A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW318_MSGREGADDR 0x14A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE19_MSGREGADDR 0x14C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE19_MSGREGADDR 0x14C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW019_MSGREGADDR 0x14D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW119_MSGREGADDR 0x14D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW219_MSGREGADDR 0x14E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW319_MSGREGADDR 0x14E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE20_MSGREGADDR 0x1500
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE20_MSGREGADDR 0x1508
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW020_MSGREGADDR 0x1510
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW120_MSGREGADDR 0x1518
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW220_MSGREGADDR 0x1520
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW320_MSGREGADDR 0x1528
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE21_MSGREGADDR 0x1540
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE21_MSGREGADDR 0x1548
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW021_MSGREGADDR 0x1550
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW121_MSGREGADDR 0x1558
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW221_MSGREGADDR 0x1560
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW321_MSGREGADDR 0x1568
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE22_MSGREGADDR 0x1580
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE22_MSGREGADDR 0x1588
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW022_MSGREGADDR 0x1590
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW122_MSGREGADDR 0x1598
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW222_MSGREGADDR 0x15A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW322_MSGREGADDR 0x15A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE23_MSGREGADDR 0x15C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE23_MSGREGADDR 0x15C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW023_MSGREGADDR 0x15D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW123_MSGREGADDR 0x15D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW223_MSGREGADDR 0x15E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW323_MSGREGADDR 0x15E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE24_MSGREGADDR 0x1600
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE24_MSGREGADDR 0x1608
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW024_MSGREGADDR 0x1610
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW124_MSGREGADDR 0x1618
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW224_MSGREGADDR 0x1620
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW324_MSGREGADDR 0x1628
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE25_MSGREGADDR 0x1640
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE25_MSGREGADDR 0x1648
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW025_MSGREGADDR 0x1650
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW125_MSGREGADDR 0x1658
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW225_MSGREGADDR 0x1660
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW325_MSGREGADDR 0x1668
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE26_MSGREGADDR 0x1680
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE26_MSGREGADDR 0x1688
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW026_MSGREGADDR 0x1690
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW126_MSGREGADDR 0x1698
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW226_MSGREGADDR 0x16A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW326_MSGREGADDR 0x16A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE27_MSGREGADDR 0x16C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE27_MSGREGADDR 0x16C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW027_MSGREGADDR 0x16D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW127_MSGREGADDR 0x16D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW227_MSGREGADDR 0x16E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW327_MSGREGADDR 0x16E8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE28_MSGREGADDR 0x1700
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE28_MSGREGADDR 0x1708
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW028_MSGREGADDR 0x1710
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW128_MSGREGADDR 0x1718
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW228_MSGREGADDR 0x1720
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW328_MSGREGADDR 0x1728
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE29_MSGREGADDR 0x1740
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE29_MSGREGADDR 0x1748
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW029_MSGREGADDR 0x1750
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW129_MSGREGADDR 0x1758
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW229_MSGREGADDR 0x1760
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW329_MSGREGADDR 0x1768
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE30_MSGREGADDR 0x1780
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE30_MSGREGADDR 0x1788
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW030_MSGREGADDR 0x1790
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW130_MSGREGADDR 0x1798
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW230_MSGREGADDR 0x17A0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW330_MSGREGADDR 0x17A8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAVALICE31_MSGREGADDR 0x17C0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_SEMAREQICE31_MSGREGADDR 0x17C8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW031_MSGREGADDR 0x17D0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW131_MSGREGADDR 0x17D8
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW231_MSGREGADDR 0x17E0
#define IDC_REGS_IDC_MMIO_BAR1_MSG_RSOW331_MSGREGADDR 0x17E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_BASE 0x0FFFFFFFFFFFFFFF0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE0_MMOFFSET 0x0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE0_MMOFFSET 0x8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE1_MMOFFSET 0x20
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE1_MMOFFSET 0x28
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE2_MMOFFSET 0x40
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE2_MMOFFSET 0x48
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE3_MMOFFSET 0x60
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE3_MMOFFSET 0x68
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE4_MMOFFSET 0x80
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE4_MMOFFSET 0x88
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE5_MMOFFSET 0x0A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE5_MMOFFSET 0x0A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE6_MMOFFSET 0x0C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE6_MMOFFSET 0x0C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE7_MMOFFSET 0x0E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE7_MMOFFSET 0x0E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE8_MMOFFSET 0x100
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE8_MMOFFSET 0x108
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE9_MMOFFSET 0x120
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE9_MMOFFSET 0x128
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE10_MMOFFSET 0x140
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE10_MMOFFSET 0x148
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE11_MMOFFSET 0x160
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE11_MMOFFSET 0x168
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE12_MMOFFSET 0x180
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE12_MMOFFSET 0x188
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE13_MMOFFSET 0x1A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE13_MMOFFSET 0x1A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE14_MMOFFSET 0x1C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE14_MMOFFSET 0x1C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE15_MMOFFSET 0x1E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE15_MMOFFSET 0x1E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE16_MMOFFSET 0x200
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE16_MMOFFSET 0x208
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE17_MMOFFSET 0x220
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE17_MMOFFSET 0x228
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE18_MMOFFSET 0x240
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE18_MMOFFSET 0x248
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE19_MMOFFSET 0x260
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE19_MMOFFSET 0x268
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE20_MMOFFSET 0x280
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE20_MMOFFSET 0x288
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE21_MMOFFSET 0x2A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE21_MMOFFSET 0x2A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE22_MMOFFSET 0x2C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE22_MMOFFSET 0x2C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE23_MMOFFSET 0x2E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE23_MMOFFSET 0x2E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE24_MMOFFSET 0x300
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE24_MMOFFSET 0x308
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE25_MMOFFSET 0x320
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE25_MMOFFSET 0x328
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE26_MMOFFSET 0x340
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE26_MMOFFSET 0x348
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE27_MMOFFSET 0x360
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE27_MMOFFSET 0x368
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE28_MMOFFSET 0x380
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE28_MMOFFSET 0x388
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE29_MMOFFSET 0x3A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE29_MMOFFSET 0x3A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE30_MMOFFSET 0x3C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE30_MMOFFSET 0x3C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTICE31_MMOFFSET 0x3E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTINCICE31_MMOFFSET 0x3E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_EVCTNOTICE_MMOFFSET 0x800
#define IDC_REGS_IDC_MMIO_BAR1_MEM_ICEATTEN_MMOFFSET 0x810
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE0_MMOFFSET 0x1000
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE0_MMOFFSET 0x1008
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW00_MMOFFSET 0x1010
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW10_MMOFFSET 0x1018
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW20_MMOFFSET 0x1020
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW30_MMOFFSET 0x1028
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE1_MMOFFSET 0x1040
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE1_MMOFFSET 0x1048
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW01_MMOFFSET 0x1050
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW11_MMOFFSET 0x1058
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW21_MMOFFSET 0x1060
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW31_MMOFFSET 0x1068
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE2_MMOFFSET 0x1080
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE2_MMOFFSET 0x1088
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW02_MMOFFSET 0x1090
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW12_MMOFFSET 0x1098
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW22_MMOFFSET 0x10A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW32_MMOFFSET 0x10A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE3_MMOFFSET 0x10C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE3_MMOFFSET 0x10C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW03_MMOFFSET 0x10D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW13_MMOFFSET 0x10D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW23_MMOFFSET 0x10E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW33_MMOFFSET 0x10E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE4_MMOFFSET 0x1100
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE4_MMOFFSET 0x1108
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW04_MMOFFSET 0x1110
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW14_MMOFFSET 0x1118
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW24_MMOFFSET 0x1120
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW34_MMOFFSET 0x1128
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE5_MMOFFSET 0x1140
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE5_MMOFFSET 0x1148
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW05_MMOFFSET 0x1150
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW15_MMOFFSET 0x1158
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW25_MMOFFSET 0x1160
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW35_MMOFFSET 0x1168
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE6_MMOFFSET 0x1180
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE6_MMOFFSET 0x1188
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW06_MMOFFSET 0x1190
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW16_MMOFFSET 0x1198
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW26_MMOFFSET 0x11A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW36_MMOFFSET 0x11A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE7_MMOFFSET 0x11C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE7_MMOFFSET 0x11C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW07_MMOFFSET 0x11D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW17_MMOFFSET 0x11D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW27_MMOFFSET 0x11E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW37_MMOFFSET 0x11E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE8_MMOFFSET 0x1200
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE8_MMOFFSET 0x1208
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW08_MMOFFSET 0x1210
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW18_MMOFFSET 0x1218
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW28_MMOFFSET 0x1220
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW38_MMOFFSET 0x1228
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE9_MMOFFSET 0x1240
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE9_MMOFFSET 0x1248
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW09_MMOFFSET 0x1250
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW19_MMOFFSET 0x1258
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW29_MMOFFSET 0x1260
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW39_MMOFFSET 0x1268
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE10_MMOFFSET 0x1280
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE10_MMOFFSET 0x1288
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW010_MMOFFSET 0x1290
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW110_MMOFFSET 0x1298
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW210_MMOFFSET 0x12A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW310_MMOFFSET 0x12A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE11_MMOFFSET 0x12C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE11_MMOFFSET 0x12C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW011_MMOFFSET 0x12D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW111_MMOFFSET 0x12D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW211_MMOFFSET 0x12E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW311_MMOFFSET 0x12E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE12_MMOFFSET 0x1300
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE12_MMOFFSET 0x1308
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW012_MMOFFSET 0x1310
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW112_MMOFFSET 0x1318
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW212_MMOFFSET 0x1320
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW312_MMOFFSET 0x1328
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE13_MMOFFSET 0x1340
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE13_MMOFFSET 0x1348
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW013_MMOFFSET 0x1350
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW113_MMOFFSET 0x1358
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW213_MMOFFSET 0x1360
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW313_MMOFFSET 0x1368
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE14_MMOFFSET 0x1380
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE14_MMOFFSET 0x1388
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW014_MMOFFSET 0x1390
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW114_MMOFFSET 0x1398
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW214_MMOFFSET 0x13A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW314_MMOFFSET 0x13A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE15_MMOFFSET 0x13C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE15_MMOFFSET 0x13C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW015_MMOFFSET 0x13D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW115_MMOFFSET 0x13D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW215_MMOFFSET 0x13E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW315_MMOFFSET 0x13E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE16_MMOFFSET 0x1400
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE16_MMOFFSET 0x1408
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW016_MMOFFSET 0x1410
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW116_MMOFFSET 0x1418
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW216_MMOFFSET 0x1420
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW316_MMOFFSET 0x1428
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE17_MMOFFSET 0x1440
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE17_MMOFFSET 0x1448
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW017_MMOFFSET 0x1450
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW117_MMOFFSET 0x1458
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW217_MMOFFSET 0x1460
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW317_MMOFFSET 0x1468
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE18_MMOFFSET 0x1480
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE18_MMOFFSET 0x1488
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW018_MMOFFSET 0x1490
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW118_MMOFFSET 0x1498
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW218_MMOFFSET 0x14A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW318_MMOFFSET 0x14A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE19_MMOFFSET 0x14C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE19_MMOFFSET 0x14C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW019_MMOFFSET 0x14D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW119_MMOFFSET 0x14D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW219_MMOFFSET 0x14E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW319_MMOFFSET 0x14E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE20_MMOFFSET 0x1500
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE20_MMOFFSET 0x1508
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW020_MMOFFSET 0x1510
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW120_MMOFFSET 0x1518
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW220_MMOFFSET 0x1520
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW320_MMOFFSET 0x1528
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE21_MMOFFSET 0x1540
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE21_MMOFFSET 0x1548
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW021_MMOFFSET 0x1550
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW121_MMOFFSET 0x1558
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW221_MMOFFSET 0x1560
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW321_MMOFFSET 0x1568
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE22_MMOFFSET 0x1580
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE22_MMOFFSET 0x1588
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW022_MMOFFSET 0x1590
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW122_MMOFFSET 0x1598
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW222_MMOFFSET 0x15A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW322_MMOFFSET 0x15A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE23_MMOFFSET 0x15C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE23_MMOFFSET 0x15C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW023_MMOFFSET 0x15D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW123_MMOFFSET 0x15D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW223_MMOFFSET 0x15E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW323_MMOFFSET 0x15E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE24_MMOFFSET 0x1600
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE24_MMOFFSET 0x1608
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW024_MMOFFSET 0x1610
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW124_MMOFFSET 0x1618
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW224_MMOFFSET 0x1620
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW324_MMOFFSET 0x1628
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE25_MMOFFSET 0x1640
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE25_MMOFFSET 0x1648
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW025_MMOFFSET 0x1650
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW125_MMOFFSET 0x1658
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW225_MMOFFSET 0x1660
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW325_MMOFFSET 0x1668
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE26_MMOFFSET 0x1680
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE26_MMOFFSET 0x1688
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW026_MMOFFSET 0x1690
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW126_MMOFFSET 0x1698
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW226_MMOFFSET 0x16A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW326_MMOFFSET 0x16A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE27_MMOFFSET 0x16C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE27_MMOFFSET 0x16C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW027_MMOFFSET 0x16D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW127_MMOFFSET 0x16D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW227_MMOFFSET 0x16E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW327_MMOFFSET 0x16E8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE28_MMOFFSET 0x1700
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE28_MMOFFSET 0x1708
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW028_MMOFFSET 0x1710
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW128_MMOFFSET 0x1718
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW228_MMOFFSET 0x1720
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW328_MMOFFSET 0x1728
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE29_MMOFFSET 0x1740
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE29_MMOFFSET 0x1748
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW029_MMOFFSET 0x1750
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW129_MMOFFSET 0x1758
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW229_MMOFFSET 0x1760
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW329_MMOFFSET 0x1768
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE30_MMOFFSET 0x1780
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE30_MMOFFSET 0x1788
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW030_MMOFFSET 0x1790
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW130_MMOFFSET 0x1798
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW230_MMOFFSET 0x17A0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW330_MMOFFSET 0x17A8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAVALICE31_MMOFFSET 0x17C0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_SEMAREQICE31_MMOFFSET 0x17C8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW031_MMOFFSET 0x17D0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW131_MMOFFSET 0x17D8
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW231_MMOFFSET 0x17E0
#define IDC_REGS_IDC_MMIO_BAR1_MEM_RSOW331_MMOFFSET 0x17E8
#define IDC_REGS_IDC_SBPR_MSGPORT     0x0AA
#define IDC_REGS_IDC_SBPR_ICEMASK_MSGREGADDR 0x0
#define IDC_REGS_IDC_SBPR_IDCSLVFCOV1_MSGREGADDR 0x4
#define IDC_REGS_IDC_SBPR_IDCSLVFCOV2_MSGREGADDR 0x8
#define IDC_REGS_IDC_SBPR_IDCOBV0_MSGREGADDR 0x10
#define IDC_REGS_IDC_SBPR_IDCOBV1_MSGREGADDR 0x14
#define IDC_REGS_IDC_SBPR_IDCOBV2_MSGREGADDR 0x18
#define IDC_REGS_IDC_SBPR_IDCOBV3_MSGREGADDR 0x1C
#define IDC_REGS_IDC_SBPR_IDCOBV4_MSGREGADDR 0x20
#define IDC_REGS_IDC_PCICFG_CFG_PCIBUS 0x00
#define IDC_REGS_IDC_PCICFG_CFG_PCIDEV 0x0A
#define IDC_REGS_IDC_PCICFG_CFG_PCIFUNC 0x00
#define IDC_REGS_IDC_PCICFG_CFG_ID_PCIADDR 0x0
#define IDC_REGS_IDC_PCICFG_CFG_DCTRL_PCIADDR 0x4
#define IDC_REGS_IDC_PCICFG_CFG_DSTS_PCIADDR 0x6
#define IDC_REGS_IDC_PCICFG_CFG_RID_DLCO_PCIADDR 0x8
#define IDC_REGS_IDC_PCICFG_CFG_CLS_PCIADDR 0x0C
#define IDC_REGS_IDC_PCICFG_CFG_HTYPE_PCIADDR 0x0E
#define IDC_REGS_IDC_PCICFG_CFG_BIST_PCIADDR 0x0F
#define IDC_REGS_IDC_PCICFG_CFG_IDCBAR0_PCIADDR 0x10
#define IDC_REGS_IDC_PCICFG_CFG_IDCBAR1_PCIADDR 0x18
#define IDC_REGS_IDC_PCICFG_CFG_SSVI_PCIADDR 0x2C
#define IDC_REGS_IDC_PCICFG_CFG_SSI_PCIADDR 0x2E
#define IDC_REGS_IDC_PCICFG_CFG_CAPP_PCIADDR 0x34
#define IDC_REGS_IDC_PCICFG_CFG_INTL_PCIADDR 0x3C
#define IDC_REGS_IDC_PCICFG_CFG_INTP_PCIADDR 0x3D
#define IDC_REGS_IDC_PCICFG_CFG_MINGNTLAT_PCIADDR 0x3E
#define IDC_REGS_IDC_PCICFG_CFG_OVRCFGCTL_PCIADDR 0x40
#define IDC_REGS_IDC_PCICFG_CFG_MSICAPID_PCIADDR 0x90
#define IDC_REGS_IDC_PCICFG_CFG_MC_PCIADDR 0x92
#define IDC_REGS_IDC_PCICFG_CFG_MA_PCIADDR 0x94
#define IDC_REGS_IDC_PCICFG_CFG_MD_PCIADDR 0x98
#define IDC_REGS_IDC_PCICFG_CFG_D0I3CAPID_PCIADDR 0x0A0
#define IDC_REGS_IDC_PCICFG_CFG_D0I3CAP_PCIADDR 0x0A2
#define IDC_REGS_IDC_PCICFG_CFG_D0I3VSEC_PCIADDR 0x0A4
#define IDC_REGS_IDC_PCICFG_CFG_D0I3SWLTRPTR_PCIADDR 0x0A8
#define IDC_REGS_IDC_PCICFG_CFG_D0I3DEVIDLEPTR_PCIADDR 0x0AC
#define IDC_REGS_IDC_PCICFG_CFG_D0I3DEVIDLEPOL_PCIADDR 0x0B0
#define IDC_REGS_IDC_PCICFG_CFG_PCE_PCIADDR 0x0B2
#define IDC_REGS_IDC_PCICFG_CFG_PMCAPID_PCIADDR 0x0DC
#define IDC_REGS_IDC_PCICFG_CFG_PMCAP_PCIADDR 0x0DE
#define IDC_REGS_IDC_PCICFG_CFG_PMCS_PCIADDR 0x0E0
#define IDC_REGS_IDC_PCICFG_CFG_FLRCAPID_PCIADDR 0x0F0
#define IDC_REGS_IDC_PCICFG_CFG_FLRMISC_PCIADDR 0x0F2
#define IDC_REGS_IDC_PCICFG_CFG_FLRCTL_PCIADDR 0x0F4
#define IDC_REGS_IDC_PCICFG_CFG_FLRSTS_PCIADDR 0x0F5
#define IDC_REGS_IDC_MMIO_BAR0_MSG_MSGPORT     0x0AA
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPE_MSGREGADDR 0x0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICERST_MSGREGADDR 0x8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICERDY_MSGREGADDR 0x10
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEMASKSTS_MSGREGADDR 0x18
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICENOTE_MSGREGADDR 0x20
#define IDC_REGS_IDC_MMIO_BAR0_MSG_NOTCLR_MSGREGADDR 0x28
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEINTST_MSGREGADDR 0x40
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEINTEN_MSGREGADDR 0x48
#define IDC_REGS_IDC_MMIO_BAR0_MSG_IDCINTST_MSGREGADDR 0x50
#define IDC_REGS_IDC_MMIO_BAR0_MSG_IDCINTEN_MSGREGADDR 0x58
#define IDC_REGS_IDC_MMIO_BAR0_MSG_IDCSPARE_MSGREGADDR 0x60
#define IDC_REGS_IDC_MMIO_BAR0_MSG_IDCD0I3C_MSGREGADDR 0x0A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL0_MSGREGADDR 0x800
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL1_MSGREGADDR 0x808
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL2_MSGREGADDR 0x810
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL3_MSGREGADDR 0x818
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL4_MSGREGADDR 0x820
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICEPOOL5_MSGREGADDR 0x828
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICENOTA0_MSGREGADDR 0x840
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICENOTA1_MSGREGADDR 0x848
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICENOTA2_MSGREGADDR 0x850
#define IDC_REGS_IDC_MMIO_BAR0_MSG_ICENOTA3_MSGREGADDR 0x858
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA0_MSGREGADDR 0x1000
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC0_MSGREGADDR 0x1008
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT0_MSGREGADDR 0x1010
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA1_MSGREGADDR 0x1020
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC1_MSGREGADDR 0x1028
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT1_MSGREGADDR 0x1030
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA2_MSGREGADDR 0x1040
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC2_MSGREGADDR 0x1048
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT2_MSGREGADDR 0x1050
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA3_MSGREGADDR 0x1060
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC3_MSGREGADDR 0x1068
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT3_MSGREGADDR 0x1070
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA4_MSGREGADDR 0x1080
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC4_MSGREGADDR 0x1088
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT4_MSGREGADDR 0x1090
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA5_MSGREGADDR 0x10A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC5_MSGREGADDR 0x10A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT5_MSGREGADDR 0x10B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA6_MSGREGADDR 0x10C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC6_MSGREGADDR 0x10C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT6_MSGREGADDR 0x10D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA7_MSGREGADDR 0x10E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC7_MSGREGADDR 0x10E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT7_MSGREGADDR 0x10F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA8_MSGREGADDR 0x1100
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC8_MSGREGADDR 0x1108
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT8_MSGREGADDR 0x1110
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA9_MSGREGADDR 0x1120
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC9_MSGREGADDR 0x1128
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT9_MSGREGADDR 0x1130
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA10_MSGREGADDR 0x1140
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC10_MSGREGADDR 0x1148
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT10_MSGREGADDR 0x1150
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA11_MSGREGADDR 0x1160
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC11_MSGREGADDR 0x1168
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT11_MSGREGADDR 0x1170
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA12_MSGREGADDR 0x1180
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC12_MSGREGADDR 0x1188
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT12_MSGREGADDR 0x1190
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA13_MSGREGADDR 0x11A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC13_MSGREGADDR 0x11A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT13_MSGREGADDR 0x11B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA14_MSGREGADDR 0x11C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC14_MSGREGADDR 0x11C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT14_MSGREGADDR 0x11D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA15_MSGREGADDR 0x11E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC15_MSGREGADDR 0x11E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT15_MSGREGADDR 0x11F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA16_MSGREGADDR 0x1200
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC16_MSGREGADDR 0x1208
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT16_MSGREGADDR 0x1210
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA17_MSGREGADDR 0x1220
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC17_MSGREGADDR 0x1228
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT17_MSGREGADDR 0x1230
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA18_MSGREGADDR 0x1240
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC18_MSGREGADDR 0x1248
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT18_MSGREGADDR 0x1250
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA19_MSGREGADDR 0x1260
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC19_MSGREGADDR 0x1268
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT19_MSGREGADDR 0x1270
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA20_MSGREGADDR 0x1280
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC20_MSGREGADDR 0x1288
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT20_MSGREGADDR 0x1290
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA21_MSGREGADDR 0x12A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC21_MSGREGADDR 0x12A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT21_MSGREGADDR 0x12B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA22_MSGREGADDR 0x12C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC22_MSGREGADDR 0x12C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT22_MSGREGADDR 0x12D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA23_MSGREGADDR 0x12E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC23_MSGREGADDR 0x12E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT23_MSGREGADDR 0x12F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA24_MSGREGADDR 0x1300
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC24_MSGREGADDR 0x1308
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT24_MSGREGADDR 0x1310
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA25_MSGREGADDR 0x1320
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC25_MSGREGADDR 0x1328
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT25_MSGREGADDR 0x1330
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA26_MSGREGADDR 0x1340
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC26_MSGREGADDR 0x1348
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT26_MSGREGADDR 0x1350
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA27_MSGREGADDR 0x1360
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC27_MSGREGADDR 0x1368
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT27_MSGREGADDR 0x1370
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA28_MSGREGADDR 0x1380
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC28_MSGREGADDR 0x1388
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT28_MSGREGADDR 0x1390
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA29_MSGREGADDR 0x13A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC29_MSGREGADDR 0x13A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT29_MSGREGADDR 0x13B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA30_MSGREGADDR 0x13C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC30_MSGREGADDR 0x13C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT30_MSGREGADDR 0x13D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIA31_MSGREGADDR 0x13E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTIAINC31_MSGREGADDR 0x13E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTPROT31_MSGREGADDR 0x13F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA0_MSGREGADDR 0x1800
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES0_MSGREGADDR 0x1808
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT0_MSGREGADDR 0x1810
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA1_MSGREGADDR 0x1820
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES1_MSGREGADDR 0x1828
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT1_MSGREGADDR 0x1830
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA2_MSGREGADDR 0x1840
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES2_MSGREGADDR 0x1848
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT2_MSGREGADDR 0x1850
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA3_MSGREGADDR 0x1860
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES3_MSGREGADDR 0x1868
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT3_MSGREGADDR 0x1870
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA4_MSGREGADDR 0x1880
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES4_MSGREGADDR 0x1888
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT4_MSGREGADDR 0x1890
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA5_MSGREGADDR 0x18A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES5_MSGREGADDR 0x18A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT5_MSGREGADDR 0x18B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA6_MSGREGADDR 0x18C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES6_MSGREGADDR 0x18C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT6_MSGREGADDR 0x18D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA7_MSGREGADDR 0x18E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES7_MSGREGADDR 0x18E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT7_MSGREGADDR 0x18F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA8_MSGREGADDR 0x1900
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES8_MSGREGADDR 0x1908
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT8_MSGREGADDR 0x1910
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA9_MSGREGADDR 0x1920
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES9_MSGREGADDR 0x1928
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT9_MSGREGADDR 0x1930
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA10_MSGREGADDR 0x1940
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES10_MSGREGADDR 0x1948
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT10_MSGREGADDR 0x1950
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA11_MSGREGADDR 0x1960
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES11_MSGREGADDR 0x1968
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT11_MSGREGADDR 0x1970
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA12_MSGREGADDR 0x1980
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES12_MSGREGADDR 0x1988
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT12_MSGREGADDR 0x1990
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA13_MSGREGADDR 0x19A0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES13_MSGREGADDR 0x19A8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT13_MSGREGADDR 0x19B0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA14_MSGREGADDR 0x19C0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES14_MSGREGADDR 0x19C8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT14_MSGREGADDR 0x19D0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA15_MSGREGADDR 0x19E0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES15_MSGREGADDR 0x19E8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT15_MSGREGADDR 0x19F0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA16_MSGREGADDR 0x1A00
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES16_MSGREGADDR 0x1A08
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT16_MSGREGADDR 0x1A10
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA17_MSGREGADDR 0x1A20
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES17_MSGREGADDR 0x1A28
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT17_MSGREGADDR 0x1A30
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA18_MSGREGADDR 0x1A40
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES18_MSGREGADDR 0x1A48
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT18_MSGREGADDR 0x1A50
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA19_MSGREGADDR 0x1A60
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES19_MSGREGADDR 0x1A68
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT19_MSGREGADDR 0x1A70
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA20_MSGREGADDR 0x1A80
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES20_MSGREGADDR 0x1A88
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT20_MSGREGADDR 0x1A90
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA21_MSGREGADDR 0x1AA0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES21_MSGREGADDR 0x1AA8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT21_MSGREGADDR 0x1AB0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA22_MSGREGADDR 0x1AC0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES22_MSGREGADDR 0x1AC8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT22_MSGREGADDR 0x1AD0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA23_MSGREGADDR 0x1AE0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES23_MSGREGADDR 0x1AE8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT23_MSGREGADDR 0x1AF0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA24_MSGREGADDR 0x1B00
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES24_MSGREGADDR 0x1B08
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT24_MSGREGADDR 0x1B10
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA25_MSGREGADDR 0x1B20
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES25_MSGREGADDR 0x1B28
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT25_MSGREGADDR 0x1B30
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA26_MSGREGADDR 0x1B40
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES26_MSGREGADDR 0x1B48
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT26_MSGREGADDR 0x1B50
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA27_MSGREGADDR 0x1B60
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES27_MSGREGADDR 0x1B68
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT27_MSGREGADDR 0x1B70
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA28_MSGREGADDR 0x1B80
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES28_MSGREGADDR 0x1B88
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT28_MSGREGADDR 0x1B90
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA29_MSGREGADDR 0x1BA0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES29_MSGREGADDR 0x1BA8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT29_MSGREGADDR 0x1BB0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA30_MSGREGADDR 0x1BC0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES30_MSGREGADDR 0x1BC8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT30_MSGREGADDR 0x1BD0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAVALIA31_MSGREGADDR 0x1BE0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_RSRES31_MSGREGADDR 0x1BE8
#define IDC_REGS_IDC_MMIO_BAR0_MSG_SEMAPROT31_MSGREGADDR 0x1BF0
#define IDC_REGS_IDC_MMIO_BAR0_MSG_IA0ATTEN_MSGREGADDR 0x2000
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTNOTIA0_MSGREGADDR 0x2020
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTNOTIA1_MSGREGADDR 0x2028
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTNOTIA2_MSGREGADDR 0x2030
#define IDC_REGS_IDC_MMIO_BAR0_MSG_EVCTNOTIA3_MSGREGADDR 0x2038

#ifndef IDC_REGS_ID_FLAG
#define IDC_REGS_ID_FLAG
// ID desc:  Device ID assigned to IDC and Vendor ID
typedef union {
    struct {
        uint32_t  VID                  :  16;    //  Intels identification
        uint32_t  DID                  :  16;    //  Indicates the device ID
                                                 // assigned to the IDC, [6:0] set
                                                 // by straps , [15:7] This field
                                                 // is set to the module via IOSF
                                                 // SB message received during
                                                 // device reset.

    }                                field;
    uint32_t                         val;
} IDC_REGS_ID_t;
#endif
#define IDC_REGS_ID_OFFSET 0x00
#define IDC_REGS_ID_SCOPE 0x01
#define IDC_REGS_ID_SIZE 32
#define IDC_REGS_ID_BITFIELD_COUNT 0x02
#define IDC_REGS_ID_RESET 0x45c48086

#define IDC_REGS_ID_VID_LSB 0x0000
#define IDC_REGS_ID_VID_MSB 0x000f
#define IDC_REGS_ID_VID_RANGE 0x0010
#define IDC_REGS_ID_VID_MASK 0x0000ffff
#define IDC_REGS_ID_VID_RESET_VALUE 0x00008086

#define IDC_REGS_ID_DID_LSB 0x0010
#define IDC_REGS_ID_DID_MSB 0x001f
#define IDC_REGS_ID_DID_RANGE 0x0010
#define IDC_REGS_ID_DID_MASK 0xffff0000
#define IDC_REGS_ID_DID_RESET_VALUE 0x000045c4


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_DCTRL_FLAG
#define IDC_REGS_DCTRL_FLAG
// DCTRL desc:  The Command register provides coarse control over IDC's abilities
// like Unsupported Request Error Reporting Enable, Poisoned TLP Error
// Reporting Enable, Interrupt Disable, Max Aligned Payload Size, Max
// Aligned Read Request Size, Special Cycle Enable, Bus Master Enable,
// Memory Space Enable
typedef union {
    struct {
        uint16_t  IOSE                 :   1;    //  IO Space Enable. Not
                                                 // implemented.
        uint16_t  MSE                  :   1;    //  Memory Space Enable Controls
                                                 // the IDC devices response to
                                                 // memory space accesses 0:
                                                 // Disabled (default) 1:
                                                 // Enabled. Device will respond
                                                 // to memory space accesses.
        uint16_t  BME                  :   1;    //  Bus Master Enable: 0:
                                                 // Disable (default) 1: Enabled.
                                                 // Device may generate bus master
                                                 // transactions depending on its
                                                 // mode of operation.
        uint16_t  SCEN                 :   1;    //  Special Cycle Enable -
                                                 // Reserved
        uint16_t  MXARDREQSZ           :   1;    //  Max Aligned Read Request Size
                                                 // - Reserved
        uint16_t  MXAPAYLDSZ           :   1;    //  Max Aligned Payload Size -
                                                 // Reserved
        uint16_t  RSVD_2               :   4;    //  Reserved (FB2B, SERR,,
                                                 // PERRE)
        uint16_t  INTDIS               :   1;    //  Interrupt Disable: Controls
                                                 // the ability of the function to
                                                 // generate INTx interrupts. 0:
                                                 // INTx allowed 1: INTx disabled
        uint16_t  RSVD_1               :   2;    //  Reserved
        uint16_t  PTLPERREN            :   1;    //  Poisoned TLP Error Reporting
                                                 // Enable
        uint16_t  UNSPREQERREN         :   1;    //  Unsupported Request Error
                                                 // Reporting Enable
        uint16_t  RSVD                 :   1;    //  Reserved

    }                                field;
    uint16_t                         val;
} IDC_REGS_DCTRL_t;
#endif
#define IDC_REGS_DCTRL_OFFSET 0x04
#define IDC_REGS_DCTRL_SCOPE 0x01
#define IDC_REGS_DCTRL_SIZE 16
#define IDC_REGS_DCTRL_BITFIELD_COUNT 0x0c
#define IDC_REGS_DCTRL_RESET 0x00000000

#define IDC_REGS_DCTRL_IOSE_LSB 0x0000
#define IDC_REGS_DCTRL_IOSE_MSB 0x0000
#define IDC_REGS_DCTRL_IOSE_RANGE 0x0001
#define IDC_REGS_DCTRL_IOSE_MASK 0x00000001
#define IDC_REGS_DCTRL_IOSE_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_MSE_LSB 0x0001
#define IDC_REGS_DCTRL_MSE_MSB 0x0001
#define IDC_REGS_DCTRL_MSE_RANGE 0x0001
#define IDC_REGS_DCTRL_MSE_MASK 0x00000002
#define IDC_REGS_DCTRL_MSE_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_BME_LSB 0x0002
#define IDC_REGS_DCTRL_BME_MSB 0x0002
#define IDC_REGS_DCTRL_BME_RANGE 0x0001
#define IDC_REGS_DCTRL_BME_MASK 0x00000004
#define IDC_REGS_DCTRL_BME_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_SCEN_LSB 0x0003
#define IDC_REGS_DCTRL_SCEN_MSB 0x0003
#define IDC_REGS_DCTRL_SCEN_RANGE 0x0001
#define IDC_REGS_DCTRL_SCEN_MASK 0x00000008
#define IDC_REGS_DCTRL_SCEN_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_MXARDREQSZ_LSB 0x0004
#define IDC_REGS_DCTRL_MXARDREQSZ_MSB 0x0004
#define IDC_REGS_DCTRL_MXARDREQSZ_RANGE 0x0001
#define IDC_REGS_DCTRL_MXARDREQSZ_MASK 0x00000010
#define IDC_REGS_DCTRL_MXARDREQSZ_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_MXAPAYLDSZ_LSB 0x0005
#define IDC_REGS_DCTRL_MXAPAYLDSZ_MSB 0x0005
#define IDC_REGS_DCTRL_MXAPAYLDSZ_RANGE 0x0001
#define IDC_REGS_DCTRL_MXAPAYLDSZ_MASK 0x00000020
#define IDC_REGS_DCTRL_MXAPAYLDSZ_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_RSVD_2_LSB 0x0006
#define IDC_REGS_DCTRL_RSVD_2_MSB 0x0009
#define IDC_REGS_DCTRL_RSVD_2_RANGE 0x0004
#define IDC_REGS_DCTRL_RSVD_2_MASK 0x000003c0
#define IDC_REGS_DCTRL_RSVD_2_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_INTDIS_LSB 0x000a
#define IDC_REGS_DCTRL_INTDIS_MSB 0x000a
#define IDC_REGS_DCTRL_INTDIS_RANGE 0x0001
#define IDC_REGS_DCTRL_INTDIS_MASK 0x00000400
#define IDC_REGS_DCTRL_INTDIS_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_RSVD_1_LSB 0x000b
#define IDC_REGS_DCTRL_RSVD_1_MSB 0x000c
#define IDC_REGS_DCTRL_RSVD_1_RANGE 0x0002
#define IDC_REGS_DCTRL_RSVD_1_MASK 0x00001800
#define IDC_REGS_DCTRL_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_PTLPERREN_LSB 0x000d
#define IDC_REGS_DCTRL_PTLPERREN_MSB 0x000d
#define IDC_REGS_DCTRL_PTLPERREN_RANGE 0x0001
#define IDC_REGS_DCTRL_PTLPERREN_MASK 0x00002000
#define IDC_REGS_DCTRL_PTLPERREN_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_UNSPREQERREN_LSB 0x000e
#define IDC_REGS_DCTRL_UNSPREQERREN_MSB 0x000e
#define IDC_REGS_DCTRL_UNSPREQERREN_RANGE 0x0001
#define IDC_REGS_DCTRL_UNSPREQERREN_MASK 0x00004000
#define IDC_REGS_DCTRL_UNSPREQERREN_RESET_VALUE 0x00000000

#define IDC_REGS_DCTRL_RSVD_LSB 0x000f
#define IDC_REGS_DCTRL_RSVD_MSB 0x000f
#define IDC_REGS_DCTRL_RSVD_RANGE 0x0001
#define IDC_REGS_DCTRL_RSVD_MASK 0x00008000
#define IDC_REGS_DCTRL_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_DSTS_FLAG
#define IDC_REGS_DSTS_FLAG
// DSTS desc:  The Status register to record status information for PCI/IOSF related
// events
typedef union {
    struct {
        uint16_t  RSVD_2               :   3;    //  Reserved
        uint16_t  INTSTS               :   1;    //  Interrupt Status Reflects the
                                                 // state of the interrupt in the
                                                 // device. Only when the
                                                 // Interrupt Disable bit in the
                                                 // command register is a 0 and
                                                 // this Interrupt Status bit is a
                                                 // 1, will this device send a
                                                 // virtual INTA. Setting the
                                                 // Interrupt Disable bit to a 1
                                                 // has no effect on the state of
                                                 // this bit. This bit is
                                                 // controlled by HW. 0 : No
                                                 // interrupt pending 1 :
                                                 // Interrupt pending
        uint16_t  CLIST                :   1;    //  Capability List 0 : no
                                                 // capability list 1 : the IDC
                                                 // contains a linked list of
                                                 // capabilities which is accessed
                                                 // via the CAPPTR register at
                                                 // offset 34h
        uint16_t  RSVD_1               :   2;    //  Reserved: (, 66MHz PCI cap)
        uint16_t  FB2B                 :   1;    //  Fast Back-to_Back (ignored by
                                                 // SW)
        uint16_t  RSVD                 :   3;    //  Reserved: (DEVT , Data Parity
                                                 // Detect)
        uint16_t  STA                  :   1;    //  This bit is Set when a
                                                 // Function completes a Posted or
                                                 // Non-Posted Request as a
                                                 // Completer Abort error. This
                                                 // applies to a Function with a
                                                 // Type 1 Configuration header
                                                 // when the Completer Abort was
                                                 // generated by its Primary Side.
        uint16_t  RTA                  :   1;    //  This bit is set when a
                                                 // transaction abort is received
                                                 // to a IDC initiated transaction
                                                 // - Not in used since IDC do not
                                                 // send NP outside
        uint16_t  RMA                  :   1;    //  This bit is Set when a
                                                 // Requester receives a
                                                 // Completion with Unsupported
                                                 // Request Completion Status. On
                                                 // a Function with a Type 1
                                                 // Configuration header, the bit
                                                 // is Set when the Unsupported
                                                 // Request is received by its
                                                 // Primary Side - Not in used
                                                 // since IDC do not send NP
                                                 // outside
        uint16_t  SSE                  :   1;    //  This bit is Set when a
                                                 // Function sends an ERR_FATAL or
                                                 // ERR_NONFATAL Message, and the
                                                 // SERR# Enable bit in the
                                                 // Command register is 1. Note:
                                                 // some implementations use this
                                                 // error for fatal. When
                                                 // received all operations are
                                                 // aborted. This bit is
                                                 // typically RWC. Change to RO as
                                                 // this bit is not in use
        uint16_t  DPE                  :   1;    //  This bit is Set by a Function
                                                 // whenever it receives a
                                                 // Poisoned TLP, regardless of
                                                 // the state the Parity Error
                                                 // Response bit in the Command
                                                 // register. On a Function with a
                                                 // Type 1 Configuration header,
                                                 // the bit is Set when the
                                                 // Poisoned TLP is received by
                                                 // its Primary Side. Note : some
                                                 // implementations use this error
                                                 // type as non-fatal error
                                                 // indication This bit is
                                                 // typically RWC. Change to RO as
                                                 // this bit is not in use

    }                                field;
    uint16_t                         val;
} IDC_REGS_DSTS_t;
#endif
#define IDC_REGS_DSTS_OFFSET 0x06
#define IDC_REGS_DSTS_SCOPE 0x01
#define IDC_REGS_DSTS_SIZE 16
#define IDC_REGS_DSTS_BITFIELD_COUNT 0x0b
#define IDC_REGS_DSTS_RESET 0x00000010

#define IDC_REGS_DSTS_RSVD_2_LSB 0x0000
#define IDC_REGS_DSTS_RSVD_2_MSB 0x0002
#define IDC_REGS_DSTS_RSVD_2_RANGE 0x0003
#define IDC_REGS_DSTS_RSVD_2_MASK 0x00000007
#define IDC_REGS_DSTS_RSVD_2_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_INTSTS_LSB 0x0003
#define IDC_REGS_DSTS_INTSTS_MSB 0x0003
#define IDC_REGS_DSTS_INTSTS_RANGE 0x0001
#define IDC_REGS_DSTS_INTSTS_MASK 0x00000008
#define IDC_REGS_DSTS_INTSTS_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_CLIST_LSB 0x0004
#define IDC_REGS_DSTS_CLIST_MSB 0x0004
#define IDC_REGS_DSTS_CLIST_RANGE 0x0001
#define IDC_REGS_DSTS_CLIST_MASK 0x00000010
#define IDC_REGS_DSTS_CLIST_RESET_VALUE 0x00000001

#define IDC_REGS_DSTS_RSVD_1_LSB 0x0005
#define IDC_REGS_DSTS_RSVD_1_MSB 0x0006
#define IDC_REGS_DSTS_RSVD_1_RANGE 0x0002
#define IDC_REGS_DSTS_RSVD_1_MASK 0x00000060
#define IDC_REGS_DSTS_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_FB2B_LSB 0x0007
#define IDC_REGS_DSTS_FB2B_MSB 0x0007
#define IDC_REGS_DSTS_FB2B_RANGE 0x0001
#define IDC_REGS_DSTS_FB2B_MASK 0x00000080
#define IDC_REGS_DSTS_FB2B_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_RSVD_LSB 0x0008
#define IDC_REGS_DSTS_RSVD_MSB 0x000a
#define IDC_REGS_DSTS_RSVD_RANGE 0x0003
#define IDC_REGS_DSTS_RSVD_MASK 0x00000700
#define IDC_REGS_DSTS_RSVD_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_STA_LSB 0x000b
#define IDC_REGS_DSTS_STA_MSB 0x000b
#define IDC_REGS_DSTS_STA_RANGE 0x0001
#define IDC_REGS_DSTS_STA_MASK 0x00000800
#define IDC_REGS_DSTS_STA_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_RTA_LSB 0x000c
#define IDC_REGS_DSTS_RTA_MSB 0x000c
#define IDC_REGS_DSTS_RTA_RANGE 0x0001
#define IDC_REGS_DSTS_RTA_MASK 0x00001000
#define IDC_REGS_DSTS_RTA_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_RMA_LSB 0x000d
#define IDC_REGS_DSTS_RMA_MSB 0x000d
#define IDC_REGS_DSTS_RMA_RANGE 0x0001
#define IDC_REGS_DSTS_RMA_MASK 0x00002000
#define IDC_REGS_DSTS_RMA_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_SSE_LSB 0x000e
#define IDC_REGS_DSTS_SSE_MSB 0x000e
#define IDC_REGS_DSTS_SSE_RANGE 0x0001
#define IDC_REGS_DSTS_SSE_MASK 0x00004000
#define IDC_REGS_DSTS_SSE_RESET_VALUE 0x00000000

#define IDC_REGS_DSTS_DPE_LSB 0x000f
#define IDC_REGS_DSTS_DPE_MSB 0x000f
#define IDC_REGS_DSTS_DPE_RANGE 0x0001
#define IDC_REGS_DSTS_DPE_MASK 0x00008000
#define IDC_REGS_DSTS_DPE_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RID_DLCO_FLAG
#define IDC_REGS_RID_DLCO_FLAG
// RID_DLCO desc:  DLCO: This register identify the type of device. The values are as
// defined in PCI 3.0 bus specification in Appendix D. The IDC is
// identified as an Other system Peripheral
typedef union {
    struct {
        uint32_t  RID                  :   8;    //  Indicates stepping of this
                                                 // device. This register is set
                                                 // by side-band. All RID
                                                 // registers are sourced from a
                                                 // fuse/settings incremented for
                                                 // each stepping.
        uint32_t  PROGINTERFACE        :   8;    //  Interface (other system
                                                 // peripheral)
        uint32_t  SCC                  :   8;    //  Sub Class
        uint32_t  BCC                  :   8;    //  Base Class (Generic system
                                                 // Peripherals)

    }                                field;
    uint32_t                         val;
} IDC_REGS_RID_DLCO_t;
#endif
#define IDC_REGS_RID_DLCO_OFFSET 0x08
#define IDC_REGS_RID_DLCO_SCOPE 0x01
#define IDC_REGS_RID_DLCO_SIZE 32
#define IDC_REGS_RID_DLCO_BITFIELD_COUNT 0x04
#define IDC_REGS_RID_DLCO_RESET 0x08800000

#define IDC_REGS_RID_DLCO_RID_LSB 0x0000
#define IDC_REGS_RID_DLCO_RID_MSB 0x0007
#define IDC_REGS_RID_DLCO_RID_RANGE 0x0008
#define IDC_REGS_RID_DLCO_RID_MASK 0x000000ff
#define IDC_REGS_RID_DLCO_RID_RESET_VALUE 0x00000000

#define IDC_REGS_RID_DLCO_PROGINTERFACE_LSB 0x0008
#define IDC_REGS_RID_DLCO_PROGINTERFACE_MSB 0x000f
#define IDC_REGS_RID_DLCO_PROGINTERFACE_RANGE 0x0008
#define IDC_REGS_RID_DLCO_PROGINTERFACE_MASK 0x0000ff00
#define IDC_REGS_RID_DLCO_PROGINTERFACE_RESET_VALUE 0x00000000

#define IDC_REGS_RID_DLCO_SCC_LSB 0x0010
#define IDC_REGS_RID_DLCO_SCC_MSB 0x0017
#define IDC_REGS_RID_DLCO_SCC_RANGE 0x0008
#define IDC_REGS_RID_DLCO_SCC_MASK 0x00ff0000
#define IDC_REGS_RID_DLCO_SCC_RESET_VALUE 0x00000080

#define IDC_REGS_RID_DLCO_BCC_LSB 0x0018
#define IDC_REGS_RID_DLCO_BCC_MSB 0x001f
#define IDC_REGS_RID_DLCO_BCC_RANGE 0x0008
#define IDC_REGS_RID_DLCO_BCC_MASK 0xff000000
#define IDC_REGS_RID_DLCO_BCC_RESET_VALUE 0x00000008


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_CLS_FLAG
#define IDC_REGS_CLS_FLAG
// CLS desc:  The system cacheline size in units of DWORDS
typedef union {
    struct {
        uint8_t   CLS                  :   8;    //  Implemented by PCI Express
                                                 // devices as a read-write field
                                                 // for legacy compatibility
                                                 // purposes but has no impact on
                                                 // any PCI Express device
                                                 // functionality

    }                                field;
    uint8_t                          val;
} IDC_REGS_CLS_t;
#endif
#define IDC_REGS_CLS_OFFSET 0x0c
#define IDC_REGS_CLS_SCOPE 0x01
#define IDC_REGS_CLS_SIZE 8
#define IDC_REGS_CLS_BITFIELD_COUNT 0x01
#define IDC_REGS_CLS_RESET 0x00000000

#define IDC_REGS_CLS_CLS_LSB 0x0000
#define IDC_REGS_CLS_CLS_MSB 0x0007
#define IDC_REGS_CLS_CLS_RANGE 0x0008
#define IDC_REGS_CLS_CLS_MASK 0x000000ff
#define IDC_REGS_CLS_CLS_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_HTYPE_FLAG
#define IDC_REGS_HTYPE_FLAG
// HTYPE desc:  This byte identifies the layout of the second part of the predefined
// header and whether or not the device contains multiple functions (IDC
// is a single-function device of basic configuration space format, so
// this register is Read-Only and hardwired to 0)
typedef union {
    struct {
        uint8_t   HT                   :   7;    //  The value 00h, indicates a
                                                 // basic (i.e., single function)
                                                 // configuration space format.
        uint8_t   MFD                  :   1;    //  Hardwired to 0 indicating
                                                 // this device is not a
                                                 // multi-function device.

    }                                field;
    uint8_t                          val;
} IDC_REGS_HTYPE_t;
#endif
#define IDC_REGS_HTYPE_OFFSET 0x0e
#define IDC_REGS_HTYPE_SCOPE 0x01
#define IDC_REGS_HTYPE_SIZE 8
#define IDC_REGS_HTYPE_BITFIELD_COUNT 0x02
#define IDC_REGS_HTYPE_RESET 0x00000000

#define IDC_REGS_HTYPE_HT_LSB 0x0000
#define IDC_REGS_HTYPE_HT_MSB 0x0006
#define IDC_REGS_HTYPE_HT_RANGE 0x0007
#define IDC_REGS_HTYPE_HT_MASK 0x0000007f
#define IDC_REGS_HTYPE_HT_RESET_VALUE 0x00000000

#define IDC_REGS_HTYPE_MFD_LSB 0x0007
#define IDC_REGS_HTYPE_MFD_MSB 0x0007
#define IDC_REGS_HTYPE_MFD_RANGE 0x0001
#define IDC_REGS_HTYPE_MFD_MASK 0x00000080
#define IDC_REGS_HTYPE_MFD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_BIST_FLAG
#define IDC_REGS_BIST_FLAG
// BIST desc:  This register describes the BIST capability of IDC and since IDC
// doesnt support BIST, the register is configured as Read Only
typedef union {
    struct {
        uint8_t   BISTCC               :   4;    //  Hardwired to 0 since this
                                                 // device does not implement
                                                 // BIST.
        uint8_t   RSVD                 :   2;    //  Reserved
        uint8_t   BISTST               :   1;    //  Start BIST. Hardwired to 0
                                                 // since this device does not
                                                 // implement BIST
        uint8_t   BISTCAP              :   1;    //  BIST Capable. Hardwired to 0
                                                 // since this device does not
                                                 // implement BIST.

    }                                field;
    uint8_t                          val;
} IDC_REGS_BIST_t;
#endif
#define IDC_REGS_BIST_OFFSET 0x0f
#define IDC_REGS_BIST_SCOPE 0x01
#define IDC_REGS_BIST_SIZE 8
#define IDC_REGS_BIST_BITFIELD_COUNT 0x04
#define IDC_REGS_BIST_RESET 0x00000000

#define IDC_REGS_BIST_BISTCC_LSB 0x0000
#define IDC_REGS_BIST_BISTCC_MSB 0x0003
#define IDC_REGS_BIST_BISTCC_RANGE 0x0004
#define IDC_REGS_BIST_BISTCC_MASK 0x0000000f
#define IDC_REGS_BIST_BISTCC_RESET_VALUE 0x00000000

#define IDC_REGS_BIST_RSVD_LSB 0x0004
#define IDC_REGS_BIST_RSVD_MSB 0x0005
#define IDC_REGS_BIST_RSVD_RANGE 0x0002
#define IDC_REGS_BIST_RSVD_MASK 0x00000030
#define IDC_REGS_BIST_RSVD_RESET_VALUE 0x00000000

#define IDC_REGS_BIST_BISTST_LSB 0x0006
#define IDC_REGS_BIST_BISTST_MSB 0x0006
#define IDC_REGS_BIST_BISTST_RANGE 0x0001
#define IDC_REGS_BIST_BISTST_MASK 0x00000040
#define IDC_REGS_BIST_BISTST_RESET_VALUE 0x00000000

#define IDC_REGS_BIST_BISTCAP_LSB 0x0007
#define IDC_REGS_BIST_BISTCAP_MSB 0x0007
#define IDC_REGS_BIST_BISTCAP_RANGE 0x0001
#define IDC_REGS_BIST_BISTCAP_MASK 0x00000080
#define IDC_REGS_BIST_BISTCAP_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCBAR0_FLAG
#define IDC_REGS_IDCBAR0_FLAG
// IDCBAR0 desc:  IDC Base Address High(BAR)
typedef union {
    struct {
        uint64_t  SPTY                 :   1;    //  Space Type: Memory/IO Space
                                                 // Hardwired to 0 indicating that
                                                 // this is a Memory BAR
        uint64_t  MEMTY                :   2;    //  Memory Type: 00: 32 bit base
                                                 // address 01: reserved 10:
                                                 // 64-bit base address 11:
                                                 // reserved
        uint64_t  PREF                 :   1;    //  Hardwired to 0 indicating
                                                 // that this range is not
                                                 // prefetchable
        uint64_t  ADDRMSK              :  19;    //  Address Mask Hardwired to 0s
                                                 // to indicate at least 4KB
                                                 // address range
        uint64_t  BAL                  :   9;    //  Memory Base Address low bits
        uint64_t  BAH                  :   7;    //  Memory Base Address High -
                                                 // bits Includes the high bits of
                                                 // the base address used by
                                                 // 64-bit OS. Must hold zero for
                                                 // 32-bit OS
        uint64_t  BAR                  :  25;    //  These bits must be loaded
                                                 // with zeros

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDCBAR0_t;
#endif
#define IDC_REGS_IDCBAR0_OFFSET 0x10
#define IDC_REGS_IDCBAR0_SCOPE 0x01
#define IDC_REGS_IDCBAR0_SIZE 64
#define IDC_REGS_IDCBAR0_BITFIELD_COUNT 0x07
#define IDC_REGS_IDCBAR0_RESET 0x00000004

#define IDC_REGS_IDCBAR0_SPTY_LSB 0x0000
#define IDC_REGS_IDCBAR0_SPTY_MSB 0x0000
#define IDC_REGS_IDCBAR0_SPTY_RANGE 0x0001
#define IDC_REGS_IDCBAR0_SPTY_MASK 0x00000001
#define IDC_REGS_IDCBAR0_SPTY_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR0_MEMTY_LSB 0x0001
#define IDC_REGS_IDCBAR0_MEMTY_MSB 0x0002
#define IDC_REGS_IDCBAR0_MEMTY_RANGE 0x0002
#define IDC_REGS_IDCBAR0_MEMTY_MASK 0x00000006
#define IDC_REGS_IDCBAR0_MEMTY_RESET_VALUE 0x00000002

#define IDC_REGS_IDCBAR0_PREF_LSB 0x0003
#define IDC_REGS_IDCBAR0_PREF_MSB 0x0003
#define IDC_REGS_IDCBAR0_PREF_RANGE 0x0001
#define IDC_REGS_IDCBAR0_PREF_MASK 0x00000008
#define IDC_REGS_IDCBAR0_PREF_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR0_ADDRMSK_LSB 0x0004
#define IDC_REGS_IDCBAR0_ADDRMSK_MSB 0x0016
#define IDC_REGS_IDCBAR0_ADDRMSK_RANGE 0x0013
#define IDC_REGS_IDCBAR0_ADDRMSK_MASK 0x007ffff0
#define IDC_REGS_IDCBAR0_ADDRMSK_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR0_BAL_LSB 0x0017
#define IDC_REGS_IDCBAR0_BAL_MSB 0x001f
#define IDC_REGS_IDCBAR0_BAL_RANGE 0x0009
#define IDC_REGS_IDCBAR0_BAL_MASK 0xff800000
#define IDC_REGS_IDCBAR0_BAL_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR0_BAH_LSB 0x0020
#define IDC_REGS_IDCBAR0_BAH_MSB 0x0026
#define IDC_REGS_IDCBAR0_BAH_RANGE 0x0007
#define IDC_REGS_IDCBAR0_BAH_MASK 0x7f00000000
#define IDC_REGS_IDCBAR0_BAH_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR0_BAR_LSB 0x0027
#define IDC_REGS_IDCBAR0_BAR_MSB 0x003f
#define IDC_REGS_IDCBAR0_BAR_RANGE 0x0019
#define IDC_REGS_IDCBAR0_BAR_MASK 0xffffff8000000000
#define IDC_REGS_IDCBAR0_BAR_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCBAR1_FLAG
#define IDC_REGS_IDCBAR1_FLAG
// IDCBAR1 desc:  IDC Base Address High(BAR)
typedef union {
    struct {
        uint64_t  SPTY                 :   1;    //  Space Type: Memory/IO Space
                                                 // Hardwired to 0 indicating that
                                                 // this is a Memory BAR
        uint64_t  MEMTY                :   2;    //  Memory Type: 00: 32 bit base
                                                 // address 01: reserved 10:
                                                 // 64-bit base address 11:
                                                 // reserved
        uint64_t  PREF                 :   1;    //  Hardwired to 0 indicating
                                                 // that this range is not
                                                 // prefetchable
        uint64_t  ADDRMSK              :  15;    //  Address Mask Hardwired to 0s
                                                 // to indicate at least 4KB
                                                 // address range
        uint64_t  BAL                  :  13;    //  Memory Base Address low bits
        uint64_t  BAH                  :   7;    //  Memory Base Address High -
                                                 // bits Includes the high bits of
                                                 // the base address used by
                                                 // 64-bit OS. Must hold zero for
                                                 // 32-bit OS
        uint64_t  BAR                  :  25;    //  These bits must be loaded
                                                 // with zeros

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDCBAR1_t;
#endif
#define IDC_REGS_IDCBAR1_OFFSET 0x18
#define IDC_REGS_IDCBAR1_SCOPE 0x01
#define IDC_REGS_IDCBAR1_SIZE 64
#define IDC_REGS_IDCBAR1_BITFIELD_COUNT 0x07
#define IDC_REGS_IDCBAR1_RESET 0x00000004

#define IDC_REGS_IDCBAR1_SPTY_LSB 0x0000
#define IDC_REGS_IDCBAR1_SPTY_MSB 0x0000
#define IDC_REGS_IDCBAR1_SPTY_RANGE 0x0001
#define IDC_REGS_IDCBAR1_SPTY_MASK 0x00000001
#define IDC_REGS_IDCBAR1_SPTY_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR1_MEMTY_LSB 0x0001
#define IDC_REGS_IDCBAR1_MEMTY_MSB 0x0002
#define IDC_REGS_IDCBAR1_MEMTY_RANGE 0x0002
#define IDC_REGS_IDCBAR1_MEMTY_MASK 0x00000006
#define IDC_REGS_IDCBAR1_MEMTY_RESET_VALUE 0x00000002

#define IDC_REGS_IDCBAR1_PREF_LSB 0x0003
#define IDC_REGS_IDCBAR1_PREF_MSB 0x0003
#define IDC_REGS_IDCBAR1_PREF_RANGE 0x0001
#define IDC_REGS_IDCBAR1_PREF_MASK 0x00000008
#define IDC_REGS_IDCBAR1_PREF_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR1_ADDRMSK_LSB 0x0004
#define IDC_REGS_IDCBAR1_ADDRMSK_MSB 0x0012
#define IDC_REGS_IDCBAR1_ADDRMSK_RANGE 0x000f
#define IDC_REGS_IDCBAR1_ADDRMSK_MASK 0x0007fff0
#define IDC_REGS_IDCBAR1_ADDRMSK_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR1_BAL_LSB 0x0013
#define IDC_REGS_IDCBAR1_BAL_MSB 0x001f
#define IDC_REGS_IDCBAR1_BAL_RANGE 0x000d
#define IDC_REGS_IDCBAR1_BAL_MASK 0xfff80000
#define IDC_REGS_IDCBAR1_BAL_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR1_BAH_LSB 0x0020
#define IDC_REGS_IDCBAR1_BAH_MSB 0x0026
#define IDC_REGS_IDCBAR1_BAH_RANGE 0x0007
#define IDC_REGS_IDCBAR1_BAH_MASK 0x7f00000000
#define IDC_REGS_IDCBAR1_BAH_RESET_VALUE 0x00000000

#define IDC_REGS_IDCBAR1_BAR_LSB 0x0027
#define IDC_REGS_IDCBAR1_BAR_MSB 0x003f
#define IDC_REGS_IDCBAR1_BAR_RANGE 0x0019
#define IDC_REGS_IDCBAR1_BAR_MASK 0xffffff8000000000
#define IDC_REGS_IDCBAR1_BAR_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SSVI_FLAG
#define IDC_REGS_SSVI_FLAG
// SSVI desc:  This register is initialized to logic 0 by the assertion of reset.
// This register can be written only once after reset de-assertion it is
// locked for writes after that.
typedef union {
    struct {
        uint16_t  SSVID                :  16;    //  Subsystem Vendor ID (SSVID):
                                                 // This is written by BIOS. No
                                                 // hardware action taken on this
                                                 // value.

    }                                field;
    uint16_t                         val;
} IDC_REGS_SSVI_t;
#endif
#define IDC_REGS_SSVI_OFFSET 0x2c
#define IDC_REGS_SSVI_SCOPE 0x01
#define IDC_REGS_SSVI_SIZE 16
#define IDC_REGS_SSVI_BITFIELD_COUNT 0x01
#define IDC_REGS_SSVI_RESET 0x00000000

#define IDC_REGS_SSVI_SSVID_LSB 0x0000
#define IDC_REGS_SSVI_SSVID_MSB 0x000f
#define IDC_REGS_SSVI_SSVID_RANGE 0x0010
#define IDC_REGS_SSVI_SSVID_MASK 0x0000ffff
#define IDC_REGS_SSVI_SSVID_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SSI_FLAG
#define IDC_REGS_SSI_FLAG
// SSI desc:  This register is initialized to logic 0 by the assertion of reset.
// This register can be written only once after reset de-assertion it is
// locked for writes after that.
typedef union {
    struct {
        uint16_t  SSID                 :  16;    //  Subsystem ID (SSID): This is
                                                 // written by BIOS. No hardware
                                                 // action taken on this value.

    }                                field;
    uint16_t                         val;
} IDC_REGS_SSI_t;
#endif
#define IDC_REGS_SSI_OFFSET 0x2e
#define IDC_REGS_SSI_SCOPE 0x01
#define IDC_REGS_SSI_SIZE 16
#define IDC_REGS_SSI_BITFIELD_COUNT 0x01
#define IDC_REGS_SSI_RESET 0x00000000

#define IDC_REGS_SSI_SSID_LSB 0x0000
#define IDC_REGS_SSI_SSID_MSB 0x000f
#define IDC_REGS_SSI_SSID_RANGE 0x0010
#define IDC_REGS_SSI_SSID_MASK 0x0000ffff
#define IDC_REGS_SSI_SSID_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_CAPP_FLAG
#define IDC_REGS_CAPP_FLAG
// CAPP desc:  This register gives MSI capability pointer offset
typedef union {
    struct {
        uint8_t   CAPP                 :   8;    //  Indicates that the MSI
                                                 // capability pointer offset is
                                                 // offset 90h

    }                                field;
    uint8_t                          val;
} IDC_REGS_CAPP_t;
#endif
#define IDC_REGS_CAPP_OFFSET 0x34
#define IDC_REGS_CAPP_SCOPE 0x01
#define IDC_REGS_CAPP_SIZE 8
#define IDC_REGS_CAPP_BITFIELD_COUNT 0x01
#define IDC_REGS_CAPP_RESET 0x00000090

#define IDC_REGS_CAPP_CAPP_LSB 0x0000
#define IDC_REGS_CAPP_CAPP_MSB 0x0007
#define IDC_REGS_CAPP_CAPP_RANGE 0x0008
#define IDC_REGS_CAPP_CAPP_MASK 0x000000ff
#define IDC_REGS_CAPP_CAPP_RESET_VALUE 0x00000090


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_INTL_FLAG
#define IDC_REGS_INTL_FLAG
// INTL desc:  This register contains interrupt line routing information. The device
// itself does not use this value, rather it is used by device drivers
// and operating systems to determine priority and vector information.
typedef union {
    struct {
        uint8_t   INTCON               :   8;    //  Interrupt Connection
                                                 // Communicate interrupt line
                                                 // routing information. BIOS
                                                 // Requirement: POST software
                                                 // writes the routing information
                                                 // into this register as it
                                                 // initializes and configures the
                                                 // system. The value indicates to
                                                 // which input of the system
                                                 // interrupt controller this
                                                 // device's interrupt pin is
                                                 // connected

    }                                field;
    uint8_t                          val;
} IDC_REGS_INTL_t;
#endif
#define IDC_REGS_INTL_OFFSET 0x3c
#define IDC_REGS_INTL_SCOPE 0x01
#define IDC_REGS_INTL_SIZE 8
#define IDC_REGS_INTL_BITFIELD_COUNT 0x01
#define IDC_REGS_INTL_RESET 0x00000000

#define IDC_REGS_INTL_INTCON_LSB 0x0000
#define IDC_REGS_INTL_INTCON_MSB 0x0007
#define IDC_REGS_INTL_INTCON_RANGE 0x0008
#define IDC_REGS_INTL_INTCON_MASK 0x000000ff
#define IDC_REGS_INTL_INTCON_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_INTP_FLAG
#define IDC_REGS_INTP_FLAG
// INTP desc:  tells which PCI legacy interrupt pin a device will use (IDC uses only
// IntA).
typedef union {
    struct {
        uint8_t   LEGINT               :   3;    //  When Legacy interrupts are
                                                 // used, function use legacy
                                                 // interrupt INTA.
        uint8_t   RSVD                 :   5;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_INTP_t;
#endif
#define IDC_REGS_INTP_OFFSET 0x3d
#define IDC_REGS_INTP_SCOPE 0x01
#define IDC_REGS_INTP_SIZE 8
#define IDC_REGS_INTP_BITFIELD_COUNT 0x02
#define IDC_REGS_INTP_RESET 0x00000001

#define IDC_REGS_INTP_LEGINT_LSB 0x0000
#define IDC_REGS_INTP_LEGINT_MSB 0x0002
#define IDC_REGS_INTP_LEGINT_RANGE 0x0003
#define IDC_REGS_INTP_LEGINT_MASK 0x00000007
#define IDC_REGS_INTP_LEGINT_RESET_VALUE 0x00000001

#define IDC_REGS_INTP_RSVD_LSB 0x0003
#define IDC_REGS_INTP_RSVD_MSB 0x0007
#define IDC_REGS_INTP_RSVD_RANGE 0x0005
#define IDC_REGS_INTP_RSVD_MASK 0x000000f8
#define IDC_REGS_INTP_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_MINGNTLAT_FLAG
#define IDC_REGS_MINGNTLAT_FLAG
// MINGNTLAT desc:  specifies a device's desired settings for Latency Timer values
typedef union {
    struct {
        uint16_t  MINGNT               :   8;    //  Reserved: Min Grant
        uint16_t  MINLAT               :   8;    //  Reserved: Min Latency

    }                                field;
    uint16_t                         val;
} IDC_REGS_MINGNTLAT_t;
#endif
#define IDC_REGS_MINGNTLAT_OFFSET 0x3e
#define IDC_REGS_MINGNTLAT_SCOPE 0x01
#define IDC_REGS_MINGNTLAT_SIZE 16
#define IDC_REGS_MINGNTLAT_BITFIELD_COUNT 0x02
#define IDC_REGS_MINGNTLAT_RESET 0x00000000

#define IDC_REGS_MINGNTLAT_MINGNT_LSB 0x0000
#define IDC_REGS_MINGNTLAT_MINGNT_MSB 0x0007
#define IDC_REGS_MINGNTLAT_MINGNT_RANGE 0x0008
#define IDC_REGS_MINGNTLAT_MINGNT_MASK 0x000000ff
#define IDC_REGS_MINGNTLAT_MINGNT_RESET_VALUE 0x00000000

#define IDC_REGS_MINGNTLAT_MINLAT_LSB 0x0008
#define IDC_REGS_MINGNTLAT_MINLAT_MSB 0x000f
#define IDC_REGS_MINGNTLAT_MINLAT_RANGE 0x0008
#define IDC_REGS_MINGNTLAT_MINLAT_MASK 0x0000ff00
#define IDC_REGS_MINGNTLAT_MINLAT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_OVRCFGCTL_FLAG
#define IDC_REGS_OVRCFGCTL_FLAG
// OVRCFGCTL desc:  This register holds bits that may be used internal mechanisms in the
// IDC during debug operations. Special notes will be made to BIOS
// writers, if any 5 of these bits will need to be set to value other
// than default.
typedef union {
    struct {
        uint32_t  RSVD2                :   1;    //  Reserved
        uint32_t  PCGEN                :   1;    //  This bit, when set, enables
                                                 // the primary interface clock
                                                 // for IceDC (idc_bb_clk) P
        uint32_t  RSVD1                :  30;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_OVRCFGCTL_t;
#endif
#define IDC_REGS_OVRCFGCTL_OFFSET 0x40
#define IDC_REGS_OVRCFGCTL_SCOPE 0x01
#define IDC_REGS_OVRCFGCTL_SIZE 32
#define IDC_REGS_OVRCFGCTL_BITFIELD_COUNT 0x03
#define IDC_REGS_OVRCFGCTL_RESET 0x00000002

#define IDC_REGS_OVRCFGCTL_RSVD2_LSB 0x0000
#define IDC_REGS_OVRCFGCTL_RSVD2_MSB 0x0000
#define IDC_REGS_OVRCFGCTL_RSVD2_RANGE 0x0001
#define IDC_REGS_OVRCFGCTL_RSVD2_MASK 0x00000001
#define IDC_REGS_OVRCFGCTL_RSVD2_RESET_VALUE 0x00000000

#define IDC_REGS_OVRCFGCTL_PCGEN_LSB 0x0001
#define IDC_REGS_OVRCFGCTL_PCGEN_MSB 0x0001
#define IDC_REGS_OVRCFGCTL_PCGEN_RANGE 0x0001
#define IDC_REGS_OVRCFGCTL_PCGEN_MASK 0x00000002
#define IDC_REGS_OVRCFGCTL_PCGEN_RESET_VALUE 0x00000001

#define IDC_REGS_OVRCFGCTL_RSVD1_LSB 0x0002
#define IDC_REGS_OVRCFGCTL_RSVD1_MSB 0x001f
#define IDC_REGS_OVRCFGCTL_RSVD1_RANGE 0x001e
#define IDC_REGS_OVRCFGCTL_RSVD1_MASK 0xfffffffc
#define IDC_REGS_OVRCFGCTL_RSVD1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_MSICAPID_FLAG
#define IDC_REGS_MSICAPID_FLAG
// MSICAPID desc:  This register contains a pointer to the next item in the capabilities
// list which is the Power Management Capability and also helps to
// identify linked list item (capability structure) as being for MSI
// registers.
typedef union {
    struct {
        uint16_t  CAPID                :   8;    //  Capability ID Value of 05h
                                                 // identifies this linked list
                                                 // item (capability structure) as
                                                 // being for MSI registers.
        uint16_t  NXTPTR               :   8;    //  Pointer to Next Capability
                                                 // This contains a pointer to the
                                                 // next item in the capabilities
                                                 // list which is the Power
                                                 // Management Capability

    }                                field;
    uint16_t                         val;
} IDC_REGS_MSICAPID_t;
#endif
#define IDC_REGS_MSICAPID_OFFSET 0x90
#define IDC_REGS_MSICAPID_SCOPE 0x01
#define IDC_REGS_MSICAPID_SIZE 16
#define IDC_REGS_MSICAPID_BITFIELD_COUNT 0x02
#define IDC_REGS_MSICAPID_RESET 0x0000a005

#define IDC_REGS_MSICAPID_CAPID_LSB 0x0000
#define IDC_REGS_MSICAPID_CAPID_MSB 0x0007
#define IDC_REGS_MSICAPID_CAPID_RANGE 0x0008
#define IDC_REGS_MSICAPID_CAPID_MASK 0x000000ff
#define IDC_REGS_MSICAPID_CAPID_RESET_VALUE 0x00000005

#define IDC_REGS_MSICAPID_NXTPTR_LSB 0x0008
#define IDC_REGS_MSICAPID_NXTPTR_MSB 0x000f
#define IDC_REGS_MSICAPID_NXTPTR_RANGE 0x0008
#define IDC_REGS_MSICAPID_NXTPTR_MASK 0x0000ff00
#define IDC_REGS_MSICAPID_NXTPTR_RESET_VALUE 0x000000a0


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_MC_FLAG
#define IDC_REGS_MC_FLAG
// MC desc:  This register is defined to meet PCI Local Bus Specification 3.0
// Section 6.8 definition of MSI messages.
typedef union {
    struct {
        uint16_t  MSIEN                :   1;    //  MSI Enable Controls the
                                                 // ability of IDC to generate MSI
                                                 // Messages. A device driver is
                                                 // prohibited from writing this
                                                 // bit to mask a functions
                                                 // service request. 0: MSI will
                                                 // not be generated 1: MSI will
                                                 // be generated. INTA will not be
                                                 // generated and INTA status is
                                                 // not set.
        uint16_t  MMCAP                :   3;    //  Indicates to SW the number of
                                                 // vectors that the IDC module is
                                                 // requesting for use Value
                                                 // Number of Messages requested
                                                 // 000 1 001 2 (reserved) 010 4
                                                 // (reserved) 011 8 (reserved)
                                                 // 100 16(reserved) 101
                                                 // 32(reserved) Other reserved
        uint16_t  MMEN                 :   3;    //  Multiple Message Enable
                                                 // System software program this
                                                 // field to indicate the number
                                                 // of vectors allocated to the
                                                 // IDC. At least one vector must
                                                 // be allocated when the MSI
                                                 // interrupts are enabled. This
                                                 // value is ignored by HW as only
                                                 // a single vector is in use by
                                                 // IDC.
        uint16_t  ADDR64CAP            :   1;    //  64-bit Address Capable
                                                 // Hardwired to 0 to indicate
                                                 // that the function does not
                                                 // implement the upper 32 bits of
                                                 // the Message Address register
                                                 // and is incapable of generating
                                                 // a 64-bit memory address. This
                                                 // may need to change in future
                                                 // implementations when
                                                 // addressable system memory
                                                 // exceeds the 32bit/4GB limit.
        uint16_t  PVMCAP               :   1;    //  Per-Vector Masking Capable.
                                                 // 0- not supported by IDC
        uint16_t  RSVD                 :   7;    //  Reserved

    }                                field;
    uint16_t                         val;
} IDC_REGS_MC_t;
#endif
#define IDC_REGS_MC_OFFSET 0x92
#define IDC_REGS_MC_SCOPE 0x01
#define IDC_REGS_MC_SIZE 16
#define IDC_REGS_MC_BITFIELD_COUNT 0x06
#define IDC_REGS_MC_RESET 0x00000000

#define IDC_REGS_MC_MSIEN_LSB 0x0000
#define IDC_REGS_MC_MSIEN_MSB 0x0000
#define IDC_REGS_MC_MSIEN_RANGE 0x0001
#define IDC_REGS_MC_MSIEN_MASK 0x00000001
#define IDC_REGS_MC_MSIEN_RESET_VALUE 0x00000000

#define IDC_REGS_MC_MMCAP_LSB 0x0001
#define IDC_REGS_MC_MMCAP_MSB 0x0003
#define IDC_REGS_MC_MMCAP_RANGE 0x0003
#define IDC_REGS_MC_MMCAP_MASK 0x0000000e
#define IDC_REGS_MC_MMCAP_RESET_VALUE 0x00000000

#define IDC_REGS_MC_MMEN_LSB 0x0004
#define IDC_REGS_MC_MMEN_MSB 0x0006
#define IDC_REGS_MC_MMEN_RANGE 0x0003
#define IDC_REGS_MC_MMEN_MASK 0x00000070
#define IDC_REGS_MC_MMEN_RESET_VALUE 0x00000000

#define IDC_REGS_MC_ADDR64CAP_LSB 0x0007
#define IDC_REGS_MC_ADDR64CAP_MSB 0x0007
#define IDC_REGS_MC_ADDR64CAP_RANGE 0x0001
#define IDC_REGS_MC_ADDR64CAP_MASK 0x00000080
#define IDC_REGS_MC_ADDR64CAP_RESET_VALUE 0x00000000

#define IDC_REGS_MC_PVMCAP_LSB 0x0008
#define IDC_REGS_MC_PVMCAP_MSB 0x0008
#define IDC_REGS_MC_PVMCAP_RANGE 0x0001
#define IDC_REGS_MC_PVMCAP_MASK 0x00000100
#define IDC_REGS_MC_PVMCAP_RESET_VALUE 0x00000000

#define IDC_REGS_MC_RSVD_LSB 0x0009
#define IDC_REGS_MC_RSVD_MSB 0x000f
#define IDC_REGS_MC_RSVD_RANGE 0x0007
#define IDC_REGS_MC_RSVD_MASK 0x0000fe00
#define IDC_REGS_MC_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_MA_FLAG
#define IDC_REGS_MA_FLAG
// MA desc:  This register is defined to meet PCI Local Bus Specification 3.0
// Section 6.8 definition of MSI messages
typedef union {
    struct {
        uint32_t  RSVD                 :   2;    //  Reserved. Force Dword Align
                                                 // Hardwired to 0 so that
                                                 // addresses assigned by system
                                                 // software are always aligned on
                                                 // a dword address boundary
        uint32_t  MADDR                :  30;    //  Message Address Used by
                                                 // system software to assign an
                                                 // MSI address to the device. The
                                                 // device handles an MSI by
                                                 // writing the padded contents of
                                                 // the MD register to this
                                                 // address

    }                                field;
    uint32_t                         val;
} IDC_REGS_MA_t;
#endif
#define IDC_REGS_MA_OFFSET 0x94
#define IDC_REGS_MA_SCOPE 0x01
#define IDC_REGS_MA_SIZE 32
#define IDC_REGS_MA_BITFIELD_COUNT 0x02
#define IDC_REGS_MA_RESET 0x00000000

#define IDC_REGS_MA_RSVD_LSB 0x0000
#define IDC_REGS_MA_RSVD_MSB 0x0001
#define IDC_REGS_MA_RSVD_RANGE 0x0002
#define IDC_REGS_MA_RSVD_MASK 0x00000003
#define IDC_REGS_MA_RSVD_RESET_VALUE 0x00000000

#define IDC_REGS_MA_MADDR_LSB 0x0002
#define IDC_REGS_MA_MADDR_MSB 0x001f
#define IDC_REGS_MA_MADDR_RANGE 0x001e
#define IDC_REGS_MA_MADDR_MASK 0xfffffffc
#define IDC_REGS_MA_MADDR_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_MD_FLAG
#define IDC_REGS_MD_FLAG
// MD desc:  This register is defined to meet PCI Local Bus Specification 3.0
// Section 6.8 definition of MSI messages
typedef union {
    struct {
        uint16_t  MDAT                 :  16;    //  Message Data Base message
                                                 // data pattern assigned by
                                                 // system software and used to
                                                 // handle an MSI from the device.
                                                 // When the device must generate
                                                 // an interrupt request, it
                                                 // writes a 32-bit value to the
                                                 // memory address specified in
                                                 // the MA register. The upper 16
                                                 // bits are always set to 0. The
                                                 // lower 16 bits are supplied by
                                                 // this register.

    }                                field;
    uint16_t                         val;
} IDC_REGS_MD_t;
#endif
#define IDC_REGS_MD_OFFSET 0x98
#define IDC_REGS_MD_SCOPE 0x01
#define IDC_REGS_MD_SIZE 16
#define IDC_REGS_MD_BITFIELD_COUNT 0x01
#define IDC_REGS_MD_RESET 0x00000000

#define IDC_REGS_MD_MDAT_LSB 0x0000
#define IDC_REGS_MD_MDAT_MSB 0x000f
#define IDC_REGS_MD_MDAT_RANGE 0x0010
#define IDC_REGS_MD_MDAT_MASK 0x0000ffff
#define IDC_REGS_MD_MDAT_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3CAPID_FLAG
#define IDC_REGS_D0I3CAPID_FLAG
// D0I3CAPID desc:  This register is implemented in BXT only
typedef union {
    struct {
        uint16_t  CAPID                :   8;    //  Value of 09h identifies this
                                                 // linked list item (capability
                                                 // structure) is a vendor
                                                 // specific capability.
        uint16_t  NXTPTR               :   8;    //  This contains a pointer to
                                                 // the next item in the
                                                 // capabilities list which is the
                                                 // Power Management Capability

    }                                field;
    uint16_t                         val;
} IDC_REGS_D0I3CAPID_t;
#endif
#define IDC_REGS_D0I3CAPID_OFFSET 0xa0
#define IDC_REGS_D0I3CAPID_SCOPE 0x01
#define IDC_REGS_D0I3CAPID_SIZE 16
#define IDC_REGS_D0I3CAPID_BITFIELD_COUNT 0x02
#define IDC_REGS_D0I3CAPID_RESET 0x0000dc09

#define IDC_REGS_D0I3CAPID_CAPID_LSB 0x0000
#define IDC_REGS_D0I3CAPID_CAPID_MSB 0x0007
#define IDC_REGS_D0I3CAPID_CAPID_RANGE 0x0008
#define IDC_REGS_D0I3CAPID_CAPID_MASK 0x000000ff
#define IDC_REGS_D0I3CAPID_CAPID_RESET_VALUE 0x00000009

#define IDC_REGS_D0I3CAPID_NXTPTR_LSB 0x0008
#define IDC_REGS_D0I3CAPID_NXTPTR_MSB 0x000f
#define IDC_REGS_D0I3CAPID_NXTPTR_RANGE 0x0008
#define IDC_REGS_D0I3CAPID_NXTPTR_MASK 0x0000ff00
#define IDC_REGS_D0I3CAPID_NXTPTR_RESET_VALUE 0x000000dc


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3CAP_FLAG
#define IDC_REGS_D0I3CAP_FLAG
// D0I3CAP desc:  This register is implemented in BXT only
typedef union {
    struct {
        uint16_t  VSLEN                :   8;    //  This field indicates the
                                                 // number of bytes in this
                                                 // capability including the CapID
                                                 // and Cap registers.
        uint16_t  VSREV                :   4;    //  Reserved for VSID of Fh
        uint16_t  VSID                 :   4;    //  Indicates that this Vendor
                                                 // Specific Capability is an
                                                 // Extended Capability, which use
                                                 // a VSEC 16-bit Externded
                                                 // VCapaiblity in the subsequent
                                                 // 4B., differentiating this from
                                                 // other vendor specific
                                                 // capabilities.

    }                                field;
    uint16_t                         val;
} IDC_REGS_D0I3CAP_t;
#endif
#define IDC_REGS_D0I3CAP_OFFSET 0xa2
#define IDC_REGS_D0I3CAP_SCOPE 0x01
#define IDC_REGS_D0I3CAP_SIZE 16
#define IDC_REGS_D0I3CAP_BITFIELD_COUNT 0x03
#define IDC_REGS_D0I3CAP_RESET 0x0000f014

#define IDC_REGS_D0I3CAP_VSLEN_LSB 0x0000
#define IDC_REGS_D0I3CAP_VSLEN_MSB 0x0007
#define IDC_REGS_D0I3CAP_VSLEN_RANGE 0x0008
#define IDC_REGS_D0I3CAP_VSLEN_MASK 0x000000ff
#define IDC_REGS_D0I3CAP_VSLEN_RESET_VALUE 0x00000014

#define IDC_REGS_D0I3CAP_VSREV_LSB 0x0008
#define IDC_REGS_D0I3CAP_VSREV_MSB 0x000b
#define IDC_REGS_D0I3CAP_VSREV_RANGE 0x0004
#define IDC_REGS_D0I3CAP_VSREV_MASK 0x00000f00
#define IDC_REGS_D0I3CAP_VSREV_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3CAP_VSID_LSB 0x000c
#define IDC_REGS_D0I3CAP_VSID_MSB 0x000f
#define IDC_REGS_D0I3CAP_VSID_RANGE 0x0004
#define IDC_REGS_D0I3CAP_VSID_MASK 0x0000f000
#define IDC_REGS_D0I3CAP_VSID_RESET_VALUE 0x0000000f


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3VSEC_FLAG
#define IDC_REGS_D0I3VSEC_FLAG
// D0I3VSEC desc:  This register is implemented in BXT only
typedef union {
    struct {
        uint32_t  VSECID               :  16;    //  DevIdle has been assigned the
                                                 // Intel VSEC ID of 10h
        uint32_t  VSREV                :   4;    //  For this revision of DevIdle,
                                                 // this field is 0h
        uint32_t  VSECLEN              :  12;    //  Indicates that this Vendor
                                                 // Specific Capability is an
                                                 // Extended Capability, which use
                                                 // a VSEC 16-bit Externded
                                                 // VCapaiblity in the subsequent
                                                 // 4B., differentiating this from
                                                 // other vendor specific
                                                 // capabilities.

    }                                field;
    uint32_t                         val;
} IDC_REGS_D0I3VSEC_t;
#endif
#define IDC_REGS_D0I3VSEC_OFFSET 0xa4
#define IDC_REGS_D0I3VSEC_SCOPE 0x01
#define IDC_REGS_D0I3VSEC_SIZE 32
#define IDC_REGS_D0I3VSEC_BITFIELD_COUNT 0x03
#define IDC_REGS_D0I3VSEC_RESET 0x01400010

#define IDC_REGS_D0I3VSEC_VSECID_LSB 0x0000
#define IDC_REGS_D0I3VSEC_VSECID_MSB 0x000f
#define IDC_REGS_D0I3VSEC_VSECID_RANGE 0x0010
#define IDC_REGS_D0I3VSEC_VSECID_MASK 0x0000ffff
#define IDC_REGS_D0I3VSEC_VSECID_RESET_VALUE 0x00000010

#define IDC_REGS_D0I3VSEC_VSREV_LSB 0x0010
#define IDC_REGS_D0I3VSEC_VSREV_MSB 0x0013
#define IDC_REGS_D0I3VSEC_VSREV_RANGE 0x0004
#define IDC_REGS_D0I3VSEC_VSREV_MASK 0x000f0000
#define IDC_REGS_D0I3VSEC_VSREV_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3VSEC_VSECLEN_LSB 0x0014
#define IDC_REGS_D0I3VSEC_VSECLEN_MSB 0x001f
#define IDC_REGS_D0I3VSEC_VSECLEN_RANGE 0x000c
#define IDC_REGS_D0I3VSEC_VSECLEN_MASK 0xfff00000
#define IDC_REGS_D0I3VSEC_VSECLEN_RESET_VALUE 0x00000014


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3SWLTRPTR_FLAG
#define IDC_REGS_D0I3SWLTRPTR_FLAG
// D0I3SWLTRPTR desc:  This register is implemented in BXT only
typedef union {
    struct {
        uint32_t  VALID                :   1;    //  Indicates the use of SW LTR
                                                 // by the function.IDC does not
                                                 // use SW LTR
        uint32_t  BARNUM               :   3;    //  The value in this field is
                                                 // ignored as IDC does not
                                                 // support SW LTR
        uint32_t  SWLTRLOC             :  28;    //  The value in this field is
                                                 // ignored as IDC does not
                                                 // support SW LTR

    }                                field;
    uint32_t                         val;
} IDC_REGS_D0I3SWLTRPTR_t;
#endif
#define IDC_REGS_D0I3SWLTRPTR_OFFSET 0xa8
#define IDC_REGS_D0I3SWLTRPTR_SCOPE 0x01
#define IDC_REGS_D0I3SWLTRPTR_SIZE 32
#define IDC_REGS_D0I3SWLTRPTR_BITFIELD_COUNT 0x03
#define IDC_REGS_D0I3SWLTRPTR_RESET 0x00000000

#define IDC_REGS_D0I3SWLTRPTR_VALID_LSB 0x0000
#define IDC_REGS_D0I3SWLTRPTR_VALID_MSB 0x0000
#define IDC_REGS_D0I3SWLTRPTR_VALID_RANGE 0x0001
#define IDC_REGS_D0I3SWLTRPTR_VALID_MASK 0x00000001
#define IDC_REGS_D0I3SWLTRPTR_VALID_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3SWLTRPTR_BARNUM_LSB 0x0001
#define IDC_REGS_D0I3SWLTRPTR_BARNUM_MSB 0x0003
#define IDC_REGS_D0I3SWLTRPTR_BARNUM_RANGE 0x0003
#define IDC_REGS_D0I3SWLTRPTR_BARNUM_MASK 0x0000000e
#define IDC_REGS_D0I3SWLTRPTR_BARNUM_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3SWLTRPTR_SWLTRLOC_LSB 0x0004
#define IDC_REGS_D0I3SWLTRPTR_SWLTRLOC_MSB 0x001f
#define IDC_REGS_D0I3SWLTRPTR_SWLTRLOC_RANGE 0x001c
#define IDC_REGS_D0I3SWLTRPTR_SWLTRLOC_MASK 0xfffffff0
#define IDC_REGS_D0I3SWLTRPTR_SWLTRLOC_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3DEVIDLEPTR_FLAG
#define IDC_REGS_D0I3DEVIDLEPTR_FLAG
// D0I3DEVIDLEPTR desc:  This register is implemented in BXT only
typedef union {
    struct {
        uint32_t  VALID                :   1;    //  IDC has a DevIdle register
        uint32_t  BARNUM               :   3;    //  The DevIdle is located in
                                                 // BAR0
        uint32_t  DEVIDLELOC           :  28;    //  This location pointer to the
                                                 // DevIdle register in MMIO
                                                 // space, as an offset from the
                                                 // BAR base.

    }                                field;
    uint32_t                         val;
} IDC_REGS_D0I3DEVIDLEPTR_t;
#endif
#define IDC_REGS_D0I3DEVIDLEPTR_OFFSET 0xac
#define IDC_REGS_D0I3DEVIDLEPTR_SCOPE 0x01
#define IDC_REGS_D0I3DEVIDLEPTR_SIZE 32
#define IDC_REGS_D0I3DEVIDLEPTR_BITFIELD_COUNT 0x03
#define IDC_REGS_D0I3DEVIDLEPTR_RESET 0x00000a81

#define IDC_REGS_D0I3DEVIDLEPTR_VALID_LSB 0x0000
#define IDC_REGS_D0I3DEVIDLEPTR_VALID_MSB 0x0000
#define IDC_REGS_D0I3DEVIDLEPTR_VALID_RANGE 0x0001
#define IDC_REGS_D0I3DEVIDLEPTR_VALID_MASK 0x00000001
#define IDC_REGS_D0I3DEVIDLEPTR_VALID_RESET_VALUE 0x00000001

#define IDC_REGS_D0I3DEVIDLEPTR_BARNUM_LSB 0x0001
#define IDC_REGS_D0I3DEVIDLEPTR_BARNUM_MSB 0x0003
#define IDC_REGS_D0I3DEVIDLEPTR_BARNUM_RANGE 0x0003
#define IDC_REGS_D0I3DEVIDLEPTR_BARNUM_MASK 0x0000000e
#define IDC_REGS_D0I3DEVIDLEPTR_BARNUM_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3DEVIDLEPTR_DEVIDLELOC_LSB 0x0004
#define IDC_REGS_D0I3DEVIDLEPTR_DEVIDLELOC_MSB 0x001f
#define IDC_REGS_D0I3DEVIDLEPTR_DEVIDLELOC_RANGE 0x001c
#define IDC_REGS_D0I3DEVIDLEPTR_DEVIDLELOC_MASK 0xfffffff0
#define IDC_REGS_D0I3DEVIDLEPTR_DEVIDLELOC_RESET_VALUE 0x000000a8


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_D0I3DEVIDLEPOL_FLAG
#define IDC_REGS_D0I3DEVIDLEPOL_FLAG
// D0I3DEVIDLEPOL desc:  This register is implemented in BXT only D0idle_5
// Max_Power_On_Latency is set by BIOS at boot and read by device driver
// SW to calculate approximate cost of a D0idle entry + exit cycle. This
// allows driver to avoid idle entry in cases where device duty cycle is
// larger than D0idle entry + exit cycle.
typedef union {
    struct {
        uint16_t  POLV                 :  10;    //  A value of 0 indicates a
                                                 // power on latency of less than
                                                 // 1us. This field is a RO as
                                                 // there is no need for BIOS
                                                 // programing of it.
        uint16_t  POLS                 :   3;    //  Latency Scale multiplier:
                                                 // 010: 1us 011: 32us All other
                                                 // settings are reserved. This
                                                 // field is a RO as there is no
                                                 // need for BIOS programing of
                                                 // it.
        uint16_t  RSVD                 :   3;    //  Reserved

    }                                field;
    uint16_t                         val;
} IDC_REGS_D0I3DEVIDLEPOL_t;
#endif
#define IDC_REGS_D0I3DEVIDLEPOL_OFFSET 0xb0
#define IDC_REGS_D0I3DEVIDLEPOL_SCOPE 0x01
#define IDC_REGS_D0I3DEVIDLEPOL_SIZE 16
#define IDC_REGS_D0I3DEVIDLEPOL_BITFIELD_COUNT 0x03
#define IDC_REGS_D0I3DEVIDLEPOL_RESET 0x00000800

#define IDC_REGS_D0I3DEVIDLEPOL_POLV_LSB 0x0000
#define IDC_REGS_D0I3DEVIDLEPOL_POLV_MSB 0x0009
#define IDC_REGS_D0I3DEVIDLEPOL_POLV_RANGE 0x000a
#define IDC_REGS_D0I3DEVIDLEPOL_POLV_MASK 0x000003ff
#define IDC_REGS_D0I3DEVIDLEPOL_POLV_RESET_VALUE 0x00000000

#define IDC_REGS_D0I3DEVIDLEPOL_POLS_LSB 0x000a
#define IDC_REGS_D0I3DEVIDLEPOL_POLS_MSB 0x000c
#define IDC_REGS_D0I3DEVIDLEPOL_POLS_RANGE 0x0003
#define IDC_REGS_D0I3DEVIDLEPOL_POLS_MASK 0x00001c00
#define IDC_REGS_D0I3DEVIDLEPOL_POLS_RESET_VALUE 0x00000002

#define IDC_REGS_D0I3DEVIDLEPOL_RSVD_LSB 0x000d
#define IDC_REGS_D0I3DEVIDLEPOL_RSVD_MSB 0x000f
#define IDC_REGS_D0I3DEVIDLEPOL_RSVD_RANGE 0x0003
#define IDC_REGS_D0I3DEVIDLEPOL_RSVD_MASK 0x0000e000
#define IDC_REGS_D0I3DEVIDLEPOL_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_PCE_FLAG
#define IDC_REGS_PCE_FLAG
// PCE desc:  This register controls the D0i3 features like Hardware Autonomous
// Enable,sleep enable, D3-Hot Enable, I3 Enable and PMC Request Enable
typedef union {
    struct {
        uint16_t  PMCRE                :   1;    //  If set, then IP will PG when
                                                 // idle and the PMC requests
                                                 // power gating by asserting the
                                                 // pmc_*_sw_pg_req_b signal.
        uint16_t  I3E                  :   1;    //  If set, then IP will PG when
                                                 // idle and the D0i3 register
                                                 // (D0i3C[2] = 1) is set. NOTE:
                                                 // If bits [2:1] = 11, then the
                                                 // IP would PG whenever either
                                                 // PMCSR = 11 or the D0i3C.i3 bit
                                                 // is set.
        uint16_t  D3HE                 :   1;    //  If set, then IP will PG when
                                                 // idle and the PMCSR[1:0]
                                                 // register in the IP =11.
        uint16_t  SE                   :   1;    //  if clear, then IP will never
                                                 // asset Sleep to the retention
                                                 // flops. If set, then IP may
                                                 // assert Sleep during PGing.
                                                 // Note that some platforms may
                                                 // default this bit to 0, others
                                                 // to 1.
        uint16_t  RSVD_1               :   1;    //  Reserved
        uint16_t  HAE                  :   1;    //  If set, then the IP may
                                                 // request a PG whenever it is
                                                 // idle. NOTE: If this bit is
                                                 // set, then bits[2:0] must be
                                                 // 000.
        uint16_t  RSVD                 :  10;    //  Reserved

    }                                field;
    uint16_t                         val;
} IDC_REGS_PCE_t;
#endif
#define IDC_REGS_PCE_OFFSET 0xb2
#define IDC_REGS_PCE_SCOPE 0x01
#define IDC_REGS_PCE_SIZE 16
#define IDC_REGS_PCE_BITFIELD_COUNT 0x07
#define IDC_REGS_PCE_RESET 0x00000020

#define IDC_REGS_PCE_PMCRE_LSB 0x0000
#define IDC_REGS_PCE_PMCRE_MSB 0x0000
#define IDC_REGS_PCE_PMCRE_RANGE 0x0001
#define IDC_REGS_PCE_PMCRE_MASK 0x00000001
#define IDC_REGS_PCE_PMCRE_RESET_VALUE 0x00000000

#define IDC_REGS_PCE_I3E_LSB 0x0001
#define IDC_REGS_PCE_I3E_MSB 0x0001
#define IDC_REGS_PCE_I3E_RANGE 0x0001
#define IDC_REGS_PCE_I3E_MASK 0x00000002
#define IDC_REGS_PCE_I3E_RESET_VALUE 0x00000000

#define IDC_REGS_PCE_D3HE_LSB 0x0002
#define IDC_REGS_PCE_D3HE_MSB 0x0002
#define IDC_REGS_PCE_D3HE_RANGE 0x0001
#define IDC_REGS_PCE_D3HE_MASK 0x00000004
#define IDC_REGS_PCE_D3HE_RESET_VALUE 0x00000000

#define IDC_REGS_PCE_SE_LSB 0x0003
#define IDC_REGS_PCE_SE_MSB 0x0003
#define IDC_REGS_PCE_SE_RANGE 0x0001
#define IDC_REGS_PCE_SE_MASK 0x00000008
#define IDC_REGS_PCE_SE_RESET_VALUE 0x00000000

#define IDC_REGS_PCE_RSVD_1_LSB 0x0004
#define IDC_REGS_PCE_RSVD_1_MSB 0x0004
#define IDC_REGS_PCE_RSVD_1_RANGE 0x0001
#define IDC_REGS_PCE_RSVD_1_MASK 0x00000010
#define IDC_REGS_PCE_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_PCE_HAE_LSB 0x0005
#define IDC_REGS_PCE_HAE_MSB 0x0005
#define IDC_REGS_PCE_HAE_RANGE 0x0001
#define IDC_REGS_PCE_HAE_MASK 0x00000020
#define IDC_REGS_PCE_HAE_RESET_VALUE 0x00000001

#define IDC_REGS_PCE_RSVD_LSB 0x0006
#define IDC_REGS_PCE_RSVD_MSB 0x000f
#define IDC_REGS_PCE_RSVD_RANGE 0x000a
#define IDC_REGS_PCE_RSVD_MASK 0x0000ffc0
#define IDC_REGS_PCE_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_PMCAPID_FLAG
#define IDC_REGS_PMCAPID_FLAG
// PMCAPID desc:  This register contains a pointer to next item in capabilities list
// and also helps to identify linked list item as being for PCI Power
// Management registers
typedef union {
    struct {
        uint16_t  CAPID                :   8;    //  Capability Identifier
                                                 // Identifies this linked list
                                                 // item as being for PCI Power
                                                 // Management registers. This is
                                                 // compliant with the PCI Power
                                                 // Management Interface
                                                 // Specification (section 3.2).
        uint16_t  NXTPTR               :   8;    //  Next Pointer This contains a
                                                 // pointer to next item in
                                                 // capabilities list. This is the
                                                 // final capability in the list
                                                 // and must be set to 00h.

    }                                field;
    uint16_t                         val;
} IDC_REGS_PMCAPID_t;
#endif
#define IDC_REGS_PMCAPID_OFFSET 0xdc
#define IDC_REGS_PMCAPID_SCOPE 0x01
#define IDC_REGS_PMCAPID_SIZE 16
#define IDC_REGS_PMCAPID_BITFIELD_COUNT 0x02
#define IDC_REGS_PMCAPID_RESET 0x0000f001

#define IDC_REGS_PMCAPID_CAPID_LSB 0x0000
#define IDC_REGS_PMCAPID_CAPID_MSB 0x0007
#define IDC_REGS_PMCAPID_CAPID_RANGE 0x0008
#define IDC_REGS_PMCAPID_CAPID_MASK 0x000000ff
#define IDC_REGS_PMCAPID_CAPID_RESET_VALUE 0x00000001

#define IDC_REGS_PMCAPID_NXTPTR_LSB 0x0008
#define IDC_REGS_PMCAPID_NXTPTR_MSB 0x000f
#define IDC_REGS_PMCAPID_NXTPTR_RANGE 0x0008
#define IDC_REGS_PMCAPID_NXTPTR_MASK 0x0000ff00
#define IDC_REGS_PMCAPID_NXTPTR_RESET_VALUE 0x000000f0


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_PMCAP_FLAG
#define IDC_REGS_PMCAP_FLAG
// PMCAP desc:  This register describes the Power Management Capability of IDC
typedef union {
    struct {
        uint16_t  VER                  :   3;    //  Version Hardwired to 010b to
                                                 // indicate there are 4 bytes of
                                                 // power management registers
                                                 // implemented and that this
                                                 // device complies with revision
                                                 // 1.1 of the PCI Power
                                                 // Management Interface
                                                 // Specification.
        uint16_t  PMEC                 :   1;    //  PME Clock indicate this
                                                 // device does NOT support PMEB
                                                 // generation
        uint16_t  AUXP                 :   1;    //  Aux Power This device does
                                                 // not use Aux power
        uint16_t  DSI                  :   1;    //  Device specific
                                                 // Initialization Indicates that
                                                 // this device requires device
                                                 // specific initialization before
                                                 // generic class device driver is
                                                 // to use it
        uint16_t  AUXC                 :   3;    //  Auxiliary Current Reserved.
                                                 // Not applicable for IDC
        uint16_t  D1S                  :   1;    //  D1 This device does not
                                                 // support D1
        uint16_t  D2S                  :   1;    //  D2 This device does not
                                                 // support D2
        uint16_t  PMES                 :   5;    //  PME Support This device does
                                                 // not support PMEB signal

    }                                field;
    uint16_t                         val;
} IDC_REGS_PMCAP_t;
#endif
#define IDC_REGS_PMCAP_OFFSET 0xde
#define IDC_REGS_PMCAP_SCOPE 0x01
#define IDC_REGS_PMCAP_SIZE 16
#define IDC_REGS_PMCAP_BITFIELD_COUNT 0x08
#define IDC_REGS_PMCAP_RESET 0x00000002

#define IDC_REGS_PMCAP_VER_LSB 0x0000
#define IDC_REGS_PMCAP_VER_MSB 0x0002
#define IDC_REGS_PMCAP_VER_RANGE 0x0003
#define IDC_REGS_PMCAP_VER_MASK 0x00000007
#define IDC_REGS_PMCAP_VER_RESET_VALUE 0x00000002

#define IDC_REGS_PMCAP_PMEC_LSB 0x0003
#define IDC_REGS_PMCAP_PMEC_MSB 0x0003
#define IDC_REGS_PMCAP_PMEC_RANGE 0x0001
#define IDC_REGS_PMCAP_PMEC_MASK 0x00000008
#define IDC_REGS_PMCAP_PMEC_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_AUXP_LSB 0x0004
#define IDC_REGS_PMCAP_AUXP_MSB 0x0004
#define IDC_REGS_PMCAP_AUXP_RANGE 0x0001
#define IDC_REGS_PMCAP_AUXP_MASK 0x00000010
#define IDC_REGS_PMCAP_AUXP_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_DSI_LSB 0x0005
#define IDC_REGS_PMCAP_DSI_MSB 0x0005
#define IDC_REGS_PMCAP_DSI_RANGE 0x0001
#define IDC_REGS_PMCAP_DSI_MASK 0x00000020
#define IDC_REGS_PMCAP_DSI_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_AUXC_LSB 0x0006
#define IDC_REGS_PMCAP_AUXC_MSB 0x0008
#define IDC_REGS_PMCAP_AUXC_RANGE 0x0003
#define IDC_REGS_PMCAP_AUXC_MASK 0x000001c0
#define IDC_REGS_PMCAP_AUXC_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_D1S_LSB 0x0009
#define IDC_REGS_PMCAP_D1S_MSB 0x0009
#define IDC_REGS_PMCAP_D1S_RANGE 0x0001
#define IDC_REGS_PMCAP_D1S_MASK 0x00000200
#define IDC_REGS_PMCAP_D1S_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_D2S_LSB 0x000a
#define IDC_REGS_PMCAP_D2S_MSB 0x000a
#define IDC_REGS_PMCAP_D2S_RANGE 0x0001
#define IDC_REGS_PMCAP_D2S_MASK 0x00000400
#define IDC_REGS_PMCAP_D2S_RESET_VALUE 0x00000000

#define IDC_REGS_PMCAP_PMES_LSB 0x000b
#define IDC_REGS_PMCAP_PMES_MSB 0x000f
#define IDC_REGS_PMCAP_PMES_RANGE 0x0005
#define IDC_REGS_PMCAP_PMES_MASK 0x0000f800
#define IDC_REGS_PMCAP_PMES_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_PMCS_FLAG
#define IDC_REGS_PMCS_FLAG
// PMCS desc:  This register has the status of PME Generation from D3(cold), Data
// Scale, Data Select, PME Enable and Power State
typedef union {
    struct {
        uint16_t  PS                   :   2;    //  Indicates the current power
                                                 // state of this device and can
                                                 // be used to set the device into
                                                 // a new power state. If software
                                                 // attempts to write an
                                                 // unsupported state to this
                                                 // field, write operation must
                                                 // complete normally on the bus,
                                                 // but the data is discarded and
                                                 // no state change occurs. 00: D0
                                                 // 01: D1 (Not supported in this
                                                 // device.) 10: D2 (Not supported
                                                 // in this device.) 11: D3 Write
                                                 // of reserved values is ignored
                                                 // and state will not change.
                                                 // Support of D3cold does not
                                                 // require any special action.
                                                 // While in the D3hot state, this
                                                 // device can only act as the
                                                 // target of PCI configuration
                                                 // transactions (for power
                                                 // management control). This
                                                 // device also cannot generate
                                                 // interrupts or respond to MMR
                                                 // cycles in the D3 state. The
                                                 // device must return to the D0
                                                 // state in order to be
                                                 // fully-functional.
        uint16_t  RSVD                 :   6;    //  Reserved
        uint16_t  PMEE                 :   1;    //  PME Enable PMEB is not
                                                 // supported
        uint16_t  DATSEL               :   4;    //  Data Select No support for
                                                 // Power Management Data register
        uint16_t  DATSC                :   2;    //  Data Scale No support for
                                                 // Power Management Data register
        uint16_t  PMEGD3               :   1;    //  PME Generation from D3 (cold)
                                                 // Not supported

    }                                field;
    uint16_t                         val;
} IDC_REGS_PMCS_t;
#endif
#define IDC_REGS_PMCS_OFFSET 0xe0
#define IDC_REGS_PMCS_SCOPE 0x01
#define IDC_REGS_PMCS_SIZE 16
#define IDC_REGS_PMCS_BITFIELD_COUNT 0x06
#define IDC_REGS_PMCS_RESET 0x00000000

#define IDC_REGS_PMCS_PS_LSB 0x0000
#define IDC_REGS_PMCS_PS_MSB 0x0001
#define IDC_REGS_PMCS_PS_RANGE 0x0002
#define IDC_REGS_PMCS_PS_MASK 0x00000003
#define IDC_REGS_PMCS_PS_RESET_VALUE 0x00000000

#define IDC_REGS_PMCS_RSVD_LSB 0x0002
#define IDC_REGS_PMCS_RSVD_MSB 0x0007
#define IDC_REGS_PMCS_RSVD_RANGE 0x0006
#define IDC_REGS_PMCS_RSVD_MASK 0x000000fc
#define IDC_REGS_PMCS_RSVD_RESET_VALUE 0x00000000

#define IDC_REGS_PMCS_PMEE_LSB 0x0008
#define IDC_REGS_PMCS_PMEE_MSB 0x0008
#define IDC_REGS_PMCS_PMEE_RANGE 0x0001
#define IDC_REGS_PMCS_PMEE_MASK 0x00000100
#define IDC_REGS_PMCS_PMEE_RESET_VALUE 0x00000000

#define IDC_REGS_PMCS_DATSEL_LSB 0x0009
#define IDC_REGS_PMCS_DATSEL_MSB 0x000c
#define IDC_REGS_PMCS_DATSEL_RANGE 0x0004
#define IDC_REGS_PMCS_DATSEL_MASK 0x00001e00
#define IDC_REGS_PMCS_DATSEL_RESET_VALUE 0x00000000

#define IDC_REGS_PMCS_DATSC_LSB 0x000d
#define IDC_REGS_PMCS_DATSC_MSB 0x000e
#define IDC_REGS_PMCS_DATSC_RANGE 0x0002
#define IDC_REGS_PMCS_DATSC_MASK 0x00006000
#define IDC_REGS_PMCS_DATSC_RESET_VALUE 0x00000000

#define IDC_REGS_PMCS_PMEGD3_LSB 0x000f
#define IDC_REGS_PMCS_PMEGD3_MSB 0x000f
#define IDC_REGS_PMCS_PMEGD3_RANGE 0x0001
#define IDC_REGS_PMCS_PMEGD3_MASK 0x00008000
#define IDC_REGS_PMCS_PMEGD3_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_FLRCAPID_FLAG
#define IDC_REGS_FLRCAPID_FLAG
// FLRCAPID desc:  This register contains a pointer to next item in capabilities list
// and capablity of Advanced Features
typedef union {
    struct {
        uint16_t  CAPID                :   8;    //  Capability Identifier A value
                                                 // that indicates FLR (Vendor
                                                 // specific value) 0 : 09h (FLR
                                                 // in use) A value of 09h in this
                                                 // register indicates that this
                                                 // is a FLR capabilities field.
        uint16_t  NXTPTR               :   8;    //  Next Pointer This contains a
                                                 // pointer to next item in
                                                 // capabilities list. This is the
                                                 // final capability in the list
                                                 // and must be set to 00h.

    }                                field;
    uint16_t                         val;
} IDC_REGS_FLRCAPID_t;
#endif
#define IDC_REGS_FLRCAPID_OFFSET 0xf0
#define IDC_REGS_FLRCAPID_SCOPE 0x01
#define IDC_REGS_FLRCAPID_SIZE 16
#define IDC_REGS_FLRCAPID_BITFIELD_COUNT 0x02
#define IDC_REGS_FLRCAPID_RESET 0x00000013

#define IDC_REGS_FLRCAPID_CAPID_LSB 0x0000
#define IDC_REGS_FLRCAPID_CAPID_MSB 0x0007
#define IDC_REGS_FLRCAPID_CAPID_RANGE 0x0008
#define IDC_REGS_FLRCAPID_CAPID_MASK 0x000000ff
#define IDC_REGS_FLRCAPID_CAPID_RESET_VALUE 0x00000013

#define IDC_REGS_FLRCAPID_NXTPTR_LSB 0x0008
#define IDC_REGS_FLRCAPID_NXTPTR_MSB 0x000f
#define IDC_REGS_FLRCAPID_NXTPTR_RANGE 0x0008
#define IDC_REGS_FLRCAPID_NXTPTR_MASK 0x0000ff00
#define IDC_REGS_FLRCAPID_NXTPTR_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_FLRMISC_FLAG
#define IDC_REGS_FLRMISC_FLAG
// FLRMISC desc:  This register descibest the FLR Capability, TXP Capability and
// Capability Length
typedef union {
    struct {
        uint16_t  CAPLEN               :   8;    //  Capability Length This bit
                                                 // indicates the number of bytes
                                                 // this vendor specified
                                                 // capability requires. it has a
                                                 // value of 06h for the FLR
                                                 // capability
        uint16_t  TXPCAP               :   1;    //  Indicates that TP bit is
                                                 // supported
        uint16_t  FLRCAP               :   1;    //  Indicates support for
                                                 // Function Level Reset (FLR).
        uint16_t  RSVD                 :   6;    //  Reserved

    }                                field;
    uint16_t                         val;
} IDC_REGS_FLRMISC_t;
#endif
#define IDC_REGS_FLRMISC_OFFSET 0xf2
#define IDC_REGS_FLRMISC_SCOPE 0x01
#define IDC_REGS_FLRMISC_SIZE 16
#define IDC_REGS_FLRMISC_BITFIELD_COUNT 0x04
#define IDC_REGS_FLRMISC_RESET 0x00000306

#define IDC_REGS_FLRMISC_CAPLEN_LSB 0x0000
#define IDC_REGS_FLRMISC_CAPLEN_MSB 0x0007
#define IDC_REGS_FLRMISC_CAPLEN_RANGE 0x0008
#define IDC_REGS_FLRMISC_CAPLEN_MASK 0x000000ff
#define IDC_REGS_FLRMISC_CAPLEN_RESET_VALUE 0x00000006

#define IDC_REGS_FLRMISC_TXPCAP_LSB 0x0008
#define IDC_REGS_FLRMISC_TXPCAP_MSB 0x0008
#define IDC_REGS_FLRMISC_TXPCAP_RANGE 0x0001
#define IDC_REGS_FLRMISC_TXPCAP_MASK 0x00000100
#define IDC_REGS_FLRMISC_TXPCAP_RESET_VALUE 0x00000001

#define IDC_REGS_FLRMISC_FLRCAP_LSB 0x0009
#define IDC_REGS_FLRMISC_FLRCAP_MSB 0x0009
#define IDC_REGS_FLRMISC_FLRCAP_RANGE 0x0001
#define IDC_REGS_FLRMISC_FLRCAP_MASK 0x00000200
#define IDC_REGS_FLRMISC_FLRCAP_RESET_VALUE 0x00000001

#define IDC_REGS_FLRMISC_RSVD_LSB 0x000a
#define IDC_REGS_FLRMISC_RSVD_MSB 0x000f
#define IDC_REGS_FLRMISC_RSVD_RANGE 0x0006
#define IDC_REGS_FLRMISC_RSVD_MASK 0x0000fc00
#define IDC_REGS_FLRMISC_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_FLRCTL_FLAG
#define IDC_REGS_FLRCTL_FLAG
// FLRCTL desc:  This register controls the Functional Level reset operation of gmm
typedef union {
    struct {
        uint8_t   INITFLR              :   1;    //  Writing 1 to this field
                                                 // starts the Functional Level
                                                 // Reset.This will act similar to
                                                 // the Abort + will bring all
                                                 // non-CFG registers to their
                                                 // reset value. The FLR is
                                                 // completed when the FLR status
                                                 // bit is cleared
        uint8_t   RSVD                 :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_FLRCTL_t;
#endif
#define IDC_REGS_FLRCTL_OFFSET 0xf4
#define IDC_REGS_FLRCTL_SCOPE 0x01
#define IDC_REGS_FLRCTL_SIZE 8
#define IDC_REGS_FLRCTL_BITFIELD_COUNT 0x02
#define IDC_REGS_FLRCTL_RESET 0x00000000

#define IDC_REGS_FLRCTL_INITFLR_LSB 0x0000
#define IDC_REGS_FLRCTL_INITFLR_MSB 0x0000
#define IDC_REGS_FLRCTL_INITFLR_RANGE 0x0001
#define IDC_REGS_FLRCTL_INITFLR_MASK 0x00000001
#define IDC_REGS_FLRCTL_INITFLR_RESET_VALUE 0x00000000

#define IDC_REGS_FLRCTL_RSVD_LSB 0x0001
#define IDC_REGS_FLRCTL_RSVD_MSB 0x0007
#define IDC_REGS_FLRCTL_RSVD_RANGE 0x0007
#define IDC_REGS_FLRCTL_RSVD_MASK 0x000000fe
#define IDC_REGS_FLRCTL_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_FLRSTS_FLAG
#define IDC_REGS_FLRSTS_FLAG
// FLRSTS desc:  This register helps to identify whether FLR is in progress
typedef union {
    struct {
        uint8_t   XPEND                :   1;    //  Transaction Pending 0 : FLR
                                                 // not in progress 1 : FLR is in
                                                 // progress (due to internal
                                                 // operation or waiting for the
                                                 // completion of a non-posted
                                                 // transaction)
        uint8_t   RSVD                 :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_FLRSTS_t;
#endif
#define IDC_REGS_FLRSTS_OFFSET 0xf5
#define IDC_REGS_FLRSTS_SCOPE 0x01
#define IDC_REGS_FLRSTS_SIZE 8
#define IDC_REGS_FLRSTS_BITFIELD_COUNT 0x02
#define IDC_REGS_FLRSTS_RESET 0x00000000

#define IDC_REGS_FLRSTS_XPEND_LSB 0x0000
#define IDC_REGS_FLRSTS_XPEND_MSB 0x0000
#define IDC_REGS_FLRSTS_XPEND_RANGE 0x0001
#define IDC_REGS_FLRSTS_XPEND_MASK 0x00000001
#define IDC_REGS_FLRSTS_XPEND_RESET_VALUE 0x00000000

#define IDC_REGS_FLRSTS_RSVD_LSB 0x0001
#define IDC_REGS_FLRSTS_RSVD_MSB 0x0007
#define IDC_REGS_FLRSTS_RSVD_RANGE 0x0007
#define IDC_REGS_FLRSTS_RSVD_MASK 0x000000fe
#define IDC_REGS_FLRSTS_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR0_SAI_CP_FLAG
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_FLAG
// IDC_MMIO_BAR0_SAI_CP desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR0_SAI_CP_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_OFFSET 0x00
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_RESET 0x40001000208

#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR0_SAI_CP_SAI_MASK_RESET_VALUE 0x40001000208


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR0_SAI_RD_FLAG
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_FLAG
// IDC_MMIO_BAR0_SAI_RD desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR0_SAI_RD_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_OFFSET 0x08
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_RESET 0x4000100021f

#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR0_SAI_RD_SAI_MASK_RESET_VALUE 0x4000100021f


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR0_SAI_WR_FLAG
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_FLAG
// IDC_MMIO_BAR0_SAI_WR desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR0_SAI_WR_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_OFFSET 0x10
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_RESET 0x4000100021f

#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR0_SAI_WR_SAI_MASK_RESET_VALUE 0x4000100021f


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR1_SAI_CP_FLAG
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_FLAG
// IDC_MMIO_BAR1_SAI_CP desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR1_SAI_CP_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_OFFSET 0x20
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_RESET 0x40001000208

#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR1_SAI_CP_SAI_MASK_RESET_VALUE 0x40001000208


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR1_SAI_RD_FLAG
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_FLAG
// IDC_MMIO_BAR1_SAI_RD desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR1_SAI_RD_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_OFFSET 0x28
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_RESET 0x404000100020a

#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR1_SAI_RD_SAI_MASK_RESET_VALUE 0x404000100020a


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_MMIO_BAR1_SAI_WR_FLAG
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_FLAG
// IDC_MMIO_BAR1_SAI_WR desc:  IDC MMIO/PCI Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_MMIO_BAR1_SAI_WR_t;
#endif
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_OFFSET 0x30
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SCOPE 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SIZE 64
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_RESET 0x404000100020a

#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_MMIO_BAR1_SAI_WR_SAI_MASK_RESET_VALUE 0x404000100020a


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_SBPR_SAI_CP_FLAG
#define IDC_REGS_IDC_SBPR_SAI_CP_FLAG
// IDC_SBPR_SAI_CP desc:  IDC SBPR Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_SBPR_SAI_CP_t;
#endif
#define IDC_REGS_IDC_SBPR_SAI_CP_OFFSET 0x40
#define IDC_REGS_IDC_SBPR_SAI_CP_SCOPE 0x01
#define IDC_REGS_IDC_SBPR_SAI_CP_SIZE 64
#define IDC_REGS_IDC_SBPR_SAI_CP_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_SBPR_SAI_CP_RESET 0x40001000208

#define IDC_REGS_IDC_SBPR_SAI_CP_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_SBPR_SAI_CP_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_SBPR_SAI_CP_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_SBPR_SAI_CP_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_SBPR_SAI_CP_SAI_MASK_RESET_VALUE 0x40001000208


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_SBPR_SAI_RD_FLAG
#define IDC_REGS_IDC_SBPR_SAI_RD_FLAG
// IDC_SBPR_SAI_RD desc:  IDC SBPR Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_SBPR_SAI_RD_t;
#endif
#define IDC_REGS_IDC_SBPR_SAI_RD_OFFSET 0x48
#define IDC_REGS_IDC_SBPR_SAI_RD_SCOPE 0x01
#define IDC_REGS_IDC_SBPR_SAI_RD_SIZE 64
#define IDC_REGS_IDC_SBPR_SAI_RD_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_SBPR_SAI_RD_RESET 0x40001000200

#define IDC_REGS_IDC_SBPR_SAI_RD_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_SBPR_SAI_RD_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_SBPR_SAI_RD_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_SBPR_SAI_RD_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_SBPR_SAI_RD_SAI_MASK_RESET_VALUE 0x40001000200


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDC_SBPR_SAI_WR_FLAG
#define IDC_REGS_IDC_SBPR_SAI_WR_FLAG
// IDC_SBPR_SAI_WR desc:  IDC SBPR Control Policy Register
typedef union {
    struct {
        uint64_t  SAI_MASK             :  64;    //  first fild desc

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDC_SBPR_SAI_WR_t;
#endif
#define IDC_REGS_IDC_SBPR_SAI_WR_OFFSET 0x50
#define IDC_REGS_IDC_SBPR_SAI_WR_SCOPE 0x01
#define IDC_REGS_IDC_SBPR_SAI_WR_SIZE 64
#define IDC_REGS_IDC_SBPR_SAI_WR_BITFIELD_COUNT 0x01
#define IDC_REGS_IDC_SBPR_SAI_WR_RESET 0x40001000200

#define IDC_REGS_IDC_SBPR_SAI_WR_SAI_MASK_LSB 0x0000
#define IDC_REGS_IDC_SBPR_SAI_WR_SAI_MASK_MSB 0x003f
#define IDC_REGS_IDC_SBPR_SAI_WR_SAI_MASK_RANGE 0x0040
#define IDC_REGS_IDC_SBPR_SAI_WR_SAI_MASK_MASK 0xffffffffffffffff
#define IDC_REGS_IDC_SBPR_SAI_WR_SAI_MASK_RESET_VALUE 0x40001000200


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPE_FLAG
#define IDC_REGS_ICEPE_FLAG
// ICEPE desc:  This register contains a bit per ICE that enables power to that ICE.
// In case multiple ICE units are connected to the same power domain,
// enabling power to one will enable power to all that are within that
// domain
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICEPE                :  12;    //  Each of the bits is a
                                                 // associated with the propler
                                                 // ICE unit. 0 power to this unit
                                                 // is disabled and the
                                                 // associated PowerUp Reset
                                                 // Enable and Reset Enable are
                                                 // cleared. 1 Enable power to the
                                                 // ICE (or the power domain that
                                                 // includes the ICE)
        uint32_t  RSVD_1               :  16;    //  Reserved field

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPE_t;
#endif
#define IDC_REGS_ICEPE_OFFSET 0x00
#define IDC_REGS_ICEPE_SCOPE 0x01
#define IDC_REGS_ICEPE_SIZE 32
#define IDC_REGS_ICEPE_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPE_RESET 0x00000000

#define IDC_REGS_ICEPE_RSVD_0_LSB 0x0000
#define IDC_REGS_ICEPE_RSVD_0_MSB 0x0003
#define IDC_REGS_ICEPE_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICEPE_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICEPE_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPE_ICEPE_LSB 0x0004
#define IDC_REGS_ICEPE_ICEPE_MSB 0x000f
#define IDC_REGS_ICEPE_ICEPE_RANGE 0x000c
#define IDC_REGS_ICEPE_ICEPE_MASK 0x0000fff0
#define IDC_REGS_ICEPE_ICEPE_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPE_RSVD_1_LSB 0x0010
#define IDC_REGS_ICEPE_RSVD_1_MSB 0x001f
#define IDC_REGS_ICEPE_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICEPE_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICEPE_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICERST_FLAG
#define IDC_REGS_ICERST_FLAG
// ICERST desc:  This register contains a bit per ICE that enables SW to reset a
// specific ICE witouth powering it off.
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICERST               :  12;    //  Each of the bits is a
                                                 // associated with the propler
                                                 // ICE unit. A write of 1 is
                                                 // triggers a reset operation to
                                                 // a powered ICE unit otherwise
                                                 // ignored 0 Ignored. 1 Ice is
                                                 // reset
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICERST_t;
#endif
#define IDC_REGS_ICERST_OFFSET 0x08
#define IDC_REGS_ICERST_SCOPE 0x01
#define IDC_REGS_ICERST_SIZE 32
#define IDC_REGS_ICERST_BITFIELD_COUNT 0x03
#define IDC_REGS_ICERST_RESET 0x00000000

#define IDC_REGS_ICERST_RSVD_0_LSB 0x0000
#define IDC_REGS_ICERST_RSVD_0_MSB 0x0003
#define IDC_REGS_ICERST_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICERST_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICERST_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICERST_ICERST_LSB 0x0004
#define IDC_REGS_ICERST_ICERST_MSB 0x000f
#define IDC_REGS_ICERST_ICERST_RANGE 0x000c
#define IDC_REGS_ICERST_ICERST_MASK 0x0000fff0
#define IDC_REGS_ICERST_ICERST_RESET_VALUE 0x00000000

#define IDC_REGS_ICERST_RSVD_1_LSB 0x0010
#define IDC_REGS_ICERST_RSVD_1_MSB 0x001f
#define IDC_REGS_ICERST_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICERST_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICERST_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICERDY_FLAG
#define IDC_REGS_ICERDY_FLAG
// ICERDY desc:  This register contains a bit per ICE that indicates whether the ICE
// is ready to run. The bit is set by hardwared at the end of the ICE
// power on and reset process. It is cleared by hardware as part of reset
// start or power off sequence. .
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICERDY               :  12;    //  ICE n Ready Status. Each of
                                                 // the bits is a associated with
                                                 // the propler ICE unit. 0 Ice is
                                                 // not ready to run (default). 1
                                                 // Ice is ready to run. SW may
                                                 // write to its registers to
                                                 // configure it and start its
                                                 // execution
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICERDY_t;
#endif
#define IDC_REGS_ICERDY_OFFSET 0x10
#define IDC_REGS_ICERDY_SCOPE 0x01
#define IDC_REGS_ICERDY_SIZE 32
#define IDC_REGS_ICERDY_BITFIELD_COUNT 0x03
#define IDC_REGS_ICERDY_RESET 0x00000000

#define IDC_REGS_ICERDY_RSVD_0_LSB 0x0000
#define IDC_REGS_ICERDY_RSVD_0_MSB 0x0003
#define IDC_REGS_ICERDY_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICERDY_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICERDY_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICERDY_ICERDY_LSB 0x0004
#define IDC_REGS_ICERDY_ICERDY_MSB 0x000f
#define IDC_REGS_ICERDY_ICERDY_RANGE 0x000c
#define IDC_REGS_ICERDY_ICERDY_MASK 0x0000fff0
#define IDC_REGS_ICERDY_ICERDY_RESET_VALUE 0x00000000

#define IDC_REGS_ICERDY_RSVD_1_LSB 0x0010
#define IDC_REGS_ICERDY_RSVD_1_MSB 0x001f
#define IDC_REGS_ICERDY_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICERDY_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICERDY_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------
#ifndef IDC_REGS_ICEMASKSTS_FLAG
#define IDC_REGS_ICEMASKSTS_FLAG
// ICEMASK desc:  This register contains a bit per ICE that disables (mask) specific
// ICE. The values are written the PCU based on fuses via ICEMASC
// register and are visible to SW. Once and ICE is disabled the Enable
// bit is forced to zero
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICEMASK              :  12;    //  ICE n Mask Status Each of the
                                                 // bits is a associated with the
                                                 // propler ICE unit. 0 Ice is
                                                 // enabled in the system. 1 Ice
                                                 // is masked and cant be accessed
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEMASKSTS_t;
#endif
#define IDC_REGS_ICEMASKSTS_OFFSET 0x18
#define IDC_REGS_ICEMASKSTS_SCOPE 0x01
#define IDC_REGS_ICEMASKSTS_SIZE 32
#define IDC_REGS_ICEMASKSTS_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEMASKSTS_RESET 0x00000000

#define IDC_REGS_ICEMASKSTS_RSVD_0_LSB 0x0000
#define IDC_REGS_ICEMASKSTS_RSVD_0_MSB 0x0003
#define IDC_REGS_ICEMASKSTS_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICEMASKSTS_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICEMASKSTS_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICEMASKSTS_ICEMASK_LSB 0x0004
#define IDC_REGS_ICEMASKSTS_ICEMASK_MSB 0x000f
#define IDC_REGS_ICEMASKSTS_ICEMASK_RANGE 0x000c
#define IDC_REGS_ICEMASKSTS_ICEMASK_MASK 0x0000fff0
#define IDC_REGS_ICEMASKSTS_ICEMASK_RESET_VALUE 0x00000000

#define IDC_REGS_ICEMASKSTS_RSVD_1_LSB 0x0010
#define IDC_REGS_ICEMASKSTS_RSVD_1_MSB 0x001f
#define IDC_REGS_ICEMASKSTS_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICEMASKSTS_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICEMASKSTS_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICENOTE_FLAG
#define IDC_REGS_ICENOTE_FLAG
// ICENOTE desc:  This register contains a bit per ICE that controls the sending of
// notifications by the IICS to the ICE. The bit is set by SW and are
// cleared either by a SW write or by HW when the ICE is powered off
// (write of 0 to the respective bit of ICEPE) or reset (a write of 1 to
// the respective bit of ICERST).
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICENOTE              :  12;    //  Each of the bits is a
                                                 // associated with the propler
                                                 // ICE unit. 0 Disable Inter Core
                                                 // Communication notifications
                                                 // messages to the ICE
                                                 // (default). 1 Enable Inter Core
                                                 // Communication notifications
                                                 // messages to the ICE HW to
                                                 // Zero it during powerOFF +
                                                 // reset
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICENOTE_t;
#endif
#define IDC_REGS_ICENOTE_OFFSET 0x20
#define IDC_REGS_ICENOTE_SCOPE 0x01
#define IDC_REGS_ICENOTE_SIZE 32
#define IDC_REGS_ICENOTE_BITFIELD_COUNT 0x03
#define IDC_REGS_ICENOTE_RESET 0x00000000

#define IDC_REGS_ICENOTE_RSVD_0_LSB 0x0000
#define IDC_REGS_ICENOTE_RSVD_0_MSB 0x0003
#define IDC_REGS_ICENOTE_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICENOTE_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICENOTE_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTE_ICENOTE_LSB 0x0004
#define IDC_REGS_ICENOTE_ICENOTE_MSB 0x000f
#define IDC_REGS_ICENOTE_ICENOTE_RANGE 0x000c
#define IDC_REGS_ICENOTE_ICENOTE_MASK 0x0000fff0
#define IDC_REGS_ICENOTE_ICENOTE_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTE_RSVD_1_LSB 0x0010
#define IDC_REGS_ICENOTE_RSVD_1_MSB 0x001f
#define IDC_REGS_ICENOTE_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICENOTE_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICENOTE_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_NOTCLR_FLAG
#define IDC_REGS_NOTCLR_FLAG
// NOTCLR desc:  This register contains a bit per ICE and a bit per IA notification
// event that controls the sending of notifications by the IICS to the
// ICE and IA core. Writing a 1 to a bit in the register clears all
// monitors for notifications to the ICE from a Semaphore or a Counter.
// The bits are used as part of resetting of ICE pools.
typedef union {
    struct {
        uint32_t  IANOTCLR             :   4;    //  IA n Notify Clear Each of the
                                                 // bits is an associated with the
                                                 // proper IA notification Events.
                                                 // 0 Ignore (default). 1 Clear
                                                 // monitor for notification to
                                                 // the ICE by either a Semaphore
                                                 // or a Counter
        uint32_t  ICENOTCLR            :  12;    //  Each of the bits is an
                                                 // associated with the proper ICE
                                                 // unit. 0 Ignore (default). 1
                                                 // Clear monitor for notification
                                                 // to the ICE by either a
                                                 // Semaphore or a Counter
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_NOTCLR_t;
#endif
#define IDC_REGS_NOTCLR_OFFSET 0x28
#define IDC_REGS_NOTCLR_SCOPE 0x01
#define IDC_REGS_NOTCLR_SIZE 32
#define IDC_REGS_NOTCLR_BITFIELD_COUNT 0x03
#define IDC_REGS_NOTCLR_RESET 0x00000000

#define IDC_REGS_NOTCLR_IANOTCLR_LSB 0x0000
#define IDC_REGS_NOTCLR_IANOTCLR_MSB 0x0003
#define IDC_REGS_NOTCLR_IANOTCLR_RANGE 0x0004
#define IDC_REGS_NOTCLR_IANOTCLR_MASK 0x0000000f
#define IDC_REGS_NOTCLR_IANOTCLR_RESET_VALUE 0x00000000

#define IDC_REGS_NOTCLR_ICENOTCLR_LSB 0x0004
#define IDC_REGS_NOTCLR_ICENOTCLR_MSB 0x000f
#define IDC_REGS_NOTCLR_ICENOTCLR_RANGE 0x000c
#define IDC_REGS_NOTCLR_ICENOTCLR_MASK 0x0000fff0
#define IDC_REGS_NOTCLR_ICENOTCLR_RESET_VALUE 0x00000000

#define IDC_REGS_NOTCLR_RSVD_1_LSB 0x0010
#define IDC_REGS_NOTCLR_RSVD_1_MSB 0x001f
#define IDC_REGS_NOTCLR_RSVD_1_RANGE 0x0010
#define IDC_REGS_NOTCLR_RSVD_1_MASK 0xffff0000
#define IDC_REGS_NOTCLR_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEINTST_FLAG
#define IDC_REGS_ICEINTST_FLAG
// ICEINTST desc:  This register contains two bits per ICE that indicates the satatus of
// the ICE interrupt and error interrupt requests. SW can read this
// register to figure out if any of the ICE units has sent an interrupt
// and which one of them. SW must clear the status bits before thandling
// the interrupts
typedef union {
    struct {
        uint64_t  RSVD_2               :   4;    //  Reserved
        uint64_t  MSG_INT              :  12;    //  ICE n Interrupt Request Each
                                                 // of the bits is a associated
                                                 // with the the respectove ICE
                                                 // unit. Read: 0 ICE Interrupt is
                                                 // not pending (default). 1 ICE
                                                 // Interrupt is pending Write : 0
                                                 // Ignored 1 : Clear the bit.
        uint64_t  RSVD_1               :  20;    //  Reserved
        uint64_t  ERR_INT              :  12;    //  ICE n Error Interrupt Request
                                                 // Each of the bits is a
                                                 // associated with the the
                                                 // respectove ICE unit. Read: 0
                                                 // ICE Error Interrupt is not
                                                 // pending (default). 1 ICE Error
                                                 // Interrupt is pending Write : 0
                                                 // Ignored 1 : Clear the bit.
        uint64_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint64_t                         val;
} IDC_REGS_ICEINTST_t;
#endif
#define IDC_REGS_ICEINTST_OFFSET 0x40
#define IDC_REGS_ICEINTST_SCOPE 0x01
#define IDC_REGS_ICEINTST_SIZE 64
#define IDC_REGS_ICEINTST_BITFIELD_COUNT 0x05
#define IDC_REGS_ICEINTST_RESET 0x00000000

#define IDC_REGS_ICEINTST_RSVD_2_LSB 0x0000
#define IDC_REGS_ICEINTST_RSVD_2_MSB 0x0003
#define IDC_REGS_ICEINTST_RSVD_2_RANGE 0x0004
#define IDC_REGS_ICEINTST_RSVD_2_MASK 0x0000000f
#define IDC_REGS_ICEINTST_RSVD_2_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTST_MSG_INT_LSB 0x0004
#define IDC_REGS_ICEINTST_MSG_INT_MSB 0x000f
#define IDC_REGS_ICEINTST_MSG_INT_RANGE 0x000c
#define IDC_REGS_ICEINTST_MSG_INT_MASK 0x0000fff0
#define IDC_REGS_ICEINTST_MSG_INT_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTST_RSVD_1_LSB 0x0010
#define IDC_REGS_ICEINTST_RSVD_1_MSB 0x0023
#define IDC_REGS_ICEINTST_RSVD_1_RANGE 0x0014
#define IDC_REGS_ICEINTST_RSVD_1_MASK 0xfffff0000
#define IDC_REGS_ICEINTST_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTST_ERR_INT_LSB 0x0024
#define IDC_REGS_ICEINTST_ERR_INT_MSB 0x002f
#define IDC_REGS_ICEINTST_ERR_INT_RANGE 0x000c
#define IDC_REGS_ICEINTST_ERR_INT_MASK 0xfff000000000
#define IDC_REGS_ICEINTST_ERR_INT_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTST_RSVD_0_LSB 0x0030
#define IDC_REGS_ICEINTST_RSVD_0_MSB 0x003f
#define IDC_REGS_ICEINTST_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEINTST_RSVD_0_MASK 0xffff000000000000
#define IDC_REGS_ICEINTST_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEINTEN_FLAG
#define IDC_REGS_ICEINTEN_FLAG
// ICEINTEN desc:  This register enables the generation of MSI when any of the bits in .
// ICEINTST is set. This register may be read and written using 32 or 64
// bit operations.
typedef union {
    struct {
        uint64_t  RSVD_2               :   4;    //  Reserved
        uint64_t  MSI_MSG_INT          :  12;    //  Each of the bits is a
                                                 // associated with the the
                                                 // respectove ICE unit. 0 ICE
                                                 // Interrupt is not triggering
                                                 // MSI (default). 1 ICE Interrupt
                                                 // is triggering MSI
        uint64_t  RSVD_1               :  20;    //  Reserved
        uint64_t  MSI_ERR_EN           :  12;    //  Each of the bits is a
                                                 // associated with the the
                                                 // respectove ICE unit. 0 ICE
                                                 // Error Interrupt is not
                                                 // triggering MSI (default). 1
                                                 // ICE Error Interrupt is
                                                 // triggering MSI
        uint64_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint64_t                         val;
} IDC_REGS_ICEINTEN_t;
#endif
#define IDC_REGS_ICEINTEN_OFFSET 0x48
#define IDC_REGS_ICEINTEN_SCOPE 0x01
#define IDC_REGS_ICEINTEN_SIZE 64
#define IDC_REGS_ICEINTEN_BITFIELD_COUNT 0x05
#define IDC_REGS_ICEINTEN_RESET 0x00000000

#define IDC_REGS_ICEINTEN_RSVD_2_LSB 0x0000
#define IDC_REGS_ICEINTEN_RSVD_2_MSB 0x0003
#define IDC_REGS_ICEINTEN_RSVD_2_RANGE 0x0004
#define IDC_REGS_ICEINTEN_RSVD_2_MASK 0x0000000f
#define IDC_REGS_ICEINTEN_RSVD_2_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTEN_MSI_MSG_INT_LSB 0x0004
#define IDC_REGS_ICEINTEN_MSI_MSG_INT_MSB 0x000f
#define IDC_REGS_ICEINTEN_MSI_MSG_INT_RANGE 0x000c
#define IDC_REGS_ICEINTEN_MSI_MSG_INT_MASK 0x0000fff0
#define IDC_REGS_ICEINTEN_MSI_MSG_INT_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTEN_RSVD_1_LSB 0x0010
#define IDC_REGS_ICEINTEN_RSVD_1_MSB 0x0023
#define IDC_REGS_ICEINTEN_RSVD_1_RANGE 0x0014
#define IDC_REGS_ICEINTEN_RSVD_1_MASK 0xfffff0000
#define IDC_REGS_ICEINTEN_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTEN_MSI_ERR_EN_LSB 0x0024
#define IDC_REGS_ICEINTEN_MSI_ERR_EN_MSB 0x002f
#define IDC_REGS_ICEINTEN_MSI_ERR_EN_RANGE 0x000c
#define IDC_REGS_ICEINTEN_MSI_ERR_EN_MASK 0xfff000000000
#define IDC_REGS_ICEINTEN_MSI_ERR_EN_RESET_VALUE 0x00000000

#define IDC_REGS_ICEINTEN_RSVD_0_LSB 0x0030
#define IDC_REGS_ICEINTEN_RSVD_0_MSB 0x003f
#define IDC_REGS_ICEINTEN_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEINTEN_RSVD_0_MASK 0xffff000000000000
#define IDC_REGS_ICEINTEN_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCINTST_FLAG
#define IDC_REGS_IDCINTST_FLAG
// IDCINTST desc:  This register contains status bits that indicate on varius events or
// errors that where detected by the IceDC. SW can read this register to
// figure out which events occurred and handle them. SW must clear the
// status bits before thandling the interrupts. This register may be read
// and written using 32 or 64 bit operations. For all the non reserved
// bits in this register : Read: 0 Event has not occurred and status is
// cleared (default). 1 Event has occurred and status is pending
// handling Write : 0 Ignored 1 : Clear the bit.
typedef union {
    struct {
        uint64_t  ILGACC               :   1;    //  Illigal Acess bus bridge
        uint64_t  ICERERR              :   1;    //  ICERERR: ICE read Error bus
                                                 // bridge
        uint64_t  ICEWERR              :   1;    //  ICERERR ICE Write Error bus
                                                 // bridge
        uint64_t  RSVD_3               :   2;    //  Reserved
        uint64_t  ASF_ICE1_ERR         :   1;    //  Error from ASF Ice1 in a pair
                                                 // indicated error during last
                                                 // power sequence.
        uint64_t  ASF_ICE0_ERR         :   1;    //  Error from ASF Ice0 in a pair
                                                 // indicated error during last
                                                 // power sequence.
        uint64_t  RSVD_2               :   1;    //  Reserved
        uint64_t  ICECNERR             :   1;    //  ICE Counter Error an ICE
                                                 // accessed a counter not
                                                 // associated with it ICCS
        uint64_t  ICESEERR             :   1;    //  ICE Semaphore Error an ICE
                                                 // accessed a semaphores not
                                                 // associated with it ICCS
        uint64_t  ICEARERR             :   1;    //  ICE Attention Request Error
                                                 // an ICE attempted to send a
                                                 // notification to another ICE
                                                 // which is not within its pool
                                                 // ICCS
        uint64_t  CTROVFERR            :   1;    //  one of the counters had an
                                                 // overflow and its OVF IE bit is
                                                 // set.
        uint64_t  RSVD_1               :  20;    //  Reserved
        uint64_t  IACNTNOT             :   4;    //  Counter Value notifaication
                                                 // event to IA. There are 4
                                                 // notifaications that may be
                                                 // set. ICCS
        uint64_t  SEMFREE              :   4;    //  Semaphore Free notifaication
                                                 // event to IA. There are 4
                                                 // notifaications that may be
                                                 // set. ICCS
        uint64_t  RSVD_0               :  24;    //  Reserved

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDCINTST_t;
#endif
#define IDC_REGS_IDCINTST_OFFSET 0x50
#define IDC_REGS_IDCINTST_SCOPE 0x01
#define IDC_REGS_IDCINTST_SIZE 64
#define IDC_REGS_IDCINTST_BITFIELD_COUNT 0x0f
#define IDC_REGS_IDCINTST_RESET 0x00000000

#define IDC_REGS_IDCINTST_ILGACC_LSB 0x0000
#define IDC_REGS_IDCINTST_ILGACC_MSB 0x0000
#define IDC_REGS_IDCINTST_ILGACC_RANGE 0x0001
#define IDC_REGS_IDCINTST_ILGACC_MASK 0x00000001
#define IDC_REGS_IDCINTST_ILGACC_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ICERERR_LSB 0x0001
#define IDC_REGS_IDCINTST_ICERERR_MSB 0x0001
#define IDC_REGS_IDCINTST_ICERERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ICERERR_MASK 0x00000002
#define IDC_REGS_IDCINTST_ICERERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ICEWERR_LSB 0x0002
#define IDC_REGS_IDCINTST_ICEWERR_MSB 0x0002
#define IDC_REGS_IDCINTST_ICEWERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ICEWERR_MASK 0x00000004
#define IDC_REGS_IDCINTST_ICEWERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_RSVD_3_LSB 0x0003
#define IDC_REGS_IDCINTST_RSVD_3_MSB 0x0004
#define IDC_REGS_IDCINTST_RSVD_3_RANGE 0x0002
#define IDC_REGS_IDCINTST_RSVD_3_MASK 0x00000018
#define IDC_REGS_IDCINTST_RSVD_3_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ASF_ICE1_ERR_LSB 0x0005
#define IDC_REGS_IDCINTST_ASF_ICE1_ERR_MSB 0x0005
#define IDC_REGS_IDCINTST_ASF_ICE1_ERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ASF_ICE1_ERR_MASK 0x00000020
#define IDC_REGS_IDCINTST_ASF_ICE1_ERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ASF_ICE0_ERR_LSB 0x0006
#define IDC_REGS_IDCINTST_ASF_ICE0_ERR_MSB 0x0006
#define IDC_REGS_IDCINTST_ASF_ICE0_ERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ASF_ICE0_ERR_MASK 0x00000040
#define IDC_REGS_IDCINTST_ASF_ICE0_ERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_RSVD_2_LSB 0x0007
#define IDC_REGS_IDCINTST_RSVD_2_MSB 0x0007
#define IDC_REGS_IDCINTST_RSVD_2_RANGE 0x0001
#define IDC_REGS_IDCINTST_RSVD_2_MASK 0x00000080
#define IDC_REGS_IDCINTST_RSVD_2_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ICECNERR_LSB 0x0008
#define IDC_REGS_IDCINTST_ICECNERR_MSB 0x0008
#define IDC_REGS_IDCINTST_ICECNERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ICECNERR_MASK 0x00000100
#define IDC_REGS_IDCINTST_ICECNERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ICESEERR_LSB 0x0009
#define IDC_REGS_IDCINTST_ICESEERR_MSB 0x0009
#define IDC_REGS_IDCINTST_ICESEERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ICESEERR_MASK 0x00000200
#define IDC_REGS_IDCINTST_ICESEERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_ICEARERR_LSB 0x000a
#define IDC_REGS_IDCINTST_ICEARERR_MSB 0x000a
#define IDC_REGS_IDCINTST_ICEARERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_ICEARERR_MASK 0x00000400
#define IDC_REGS_IDCINTST_ICEARERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_CTROVFERR_LSB 0x000b
#define IDC_REGS_IDCINTST_CTROVFERR_MSB 0x000b
#define IDC_REGS_IDCINTST_CTROVFERR_RANGE 0x0001
#define IDC_REGS_IDCINTST_CTROVFERR_MASK 0x00000800
#define IDC_REGS_IDCINTST_CTROVFERR_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_RSVD_1_LSB 0x000c
#define IDC_REGS_IDCINTST_RSVD_1_MSB 0x001f
#define IDC_REGS_IDCINTST_RSVD_1_RANGE 0x0014
#define IDC_REGS_IDCINTST_RSVD_1_MASK 0xfffff000
#define IDC_REGS_IDCINTST_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_IACNTNOT_LSB 0x0020
#define IDC_REGS_IDCINTST_IACNTNOT_MSB 0x0023
#define IDC_REGS_IDCINTST_IACNTNOT_RANGE 0x0004
#define IDC_REGS_IDCINTST_IACNTNOT_MASK 0xf00000000
#define IDC_REGS_IDCINTST_IACNTNOT_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_SEMFREE_LSB 0x0024
#define IDC_REGS_IDCINTST_SEMFREE_MSB 0x0027
#define IDC_REGS_IDCINTST_SEMFREE_RANGE 0x0004
#define IDC_REGS_IDCINTST_SEMFREE_MASK 0xf000000000
#define IDC_REGS_IDCINTST_SEMFREE_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTST_RSVD_0_LSB 0x0028
#define IDC_REGS_IDCINTST_RSVD_0_MSB 0x003f
#define IDC_REGS_IDCINTST_RSVD_0_RANGE 0x0018
#define IDC_REGS_IDCINTST_RSVD_0_MASK 0xffffff0000000000
#define IDC_REGS_IDCINTST_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCINTEN_FLAG
#define IDC_REGS_IDCINTEN_FLAG
// IDCINTEN desc:  This register enables the generation of MSI when any of the bits in .
// ICEINTST is set. This register may be read and written using 32 or 64
// bit operations.
typedef union {
    struct {
        uint64_t  EVENT_EN_L           :  12;    //  Event Enable Each of the bits
                                                 // is associated with the the
                                                 // respectove event in IDCINTST.
                                                 // 0 Associated Event does not
                                                 // triggering MSI (default). 1
                                                 // Associated Event is triggering
                                                 // MSI
        uint64_t  RSVD_1               :  20;    //  Reserved
        uint64_t  EVENT_EN_H           :   8;    //  Event Enable Each of the bits
                                                 // is associated with the the
                                                 // respectove event in IDCINTST.
                                                 // 0 Associated Event does not
                                                 // triggering MSI (default). 1
                                                 // Associated Event is triggering
                                                 // MSI
        uint64_t  RSVD_0               :  24;    //  Reserved

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDCINTEN_t;
#endif
#define IDC_REGS_IDCINTEN_OFFSET 0x58
#define IDC_REGS_IDCINTEN_SCOPE 0x01
#define IDC_REGS_IDCINTEN_SIZE 64
#define IDC_REGS_IDCINTEN_BITFIELD_COUNT 0x04
#define IDC_REGS_IDCINTEN_RESET 0x00000000

#define IDC_REGS_IDCINTEN_EVENT_EN_L_LSB 0x0000
#define IDC_REGS_IDCINTEN_EVENT_EN_L_MSB 0x000b
#define IDC_REGS_IDCINTEN_EVENT_EN_L_RANGE 0x000c
#define IDC_REGS_IDCINTEN_EVENT_EN_L_MASK 0x00000fff
#define IDC_REGS_IDCINTEN_EVENT_EN_L_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTEN_RSVD_1_LSB 0x000c
#define IDC_REGS_IDCINTEN_RSVD_1_MSB 0x001f
#define IDC_REGS_IDCINTEN_RSVD_1_RANGE 0x0014
#define IDC_REGS_IDCINTEN_RSVD_1_MASK 0xfffff000
#define IDC_REGS_IDCINTEN_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTEN_EVENT_EN_H_LSB 0x0020
#define IDC_REGS_IDCINTEN_EVENT_EN_H_MSB 0x0027
#define IDC_REGS_IDCINTEN_EVENT_EN_H_RANGE 0x0008
#define IDC_REGS_IDCINTEN_EVENT_EN_H_MASK 0xff00000000
#define IDC_REGS_IDCINTEN_EVENT_EN_H_RESET_VALUE 0x00000000

#define IDC_REGS_IDCINTEN_RSVD_0_LSB 0x0028
#define IDC_REGS_IDCINTEN_RSVD_0_MSB 0x003f
#define IDC_REGS_IDCINTEN_RSVD_0_RANGE 0x0018
#define IDC_REGS_IDCINTEN_RSVD_0_MASK 0xffffff0000000000
#define IDC_REGS_IDCINTEN_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCSPARE_FLAG
#define IDC_REGS_IDCSPARE_FLAG
// IDCSPARE desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint64_t  IDCDBG               :   1;    //  This bit is a R/W bit used as
                                                 // indication between Debugger
                                                 // and ICE Driver to provide
                                                 // indication save restore
                                                 // operations
        uint64_t  RSVD                 :  63;    //  Reserved

    }                                field;
    uint64_t                         val;
} IDC_REGS_IDCSPARE_t;
#endif
#define IDC_REGS_IDCSPARE_OFFSET 0x60
#define IDC_REGS_IDCSPARE_SCOPE 0x01
#define IDC_REGS_IDCSPARE_SIZE 64
#define IDC_REGS_IDCSPARE_BITFIELD_COUNT 0x02
#define IDC_REGS_IDCSPARE_RESET 0x00000000

#define IDC_REGS_IDCSPARE_IDCDBG_LSB 0x0000
#define IDC_REGS_IDCSPARE_IDCDBG_MSB 0x0000
#define IDC_REGS_IDCSPARE_IDCDBG_RANGE 0x0001
#define IDC_REGS_IDCSPARE_IDCDBG_MASK 0x00000001
#define IDC_REGS_IDCSPARE_IDCDBG_RESET_VALUE 0x00000000

#define IDC_REGS_IDCSPARE_RSVD_LSB 0x0001
#define IDC_REGS_IDCSPARE_RSVD_MSB 0x003f
#define IDC_REGS_IDCSPARE_RSVD_RANGE 0x003f
#define IDC_REGS_IDCSPARE_RSVD_MASK 0xfffffffffffffffe
#define IDC_REGS_IDCSPARE_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCD0I3C_FLAG
#define IDC_REGS_IDCD0I3C_FLAG
// IDCD0I3C desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   CIP                  :   1;    //  Command-In-Progress. This bit
                                                 // is set by HW when a transition
                                                 // into or out of D0i3 command is
                                                 // received (a change 0->1 or 1
                                                 // ->0 on D0i3 bit). The bit is
                                                 // changed to 0 when enter/exit
                                                 // to/from D0i3 is completed.
                                                 // While set, the other bits in
                                                 // this register are not valid
                                                 // and it is illegal for SW to
                                                 // write to any bit in this
                                                 // register. When clear all the
                                                 // other bits in the register are
                                                 // valid and SW may write to any
                                                 // bit. If Interrupt Request bit
                                                 // [1] was set for the current
                                                 // command, HW may clear this bit
                                                 // before the interrupt has been
                                                 // made visible to SW, since when
                                                 // SW actually handles a
                                                 // particular interrupt is not
                                                 // visible to the HW. SW writes
                                                 // to this bit have no effect.
        uint8_t   INTERRUPT            :   1;    //  Interrupt Request. SW sets
                                                 // this bit to 1 to ask for an
                                                 // interrupt to be generated on
                                                 // completion of the command. SW
                                                 // must clear or set this on each
                                                 // write to this register. 0:
                                                 // interrupt will not be
                                                 // generated 1: interrupt will be
                                                 // generated on the transition of
                                                 // 1-> 0 of the Command In
                                                 // Progress bit.
        uint8_t   D0I3                 :   1;    //  SW sets this bit to 1 to move
                                                 // the IP into the D0i3 state.
                                                 // Writing this bit to 0 will
                                                 // return the IP to the fully
                                                 // active D0 state (D0i0).
        uint8_t   RESTORE              :   1;    //  Restore Required. Indicates
                                                 // the validity of the MMIO space
                                                 // registers and the need to
                                                 // restore them. The state may
                                                 // have been lost due to a reset
                                                 // or a full power lost. SW
                                                 // clears the bit by writing a 1.
                                                 // This bit will be set on
                                                 // initial power up. Read: 0 no
                                                 // restore is require 1: set by
                                                 // HW to indicate that a restore
                                                 // of state is required due to
                                                 // power loss. Write: 0: ignored
                                                 // 1: clear the bit When set (by
                                                 // HW), SW must restore state to
                                                 // the IP. Change to 1 during
                                                 // DOI3 by HW ONCE BIT 2 CHANGE
                                                 // FROM 1->0
        uint8_t   RSVD                 :   4;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_IDCD0I3C_t;
#endif
#define IDC_REGS_IDCD0I3C_OFFSET 0xa8
#define IDC_REGS_IDCD0I3C_SCOPE 0x01
#define IDC_REGS_IDCD0I3C_SIZE 8
#define IDC_REGS_IDCD0I3C_BITFIELD_COUNT 0x05
#define IDC_REGS_IDCD0I3C_RESET 0x00000000

#define IDC_REGS_IDCD0I3C_CIP_LSB 0x0000
#define IDC_REGS_IDCD0I3C_CIP_MSB 0x0000
#define IDC_REGS_IDCD0I3C_CIP_RANGE 0x0001
#define IDC_REGS_IDCD0I3C_CIP_MASK 0x00000001
#define IDC_REGS_IDCD0I3C_CIP_RESET_VALUE 0x00000000

#define IDC_REGS_IDCD0I3C_INTERRUPT_LSB 0x0001
#define IDC_REGS_IDCD0I3C_INTERRUPT_MSB 0x0001
#define IDC_REGS_IDCD0I3C_INTERRUPT_RANGE 0x0001
#define IDC_REGS_IDCD0I3C_INTERRUPT_MASK 0x00000002
#define IDC_REGS_IDCD0I3C_INTERRUPT_RESET_VALUE 0x00000000

#define IDC_REGS_IDCD0I3C_D0I3_LSB 0x0002
#define IDC_REGS_IDCD0I3C_D0I3_MSB 0x0002
#define IDC_REGS_IDCD0I3C_D0I3_RANGE 0x0001
#define IDC_REGS_IDCD0I3C_D0I3_MASK 0x00000004
#define IDC_REGS_IDCD0I3C_D0I3_RESET_VALUE 0x00000000

#define IDC_REGS_IDCD0I3C_RESTORE_LSB 0x0003
#define IDC_REGS_IDCD0I3C_RESTORE_MSB 0x0003
#define IDC_REGS_IDCD0I3C_RESTORE_RANGE 0x0001
#define IDC_REGS_IDCD0I3C_RESTORE_MASK 0x00000008
#define IDC_REGS_IDCD0I3C_RESTORE_RESET_VALUE 0x00000000

#define IDC_REGS_IDCD0I3C_RSVD_LSB 0x0004
#define IDC_REGS_IDCD0I3C_RSVD_MSB 0x0007
#define IDC_REGS_IDCD0I3C_RSVD_RANGE 0x0004
#define IDC_REGS_IDCD0I3C_RSVD_MASK 0x000000f0
#define IDC_REGS_IDCD0I3C_RSVD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL0_FLAG
#define IDC_REGS_ICEPOOL0_FLAG
// ICEPOOL0 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL0_t;
#endif
#define IDC_REGS_ICEPOOL0_OFFSET 0x00
#define IDC_REGS_ICEPOOL0_SCOPE 0x01
#define IDC_REGS_ICEPOOL0_SIZE 32
#define IDC_REGS_ICEPOOL0_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL0_RESET 0x00000000

#define IDC_REGS_ICEPOOL0_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL0_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL0_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL0_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL0_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL0_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL0_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL0_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL0_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL0_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL0_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL0_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL0_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL0_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL0_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL1_FLAG
#define IDC_REGS_ICEPOOL1_FLAG
// ICEPOOL1 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL1_t;
#endif
#define IDC_REGS_ICEPOOL1_OFFSET 0x08
#define IDC_REGS_ICEPOOL1_SCOPE 0x01
#define IDC_REGS_ICEPOOL1_SIZE 32
#define IDC_REGS_ICEPOOL1_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL1_RESET 0x00000000

#define IDC_REGS_ICEPOOL1_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL1_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL1_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL1_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL1_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL1_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL1_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL1_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL1_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL1_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL1_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL1_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL1_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL1_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL1_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL2_FLAG
#define IDC_REGS_ICEPOOL2_FLAG
// ICEPOOL2 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL2_t;
#endif
#define IDC_REGS_ICEPOOL2_OFFSET 0x10
#define IDC_REGS_ICEPOOL2_SCOPE 0x01
#define IDC_REGS_ICEPOOL2_SIZE 32
#define IDC_REGS_ICEPOOL2_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL2_RESET 0x00000000

#define IDC_REGS_ICEPOOL2_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL2_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL2_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL2_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL2_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL2_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL2_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL2_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL2_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL2_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL2_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL2_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL2_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL2_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL2_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL3_FLAG
#define IDC_REGS_ICEPOOL3_FLAG
// ICEPOOL3 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL3_t;
#endif
#define IDC_REGS_ICEPOOL3_OFFSET 0x18
#define IDC_REGS_ICEPOOL3_SCOPE 0x01
#define IDC_REGS_ICEPOOL3_SIZE 32
#define IDC_REGS_ICEPOOL3_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL3_RESET 0x00000000

#define IDC_REGS_ICEPOOL3_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL3_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL3_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL3_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL3_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL3_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL3_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL3_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL3_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL3_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL3_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL3_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL3_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL3_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL3_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL4_FLAG
#define IDC_REGS_ICEPOOL4_FLAG
// ICEPOOL4 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL4_t;
#endif
#define IDC_REGS_ICEPOOL4_OFFSET 0x20
#define IDC_REGS_ICEPOOL4_SCOPE 0x01
#define IDC_REGS_ICEPOOL4_SIZE 32
#define IDC_REGS_ICEPOOL4_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL4_RESET 0x00000000

#define IDC_REGS_ICEPOOL4_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL4_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL4_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL4_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL4_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL4_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL4_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL4_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL4_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL4_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL4_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL4_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL4_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL4_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL4_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEPOOL5_FLAG
#define IDC_REGS_ICEPOOL5_FLAG
// ICEPOOL5 desc:  ICE i associted with Pool. Each bit control the association of the
// respecite ICE to the pool with bit 15 associated with ICE 15 and bit 4
// associated with ICE4.
typedef union {
    struct {
        uint32_t  RSVD_1               :   4;    //  Reserved
        uint32_t  ICEPOOL              :  12;    //  ICE i associted with Pool.
                                                 // Each bit control the
                                                 // association of the respecite
                                                 // ICE to the pool with bit 15
                                                 // associated with ICE 15 and bit
                                                 // 4 associated with ICE4. 0 Ice
                                                 // n not associated with the
                                                 // pool. 1 - Ice n is associated
                                                 // with the pool.
        uint32_t  RSVD_0               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEPOOL5_t;
#endif
#define IDC_REGS_ICEPOOL5_OFFSET 0x28
#define IDC_REGS_ICEPOOL5_SCOPE 0x01
#define IDC_REGS_ICEPOOL5_SIZE 32
#define IDC_REGS_ICEPOOL5_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEPOOL5_RESET 0x00000000

#define IDC_REGS_ICEPOOL5_RSVD_1_LSB 0x0000
#define IDC_REGS_ICEPOOL5_RSVD_1_MSB 0x0003
#define IDC_REGS_ICEPOOL5_RSVD_1_RANGE 0x0004
#define IDC_REGS_ICEPOOL5_RSVD_1_MASK 0x0000000f
#define IDC_REGS_ICEPOOL5_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL5_ICEPOOL_LSB 0x0004
#define IDC_REGS_ICEPOOL5_ICEPOOL_MSB 0x000f
#define IDC_REGS_ICEPOOL5_ICEPOOL_RANGE 0x000c
#define IDC_REGS_ICEPOOL5_ICEPOOL_MASK 0x0000fff0
#define IDC_REGS_ICEPOOL5_ICEPOOL_RESET_VALUE 0x00000000

#define IDC_REGS_ICEPOOL5_RSVD_0_LSB 0x0010
#define IDC_REGS_ICEPOOL5_RSVD_0_MSB 0x001f
#define IDC_REGS_ICEPOOL5_RSVD_0_RANGE 0x0010
#define IDC_REGS_ICEPOOL5_RSVD_0_MASK 0xffff0000
#define IDC_REGS_ICEPOOL5_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICENOTA0_FLAG
#define IDC_REGS_ICENOTA0_FLAG
// ICENOTA0 desc:  Notification Address. The address to which notifications that use
// this ICENOTAn are written to. Bits 17:2 of the address send are taken
// from this field, bits 1:0 are alwasys zero. 0000 notification using
// this ICENOTAn is disabled. Other send a posted message to this
// address
typedef union {
    struct {
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  ICENOTA              :  16;    //  Notification Address. The
                                                 // address to which notifications
                                                 // that use this ICENOTAn are
                                                 // written to. Bits 17:2 of the
                                                 // address send are taken from
                                                 // this field, bits 1:0 are
                                                 // alwasys zero. 0000
                                                 // notification using this
                                                 // ICENOTAn is disabled. Other
                                                 // send a posted message to this
                                                 // address
        uint32_t  RSVD_0               :  14;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICENOTA0_t;
#endif
#define IDC_REGS_ICENOTA0_OFFSET 0x40
#define IDC_REGS_ICENOTA0_SCOPE 0x01
#define IDC_REGS_ICENOTA0_SIZE 32
#define IDC_REGS_ICENOTA0_BITFIELD_COUNT 0x03
#define IDC_REGS_ICENOTA0_RESET 0x00000000

#define IDC_REGS_ICENOTA0_RSVD_1_LSB 0x0000
#define IDC_REGS_ICENOTA0_RSVD_1_MSB 0x0001
#define IDC_REGS_ICENOTA0_RSVD_1_RANGE 0x0002
#define IDC_REGS_ICENOTA0_RSVD_1_MASK 0x00000003
#define IDC_REGS_ICENOTA0_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA0_ICENOTA_LSB 0x0002
#define IDC_REGS_ICENOTA0_ICENOTA_MSB 0x0011
#define IDC_REGS_ICENOTA0_ICENOTA_RANGE 0x0010
#define IDC_REGS_ICENOTA0_ICENOTA_MASK 0x0003fffc
#define IDC_REGS_ICENOTA0_ICENOTA_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA0_RSVD_0_LSB 0x0012
#define IDC_REGS_ICENOTA0_RSVD_0_MSB 0x001f
#define IDC_REGS_ICENOTA0_RSVD_0_RANGE 0x000e
#define IDC_REGS_ICENOTA0_RSVD_0_MASK 0xfffc0000
#define IDC_REGS_ICENOTA0_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICENOTA1_FLAG
#define IDC_REGS_ICENOTA1_FLAG
// ICENOTA1 desc:  Notification Address. The address to which notifications that use
// this ICENOTAn are written to. Bits 17:2 of the address send are taken
// from this field, bits 1:0 are alwasys zero. 0000 notification using
// this ICENOTAn is disabled. Other send a posted message to this
// address
typedef union {
    struct {
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  ICENOTA              :  16;    //  Notification Address. The
                                                 // address to which notifications
                                                 // that use this ICENOTAn are
                                                 // written to. Bits 17:2 of the
                                                 // address send are taken from
                                                 // this field, bits 1:0 are
                                                 // alwasys zero. 0000
                                                 // notification using this
                                                 // ICENOTAn is disabled. Other
                                                 // send a posted message to this
                                                 // address
        uint32_t  RSVD_0               :  14;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICENOTA1_t;
#endif
#define IDC_REGS_ICENOTA1_OFFSET 0x48
#define IDC_REGS_ICENOTA1_SCOPE 0x01
#define IDC_REGS_ICENOTA1_SIZE 32
#define IDC_REGS_ICENOTA1_BITFIELD_COUNT 0x03
#define IDC_REGS_ICENOTA1_RESET 0x00000000

#define IDC_REGS_ICENOTA1_RSVD_1_LSB 0x0000
#define IDC_REGS_ICENOTA1_RSVD_1_MSB 0x0001
#define IDC_REGS_ICENOTA1_RSVD_1_RANGE 0x0002
#define IDC_REGS_ICENOTA1_RSVD_1_MASK 0x00000003
#define IDC_REGS_ICENOTA1_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA1_ICENOTA_LSB 0x0002
#define IDC_REGS_ICENOTA1_ICENOTA_MSB 0x0011
#define IDC_REGS_ICENOTA1_ICENOTA_RANGE 0x0010
#define IDC_REGS_ICENOTA1_ICENOTA_MASK 0x0003fffc
#define IDC_REGS_ICENOTA1_ICENOTA_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA1_RSVD_0_LSB 0x0012
#define IDC_REGS_ICENOTA1_RSVD_0_MSB 0x001f
#define IDC_REGS_ICENOTA1_RSVD_0_RANGE 0x000e
#define IDC_REGS_ICENOTA1_RSVD_0_MASK 0xfffc0000
#define IDC_REGS_ICENOTA1_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICENOTA2_FLAG
#define IDC_REGS_ICENOTA2_FLAG
// ICENOTA2 desc:  Notification Address. The address to which notifications that use
// this ICENOTAn are written to. Bits 17:2 of the address send are taken
// from this field, bits 1:0 are alwasys zero. 0000 notification using
// this ICENOTAn is disabled. Other send a posted message to this
// address
typedef union {
    struct {
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  ICENOTA              :  16;    //  Notification Address. The
                                                 // address to which notifications
                                                 // that use this ICENOTAn are
                                                 // written to. Bits 17:2 of the
                                                 // address send are taken from
                                                 // this field, bits 1:0 are
                                                 // alwasys zero. 0000
                                                 // notification using this
                                                 // ICENOTAn is disabled. Other
                                                 // send a posted message to this
                                                 // address
        uint32_t  RSVD_0               :  14;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICENOTA2_t;
#endif
#define IDC_REGS_ICENOTA2_OFFSET 0x50
#define IDC_REGS_ICENOTA2_SCOPE 0x01
#define IDC_REGS_ICENOTA2_SIZE 32
#define IDC_REGS_ICENOTA2_BITFIELD_COUNT 0x03
#define IDC_REGS_ICENOTA2_RESET 0x00000000

#define IDC_REGS_ICENOTA2_RSVD_1_LSB 0x0000
#define IDC_REGS_ICENOTA2_RSVD_1_MSB 0x0001
#define IDC_REGS_ICENOTA2_RSVD_1_RANGE 0x0002
#define IDC_REGS_ICENOTA2_RSVD_1_MASK 0x00000003
#define IDC_REGS_ICENOTA2_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA2_ICENOTA_LSB 0x0002
#define IDC_REGS_ICENOTA2_ICENOTA_MSB 0x0011
#define IDC_REGS_ICENOTA2_ICENOTA_RANGE 0x0010
#define IDC_REGS_ICENOTA2_ICENOTA_MASK 0x0003fffc
#define IDC_REGS_ICENOTA2_ICENOTA_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA2_RSVD_0_LSB 0x0012
#define IDC_REGS_ICENOTA2_RSVD_0_MSB 0x001f
#define IDC_REGS_ICENOTA2_RSVD_0_RANGE 0x000e
#define IDC_REGS_ICENOTA2_RSVD_0_MASK 0xfffc0000
#define IDC_REGS_ICENOTA2_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICENOTA3_FLAG
#define IDC_REGS_ICENOTA3_FLAG
// ICENOTA3 desc:  Notification Address. The address to which notifications that use
// this ICENOTAn are written to. Bits 17:2 of the address send are taken
// from this field, bits 1:0 are alwasys zero. 0000 notification using
// this ICENOTAn is disabled. Other send a posted message to this
// address
typedef union {
    struct {
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  ICENOTA              :  16;    //  Notification Address. The
                                                 // address to which notifications
                                                 // that use this ICENOTAn are
                                                 // written to. Bits 17:2 of the
                                                 // address send are taken from
                                                 // this field, bits 1:0 are
                                                 // alwasys zero. 0000
                                                 // notification using this
                                                 // ICENOTAn is disabled. Other
                                                 // send a posted message to this
                                                 // address
        uint32_t  RSVD_0               :  14;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICENOTA3_t;
#endif
#define IDC_REGS_ICENOTA3_OFFSET 0x58
#define IDC_REGS_ICENOTA3_SCOPE 0x01
#define IDC_REGS_ICENOTA3_SIZE 32
#define IDC_REGS_ICENOTA3_BITFIELD_COUNT 0x03
#define IDC_REGS_ICENOTA3_RESET 0x00000000

#define IDC_REGS_ICENOTA3_RSVD_1_LSB 0x0000
#define IDC_REGS_ICENOTA3_RSVD_1_MSB 0x0001
#define IDC_REGS_ICENOTA3_RSVD_1_RANGE 0x0002
#define IDC_REGS_ICENOTA3_RSVD_1_MASK 0x00000003
#define IDC_REGS_ICENOTA3_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA3_ICENOTA_LSB 0x0002
#define IDC_REGS_ICENOTA3_ICENOTA_MSB 0x0011
#define IDC_REGS_ICENOTA3_ICENOTA_RANGE 0x0010
#define IDC_REGS_ICENOTA3_ICENOTA_MASK 0x0003fffc
#define IDC_REGS_ICENOTA3_ICENOTA_RESET_VALUE 0x00000000

#define IDC_REGS_ICENOTA3_RSVD_0_LSB 0x0012
#define IDC_REGS_ICENOTA3_RSVD_0_MSB 0x001f
#define IDC_REGS_ICENOTA3_RSVD_0_RANGE 0x000e
#define IDC_REGS_ICENOTA3_RSVD_0_MASK 0xfffc0000
#define IDC_REGS_ICENOTA3_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA0_FLAG
#define IDC_REGS_EVCTIA0_FLAG
// EVCTIA0 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA0_t;
#endif
#define IDC_REGS_EVCTIA0_OFFSET 0x00
#define IDC_REGS_EVCTIA0_SCOPE 0x01
#define IDC_REGS_EVCTIA0_SIZE 32
#define IDC_REGS_EVCTIA0_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA0_RESET 0x00000000

#define IDC_REGS_EVCTIA0_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA0_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA0_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA0_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA0_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA0_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA0_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA0_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC0_FLAG
#define IDC_REGS_EVCTIAINC0_FLAG
// EVCTIAINC0 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC0_t;
#endif
#define IDC_REGS_EVCTIAINC0_OFFSET 0x08
#define IDC_REGS_EVCTIAINC0_SCOPE 0x01
#define IDC_REGS_EVCTIAINC0_SIZE 32
#define IDC_REGS_EVCTIAINC0_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC0_RESET 0x00000000

#define IDC_REGS_EVCTIAINC0_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC0_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC0_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC0_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC0_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC0_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC0_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC0_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT0_FLAG
#define IDC_REGS_EVCTPROT0_FLAG
// EVCTPROT0 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT0_t;
#endif
#define IDC_REGS_EVCTPROT0_OFFSET 0x10
#define IDC_REGS_EVCTPROT0_SCOPE 0x01
#define IDC_REGS_EVCTPROT0_SIZE 32
#define IDC_REGS_EVCTPROT0_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT0_RESET 0x00000000

#define IDC_REGS_EVCTPROT0_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT0_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT0_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT0_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT0_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT0_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT0_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT0_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT0_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT0_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT0_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT0_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT0_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT0_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT0_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT0_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT0_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT0_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT0_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT0_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT0_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT0_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT0_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT0_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA1_FLAG
#define IDC_REGS_EVCTIA1_FLAG
// EVCTIA1 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA1_t;
#endif
#define IDC_REGS_EVCTIA1_OFFSET 0x20
#define IDC_REGS_EVCTIA1_SCOPE 0x01
#define IDC_REGS_EVCTIA1_SIZE 32
#define IDC_REGS_EVCTIA1_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA1_RESET 0x00000000

#define IDC_REGS_EVCTIA1_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA1_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA1_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA1_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA1_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA1_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA1_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA1_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC1_FLAG
#define IDC_REGS_EVCTIAINC1_FLAG
// EVCTIAINC1 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC1_t;
#endif
#define IDC_REGS_EVCTIAINC1_OFFSET 0x28
#define IDC_REGS_EVCTIAINC1_SCOPE 0x01
#define IDC_REGS_EVCTIAINC1_SIZE 32
#define IDC_REGS_EVCTIAINC1_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC1_RESET 0x00000000

#define IDC_REGS_EVCTIAINC1_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC1_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC1_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC1_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC1_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC1_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC1_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC1_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT1_FLAG
#define IDC_REGS_EVCTPROT1_FLAG
// EVCTPROT1 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT1_t;
#endif
#define IDC_REGS_EVCTPROT1_OFFSET 0x30
#define IDC_REGS_EVCTPROT1_SCOPE 0x01
#define IDC_REGS_EVCTPROT1_SIZE 32
#define IDC_REGS_EVCTPROT1_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT1_RESET 0x00000000

#define IDC_REGS_EVCTPROT1_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT1_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT1_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT1_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT1_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT1_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT1_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT1_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT1_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT1_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT1_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT1_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT1_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT1_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT1_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT1_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT1_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT1_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT1_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT1_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT1_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT1_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT1_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT1_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA2_FLAG
#define IDC_REGS_EVCTIA2_FLAG
// EVCTIA2 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA2_t;
#endif
#define IDC_REGS_EVCTIA2_OFFSET 0x40
#define IDC_REGS_EVCTIA2_SCOPE 0x01
#define IDC_REGS_EVCTIA2_SIZE 32
#define IDC_REGS_EVCTIA2_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA2_RESET 0x00000000

#define IDC_REGS_EVCTIA2_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA2_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA2_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA2_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA2_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA2_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA2_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA2_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC2_FLAG
#define IDC_REGS_EVCTIAINC2_FLAG
// EVCTIAINC2 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC2_t;
#endif
#define IDC_REGS_EVCTIAINC2_OFFSET 0x48
#define IDC_REGS_EVCTIAINC2_SCOPE 0x01
#define IDC_REGS_EVCTIAINC2_SIZE 32
#define IDC_REGS_EVCTIAINC2_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC2_RESET 0x00000000

#define IDC_REGS_EVCTIAINC2_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC2_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC2_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC2_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC2_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC2_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC2_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC2_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT2_FLAG
#define IDC_REGS_EVCTPROT2_FLAG
// EVCTPROT2 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT2_t;
#endif
#define IDC_REGS_EVCTPROT2_OFFSET 0x50
#define IDC_REGS_EVCTPROT2_SCOPE 0x01
#define IDC_REGS_EVCTPROT2_SIZE 32
#define IDC_REGS_EVCTPROT2_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT2_RESET 0x00000000

#define IDC_REGS_EVCTPROT2_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT2_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT2_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT2_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT2_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT2_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT2_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT2_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT2_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT2_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT2_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT2_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT2_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT2_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT2_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT2_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT2_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT2_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT2_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT2_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT2_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT2_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT2_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT2_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA3_FLAG
#define IDC_REGS_EVCTIA3_FLAG
// EVCTIA3 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA3_t;
#endif
#define IDC_REGS_EVCTIA3_OFFSET 0x60
#define IDC_REGS_EVCTIA3_SCOPE 0x01
#define IDC_REGS_EVCTIA3_SIZE 32
#define IDC_REGS_EVCTIA3_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA3_RESET 0x00000000

#define IDC_REGS_EVCTIA3_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA3_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA3_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA3_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA3_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA3_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA3_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA3_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC3_FLAG
#define IDC_REGS_EVCTIAINC3_FLAG
// EVCTIAINC3 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC3_t;
#endif
#define IDC_REGS_EVCTIAINC3_OFFSET 0x68
#define IDC_REGS_EVCTIAINC3_SCOPE 0x01
#define IDC_REGS_EVCTIAINC3_SIZE 32
#define IDC_REGS_EVCTIAINC3_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC3_RESET 0x00000000

#define IDC_REGS_EVCTIAINC3_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC3_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC3_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC3_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC3_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC3_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC3_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC3_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT3_FLAG
#define IDC_REGS_EVCTPROT3_FLAG
// EVCTPROT3 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT3_t;
#endif
#define IDC_REGS_EVCTPROT3_OFFSET 0x70
#define IDC_REGS_EVCTPROT3_SCOPE 0x01
#define IDC_REGS_EVCTPROT3_SIZE 32
#define IDC_REGS_EVCTPROT3_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT3_RESET 0x00000000

#define IDC_REGS_EVCTPROT3_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT3_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT3_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT3_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT3_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT3_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT3_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT3_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT3_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT3_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT3_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT3_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT3_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT3_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT3_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT3_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT3_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT3_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT3_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT3_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT3_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT3_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT3_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT3_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA4_FLAG
#define IDC_REGS_EVCTIA4_FLAG
// EVCTIA4 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA4_t;
#endif
#define IDC_REGS_EVCTIA4_OFFSET 0x80
#define IDC_REGS_EVCTIA4_SCOPE 0x01
#define IDC_REGS_EVCTIA4_SIZE 32
#define IDC_REGS_EVCTIA4_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA4_RESET 0x00000000

#define IDC_REGS_EVCTIA4_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA4_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA4_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA4_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA4_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA4_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA4_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA4_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC4_FLAG
#define IDC_REGS_EVCTIAINC4_FLAG
// EVCTIAINC4 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC4_t;
#endif
#define IDC_REGS_EVCTIAINC4_OFFSET 0x88
#define IDC_REGS_EVCTIAINC4_SCOPE 0x01
#define IDC_REGS_EVCTIAINC4_SIZE 32
#define IDC_REGS_EVCTIAINC4_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC4_RESET 0x00000000

#define IDC_REGS_EVCTIAINC4_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC4_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC4_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC4_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC4_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC4_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC4_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC4_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT4_FLAG
#define IDC_REGS_EVCTPROT4_FLAG
// EVCTPROT4 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT4_t;
#endif
#define IDC_REGS_EVCTPROT4_OFFSET 0x90
#define IDC_REGS_EVCTPROT4_SCOPE 0x01
#define IDC_REGS_EVCTPROT4_SIZE 32
#define IDC_REGS_EVCTPROT4_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT4_RESET 0x00000000

#define IDC_REGS_EVCTPROT4_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT4_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT4_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT4_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT4_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT4_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT4_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT4_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT4_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT4_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT4_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT4_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT4_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT4_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT4_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT4_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT4_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT4_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT4_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT4_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT4_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT4_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT4_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT4_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA5_FLAG
#define IDC_REGS_EVCTIA5_FLAG
// EVCTIA5 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA5_t;
#endif
#define IDC_REGS_EVCTIA5_OFFSET 0xa0
#define IDC_REGS_EVCTIA5_SCOPE 0x01
#define IDC_REGS_EVCTIA5_SIZE 32
#define IDC_REGS_EVCTIA5_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA5_RESET 0x00000000

#define IDC_REGS_EVCTIA5_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA5_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA5_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA5_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA5_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA5_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA5_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA5_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC5_FLAG
#define IDC_REGS_EVCTIAINC5_FLAG
// EVCTIAINC5 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC5_t;
#endif
#define IDC_REGS_EVCTIAINC5_OFFSET 0xa8
#define IDC_REGS_EVCTIAINC5_SCOPE 0x01
#define IDC_REGS_EVCTIAINC5_SIZE 32
#define IDC_REGS_EVCTIAINC5_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC5_RESET 0x00000000

#define IDC_REGS_EVCTIAINC5_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC5_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC5_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC5_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC5_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC5_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC5_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC5_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT5_FLAG
#define IDC_REGS_EVCTPROT5_FLAG
// EVCTPROT5 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT5_t;
#endif
#define IDC_REGS_EVCTPROT5_OFFSET 0xb0
#define IDC_REGS_EVCTPROT5_SCOPE 0x01
#define IDC_REGS_EVCTPROT5_SIZE 32
#define IDC_REGS_EVCTPROT5_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT5_RESET 0x00000000

#define IDC_REGS_EVCTPROT5_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT5_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT5_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT5_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT5_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT5_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT5_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT5_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT5_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT5_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT5_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT5_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT5_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT5_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT5_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT5_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT5_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT5_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT5_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT5_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT5_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT5_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT5_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT5_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA6_FLAG
#define IDC_REGS_EVCTIA6_FLAG
// EVCTIA6 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA6_t;
#endif
#define IDC_REGS_EVCTIA6_OFFSET 0xc0
#define IDC_REGS_EVCTIA6_SCOPE 0x01
#define IDC_REGS_EVCTIA6_SIZE 32
#define IDC_REGS_EVCTIA6_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA6_RESET 0x00000000

#define IDC_REGS_EVCTIA6_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA6_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA6_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA6_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA6_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA6_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA6_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA6_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC6_FLAG
#define IDC_REGS_EVCTIAINC6_FLAG
// EVCTIAINC6 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC6_t;
#endif
#define IDC_REGS_EVCTIAINC6_OFFSET 0xc8
#define IDC_REGS_EVCTIAINC6_SCOPE 0x01
#define IDC_REGS_EVCTIAINC6_SIZE 32
#define IDC_REGS_EVCTIAINC6_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC6_RESET 0x00000000

#define IDC_REGS_EVCTIAINC6_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC6_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC6_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC6_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC6_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC6_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC6_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC6_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT6_FLAG
#define IDC_REGS_EVCTPROT6_FLAG
// EVCTPROT6 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT6_t;
#endif
#define IDC_REGS_EVCTPROT6_OFFSET 0xd0
#define IDC_REGS_EVCTPROT6_SCOPE 0x01
#define IDC_REGS_EVCTPROT6_SIZE 32
#define IDC_REGS_EVCTPROT6_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT6_RESET 0x00000000

#define IDC_REGS_EVCTPROT6_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT6_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT6_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT6_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT6_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT6_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT6_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT6_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT6_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT6_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT6_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT6_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT6_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT6_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT6_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT6_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT6_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT6_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT6_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT6_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT6_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT6_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT6_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT6_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA7_FLAG
#define IDC_REGS_EVCTIA7_FLAG
// EVCTIA7 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA7_t;
#endif
#define IDC_REGS_EVCTIA7_OFFSET 0xe0
#define IDC_REGS_EVCTIA7_SCOPE 0x01
#define IDC_REGS_EVCTIA7_SIZE 32
#define IDC_REGS_EVCTIA7_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA7_RESET 0x00000000

#define IDC_REGS_EVCTIA7_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA7_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA7_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA7_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA7_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA7_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA7_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA7_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC7_FLAG
#define IDC_REGS_EVCTIAINC7_FLAG
// EVCTIAINC7 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC7_t;
#endif
#define IDC_REGS_EVCTIAINC7_OFFSET 0xe8
#define IDC_REGS_EVCTIAINC7_SCOPE 0x01
#define IDC_REGS_EVCTIAINC7_SIZE 32
#define IDC_REGS_EVCTIAINC7_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC7_RESET 0x00000000

#define IDC_REGS_EVCTIAINC7_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC7_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC7_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC7_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC7_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC7_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC7_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC7_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT7_FLAG
#define IDC_REGS_EVCTPROT7_FLAG
// EVCTPROT7 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT7_t;
#endif
#define IDC_REGS_EVCTPROT7_OFFSET 0xf0
#define IDC_REGS_EVCTPROT7_SCOPE 0x01
#define IDC_REGS_EVCTPROT7_SIZE 32
#define IDC_REGS_EVCTPROT7_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT7_RESET 0x00000000

#define IDC_REGS_EVCTPROT7_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT7_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT7_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT7_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT7_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT7_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT7_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT7_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT7_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT7_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT7_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT7_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT7_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT7_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT7_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT7_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT7_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT7_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT7_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT7_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT7_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT7_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT7_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT7_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA8_FLAG
#define IDC_REGS_EVCTIA8_FLAG
// EVCTIA8 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA8_t;
#endif
#define IDC_REGS_EVCTIA8_OFFSET 0x00
#define IDC_REGS_EVCTIA8_SCOPE 0x01
#define IDC_REGS_EVCTIA8_SIZE 32
#define IDC_REGS_EVCTIA8_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA8_RESET 0x00000000

#define IDC_REGS_EVCTIA8_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA8_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA8_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA8_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA8_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA8_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA8_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA8_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC8_FLAG
#define IDC_REGS_EVCTIAINC8_FLAG
// EVCTIAINC8 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC8_t;
#endif
#define IDC_REGS_EVCTIAINC8_OFFSET 0x08
#define IDC_REGS_EVCTIAINC8_SCOPE 0x01
#define IDC_REGS_EVCTIAINC8_SIZE 32
#define IDC_REGS_EVCTIAINC8_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC8_RESET 0x00000000

#define IDC_REGS_EVCTIAINC8_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC8_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC8_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC8_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC8_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC8_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC8_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC8_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT8_FLAG
#define IDC_REGS_EVCTPROT8_FLAG
// EVCTPROT8 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT8_t;
#endif
#define IDC_REGS_EVCTPROT8_OFFSET 0x10
#define IDC_REGS_EVCTPROT8_SCOPE 0x01
#define IDC_REGS_EVCTPROT8_SIZE 32
#define IDC_REGS_EVCTPROT8_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT8_RESET 0x00000000

#define IDC_REGS_EVCTPROT8_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT8_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT8_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT8_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT8_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT8_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT8_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT8_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT8_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT8_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT8_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT8_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT8_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT8_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT8_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT8_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT8_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT8_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT8_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT8_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT8_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT8_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT8_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT8_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA9_FLAG
#define IDC_REGS_EVCTIA9_FLAG
// EVCTIA9 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA9_t;
#endif
#define IDC_REGS_EVCTIA9_OFFSET 0x20
#define IDC_REGS_EVCTIA9_SCOPE 0x01
#define IDC_REGS_EVCTIA9_SIZE 32
#define IDC_REGS_EVCTIA9_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA9_RESET 0x00000000

#define IDC_REGS_EVCTIA9_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA9_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA9_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA9_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA9_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA9_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA9_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA9_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC9_FLAG
#define IDC_REGS_EVCTIAINC9_FLAG
// EVCTIAINC9 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC9_t;
#endif
#define IDC_REGS_EVCTIAINC9_OFFSET 0x28
#define IDC_REGS_EVCTIAINC9_SCOPE 0x01
#define IDC_REGS_EVCTIAINC9_SIZE 32
#define IDC_REGS_EVCTIAINC9_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC9_RESET 0x00000000

#define IDC_REGS_EVCTIAINC9_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC9_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC9_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC9_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC9_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC9_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC9_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC9_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT9_FLAG
#define IDC_REGS_EVCTPROT9_FLAG
// EVCTPROT9 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT9_t;
#endif
#define IDC_REGS_EVCTPROT9_OFFSET 0x30
#define IDC_REGS_EVCTPROT9_SCOPE 0x01
#define IDC_REGS_EVCTPROT9_SIZE 32
#define IDC_REGS_EVCTPROT9_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT9_RESET 0x00000000

#define IDC_REGS_EVCTPROT9_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT9_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT9_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT9_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT9_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT9_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT9_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT9_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT9_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT9_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT9_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT9_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT9_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT9_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT9_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT9_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT9_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT9_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT9_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT9_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT9_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT9_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT9_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT9_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA10_FLAG
#define IDC_REGS_EVCTIA10_FLAG
// EVCTIA10 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA10_t;
#endif
#define IDC_REGS_EVCTIA10_OFFSET 0x40
#define IDC_REGS_EVCTIA10_SCOPE 0x01
#define IDC_REGS_EVCTIA10_SIZE 32
#define IDC_REGS_EVCTIA10_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA10_RESET 0x00000000

#define IDC_REGS_EVCTIA10_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA10_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA10_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA10_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA10_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA10_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA10_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA10_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC10_FLAG
#define IDC_REGS_EVCTIAINC10_FLAG
// EVCTIAINC10 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC10_t;
#endif
#define IDC_REGS_EVCTIAINC10_OFFSET 0x48
#define IDC_REGS_EVCTIAINC10_SCOPE 0x01
#define IDC_REGS_EVCTIAINC10_SIZE 32
#define IDC_REGS_EVCTIAINC10_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC10_RESET 0x00000000

#define IDC_REGS_EVCTIAINC10_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC10_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC10_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC10_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC10_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC10_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC10_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC10_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT10_FLAG
#define IDC_REGS_EVCTPROT10_FLAG
// EVCTPROT10 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT10_t;
#endif
#define IDC_REGS_EVCTPROT10_OFFSET 0x50
#define IDC_REGS_EVCTPROT10_SCOPE 0x01
#define IDC_REGS_EVCTPROT10_SIZE 32
#define IDC_REGS_EVCTPROT10_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT10_RESET 0x00000000

#define IDC_REGS_EVCTPROT10_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT10_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT10_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT10_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT10_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT10_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT10_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT10_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT10_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT10_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT10_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT10_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT10_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT10_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT10_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT10_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT10_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT10_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT10_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT10_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT10_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT10_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT10_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT10_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA11_FLAG
#define IDC_REGS_EVCTIA11_FLAG
// EVCTIA11 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA11_t;
#endif
#define IDC_REGS_EVCTIA11_OFFSET 0x60
#define IDC_REGS_EVCTIA11_SCOPE 0x01
#define IDC_REGS_EVCTIA11_SIZE 32
#define IDC_REGS_EVCTIA11_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA11_RESET 0x00000000

#define IDC_REGS_EVCTIA11_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA11_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA11_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA11_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA11_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA11_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA11_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA11_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC11_FLAG
#define IDC_REGS_EVCTIAINC11_FLAG
// EVCTIAINC11 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC11_t;
#endif
#define IDC_REGS_EVCTIAINC11_OFFSET 0x68
#define IDC_REGS_EVCTIAINC11_SCOPE 0x01
#define IDC_REGS_EVCTIAINC11_SIZE 32
#define IDC_REGS_EVCTIAINC11_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC11_RESET 0x00000000

#define IDC_REGS_EVCTIAINC11_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC11_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC11_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC11_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC11_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC11_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC11_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC11_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT11_FLAG
#define IDC_REGS_EVCTPROT11_FLAG
// EVCTPROT11 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT11_t;
#endif
#define IDC_REGS_EVCTPROT11_OFFSET 0x70
#define IDC_REGS_EVCTPROT11_SCOPE 0x01
#define IDC_REGS_EVCTPROT11_SIZE 32
#define IDC_REGS_EVCTPROT11_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT11_RESET 0x00000000

#define IDC_REGS_EVCTPROT11_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT11_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT11_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT11_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT11_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT11_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT11_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT11_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT11_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT11_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT11_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT11_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT11_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT11_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT11_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT11_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT11_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT11_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT11_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT11_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT11_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT11_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT11_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT11_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA12_FLAG
#define IDC_REGS_EVCTIA12_FLAG
// EVCTIA12 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA12_t;
#endif
#define IDC_REGS_EVCTIA12_OFFSET 0x80
#define IDC_REGS_EVCTIA12_SCOPE 0x01
#define IDC_REGS_EVCTIA12_SIZE 32
#define IDC_REGS_EVCTIA12_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA12_RESET 0x00000000

#define IDC_REGS_EVCTIA12_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA12_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA12_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA12_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA12_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA12_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA12_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA12_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC12_FLAG
#define IDC_REGS_EVCTIAINC12_FLAG
// EVCTIAINC12 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC12_t;
#endif
#define IDC_REGS_EVCTIAINC12_OFFSET 0x88
#define IDC_REGS_EVCTIAINC12_SCOPE 0x01
#define IDC_REGS_EVCTIAINC12_SIZE 32
#define IDC_REGS_EVCTIAINC12_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC12_RESET 0x00000000

#define IDC_REGS_EVCTIAINC12_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC12_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC12_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC12_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC12_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC12_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC12_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC12_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT12_FLAG
#define IDC_REGS_EVCTPROT12_FLAG
// EVCTPROT12 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT12_t;
#endif
#define IDC_REGS_EVCTPROT12_OFFSET 0x90
#define IDC_REGS_EVCTPROT12_SCOPE 0x01
#define IDC_REGS_EVCTPROT12_SIZE 32
#define IDC_REGS_EVCTPROT12_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT12_RESET 0x00000000

#define IDC_REGS_EVCTPROT12_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT12_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT12_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT12_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT12_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT12_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT12_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT12_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT12_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT12_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT12_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT12_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT12_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT12_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT12_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT12_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT12_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT12_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT12_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT12_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT12_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT12_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT12_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT12_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA13_FLAG
#define IDC_REGS_EVCTIA13_FLAG
// EVCTIA13 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA13_t;
#endif
#define IDC_REGS_EVCTIA13_OFFSET 0xa0
#define IDC_REGS_EVCTIA13_SCOPE 0x01
#define IDC_REGS_EVCTIA13_SIZE 32
#define IDC_REGS_EVCTIA13_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA13_RESET 0x00000000

#define IDC_REGS_EVCTIA13_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA13_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA13_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA13_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA13_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA13_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA13_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA13_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC13_FLAG
#define IDC_REGS_EVCTIAINC13_FLAG
// EVCTIAINC13 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC13_t;
#endif
#define IDC_REGS_EVCTIAINC13_OFFSET 0xa8
#define IDC_REGS_EVCTIAINC13_SCOPE 0x01
#define IDC_REGS_EVCTIAINC13_SIZE 32
#define IDC_REGS_EVCTIAINC13_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC13_RESET 0x00000000

#define IDC_REGS_EVCTIAINC13_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC13_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC13_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC13_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC13_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC13_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC13_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC13_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT13_FLAG
#define IDC_REGS_EVCTPROT13_FLAG
// EVCTPROT13 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT13_t;
#endif
#define IDC_REGS_EVCTPROT13_OFFSET 0xb0
#define IDC_REGS_EVCTPROT13_SCOPE 0x01
#define IDC_REGS_EVCTPROT13_SIZE 32
#define IDC_REGS_EVCTPROT13_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT13_RESET 0x00000000

#define IDC_REGS_EVCTPROT13_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT13_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT13_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT13_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT13_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT13_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT13_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT13_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT13_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT13_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT13_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT13_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT13_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT13_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT13_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT13_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT13_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT13_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT13_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT13_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT13_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT13_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT13_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT13_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA14_FLAG
#define IDC_REGS_EVCTIA14_FLAG
// EVCTIA14 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA14_t;
#endif
#define IDC_REGS_EVCTIA14_OFFSET 0xc0
#define IDC_REGS_EVCTIA14_SCOPE 0x01
#define IDC_REGS_EVCTIA14_SIZE 32
#define IDC_REGS_EVCTIA14_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA14_RESET 0x00000000

#define IDC_REGS_EVCTIA14_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA14_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA14_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA14_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA14_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA14_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA14_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA14_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC14_FLAG
#define IDC_REGS_EVCTIAINC14_FLAG
// EVCTIAINC14 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC14_t;
#endif
#define IDC_REGS_EVCTIAINC14_OFFSET 0xc8
#define IDC_REGS_EVCTIAINC14_SCOPE 0x01
#define IDC_REGS_EVCTIAINC14_SIZE 32
#define IDC_REGS_EVCTIAINC14_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC14_RESET 0x00000000

#define IDC_REGS_EVCTIAINC14_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC14_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC14_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC14_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC14_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC14_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC14_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC14_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT14_FLAG
#define IDC_REGS_EVCTPROT14_FLAG
// EVCTPROT14 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT14_t;
#endif
#define IDC_REGS_EVCTPROT14_OFFSET 0xd0
#define IDC_REGS_EVCTPROT14_SCOPE 0x01
#define IDC_REGS_EVCTPROT14_SIZE 32
#define IDC_REGS_EVCTPROT14_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT14_RESET 0x00000000

#define IDC_REGS_EVCTPROT14_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT14_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT14_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT14_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT14_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT14_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT14_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT14_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT14_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT14_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT14_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT14_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT14_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT14_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT14_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT14_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT14_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT14_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT14_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT14_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT14_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT14_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT14_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT14_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA15_FLAG
#define IDC_REGS_EVCTIA15_FLAG
// EVCTIA15 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA15_t;
#endif
#define IDC_REGS_EVCTIA15_OFFSET 0xe0
#define IDC_REGS_EVCTIA15_SCOPE 0x01
#define IDC_REGS_EVCTIA15_SIZE 32
#define IDC_REGS_EVCTIA15_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA15_RESET 0x00000000

#define IDC_REGS_EVCTIA15_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA15_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA15_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA15_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA15_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA15_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA15_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA15_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC15_FLAG
#define IDC_REGS_EVCTIAINC15_FLAG
// EVCTIAINC15 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC15_t;
#endif
#define IDC_REGS_EVCTIAINC15_OFFSET 0xe8
#define IDC_REGS_EVCTIAINC15_SCOPE 0x01
#define IDC_REGS_EVCTIAINC15_SIZE 32
#define IDC_REGS_EVCTIAINC15_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC15_RESET 0x00000000

#define IDC_REGS_EVCTIAINC15_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC15_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC15_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC15_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC15_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC15_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC15_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC15_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT15_FLAG
#define IDC_REGS_EVCTPROT15_FLAG
// EVCTPROT15 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT15_t;
#endif
#define IDC_REGS_EVCTPROT15_OFFSET 0xf0
#define IDC_REGS_EVCTPROT15_SCOPE 0x01
#define IDC_REGS_EVCTPROT15_SIZE 32
#define IDC_REGS_EVCTPROT15_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT15_RESET 0x00000000

#define IDC_REGS_EVCTPROT15_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT15_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT15_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT15_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT15_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT15_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT15_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT15_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT15_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT15_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT15_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT15_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT15_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT15_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT15_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT15_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT15_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT15_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT15_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT15_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT15_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT15_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT15_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT15_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA16_FLAG
#define IDC_REGS_EVCTIA16_FLAG
// EVCTIA16 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA16_t;
#endif
#define IDC_REGS_EVCTIA16_OFFSET 0x00
#define IDC_REGS_EVCTIA16_SCOPE 0x01
#define IDC_REGS_EVCTIA16_SIZE 32
#define IDC_REGS_EVCTIA16_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA16_RESET 0x00000000

#define IDC_REGS_EVCTIA16_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA16_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA16_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA16_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA16_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA16_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA16_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA16_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC16_FLAG
#define IDC_REGS_EVCTIAINC16_FLAG
// EVCTIAINC16 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC16_t;
#endif
#define IDC_REGS_EVCTIAINC16_OFFSET 0x08
#define IDC_REGS_EVCTIAINC16_SCOPE 0x01
#define IDC_REGS_EVCTIAINC16_SIZE 32
#define IDC_REGS_EVCTIAINC16_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC16_RESET 0x00000000

#define IDC_REGS_EVCTIAINC16_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC16_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC16_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC16_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC16_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC16_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC16_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC16_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT16_FLAG
#define IDC_REGS_EVCTPROT16_FLAG
// EVCTPROT16 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT16_t;
#endif
#define IDC_REGS_EVCTPROT16_OFFSET 0x10
#define IDC_REGS_EVCTPROT16_SCOPE 0x01
#define IDC_REGS_EVCTPROT16_SIZE 32
#define IDC_REGS_EVCTPROT16_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT16_RESET 0x00000000

#define IDC_REGS_EVCTPROT16_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT16_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT16_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT16_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT16_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT16_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT16_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT16_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT16_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT16_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT16_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT16_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT16_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT16_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT16_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT16_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT16_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT16_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT16_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT16_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT16_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT16_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT16_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT16_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA17_FLAG
#define IDC_REGS_EVCTIA17_FLAG
// EVCTIA17 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA17_t;
#endif
#define IDC_REGS_EVCTIA17_OFFSET 0x20
#define IDC_REGS_EVCTIA17_SCOPE 0x01
#define IDC_REGS_EVCTIA17_SIZE 32
#define IDC_REGS_EVCTIA17_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA17_RESET 0x00000000

#define IDC_REGS_EVCTIA17_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA17_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA17_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA17_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA17_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA17_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA17_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA17_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC17_FLAG
#define IDC_REGS_EVCTIAINC17_FLAG
// EVCTIAINC17 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC17_t;
#endif
#define IDC_REGS_EVCTIAINC17_OFFSET 0x28
#define IDC_REGS_EVCTIAINC17_SCOPE 0x01
#define IDC_REGS_EVCTIAINC17_SIZE 32
#define IDC_REGS_EVCTIAINC17_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC17_RESET 0x00000000

#define IDC_REGS_EVCTIAINC17_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC17_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC17_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC17_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC17_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC17_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC17_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC17_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT17_FLAG
#define IDC_REGS_EVCTPROT17_FLAG
// EVCTPROT17 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT17_t;
#endif
#define IDC_REGS_EVCTPROT17_OFFSET 0x30
#define IDC_REGS_EVCTPROT17_SCOPE 0x01
#define IDC_REGS_EVCTPROT17_SIZE 32
#define IDC_REGS_EVCTPROT17_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT17_RESET 0x00000000

#define IDC_REGS_EVCTPROT17_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT17_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT17_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT17_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT17_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT17_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT17_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT17_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT17_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT17_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT17_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT17_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT17_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT17_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT17_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT17_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT17_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT17_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT17_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT17_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT17_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT17_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT17_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT17_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA18_FLAG
#define IDC_REGS_EVCTIA18_FLAG
// EVCTIA18 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA18_t;
#endif
#define IDC_REGS_EVCTIA18_OFFSET 0x40
#define IDC_REGS_EVCTIA18_SCOPE 0x01
#define IDC_REGS_EVCTIA18_SIZE 32
#define IDC_REGS_EVCTIA18_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA18_RESET 0x00000000

#define IDC_REGS_EVCTIA18_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA18_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA18_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA18_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA18_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA18_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA18_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA18_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC18_FLAG
#define IDC_REGS_EVCTIAINC18_FLAG
// EVCTIAINC18 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC18_t;
#endif
#define IDC_REGS_EVCTIAINC18_OFFSET 0x48
#define IDC_REGS_EVCTIAINC18_SCOPE 0x01
#define IDC_REGS_EVCTIAINC18_SIZE 32
#define IDC_REGS_EVCTIAINC18_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC18_RESET 0x00000000

#define IDC_REGS_EVCTIAINC18_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC18_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC18_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC18_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC18_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC18_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC18_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC18_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT18_FLAG
#define IDC_REGS_EVCTPROT18_FLAG
// EVCTPROT18 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT18_t;
#endif
#define IDC_REGS_EVCTPROT18_OFFSET 0x50
#define IDC_REGS_EVCTPROT18_SCOPE 0x01
#define IDC_REGS_EVCTPROT18_SIZE 32
#define IDC_REGS_EVCTPROT18_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT18_RESET 0x00000000

#define IDC_REGS_EVCTPROT18_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT18_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT18_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT18_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT18_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT18_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT18_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT18_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT18_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT18_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT18_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT18_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT18_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT18_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT18_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT18_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT18_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT18_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT18_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT18_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT18_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT18_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT18_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT18_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA19_FLAG
#define IDC_REGS_EVCTIA19_FLAG
// EVCTIA19 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA19_t;
#endif
#define IDC_REGS_EVCTIA19_OFFSET 0x60
#define IDC_REGS_EVCTIA19_SCOPE 0x01
#define IDC_REGS_EVCTIA19_SIZE 32
#define IDC_REGS_EVCTIA19_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA19_RESET 0x00000000

#define IDC_REGS_EVCTIA19_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA19_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA19_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA19_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA19_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA19_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA19_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA19_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC19_FLAG
#define IDC_REGS_EVCTIAINC19_FLAG
// EVCTIAINC19 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC19_t;
#endif
#define IDC_REGS_EVCTIAINC19_OFFSET 0x68
#define IDC_REGS_EVCTIAINC19_SCOPE 0x01
#define IDC_REGS_EVCTIAINC19_SIZE 32
#define IDC_REGS_EVCTIAINC19_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC19_RESET 0x00000000

#define IDC_REGS_EVCTIAINC19_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC19_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC19_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC19_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC19_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC19_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC19_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC19_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT19_FLAG
#define IDC_REGS_EVCTPROT19_FLAG
// EVCTPROT19 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT19_t;
#endif
#define IDC_REGS_EVCTPROT19_OFFSET 0x70
#define IDC_REGS_EVCTPROT19_SCOPE 0x01
#define IDC_REGS_EVCTPROT19_SIZE 32
#define IDC_REGS_EVCTPROT19_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT19_RESET 0x00000000

#define IDC_REGS_EVCTPROT19_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT19_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT19_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT19_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT19_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT19_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT19_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT19_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT19_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT19_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT19_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT19_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT19_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT19_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT19_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT19_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT19_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT19_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT19_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT19_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT19_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT19_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT19_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT19_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA20_FLAG
#define IDC_REGS_EVCTIA20_FLAG
// EVCTIA20 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA20_t;
#endif
#define IDC_REGS_EVCTIA20_OFFSET 0x80
#define IDC_REGS_EVCTIA20_SCOPE 0x01
#define IDC_REGS_EVCTIA20_SIZE 32
#define IDC_REGS_EVCTIA20_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA20_RESET 0x00000000

#define IDC_REGS_EVCTIA20_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA20_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA20_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA20_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA20_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA20_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA20_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA20_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC20_FLAG
#define IDC_REGS_EVCTIAINC20_FLAG
// EVCTIAINC20 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC20_t;
#endif
#define IDC_REGS_EVCTIAINC20_OFFSET 0x88
#define IDC_REGS_EVCTIAINC20_SCOPE 0x01
#define IDC_REGS_EVCTIAINC20_SIZE 32
#define IDC_REGS_EVCTIAINC20_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC20_RESET 0x00000000

#define IDC_REGS_EVCTIAINC20_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC20_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC20_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC20_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC20_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC20_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC20_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC20_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT20_FLAG
#define IDC_REGS_EVCTPROT20_FLAG
// EVCTPROT20 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT20_t;
#endif
#define IDC_REGS_EVCTPROT20_OFFSET 0x90
#define IDC_REGS_EVCTPROT20_SCOPE 0x01
#define IDC_REGS_EVCTPROT20_SIZE 32
#define IDC_REGS_EVCTPROT20_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT20_RESET 0x00000000

#define IDC_REGS_EVCTPROT20_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT20_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT20_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT20_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT20_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT20_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT20_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT20_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT20_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT20_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT20_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT20_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT20_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT20_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT20_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT20_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT20_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT20_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT20_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT20_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT20_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT20_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT20_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT20_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA21_FLAG
#define IDC_REGS_EVCTIA21_FLAG
// EVCTIA21 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA21_t;
#endif
#define IDC_REGS_EVCTIA21_OFFSET 0xa0
#define IDC_REGS_EVCTIA21_SCOPE 0x01
#define IDC_REGS_EVCTIA21_SIZE 32
#define IDC_REGS_EVCTIA21_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA21_RESET 0x00000000

#define IDC_REGS_EVCTIA21_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA21_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA21_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA21_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA21_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA21_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA21_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA21_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC21_FLAG
#define IDC_REGS_EVCTIAINC21_FLAG
// EVCTIAINC21 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC21_t;
#endif
#define IDC_REGS_EVCTIAINC21_OFFSET 0xa8
#define IDC_REGS_EVCTIAINC21_SCOPE 0x01
#define IDC_REGS_EVCTIAINC21_SIZE 32
#define IDC_REGS_EVCTIAINC21_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC21_RESET 0x00000000

#define IDC_REGS_EVCTIAINC21_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC21_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC21_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC21_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC21_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC21_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC21_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC21_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT21_FLAG
#define IDC_REGS_EVCTPROT21_FLAG
// EVCTPROT21 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT21_t;
#endif
#define IDC_REGS_EVCTPROT21_OFFSET 0xb0
#define IDC_REGS_EVCTPROT21_SCOPE 0x01
#define IDC_REGS_EVCTPROT21_SIZE 32
#define IDC_REGS_EVCTPROT21_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT21_RESET 0x00000000

#define IDC_REGS_EVCTPROT21_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT21_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT21_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT21_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT21_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT21_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT21_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT21_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT21_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT21_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT21_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT21_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT21_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT21_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT21_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT21_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT21_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT21_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT21_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT21_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT21_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT21_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT21_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT21_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA22_FLAG
#define IDC_REGS_EVCTIA22_FLAG
// EVCTIA22 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA22_t;
#endif
#define IDC_REGS_EVCTIA22_OFFSET 0xc0
#define IDC_REGS_EVCTIA22_SCOPE 0x01
#define IDC_REGS_EVCTIA22_SIZE 32
#define IDC_REGS_EVCTIA22_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA22_RESET 0x00000000

#define IDC_REGS_EVCTIA22_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA22_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA22_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA22_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA22_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA22_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA22_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA22_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC22_FLAG
#define IDC_REGS_EVCTIAINC22_FLAG
// EVCTIAINC22 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC22_t;
#endif
#define IDC_REGS_EVCTIAINC22_OFFSET 0xc8
#define IDC_REGS_EVCTIAINC22_SCOPE 0x01
#define IDC_REGS_EVCTIAINC22_SIZE 32
#define IDC_REGS_EVCTIAINC22_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC22_RESET 0x00000000

#define IDC_REGS_EVCTIAINC22_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC22_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC22_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC22_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC22_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC22_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC22_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC22_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT22_FLAG
#define IDC_REGS_EVCTPROT22_FLAG
// EVCTPROT22 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT22_t;
#endif
#define IDC_REGS_EVCTPROT22_OFFSET 0xd0
#define IDC_REGS_EVCTPROT22_SCOPE 0x01
#define IDC_REGS_EVCTPROT22_SIZE 32
#define IDC_REGS_EVCTPROT22_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT22_RESET 0x00000000

#define IDC_REGS_EVCTPROT22_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT22_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT22_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT22_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT22_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT22_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT22_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT22_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT22_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT22_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT22_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT22_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT22_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT22_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT22_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT22_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT22_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT22_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT22_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT22_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT22_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT22_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT22_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT22_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA23_FLAG
#define IDC_REGS_EVCTIA23_FLAG
// EVCTIA23 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA23_t;
#endif
#define IDC_REGS_EVCTIA23_OFFSET 0xe0
#define IDC_REGS_EVCTIA23_SCOPE 0x01
#define IDC_REGS_EVCTIA23_SIZE 32
#define IDC_REGS_EVCTIA23_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA23_RESET 0x00000000

#define IDC_REGS_EVCTIA23_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA23_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA23_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA23_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA23_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA23_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA23_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA23_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC23_FLAG
#define IDC_REGS_EVCTIAINC23_FLAG
// EVCTIAINC23 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC23_t;
#endif
#define IDC_REGS_EVCTIAINC23_OFFSET 0xe8
#define IDC_REGS_EVCTIAINC23_SCOPE 0x01
#define IDC_REGS_EVCTIAINC23_SIZE 32
#define IDC_REGS_EVCTIAINC23_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC23_RESET 0x00000000

#define IDC_REGS_EVCTIAINC23_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC23_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC23_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC23_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC23_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC23_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC23_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC23_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT23_FLAG
#define IDC_REGS_EVCTPROT23_FLAG
// EVCTPROT23 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT23_t;
#endif
#define IDC_REGS_EVCTPROT23_OFFSET 0xf0
#define IDC_REGS_EVCTPROT23_SCOPE 0x01
#define IDC_REGS_EVCTPROT23_SIZE 32
#define IDC_REGS_EVCTPROT23_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT23_RESET 0x00000000

#define IDC_REGS_EVCTPROT23_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT23_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT23_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT23_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT23_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT23_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT23_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT23_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT23_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT23_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT23_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT23_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT23_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT23_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT23_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT23_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT23_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT23_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT23_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT23_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT23_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT23_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT23_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT23_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA24_FLAG
#define IDC_REGS_EVCTIA24_FLAG
// EVCTIA24 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA24_t;
#endif
#define IDC_REGS_EVCTIA24_OFFSET 0x00
#define IDC_REGS_EVCTIA24_SCOPE 0x01
#define IDC_REGS_EVCTIA24_SIZE 32
#define IDC_REGS_EVCTIA24_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA24_RESET 0x00000000

#define IDC_REGS_EVCTIA24_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA24_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA24_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA24_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA24_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA24_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA24_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA24_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC24_FLAG
#define IDC_REGS_EVCTIAINC24_FLAG
// EVCTIAINC24 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC24_t;
#endif
#define IDC_REGS_EVCTIAINC24_OFFSET 0x08
#define IDC_REGS_EVCTIAINC24_SCOPE 0x01
#define IDC_REGS_EVCTIAINC24_SIZE 32
#define IDC_REGS_EVCTIAINC24_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC24_RESET 0x00000000

#define IDC_REGS_EVCTIAINC24_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC24_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC24_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC24_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC24_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC24_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC24_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC24_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT24_FLAG
#define IDC_REGS_EVCTPROT24_FLAG
// EVCTPROT24 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT24_t;
#endif
#define IDC_REGS_EVCTPROT24_OFFSET 0x10
#define IDC_REGS_EVCTPROT24_SCOPE 0x01
#define IDC_REGS_EVCTPROT24_SIZE 32
#define IDC_REGS_EVCTPROT24_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT24_RESET 0x00000000

#define IDC_REGS_EVCTPROT24_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT24_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT24_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT24_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT24_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT24_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT24_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT24_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT24_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT24_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT24_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT24_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT24_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT24_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT24_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT24_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT24_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT24_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT24_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT24_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT24_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT24_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT24_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT24_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA25_FLAG
#define IDC_REGS_EVCTIA25_FLAG
// EVCTIA25 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA25_t;
#endif
#define IDC_REGS_EVCTIA25_OFFSET 0x20
#define IDC_REGS_EVCTIA25_SCOPE 0x01
#define IDC_REGS_EVCTIA25_SIZE 32
#define IDC_REGS_EVCTIA25_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA25_RESET 0x00000000

#define IDC_REGS_EVCTIA25_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA25_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA25_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA25_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA25_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA25_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA25_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA25_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC25_FLAG
#define IDC_REGS_EVCTIAINC25_FLAG
// EVCTIAINC25 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC25_t;
#endif
#define IDC_REGS_EVCTIAINC25_OFFSET 0x28
#define IDC_REGS_EVCTIAINC25_SCOPE 0x01
#define IDC_REGS_EVCTIAINC25_SIZE 32
#define IDC_REGS_EVCTIAINC25_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC25_RESET 0x00000000

#define IDC_REGS_EVCTIAINC25_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC25_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC25_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC25_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC25_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC25_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC25_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC25_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT25_FLAG
#define IDC_REGS_EVCTPROT25_FLAG
// EVCTPROT25 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT25_t;
#endif
#define IDC_REGS_EVCTPROT25_OFFSET 0x30
#define IDC_REGS_EVCTPROT25_SCOPE 0x01
#define IDC_REGS_EVCTPROT25_SIZE 32
#define IDC_REGS_EVCTPROT25_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT25_RESET 0x00000000

#define IDC_REGS_EVCTPROT25_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT25_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT25_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT25_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT25_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT25_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT25_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT25_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT25_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT25_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT25_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT25_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT25_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT25_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT25_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT25_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT25_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT25_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT25_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT25_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT25_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT25_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT25_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT25_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA26_FLAG
#define IDC_REGS_EVCTIA26_FLAG
// EVCTIA26 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA26_t;
#endif
#define IDC_REGS_EVCTIA26_OFFSET 0x40
#define IDC_REGS_EVCTIA26_SCOPE 0x01
#define IDC_REGS_EVCTIA26_SIZE 32
#define IDC_REGS_EVCTIA26_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA26_RESET 0x00000000

#define IDC_REGS_EVCTIA26_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA26_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA26_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA26_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA26_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA26_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA26_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA26_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC26_FLAG
#define IDC_REGS_EVCTIAINC26_FLAG
// EVCTIAINC26 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC26_t;
#endif
#define IDC_REGS_EVCTIAINC26_OFFSET 0x48
#define IDC_REGS_EVCTIAINC26_SCOPE 0x01
#define IDC_REGS_EVCTIAINC26_SIZE 32
#define IDC_REGS_EVCTIAINC26_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC26_RESET 0x00000000

#define IDC_REGS_EVCTIAINC26_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC26_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC26_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC26_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC26_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC26_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC26_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC26_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT26_FLAG
#define IDC_REGS_EVCTPROT26_FLAG
// EVCTPROT26 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT26_t;
#endif
#define IDC_REGS_EVCTPROT26_OFFSET 0x50
#define IDC_REGS_EVCTPROT26_SCOPE 0x01
#define IDC_REGS_EVCTPROT26_SIZE 32
#define IDC_REGS_EVCTPROT26_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT26_RESET 0x00000000

#define IDC_REGS_EVCTPROT26_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT26_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT26_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT26_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT26_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT26_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT26_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT26_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT26_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT26_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT26_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT26_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT26_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT26_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT26_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT26_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT26_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT26_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT26_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT26_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT26_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT26_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT26_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT26_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA27_FLAG
#define IDC_REGS_EVCTIA27_FLAG
// EVCTIA27 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA27_t;
#endif
#define IDC_REGS_EVCTIA27_OFFSET 0x60
#define IDC_REGS_EVCTIA27_SCOPE 0x01
#define IDC_REGS_EVCTIA27_SIZE 32
#define IDC_REGS_EVCTIA27_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA27_RESET 0x00000000

#define IDC_REGS_EVCTIA27_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA27_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA27_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA27_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA27_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA27_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA27_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA27_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC27_FLAG
#define IDC_REGS_EVCTIAINC27_FLAG
// EVCTIAINC27 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC27_t;
#endif
#define IDC_REGS_EVCTIAINC27_OFFSET 0x68
#define IDC_REGS_EVCTIAINC27_SCOPE 0x01
#define IDC_REGS_EVCTIAINC27_SIZE 32
#define IDC_REGS_EVCTIAINC27_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC27_RESET 0x00000000

#define IDC_REGS_EVCTIAINC27_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC27_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC27_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC27_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC27_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC27_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC27_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC27_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT27_FLAG
#define IDC_REGS_EVCTPROT27_FLAG
// EVCTPROT27 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT27_t;
#endif
#define IDC_REGS_EVCTPROT27_OFFSET 0x70
#define IDC_REGS_EVCTPROT27_SCOPE 0x01
#define IDC_REGS_EVCTPROT27_SIZE 32
#define IDC_REGS_EVCTPROT27_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT27_RESET 0x00000000

#define IDC_REGS_EVCTPROT27_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT27_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT27_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT27_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT27_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT27_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT27_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT27_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT27_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT27_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT27_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT27_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT27_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT27_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT27_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT27_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT27_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT27_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT27_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT27_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT27_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT27_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT27_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT27_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA28_FLAG
#define IDC_REGS_EVCTIA28_FLAG
// EVCTIA28 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA28_t;
#endif
#define IDC_REGS_EVCTIA28_OFFSET 0x80
#define IDC_REGS_EVCTIA28_SCOPE 0x01
#define IDC_REGS_EVCTIA28_SIZE 32
#define IDC_REGS_EVCTIA28_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA28_RESET 0x00000000

#define IDC_REGS_EVCTIA28_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA28_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA28_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA28_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA28_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA28_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA28_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA28_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC28_FLAG
#define IDC_REGS_EVCTIAINC28_FLAG
// EVCTIAINC28 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC28_t;
#endif
#define IDC_REGS_EVCTIAINC28_OFFSET 0x88
#define IDC_REGS_EVCTIAINC28_SCOPE 0x01
#define IDC_REGS_EVCTIAINC28_SIZE 32
#define IDC_REGS_EVCTIAINC28_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC28_RESET 0x00000000

#define IDC_REGS_EVCTIAINC28_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC28_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC28_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC28_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC28_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC28_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC28_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC28_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT28_FLAG
#define IDC_REGS_EVCTPROT28_FLAG
// EVCTPROT28 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT28_t;
#endif
#define IDC_REGS_EVCTPROT28_OFFSET 0x90
#define IDC_REGS_EVCTPROT28_SCOPE 0x01
#define IDC_REGS_EVCTPROT28_SIZE 32
#define IDC_REGS_EVCTPROT28_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT28_RESET 0x00000000

#define IDC_REGS_EVCTPROT28_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT28_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT28_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT28_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT28_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT28_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT28_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT28_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT28_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT28_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT28_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT28_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT28_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT28_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT28_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT28_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT28_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT28_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT28_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT28_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT28_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT28_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT28_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT28_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA29_FLAG
#define IDC_REGS_EVCTIA29_FLAG
// EVCTIA29 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA29_t;
#endif
#define IDC_REGS_EVCTIA29_OFFSET 0xa0
#define IDC_REGS_EVCTIA29_SCOPE 0x01
#define IDC_REGS_EVCTIA29_SIZE 32
#define IDC_REGS_EVCTIA29_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA29_RESET 0x00000000

#define IDC_REGS_EVCTIA29_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA29_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA29_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA29_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA29_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA29_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA29_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA29_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC29_FLAG
#define IDC_REGS_EVCTIAINC29_FLAG
// EVCTIAINC29 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC29_t;
#endif
#define IDC_REGS_EVCTIAINC29_OFFSET 0xa8
#define IDC_REGS_EVCTIAINC29_SCOPE 0x01
#define IDC_REGS_EVCTIAINC29_SIZE 32
#define IDC_REGS_EVCTIAINC29_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC29_RESET 0x00000000

#define IDC_REGS_EVCTIAINC29_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC29_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC29_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC29_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC29_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC29_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC29_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC29_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT29_FLAG
#define IDC_REGS_EVCTPROT29_FLAG
// EVCTPROT29 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT29_t;
#endif
#define IDC_REGS_EVCTPROT29_OFFSET 0xb0
#define IDC_REGS_EVCTPROT29_SCOPE 0x01
#define IDC_REGS_EVCTPROT29_SIZE 32
#define IDC_REGS_EVCTPROT29_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT29_RESET 0x00000000

#define IDC_REGS_EVCTPROT29_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT29_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT29_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT29_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT29_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT29_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT29_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT29_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT29_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT29_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT29_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT29_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT29_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT29_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT29_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT29_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT29_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT29_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT29_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT29_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT29_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT29_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT29_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT29_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA30_FLAG
#define IDC_REGS_EVCTIA30_FLAG
// EVCTIA30 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA30_t;
#endif
#define IDC_REGS_EVCTIA30_OFFSET 0xc0
#define IDC_REGS_EVCTIA30_SCOPE 0x01
#define IDC_REGS_EVCTIA30_SIZE 32
#define IDC_REGS_EVCTIA30_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA30_RESET 0x00000000

#define IDC_REGS_EVCTIA30_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA30_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA30_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA30_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA30_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA30_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA30_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA30_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC30_FLAG
#define IDC_REGS_EVCTIAINC30_FLAG
// EVCTIAINC30 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC30_t;
#endif
#define IDC_REGS_EVCTIAINC30_OFFSET 0xc8
#define IDC_REGS_EVCTIAINC30_SCOPE 0x01
#define IDC_REGS_EVCTIAINC30_SIZE 32
#define IDC_REGS_EVCTIAINC30_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC30_RESET 0x00000000

#define IDC_REGS_EVCTIAINC30_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC30_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC30_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC30_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC30_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC30_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC30_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC30_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT30_FLAG
#define IDC_REGS_EVCTPROT30_FLAG
// EVCTPROT30 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT30_t;
#endif
#define IDC_REGS_EVCTPROT30_OFFSET 0xd0
#define IDC_REGS_EVCTPROT30_SCOPE 0x01
#define IDC_REGS_EVCTPROT30_SIZE 32
#define IDC_REGS_EVCTPROT30_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT30_RESET 0x00000000

#define IDC_REGS_EVCTPROT30_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT30_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT30_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT30_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT30_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT30_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT30_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT30_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT30_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT30_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT30_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT30_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT30_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT30_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT30_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT30_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT30_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT30_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT30_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT30_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT30_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT30_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT30_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT30_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIA31_FLAG
#define IDC_REGS_EVCTIA31_FLAG
// EVCTIA31 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIA31_t;
#endif
#define IDC_REGS_EVCTIA31_OFFSET 0xe0
#define IDC_REGS_EVCTIA31_SCOPE 0x01
#define IDC_REGS_EVCTIA31_SIZE 32
#define IDC_REGS_EVCTIA31_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIA31_RESET 0x00000000

#define IDC_REGS_EVCTIA31_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIA31_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIA31_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIA31_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIA31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIA31_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIA31_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIA31_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIA31_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIA31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTIAINC31_FLAG
#define IDC_REGS_EVCTIAINC31_FLAG
// EVCTIAINC31 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTIAINC31_t;
#endif
#define IDC_REGS_EVCTIAINC31_OFFSET 0xe8
#define IDC_REGS_EVCTIAINC31_SCOPE 0x01
#define IDC_REGS_EVCTIAINC31_SIZE 32
#define IDC_REGS_EVCTIAINC31_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTIAINC31_RESET 0x00000000

#define IDC_REGS_EVCTIAINC31_VALUE_LSB 0x0000
#define IDC_REGS_EVCTIAINC31_VALUE_MSB 0x000f
#define IDC_REGS_EVCTIAINC31_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTIAINC31_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTIAINC31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTIAINC31_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTIAINC31_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTIAINC31_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTIAINC31_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTIAINC31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTPROT31_FLAG
#define IDC_REGS_EVCTPROT31_FLAG
// EVCTPROT31 desc:  Access control counter register - only core can access
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the Counter
        uint32_t  RSVD_1               :   2;    //  Reserved
        uint32_t  OVF                  :   1;    //  It is set by HW when the
                                                 // counter is round robin and is
                                                 // cleared by writing 1 to it. An
                                                 // overflow occurs either when
                                                 // going above all 1 in increment
                                                 // or below 0 in decrement
                                                 // operation. The counter is not
                                                 // saturated but is round robin.
        uint32_t  OVFIE                :   1;    //  Overflow Interrupt enable. In
                                                 // case the overflow is an error
                                                 // condition, setting the bit
                                                 // will enable triggering an
                                                 // interrupt on the occurrence of
                                                 // the event. When enabled, a 1
                                                 // in the bit will set CTROVFERR
                                                 // in IDCINTST register when OVF
                                                 // bit is set.
        uint32_t  RSVD_2               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTPROT31_t;
#endif
#define IDC_REGS_EVCTPROT31_OFFSET 0xf0
#define IDC_REGS_EVCTPROT31_SCOPE 0x01
#define IDC_REGS_EVCTPROT31_SIZE 32
#define IDC_REGS_EVCTPROT31_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTPROT31_RESET 0x00000000

#define IDC_REGS_EVCTPROT31_VALUE_LSB 0x0000
#define IDC_REGS_EVCTPROT31_VALUE_MSB 0x0005
#define IDC_REGS_EVCTPROT31_VALUE_RANGE 0x0006
#define IDC_REGS_EVCTPROT31_VALUE_MASK 0x0000003f
#define IDC_REGS_EVCTPROT31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT31_RSVD_1_LSB 0x0006
#define IDC_REGS_EVCTPROT31_RSVD_1_MSB 0x0007
#define IDC_REGS_EVCTPROT31_RSVD_1_RANGE 0x0002
#define IDC_REGS_EVCTPROT31_RSVD_1_MASK 0x000000c0
#define IDC_REGS_EVCTPROT31_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT31_OVF_LSB 0x0008
#define IDC_REGS_EVCTPROT31_OVF_MSB 0x0008
#define IDC_REGS_EVCTPROT31_OVF_RANGE 0x0001
#define IDC_REGS_EVCTPROT31_OVF_MASK 0x00000100
#define IDC_REGS_EVCTPROT31_OVF_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT31_OVFIE_LSB 0x0009
#define IDC_REGS_EVCTPROT31_OVFIE_MSB 0x0009
#define IDC_REGS_EVCTPROT31_OVFIE_RANGE 0x0001
#define IDC_REGS_EVCTPROT31_OVFIE_MASK 0x00000200
#define IDC_REGS_EVCTPROT31_OVFIE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTPROT31_RSVD_2_LSB 0x000a
#define IDC_REGS_EVCTPROT31_RSVD_2_MSB 0x001f
#define IDC_REGS_EVCTPROT31_RSVD_2_RANGE 0x0016
#define IDC_REGS_EVCTPROT31_RSVD_2_MASK 0xfffffc00
#define IDC_REGS_EVCTPROT31_RSVD_2_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA0_FLAG
#define IDC_REGS_SEMAVALIA0_FLAG
// SEMAVALIA0 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA0_t;
#endif
#define IDC_REGS_SEMAVALIA0_OFFSET 0x00
#define IDC_REGS_SEMAVALIA0_SCOPE 0x01
#define IDC_REGS_SEMAVALIA0_SIZE 8
#define IDC_REGS_SEMAVALIA0_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA0_RESET 0x00000000

#define IDC_REGS_SEMAVALIA0_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA0_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA0_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA0_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA0_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA0_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA0_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA0_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES0_FLAG
#define IDC_REGS_RSRES0_FLAG
// RSRES0 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES0_t;
#endif
#define IDC_REGS_RSRES0_OFFSET 0x08
#define IDC_REGS_RSRES0_SCOPE 0x01
#define IDC_REGS_RSRES0_SIZE 8
#define IDC_REGS_RSRES0_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES0_RESET 0x00000000

#define IDC_REGS_RSRES0_VALUE_LSB 0x0000
#define IDC_REGS_RSRES0_VALUE_MSB 0x0001
#define IDC_REGS_RSRES0_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES0_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES0_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES0_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES0_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES0_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES0_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES0_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES0_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES0_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES0_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT0_FLAG
#define IDC_REGS_SEMAPROT0_FLAG
// SEMAPROT0 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT0_t;
#endif
#define IDC_REGS_SEMAPROT0_OFFSET 0x10
#define IDC_REGS_SEMAPROT0_SCOPE 0x01
#define IDC_REGS_SEMAPROT0_SIZE 32
#define IDC_REGS_SEMAPROT0_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT0_RESET 0x00000000

#define IDC_REGS_SEMAPROT0_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT0_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT0_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT0_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT0_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT0_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT0_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT0_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA1_FLAG
#define IDC_REGS_SEMAVALIA1_FLAG
// SEMAVALIA1 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA1_t;
#endif
#define IDC_REGS_SEMAVALIA1_OFFSET 0x20
#define IDC_REGS_SEMAVALIA1_SCOPE 0x01
#define IDC_REGS_SEMAVALIA1_SIZE 8
#define IDC_REGS_SEMAVALIA1_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA1_RESET 0x00000000

#define IDC_REGS_SEMAVALIA1_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA1_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA1_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA1_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA1_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA1_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA1_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA1_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES1_FLAG
#define IDC_REGS_RSRES1_FLAG
// RSRES1 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES1_t;
#endif
#define IDC_REGS_RSRES1_OFFSET 0x28
#define IDC_REGS_RSRES1_SCOPE 0x01
#define IDC_REGS_RSRES1_SIZE 8
#define IDC_REGS_RSRES1_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES1_RESET 0x00000000

#define IDC_REGS_RSRES1_VALUE_LSB 0x0000
#define IDC_REGS_RSRES1_VALUE_MSB 0x0001
#define IDC_REGS_RSRES1_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES1_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES1_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES1_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES1_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES1_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES1_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES1_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES1_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES1_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES1_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT1_FLAG
#define IDC_REGS_SEMAPROT1_FLAG
// SEMAPROT1 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT1_t;
#endif
#define IDC_REGS_SEMAPROT1_OFFSET 0x30
#define IDC_REGS_SEMAPROT1_SCOPE 0x01
#define IDC_REGS_SEMAPROT1_SIZE 32
#define IDC_REGS_SEMAPROT1_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT1_RESET 0x00000000

#define IDC_REGS_SEMAPROT1_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT1_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT1_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT1_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT1_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT1_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT1_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT1_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA2_FLAG
#define IDC_REGS_SEMAVALIA2_FLAG
// SEMAVALIA2 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA2_t;
#endif
#define IDC_REGS_SEMAVALIA2_OFFSET 0x40
#define IDC_REGS_SEMAVALIA2_SCOPE 0x01
#define IDC_REGS_SEMAVALIA2_SIZE 8
#define IDC_REGS_SEMAVALIA2_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA2_RESET 0x00000000

#define IDC_REGS_SEMAVALIA2_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA2_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA2_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA2_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA2_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA2_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA2_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA2_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES2_FLAG
#define IDC_REGS_RSRES2_FLAG
// RSRES2 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES2_t;
#endif
#define IDC_REGS_RSRES2_OFFSET 0x48
#define IDC_REGS_RSRES2_SCOPE 0x01
#define IDC_REGS_RSRES2_SIZE 8
#define IDC_REGS_RSRES2_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES2_RESET 0x00000000

#define IDC_REGS_RSRES2_VALUE_LSB 0x0000
#define IDC_REGS_RSRES2_VALUE_MSB 0x0001
#define IDC_REGS_RSRES2_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES2_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES2_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES2_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES2_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES2_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES2_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES2_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES2_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES2_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES2_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT2_FLAG
#define IDC_REGS_SEMAPROT2_FLAG
// SEMAPROT2 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT2_t;
#endif
#define IDC_REGS_SEMAPROT2_OFFSET 0x50
#define IDC_REGS_SEMAPROT2_SCOPE 0x01
#define IDC_REGS_SEMAPROT2_SIZE 32
#define IDC_REGS_SEMAPROT2_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT2_RESET 0x00000000

#define IDC_REGS_SEMAPROT2_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT2_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT2_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT2_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT2_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT2_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT2_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT2_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA3_FLAG
#define IDC_REGS_SEMAVALIA3_FLAG
// SEMAVALIA3 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA3_t;
#endif
#define IDC_REGS_SEMAVALIA3_OFFSET 0x60
#define IDC_REGS_SEMAVALIA3_SCOPE 0x01
#define IDC_REGS_SEMAVALIA3_SIZE 8
#define IDC_REGS_SEMAVALIA3_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA3_RESET 0x00000000

#define IDC_REGS_SEMAVALIA3_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA3_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA3_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA3_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA3_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA3_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA3_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA3_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES3_FLAG
#define IDC_REGS_RSRES3_FLAG
// RSRES3 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES3_t;
#endif
#define IDC_REGS_RSRES3_OFFSET 0x68
#define IDC_REGS_RSRES3_SCOPE 0x01
#define IDC_REGS_RSRES3_SIZE 8
#define IDC_REGS_RSRES3_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES3_RESET 0x00000000

#define IDC_REGS_RSRES3_VALUE_LSB 0x0000
#define IDC_REGS_RSRES3_VALUE_MSB 0x0001
#define IDC_REGS_RSRES3_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES3_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES3_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES3_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES3_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES3_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES3_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES3_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES3_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES3_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES3_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT3_FLAG
#define IDC_REGS_SEMAPROT3_FLAG
// SEMAPROT3 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT3_t;
#endif
#define IDC_REGS_SEMAPROT3_OFFSET 0x70
#define IDC_REGS_SEMAPROT3_SCOPE 0x01
#define IDC_REGS_SEMAPROT3_SIZE 32
#define IDC_REGS_SEMAPROT3_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT3_RESET 0x00000000

#define IDC_REGS_SEMAPROT3_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT3_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT3_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT3_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT3_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT3_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT3_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT3_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA4_FLAG
#define IDC_REGS_SEMAVALIA4_FLAG
// SEMAVALIA4 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA4_t;
#endif
#define IDC_REGS_SEMAVALIA4_OFFSET 0x80
#define IDC_REGS_SEMAVALIA4_SCOPE 0x01
#define IDC_REGS_SEMAVALIA4_SIZE 8
#define IDC_REGS_SEMAVALIA4_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA4_RESET 0x00000000

#define IDC_REGS_SEMAVALIA4_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA4_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA4_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA4_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA4_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA4_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA4_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA4_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES4_FLAG
#define IDC_REGS_RSRES4_FLAG
// RSRES4 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES4_t;
#endif
#define IDC_REGS_RSRES4_OFFSET 0x88
#define IDC_REGS_RSRES4_SCOPE 0x01
#define IDC_REGS_RSRES4_SIZE 8
#define IDC_REGS_RSRES4_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES4_RESET 0x00000000

#define IDC_REGS_RSRES4_VALUE_LSB 0x0000
#define IDC_REGS_RSRES4_VALUE_MSB 0x0001
#define IDC_REGS_RSRES4_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES4_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES4_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES4_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES4_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES4_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES4_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES4_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES4_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES4_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES4_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT4_FLAG
#define IDC_REGS_SEMAPROT4_FLAG
// SEMAPROT4 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT4_t;
#endif
#define IDC_REGS_SEMAPROT4_OFFSET 0x90
#define IDC_REGS_SEMAPROT4_SCOPE 0x01
#define IDC_REGS_SEMAPROT4_SIZE 32
#define IDC_REGS_SEMAPROT4_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT4_RESET 0x00000000

#define IDC_REGS_SEMAPROT4_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT4_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT4_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT4_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT4_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT4_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT4_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT4_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA5_FLAG
#define IDC_REGS_SEMAVALIA5_FLAG
// SEMAVALIA5 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA5_t;
#endif
#define IDC_REGS_SEMAVALIA5_OFFSET 0xa0
#define IDC_REGS_SEMAVALIA5_SCOPE 0x01
#define IDC_REGS_SEMAVALIA5_SIZE 8
#define IDC_REGS_SEMAVALIA5_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA5_RESET 0x00000000

#define IDC_REGS_SEMAVALIA5_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA5_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA5_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA5_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA5_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA5_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA5_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA5_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES5_FLAG
#define IDC_REGS_RSRES5_FLAG
// RSRES5 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES5_t;
#endif
#define IDC_REGS_RSRES5_OFFSET 0xa8
#define IDC_REGS_RSRES5_SCOPE 0x01
#define IDC_REGS_RSRES5_SIZE 8
#define IDC_REGS_RSRES5_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES5_RESET 0x00000000

#define IDC_REGS_RSRES5_VALUE_LSB 0x0000
#define IDC_REGS_RSRES5_VALUE_MSB 0x0001
#define IDC_REGS_RSRES5_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES5_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES5_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES5_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES5_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES5_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES5_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES5_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES5_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES5_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES5_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT5_FLAG
#define IDC_REGS_SEMAPROT5_FLAG
// SEMAPROT5 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT5_t;
#endif
#define IDC_REGS_SEMAPROT5_OFFSET 0xb0
#define IDC_REGS_SEMAPROT5_SCOPE 0x01
#define IDC_REGS_SEMAPROT5_SIZE 32
#define IDC_REGS_SEMAPROT5_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT5_RESET 0x00000000

#define IDC_REGS_SEMAPROT5_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT5_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT5_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT5_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT5_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT5_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT5_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT5_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA6_FLAG
#define IDC_REGS_SEMAVALIA6_FLAG
// SEMAVALIA6 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA6_t;
#endif
#define IDC_REGS_SEMAVALIA6_OFFSET 0xc0
#define IDC_REGS_SEMAVALIA6_SCOPE 0x01
#define IDC_REGS_SEMAVALIA6_SIZE 8
#define IDC_REGS_SEMAVALIA6_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA6_RESET 0x00000000

#define IDC_REGS_SEMAVALIA6_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA6_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA6_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA6_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA6_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA6_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA6_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA6_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES6_FLAG
#define IDC_REGS_RSRES6_FLAG
// RSRES6 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES6_t;
#endif
#define IDC_REGS_RSRES6_OFFSET 0xc8
#define IDC_REGS_RSRES6_SCOPE 0x01
#define IDC_REGS_RSRES6_SIZE 8
#define IDC_REGS_RSRES6_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES6_RESET 0x00000000

#define IDC_REGS_RSRES6_VALUE_LSB 0x0000
#define IDC_REGS_RSRES6_VALUE_MSB 0x0001
#define IDC_REGS_RSRES6_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES6_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES6_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES6_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES6_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES6_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES6_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES6_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES6_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES6_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES6_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT6_FLAG
#define IDC_REGS_SEMAPROT6_FLAG
// SEMAPROT6 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT6_t;
#endif
#define IDC_REGS_SEMAPROT6_OFFSET 0xd0
#define IDC_REGS_SEMAPROT6_SCOPE 0x01
#define IDC_REGS_SEMAPROT6_SIZE 32
#define IDC_REGS_SEMAPROT6_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT6_RESET 0x00000000

#define IDC_REGS_SEMAPROT6_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT6_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT6_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT6_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT6_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT6_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT6_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT6_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA7_FLAG
#define IDC_REGS_SEMAVALIA7_FLAG
// SEMAVALIA7 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA7_t;
#endif
#define IDC_REGS_SEMAVALIA7_OFFSET 0xe0
#define IDC_REGS_SEMAVALIA7_SCOPE 0x01
#define IDC_REGS_SEMAVALIA7_SIZE 8
#define IDC_REGS_SEMAVALIA7_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA7_RESET 0x00000000

#define IDC_REGS_SEMAVALIA7_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA7_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA7_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA7_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA7_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA7_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA7_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA7_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES7_FLAG
#define IDC_REGS_RSRES7_FLAG
// RSRES7 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES7_t;
#endif
#define IDC_REGS_RSRES7_OFFSET 0xe8
#define IDC_REGS_RSRES7_SCOPE 0x01
#define IDC_REGS_RSRES7_SIZE 8
#define IDC_REGS_RSRES7_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES7_RESET 0x00000000

#define IDC_REGS_RSRES7_VALUE_LSB 0x0000
#define IDC_REGS_RSRES7_VALUE_MSB 0x0001
#define IDC_REGS_RSRES7_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES7_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES7_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES7_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES7_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES7_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES7_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES7_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES7_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES7_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES7_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT7_FLAG
#define IDC_REGS_SEMAPROT7_FLAG
// SEMAPROT7 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT7_t;
#endif
#define IDC_REGS_SEMAPROT7_OFFSET 0xf0
#define IDC_REGS_SEMAPROT7_SCOPE 0x01
#define IDC_REGS_SEMAPROT7_SIZE 32
#define IDC_REGS_SEMAPROT7_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT7_RESET 0x00000000

#define IDC_REGS_SEMAPROT7_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT7_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT7_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT7_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT7_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT7_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT7_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT7_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA8_FLAG
#define IDC_REGS_SEMAVALIA8_FLAG
// SEMAVALIA8 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA8_t;
#endif
#define IDC_REGS_SEMAVALIA8_OFFSET 0x00
#define IDC_REGS_SEMAVALIA8_SCOPE 0x01
#define IDC_REGS_SEMAVALIA8_SIZE 8
#define IDC_REGS_SEMAVALIA8_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA8_RESET 0x00000000

#define IDC_REGS_SEMAVALIA8_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA8_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA8_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA8_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA8_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA8_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA8_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA8_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES8_FLAG
#define IDC_REGS_RSRES8_FLAG
// RSRES8 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES8_t;
#endif
#define IDC_REGS_RSRES8_OFFSET 0x08
#define IDC_REGS_RSRES8_SCOPE 0x01
#define IDC_REGS_RSRES8_SIZE 8
#define IDC_REGS_RSRES8_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES8_RESET 0x00000000

#define IDC_REGS_RSRES8_VALUE_LSB 0x0000
#define IDC_REGS_RSRES8_VALUE_MSB 0x0001
#define IDC_REGS_RSRES8_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES8_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES8_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES8_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES8_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES8_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES8_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES8_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES8_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES8_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES8_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT8_FLAG
#define IDC_REGS_SEMAPROT8_FLAG
// SEMAPROT8 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT8_t;
#endif
#define IDC_REGS_SEMAPROT8_OFFSET 0x10
#define IDC_REGS_SEMAPROT8_SCOPE 0x01
#define IDC_REGS_SEMAPROT8_SIZE 32
#define IDC_REGS_SEMAPROT8_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT8_RESET 0x00000000

#define IDC_REGS_SEMAPROT8_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT8_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT8_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT8_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT8_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT8_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT8_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT8_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA9_FLAG
#define IDC_REGS_SEMAVALIA9_FLAG
// SEMAVALIA9 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA9_t;
#endif
#define IDC_REGS_SEMAVALIA9_OFFSET 0x20
#define IDC_REGS_SEMAVALIA9_SCOPE 0x01
#define IDC_REGS_SEMAVALIA9_SIZE 8
#define IDC_REGS_SEMAVALIA9_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA9_RESET 0x00000000

#define IDC_REGS_SEMAVALIA9_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA9_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA9_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA9_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA9_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA9_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA9_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA9_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES9_FLAG
#define IDC_REGS_RSRES9_FLAG
// RSRES9 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES9_t;
#endif
#define IDC_REGS_RSRES9_OFFSET 0x28
#define IDC_REGS_RSRES9_SCOPE 0x01
#define IDC_REGS_RSRES9_SIZE 8
#define IDC_REGS_RSRES9_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES9_RESET 0x00000000

#define IDC_REGS_RSRES9_VALUE_LSB 0x0000
#define IDC_REGS_RSRES9_VALUE_MSB 0x0001
#define IDC_REGS_RSRES9_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES9_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES9_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES9_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES9_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES9_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES9_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES9_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES9_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES9_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES9_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT9_FLAG
#define IDC_REGS_SEMAPROT9_FLAG
// SEMAPROT9 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT9_t;
#endif
#define IDC_REGS_SEMAPROT9_OFFSET 0x30
#define IDC_REGS_SEMAPROT9_SCOPE 0x01
#define IDC_REGS_SEMAPROT9_SIZE 32
#define IDC_REGS_SEMAPROT9_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT9_RESET 0x00000000

#define IDC_REGS_SEMAPROT9_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT9_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT9_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT9_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT9_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT9_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT9_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT9_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA10_FLAG
#define IDC_REGS_SEMAVALIA10_FLAG
// SEMAVALIA10 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA10_t;
#endif
#define IDC_REGS_SEMAVALIA10_OFFSET 0x40
#define IDC_REGS_SEMAVALIA10_SCOPE 0x01
#define IDC_REGS_SEMAVALIA10_SIZE 8
#define IDC_REGS_SEMAVALIA10_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA10_RESET 0x00000000

#define IDC_REGS_SEMAVALIA10_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA10_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA10_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA10_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA10_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA10_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA10_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA10_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES10_FLAG
#define IDC_REGS_RSRES10_FLAG
// RSRES10 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES10_t;
#endif
#define IDC_REGS_RSRES10_OFFSET 0x48
#define IDC_REGS_RSRES10_SCOPE 0x01
#define IDC_REGS_RSRES10_SIZE 8
#define IDC_REGS_RSRES10_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES10_RESET 0x00000000

#define IDC_REGS_RSRES10_VALUE_LSB 0x0000
#define IDC_REGS_RSRES10_VALUE_MSB 0x0001
#define IDC_REGS_RSRES10_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES10_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES10_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES10_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES10_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES10_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES10_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES10_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES10_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES10_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES10_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT10_FLAG
#define IDC_REGS_SEMAPROT10_FLAG
// SEMAPROT10 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT10_t;
#endif
#define IDC_REGS_SEMAPROT10_OFFSET 0x50
#define IDC_REGS_SEMAPROT10_SCOPE 0x01
#define IDC_REGS_SEMAPROT10_SIZE 32
#define IDC_REGS_SEMAPROT10_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT10_RESET 0x00000000

#define IDC_REGS_SEMAPROT10_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT10_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT10_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT10_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT10_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT10_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT10_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT10_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA11_FLAG
#define IDC_REGS_SEMAVALIA11_FLAG
// SEMAVALIA11 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA11_t;
#endif
#define IDC_REGS_SEMAVALIA11_OFFSET 0x60
#define IDC_REGS_SEMAVALIA11_SCOPE 0x01
#define IDC_REGS_SEMAVALIA11_SIZE 8
#define IDC_REGS_SEMAVALIA11_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA11_RESET 0x00000000

#define IDC_REGS_SEMAVALIA11_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA11_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA11_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA11_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA11_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA11_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA11_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA11_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES11_FLAG
#define IDC_REGS_RSRES11_FLAG
// RSRES11 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES11_t;
#endif
#define IDC_REGS_RSRES11_OFFSET 0x68
#define IDC_REGS_RSRES11_SCOPE 0x01
#define IDC_REGS_RSRES11_SIZE 8
#define IDC_REGS_RSRES11_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES11_RESET 0x00000000

#define IDC_REGS_RSRES11_VALUE_LSB 0x0000
#define IDC_REGS_RSRES11_VALUE_MSB 0x0001
#define IDC_REGS_RSRES11_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES11_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES11_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES11_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES11_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES11_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES11_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES11_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES11_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES11_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES11_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT11_FLAG
#define IDC_REGS_SEMAPROT11_FLAG
// SEMAPROT11 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT11_t;
#endif
#define IDC_REGS_SEMAPROT11_OFFSET 0x70
#define IDC_REGS_SEMAPROT11_SCOPE 0x01
#define IDC_REGS_SEMAPROT11_SIZE 32
#define IDC_REGS_SEMAPROT11_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT11_RESET 0x00000000

#define IDC_REGS_SEMAPROT11_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT11_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT11_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT11_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT11_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT11_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT11_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT11_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA12_FLAG
#define IDC_REGS_SEMAVALIA12_FLAG
// SEMAVALIA12 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA12_t;
#endif
#define IDC_REGS_SEMAVALIA12_OFFSET 0x80
#define IDC_REGS_SEMAVALIA12_SCOPE 0x01
#define IDC_REGS_SEMAVALIA12_SIZE 8
#define IDC_REGS_SEMAVALIA12_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA12_RESET 0x00000000

#define IDC_REGS_SEMAVALIA12_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA12_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA12_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA12_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA12_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA12_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA12_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA12_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES12_FLAG
#define IDC_REGS_RSRES12_FLAG
// RSRES12 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES12_t;
#endif
#define IDC_REGS_RSRES12_OFFSET 0x88
#define IDC_REGS_RSRES12_SCOPE 0x01
#define IDC_REGS_RSRES12_SIZE 8
#define IDC_REGS_RSRES12_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES12_RESET 0x00000000

#define IDC_REGS_RSRES12_VALUE_LSB 0x0000
#define IDC_REGS_RSRES12_VALUE_MSB 0x0001
#define IDC_REGS_RSRES12_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES12_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES12_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES12_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES12_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES12_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES12_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES12_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES12_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES12_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES12_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT12_FLAG
#define IDC_REGS_SEMAPROT12_FLAG
// SEMAPROT12 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT12_t;
#endif
#define IDC_REGS_SEMAPROT12_OFFSET 0x90
#define IDC_REGS_SEMAPROT12_SCOPE 0x01
#define IDC_REGS_SEMAPROT12_SIZE 32
#define IDC_REGS_SEMAPROT12_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT12_RESET 0x00000000

#define IDC_REGS_SEMAPROT12_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT12_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT12_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT12_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT12_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT12_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT12_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT12_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA13_FLAG
#define IDC_REGS_SEMAVALIA13_FLAG
// SEMAVALIA13 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA13_t;
#endif
#define IDC_REGS_SEMAVALIA13_OFFSET 0xa0
#define IDC_REGS_SEMAVALIA13_SCOPE 0x01
#define IDC_REGS_SEMAVALIA13_SIZE 8
#define IDC_REGS_SEMAVALIA13_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA13_RESET 0x00000000

#define IDC_REGS_SEMAVALIA13_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA13_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA13_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA13_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA13_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA13_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA13_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA13_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES13_FLAG
#define IDC_REGS_RSRES13_FLAG
// RSRES13 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES13_t;
#endif
#define IDC_REGS_RSRES13_OFFSET 0xa8
#define IDC_REGS_RSRES13_SCOPE 0x01
#define IDC_REGS_RSRES13_SIZE 8
#define IDC_REGS_RSRES13_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES13_RESET 0x00000000

#define IDC_REGS_RSRES13_VALUE_LSB 0x0000
#define IDC_REGS_RSRES13_VALUE_MSB 0x0001
#define IDC_REGS_RSRES13_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES13_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES13_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES13_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES13_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES13_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES13_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES13_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES13_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES13_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES13_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT13_FLAG
#define IDC_REGS_SEMAPROT13_FLAG
// SEMAPROT13 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT13_t;
#endif
#define IDC_REGS_SEMAPROT13_OFFSET 0xb0
#define IDC_REGS_SEMAPROT13_SCOPE 0x01
#define IDC_REGS_SEMAPROT13_SIZE 32
#define IDC_REGS_SEMAPROT13_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT13_RESET 0x00000000

#define IDC_REGS_SEMAPROT13_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT13_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT13_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT13_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT13_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT13_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT13_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT13_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA14_FLAG
#define IDC_REGS_SEMAVALIA14_FLAG
// SEMAVALIA14 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA14_t;
#endif
#define IDC_REGS_SEMAVALIA14_OFFSET 0xc0
#define IDC_REGS_SEMAVALIA14_SCOPE 0x01
#define IDC_REGS_SEMAVALIA14_SIZE 8
#define IDC_REGS_SEMAVALIA14_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA14_RESET 0x00000000

#define IDC_REGS_SEMAVALIA14_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA14_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA14_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA14_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA14_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA14_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA14_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA14_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES14_FLAG
#define IDC_REGS_RSRES14_FLAG
// RSRES14 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES14_t;
#endif
#define IDC_REGS_RSRES14_OFFSET 0xc8
#define IDC_REGS_RSRES14_SCOPE 0x01
#define IDC_REGS_RSRES14_SIZE 8
#define IDC_REGS_RSRES14_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES14_RESET 0x00000000

#define IDC_REGS_RSRES14_VALUE_LSB 0x0000
#define IDC_REGS_RSRES14_VALUE_MSB 0x0001
#define IDC_REGS_RSRES14_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES14_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES14_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES14_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES14_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES14_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES14_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES14_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES14_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES14_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES14_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT14_FLAG
#define IDC_REGS_SEMAPROT14_FLAG
// SEMAPROT14 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT14_t;
#endif
#define IDC_REGS_SEMAPROT14_OFFSET 0xd0
#define IDC_REGS_SEMAPROT14_SCOPE 0x01
#define IDC_REGS_SEMAPROT14_SIZE 32
#define IDC_REGS_SEMAPROT14_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT14_RESET 0x00000000

#define IDC_REGS_SEMAPROT14_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT14_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT14_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT14_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT14_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT14_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT14_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT14_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA15_FLAG
#define IDC_REGS_SEMAVALIA15_FLAG
// SEMAVALIA15 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA15_t;
#endif
#define IDC_REGS_SEMAVALIA15_OFFSET 0xe0
#define IDC_REGS_SEMAVALIA15_SCOPE 0x01
#define IDC_REGS_SEMAVALIA15_SIZE 8
#define IDC_REGS_SEMAVALIA15_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA15_RESET 0x00000000

#define IDC_REGS_SEMAVALIA15_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA15_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA15_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA15_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA15_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA15_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA15_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA15_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES15_FLAG
#define IDC_REGS_RSRES15_FLAG
// RSRES15 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES15_t;
#endif
#define IDC_REGS_RSRES15_OFFSET 0xe8
#define IDC_REGS_RSRES15_SCOPE 0x01
#define IDC_REGS_RSRES15_SIZE 8
#define IDC_REGS_RSRES15_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES15_RESET 0x00000000

#define IDC_REGS_RSRES15_VALUE_LSB 0x0000
#define IDC_REGS_RSRES15_VALUE_MSB 0x0001
#define IDC_REGS_RSRES15_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES15_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES15_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES15_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES15_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES15_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES15_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES15_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES15_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES15_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES15_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT15_FLAG
#define IDC_REGS_SEMAPROT15_FLAG
// SEMAPROT15 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT15_t;
#endif
#define IDC_REGS_SEMAPROT15_OFFSET 0xf0
#define IDC_REGS_SEMAPROT15_SCOPE 0x01
#define IDC_REGS_SEMAPROT15_SIZE 32
#define IDC_REGS_SEMAPROT15_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT15_RESET 0x00000000

#define IDC_REGS_SEMAPROT15_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT15_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT15_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT15_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT15_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT15_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT15_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT15_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA16_FLAG
#define IDC_REGS_SEMAVALIA16_FLAG
// SEMAVALIA16 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA16_t;
#endif
#define IDC_REGS_SEMAVALIA16_OFFSET 0x00
#define IDC_REGS_SEMAVALIA16_SCOPE 0x01
#define IDC_REGS_SEMAVALIA16_SIZE 8
#define IDC_REGS_SEMAVALIA16_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA16_RESET 0x00000000

#define IDC_REGS_SEMAVALIA16_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA16_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA16_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA16_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA16_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA16_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA16_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA16_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES16_FLAG
#define IDC_REGS_RSRES16_FLAG
// RSRES16 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES16_t;
#endif
#define IDC_REGS_RSRES16_OFFSET 0x08
#define IDC_REGS_RSRES16_SCOPE 0x01
#define IDC_REGS_RSRES16_SIZE 8
#define IDC_REGS_RSRES16_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES16_RESET 0x00000000

#define IDC_REGS_RSRES16_VALUE_LSB 0x0000
#define IDC_REGS_RSRES16_VALUE_MSB 0x0001
#define IDC_REGS_RSRES16_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES16_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES16_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES16_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES16_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES16_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES16_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES16_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES16_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES16_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES16_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT16_FLAG
#define IDC_REGS_SEMAPROT16_FLAG
// SEMAPROT16 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT16_t;
#endif
#define IDC_REGS_SEMAPROT16_OFFSET 0x10
#define IDC_REGS_SEMAPROT16_SCOPE 0x01
#define IDC_REGS_SEMAPROT16_SIZE 32
#define IDC_REGS_SEMAPROT16_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT16_RESET 0x00000000

#define IDC_REGS_SEMAPROT16_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT16_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT16_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT16_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT16_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT16_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT16_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT16_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA17_FLAG
#define IDC_REGS_SEMAVALIA17_FLAG
// SEMAVALIA17 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA17_t;
#endif
#define IDC_REGS_SEMAVALIA17_OFFSET 0x20
#define IDC_REGS_SEMAVALIA17_SCOPE 0x01
#define IDC_REGS_SEMAVALIA17_SIZE 8
#define IDC_REGS_SEMAVALIA17_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA17_RESET 0x00000000

#define IDC_REGS_SEMAVALIA17_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA17_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA17_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA17_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA17_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA17_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA17_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA17_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES17_FLAG
#define IDC_REGS_RSRES17_FLAG
// RSRES17 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES17_t;
#endif
#define IDC_REGS_RSRES17_OFFSET 0x28
#define IDC_REGS_RSRES17_SCOPE 0x01
#define IDC_REGS_RSRES17_SIZE 8
#define IDC_REGS_RSRES17_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES17_RESET 0x00000000

#define IDC_REGS_RSRES17_VALUE_LSB 0x0000
#define IDC_REGS_RSRES17_VALUE_MSB 0x0001
#define IDC_REGS_RSRES17_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES17_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES17_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES17_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES17_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES17_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES17_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES17_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES17_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES17_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES17_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT17_FLAG
#define IDC_REGS_SEMAPROT17_FLAG
// SEMAPROT17 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT17_t;
#endif
#define IDC_REGS_SEMAPROT17_OFFSET 0x30
#define IDC_REGS_SEMAPROT17_SCOPE 0x01
#define IDC_REGS_SEMAPROT17_SIZE 32
#define IDC_REGS_SEMAPROT17_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT17_RESET 0x00000000

#define IDC_REGS_SEMAPROT17_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT17_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT17_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT17_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT17_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT17_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT17_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT17_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA18_FLAG
#define IDC_REGS_SEMAVALIA18_FLAG
// SEMAVALIA18 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA18_t;
#endif
#define IDC_REGS_SEMAVALIA18_OFFSET 0x40
#define IDC_REGS_SEMAVALIA18_SCOPE 0x01
#define IDC_REGS_SEMAVALIA18_SIZE 8
#define IDC_REGS_SEMAVALIA18_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA18_RESET 0x00000000

#define IDC_REGS_SEMAVALIA18_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA18_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA18_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA18_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA18_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA18_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA18_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA18_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES18_FLAG
#define IDC_REGS_RSRES18_FLAG
// RSRES18 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES18_t;
#endif
#define IDC_REGS_RSRES18_OFFSET 0x48
#define IDC_REGS_RSRES18_SCOPE 0x01
#define IDC_REGS_RSRES18_SIZE 8
#define IDC_REGS_RSRES18_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES18_RESET 0x00000000

#define IDC_REGS_RSRES18_VALUE_LSB 0x0000
#define IDC_REGS_RSRES18_VALUE_MSB 0x0001
#define IDC_REGS_RSRES18_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES18_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES18_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES18_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES18_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES18_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES18_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES18_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES18_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES18_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES18_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT18_FLAG
#define IDC_REGS_SEMAPROT18_FLAG
// SEMAPROT18 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT18_t;
#endif
#define IDC_REGS_SEMAPROT18_OFFSET 0x50
#define IDC_REGS_SEMAPROT18_SCOPE 0x01
#define IDC_REGS_SEMAPROT18_SIZE 32
#define IDC_REGS_SEMAPROT18_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT18_RESET 0x00000000

#define IDC_REGS_SEMAPROT18_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT18_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT18_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT18_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT18_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT18_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT18_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT18_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA19_FLAG
#define IDC_REGS_SEMAVALIA19_FLAG
// SEMAVALIA19 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA19_t;
#endif
#define IDC_REGS_SEMAVALIA19_OFFSET 0x60
#define IDC_REGS_SEMAVALIA19_SCOPE 0x01
#define IDC_REGS_SEMAVALIA19_SIZE 8
#define IDC_REGS_SEMAVALIA19_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA19_RESET 0x00000000

#define IDC_REGS_SEMAVALIA19_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA19_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA19_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA19_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA19_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA19_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA19_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA19_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES19_FLAG
#define IDC_REGS_RSRES19_FLAG
// RSRES19 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES19_t;
#endif
#define IDC_REGS_RSRES19_OFFSET 0x68
#define IDC_REGS_RSRES19_SCOPE 0x01
#define IDC_REGS_RSRES19_SIZE 8
#define IDC_REGS_RSRES19_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES19_RESET 0x00000000

#define IDC_REGS_RSRES19_VALUE_LSB 0x0000
#define IDC_REGS_RSRES19_VALUE_MSB 0x0001
#define IDC_REGS_RSRES19_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES19_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES19_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES19_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES19_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES19_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES19_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES19_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES19_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES19_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES19_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT19_FLAG
#define IDC_REGS_SEMAPROT19_FLAG
// SEMAPROT19 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT19_t;
#endif
#define IDC_REGS_SEMAPROT19_OFFSET 0x70
#define IDC_REGS_SEMAPROT19_SCOPE 0x01
#define IDC_REGS_SEMAPROT19_SIZE 32
#define IDC_REGS_SEMAPROT19_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT19_RESET 0x00000000

#define IDC_REGS_SEMAPROT19_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT19_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT19_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT19_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT19_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT19_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT19_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT19_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA20_FLAG
#define IDC_REGS_SEMAVALIA20_FLAG
// SEMAVALIA20 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA20_t;
#endif
#define IDC_REGS_SEMAVALIA20_OFFSET 0x80
#define IDC_REGS_SEMAVALIA20_SCOPE 0x01
#define IDC_REGS_SEMAVALIA20_SIZE 8
#define IDC_REGS_SEMAVALIA20_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA20_RESET 0x00000000

#define IDC_REGS_SEMAVALIA20_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA20_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA20_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA20_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA20_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA20_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA20_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA20_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES20_FLAG
#define IDC_REGS_RSRES20_FLAG
// RSRES20 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES20_t;
#endif
#define IDC_REGS_RSRES20_OFFSET 0x88
#define IDC_REGS_RSRES20_SCOPE 0x01
#define IDC_REGS_RSRES20_SIZE 8
#define IDC_REGS_RSRES20_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES20_RESET 0x00000000

#define IDC_REGS_RSRES20_VALUE_LSB 0x0000
#define IDC_REGS_RSRES20_VALUE_MSB 0x0001
#define IDC_REGS_RSRES20_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES20_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES20_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES20_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES20_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES20_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES20_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES20_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES20_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES20_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES20_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT20_FLAG
#define IDC_REGS_SEMAPROT20_FLAG
// SEMAPROT20 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT20_t;
#endif
#define IDC_REGS_SEMAPROT20_OFFSET 0x90
#define IDC_REGS_SEMAPROT20_SCOPE 0x01
#define IDC_REGS_SEMAPROT20_SIZE 32
#define IDC_REGS_SEMAPROT20_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT20_RESET 0x00000000

#define IDC_REGS_SEMAPROT20_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT20_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT20_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT20_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT20_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT20_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT20_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT20_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA21_FLAG
#define IDC_REGS_SEMAVALIA21_FLAG
// SEMAVALIA21 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA21_t;
#endif
#define IDC_REGS_SEMAVALIA21_OFFSET 0xa0
#define IDC_REGS_SEMAVALIA21_SCOPE 0x01
#define IDC_REGS_SEMAVALIA21_SIZE 8
#define IDC_REGS_SEMAVALIA21_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA21_RESET 0x00000000

#define IDC_REGS_SEMAVALIA21_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA21_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA21_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA21_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA21_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA21_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA21_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA21_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES21_FLAG
#define IDC_REGS_RSRES21_FLAG
// RSRES21 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES21_t;
#endif
#define IDC_REGS_RSRES21_OFFSET 0xa8
#define IDC_REGS_RSRES21_SCOPE 0x01
#define IDC_REGS_RSRES21_SIZE 8
#define IDC_REGS_RSRES21_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES21_RESET 0x00000000

#define IDC_REGS_RSRES21_VALUE_LSB 0x0000
#define IDC_REGS_RSRES21_VALUE_MSB 0x0001
#define IDC_REGS_RSRES21_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES21_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES21_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES21_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES21_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES21_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES21_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES21_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES21_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES21_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES21_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT21_FLAG
#define IDC_REGS_SEMAPROT21_FLAG
// SEMAPROT21 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT21_t;
#endif
#define IDC_REGS_SEMAPROT21_OFFSET 0xb0
#define IDC_REGS_SEMAPROT21_SCOPE 0x01
#define IDC_REGS_SEMAPROT21_SIZE 32
#define IDC_REGS_SEMAPROT21_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT21_RESET 0x00000000

#define IDC_REGS_SEMAPROT21_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT21_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT21_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT21_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT21_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT21_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT21_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT21_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA22_FLAG
#define IDC_REGS_SEMAVALIA22_FLAG
// SEMAVALIA22 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA22_t;
#endif
#define IDC_REGS_SEMAVALIA22_OFFSET 0xc0
#define IDC_REGS_SEMAVALIA22_SCOPE 0x01
#define IDC_REGS_SEMAVALIA22_SIZE 8
#define IDC_REGS_SEMAVALIA22_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA22_RESET 0x00000000

#define IDC_REGS_SEMAVALIA22_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA22_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA22_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA22_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA22_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA22_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA22_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA22_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES22_FLAG
#define IDC_REGS_RSRES22_FLAG
// RSRES22 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES22_t;
#endif
#define IDC_REGS_RSRES22_OFFSET 0xc8
#define IDC_REGS_RSRES22_SCOPE 0x01
#define IDC_REGS_RSRES22_SIZE 8
#define IDC_REGS_RSRES22_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES22_RESET 0x00000000

#define IDC_REGS_RSRES22_VALUE_LSB 0x0000
#define IDC_REGS_RSRES22_VALUE_MSB 0x0001
#define IDC_REGS_RSRES22_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES22_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES22_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES22_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES22_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES22_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES22_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES22_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES22_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES22_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES22_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT22_FLAG
#define IDC_REGS_SEMAPROT22_FLAG
// SEMAPROT22 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT22_t;
#endif
#define IDC_REGS_SEMAPROT22_OFFSET 0xd0
#define IDC_REGS_SEMAPROT22_SCOPE 0x01
#define IDC_REGS_SEMAPROT22_SIZE 32
#define IDC_REGS_SEMAPROT22_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT22_RESET 0x00000000

#define IDC_REGS_SEMAPROT22_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT22_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT22_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT22_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT22_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT22_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT22_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT22_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA23_FLAG
#define IDC_REGS_SEMAVALIA23_FLAG
// SEMAVALIA23 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA23_t;
#endif
#define IDC_REGS_SEMAVALIA23_OFFSET 0xe0
#define IDC_REGS_SEMAVALIA23_SCOPE 0x01
#define IDC_REGS_SEMAVALIA23_SIZE 8
#define IDC_REGS_SEMAVALIA23_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA23_RESET 0x00000000

#define IDC_REGS_SEMAVALIA23_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA23_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA23_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA23_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA23_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA23_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA23_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA23_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES23_FLAG
#define IDC_REGS_RSRES23_FLAG
// RSRES23 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES23_t;
#endif
#define IDC_REGS_RSRES23_OFFSET 0xe8
#define IDC_REGS_RSRES23_SCOPE 0x01
#define IDC_REGS_RSRES23_SIZE 8
#define IDC_REGS_RSRES23_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES23_RESET 0x00000000

#define IDC_REGS_RSRES23_VALUE_LSB 0x0000
#define IDC_REGS_RSRES23_VALUE_MSB 0x0001
#define IDC_REGS_RSRES23_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES23_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES23_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES23_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES23_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES23_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES23_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES23_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES23_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES23_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES23_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT23_FLAG
#define IDC_REGS_SEMAPROT23_FLAG
// SEMAPROT23 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT23_t;
#endif
#define IDC_REGS_SEMAPROT23_OFFSET 0xf0
#define IDC_REGS_SEMAPROT23_SCOPE 0x01
#define IDC_REGS_SEMAPROT23_SIZE 32
#define IDC_REGS_SEMAPROT23_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT23_RESET 0x00000000

#define IDC_REGS_SEMAPROT23_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT23_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT23_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT23_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT23_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT23_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT23_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT23_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA24_FLAG
#define IDC_REGS_SEMAVALIA24_FLAG
// SEMAVALIA24 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA24_t;
#endif
#define IDC_REGS_SEMAVALIA24_OFFSET 0x00
#define IDC_REGS_SEMAVALIA24_SCOPE 0x01
#define IDC_REGS_SEMAVALIA24_SIZE 8
#define IDC_REGS_SEMAVALIA24_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA24_RESET 0x00000000

#define IDC_REGS_SEMAVALIA24_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA24_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA24_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA24_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA24_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA24_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA24_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA24_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES24_FLAG
#define IDC_REGS_RSRES24_FLAG
// RSRES24 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES24_t;
#endif
#define IDC_REGS_RSRES24_OFFSET 0x08
#define IDC_REGS_RSRES24_SCOPE 0x01
#define IDC_REGS_RSRES24_SIZE 8
#define IDC_REGS_RSRES24_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES24_RESET 0x00000000

#define IDC_REGS_RSRES24_VALUE_LSB 0x0000
#define IDC_REGS_RSRES24_VALUE_MSB 0x0001
#define IDC_REGS_RSRES24_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES24_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES24_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES24_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES24_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES24_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES24_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES24_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES24_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES24_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES24_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT24_FLAG
#define IDC_REGS_SEMAPROT24_FLAG
// SEMAPROT24 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT24_t;
#endif
#define IDC_REGS_SEMAPROT24_OFFSET 0x10
#define IDC_REGS_SEMAPROT24_SCOPE 0x01
#define IDC_REGS_SEMAPROT24_SIZE 32
#define IDC_REGS_SEMAPROT24_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT24_RESET 0x00000000

#define IDC_REGS_SEMAPROT24_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT24_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT24_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT24_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT24_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT24_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT24_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT24_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA25_FLAG
#define IDC_REGS_SEMAVALIA25_FLAG
// SEMAVALIA25 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA25_t;
#endif
#define IDC_REGS_SEMAVALIA25_OFFSET 0x20
#define IDC_REGS_SEMAVALIA25_SCOPE 0x01
#define IDC_REGS_SEMAVALIA25_SIZE 8
#define IDC_REGS_SEMAVALIA25_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA25_RESET 0x00000000

#define IDC_REGS_SEMAVALIA25_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA25_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA25_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA25_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA25_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA25_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA25_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA25_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES25_FLAG
#define IDC_REGS_RSRES25_FLAG
// RSRES25 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES25_t;
#endif
#define IDC_REGS_RSRES25_OFFSET 0x28
#define IDC_REGS_RSRES25_SCOPE 0x01
#define IDC_REGS_RSRES25_SIZE 8
#define IDC_REGS_RSRES25_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES25_RESET 0x00000000

#define IDC_REGS_RSRES25_VALUE_LSB 0x0000
#define IDC_REGS_RSRES25_VALUE_MSB 0x0001
#define IDC_REGS_RSRES25_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES25_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES25_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES25_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES25_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES25_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES25_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES25_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES25_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES25_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES25_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT25_FLAG
#define IDC_REGS_SEMAPROT25_FLAG
// SEMAPROT25 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT25_t;
#endif
#define IDC_REGS_SEMAPROT25_OFFSET 0x30
#define IDC_REGS_SEMAPROT25_SCOPE 0x01
#define IDC_REGS_SEMAPROT25_SIZE 32
#define IDC_REGS_SEMAPROT25_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT25_RESET 0x00000000

#define IDC_REGS_SEMAPROT25_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT25_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT25_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT25_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT25_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT25_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT25_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT25_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA26_FLAG
#define IDC_REGS_SEMAVALIA26_FLAG
// SEMAVALIA26 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA26_t;
#endif
#define IDC_REGS_SEMAVALIA26_OFFSET 0x40
#define IDC_REGS_SEMAVALIA26_SCOPE 0x01
#define IDC_REGS_SEMAVALIA26_SIZE 8
#define IDC_REGS_SEMAVALIA26_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA26_RESET 0x00000000

#define IDC_REGS_SEMAVALIA26_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA26_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA26_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA26_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA26_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA26_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA26_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA26_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES26_FLAG
#define IDC_REGS_RSRES26_FLAG
// RSRES26 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES26_t;
#endif
#define IDC_REGS_RSRES26_OFFSET 0x48
#define IDC_REGS_RSRES26_SCOPE 0x01
#define IDC_REGS_RSRES26_SIZE 8
#define IDC_REGS_RSRES26_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES26_RESET 0x00000000

#define IDC_REGS_RSRES26_VALUE_LSB 0x0000
#define IDC_REGS_RSRES26_VALUE_MSB 0x0001
#define IDC_REGS_RSRES26_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES26_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES26_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES26_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES26_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES26_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES26_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES26_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES26_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES26_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES26_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT26_FLAG
#define IDC_REGS_SEMAPROT26_FLAG
// SEMAPROT26 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT26_t;
#endif
#define IDC_REGS_SEMAPROT26_OFFSET 0x50
#define IDC_REGS_SEMAPROT26_SCOPE 0x01
#define IDC_REGS_SEMAPROT26_SIZE 32
#define IDC_REGS_SEMAPROT26_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT26_RESET 0x00000000

#define IDC_REGS_SEMAPROT26_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT26_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT26_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT26_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT26_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT26_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT26_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT26_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA27_FLAG
#define IDC_REGS_SEMAVALIA27_FLAG
// SEMAVALIA27 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA27_t;
#endif
#define IDC_REGS_SEMAVALIA27_OFFSET 0x60
#define IDC_REGS_SEMAVALIA27_SCOPE 0x01
#define IDC_REGS_SEMAVALIA27_SIZE 8
#define IDC_REGS_SEMAVALIA27_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA27_RESET 0x00000000

#define IDC_REGS_SEMAVALIA27_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA27_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA27_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA27_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA27_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA27_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA27_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA27_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES27_FLAG
#define IDC_REGS_RSRES27_FLAG
// RSRES27 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES27_t;
#endif
#define IDC_REGS_RSRES27_OFFSET 0x68
#define IDC_REGS_RSRES27_SCOPE 0x01
#define IDC_REGS_RSRES27_SIZE 8
#define IDC_REGS_RSRES27_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES27_RESET 0x00000000

#define IDC_REGS_RSRES27_VALUE_LSB 0x0000
#define IDC_REGS_RSRES27_VALUE_MSB 0x0001
#define IDC_REGS_RSRES27_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES27_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES27_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES27_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES27_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES27_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES27_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES27_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES27_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES27_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES27_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT27_FLAG
#define IDC_REGS_SEMAPROT27_FLAG
// SEMAPROT27 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT27_t;
#endif
#define IDC_REGS_SEMAPROT27_OFFSET 0x70
#define IDC_REGS_SEMAPROT27_SCOPE 0x01
#define IDC_REGS_SEMAPROT27_SIZE 32
#define IDC_REGS_SEMAPROT27_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT27_RESET 0x00000000

#define IDC_REGS_SEMAPROT27_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT27_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT27_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT27_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT27_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT27_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT27_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT27_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA28_FLAG
#define IDC_REGS_SEMAVALIA28_FLAG
// SEMAVALIA28 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA28_t;
#endif
#define IDC_REGS_SEMAVALIA28_OFFSET 0x80
#define IDC_REGS_SEMAVALIA28_SCOPE 0x01
#define IDC_REGS_SEMAVALIA28_SIZE 8
#define IDC_REGS_SEMAVALIA28_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA28_RESET 0x00000000

#define IDC_REGS_SEMAVALIA28_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA28_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA28_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA28_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA28_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA28_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA28_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA28_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES28_FLAG
#define IDC_REGS_RSRES28_FLAG
// RSRES28 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES28_t;
#endif
#define IDC_REGS_RSRES28_OFFSET 0x88
#define IDC_REGS_RSRES28_SCOPE 0x01
#define IDC_REGS_RSRES28_SIZE 8
#define IDC_REGS_RSRES28_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES28_RESET 0x00000000

#define IDC_REGS_RSRES28_VALUE_LSB 0x0000
#define IDC_REGS_RSRES28_VALUE_MSB 0x0001
#define IDC_REGS_RSRES28_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES28_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES28_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES28_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES28_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES28_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES28_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES28_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES28_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES28_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES28_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT28_FLAG
#define IDC_REGS_SEMAPROT28_FLAG
// SEMAPROT28 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT28_t;
#endif
#define IDC_REGS_SEMAPROT28_OFFSET 0x90
#define IDC_REGS_SEMAPROT28_SCOPE 0x01
#define IDC_REGS_SEMAPROT28_SIZE 32
#define IDC_REGS_SEMAPROT28_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT28_RESET 0x00000000

#define IDC_REGS_SEMAPROT28_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT28_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT28_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT28_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT28_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT28_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT28_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT28_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA29_FLAG
#define IDC_REGS_SEMAVALIA29_FLAG
// SEMAVALIA29 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA29_t;
#endif
#define IDC_REGS_SEMAVALIA29_OFFSET 0xa0
#define IDC_REGS_SEMAVALIA29_SCOPE 0x01
#define IDC_REGS_SEMAVALIA29_SIZE 8
#define IDC_REGS_SEMAVALIA29_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA29_RESET 0x00000000

#define IDC_REGS_SEMAVALIA29_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA29_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA29_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA29_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA29_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA29_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA29_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA29_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES29_FLAG
#define IDC_REGS_RSRES29_FLAG
// RSRES29 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES29_t;
#endif
#define IDC_REGS_RSRES29_OFFSET 0xa8
#define IDC_REGS_RSRES29_SCOPE 0x01
#define IDC_REGS_RSRES29_SIZE 8
#define IDC_REGS_RSRES29_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES29_RESET 0x00000000

#define IDC_REGS_RSRES29_VALUE_LSB 0x0000
#define IDC_REGS_RSRES29_VALUE_MSB 0x0001
#define IDC_REGS_RSRES29_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES29_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES29_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES29_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES29_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES29_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES29_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES29_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES29_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES29_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES29_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT29_FLAG
#define IDC_REGS_SEMAPROT29_FLAG
// SEMAPROT29 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT29_t;
#endif
#define IDC_REGS_SEMAPROT29_OFFSET 0xb0
#define IDC_REGS_SEMAPROT29_SCOPE 0x01
#define IDC_REGS_SEMAPROT29_SIZE 32
#define IDC_REGS_SEMAPROT29_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT29_RESET 0x00000000

#define IDC_REGS_SEMAPROT29_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT29_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT29_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT29_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT29_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT29_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT29_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT29_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA30_FLAG
#define IDC_REGS_SEMAVALIA30_FLAG
// SEMAVALIA30 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA30_t;
#endif
#define IDC_REGS_SEMAVALIA30_OFFSET 0xc0
#define IDC_REGS_SEMAVALIA30_SCOPE 0x01
#define IDC_REGS_SEMAVALIA30_SIZE 8
#define IDC_REGS_SEMAVALIA30_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA30_RESET 0x00000000

#define IDC_REGS_SEMAVALIA30_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA30_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA30_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA30_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA30_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA30_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA30_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA30_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES30_FLAG
#define IDC_REGS_RSRES30_FLAG
// RSRES30 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES30_t;
#endif
#define IDC_REGS_RSRES30_OFFSET 0xc8
#define IDC_REGS_RSRES30_SCOPE 0x01
#define IDC_REGS_RSRES30_SIZE 8
#define IDC_REGS_RSRES30_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES30_RESET 0x00000000

#define IDC_REGS_RSRES30_VALUE_LSB 0x0000
#define IDC_REGS_RSRES30_VALUE_MSB 0x0001
#define IDC_REGS_RSRES30_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES30_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES30_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES30_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES30_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES30_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES30_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES30_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES30_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES30_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES30_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT30_FLAG
#define IDC_REGS_SEMAPROT30_FLAG
// SEMAPROT30 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT30_t;
#endif
#define IDC_REGS_SEMAPROT30_OFFSET 0xd0
#define IDC_REGS_SEMAPROT30_SCOPE 0x01
#define IDC_REGS_SEMAPROT30_SIZE 32
#define IDC_REGS_SEMAPROT30_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT30_RESET 0x00000000

#define IDC_REGS_SEMAPROT30_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT30_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT30_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT30_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT30_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT30_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT30_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT30_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALIA31_FLAG
#define IDC_REGS_SEMAVALIA31_FLAG
// SEMAVALIA31 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALIA31_t;
#endif
#define IDC_REGS_SEMAVALIA31_OFFSET 0xe0
#define IDC_REGS_SEMAVALIA31_SCOPE 0x01
#define IDC_REGS_SEMAVALIA31_SIZE 8
#define IDC_REGS_SEMAVALIA31_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALIA31_RESET 0x00000000

#define IDC_REGS_SEMAVALIA31_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALIA31_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALIA31_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALIA31_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALIA31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALIA31_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALIA31_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALIA31_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALIA31_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALIA31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSRES31_FLAG
#define IDC_REGS_RSRES31_FLAG
// RSRES31 desc:  Request Semaphore Ownership : Bit1:0 00 ignored 01 Request Semaphore
// and keep success flag to RSRES register. 10 Request Semaphore; keep
// resulting RSRES register and sign up for notification if semaphore was
// already busy. Bit 4:2 IA Event Number field (see encoding below)
// Request Semaphore Result: 0 Request didnt gain ownership 1 Request
// gained ownership.
typedef union {
    struct {
        uint8_t   value                :   2;    //  00 ignored 01 Request
                                                 // Semaphore and keep success
                                                 // flag to RSRES register. 10
                                                 // Request Semaphore; keep
                                                 // resulting RSRES register and
                                                 // sign up for notification if
                                                 // semaphore was already busy.
        uint8_t   ia_event             :   3;    //  IA Event Number field : 000:
                                                 // notification disabled 001
                                                 // 011: reserved 100: IA
                                                 // Notification Event 0 101: IA
                                                 // Notification Event 1 110: IA
                                                 // Notification Event 2 111: IA
                                                 // Notification Event 3
        uint8_t   RSVD_1               :   3;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSRES31_t;
#endif
#define IDC_REGS_RSRES31_OFFSET 0xe8
#define IDC_REGS_RSRES31_SCOPE 0x01
#define IDC_REGS_RSRES31_SIZE 8
#define IDC_REGS_RSRES31_BITFIELD_COUNT 0x03
#define IDC_REGS_RSRES31_RESET 0x00000000

#define IDC_REGS_RSRES31_VALUE_LSB 0x0000
#define IDC_REGS_RSRES31_VALUE_MSB 0x0001
#define IDC_REGS_RSRES31_VALUE_RANGE 0x0002
#define IDC_REGS_RSRES31_VALUE_MASK 0x00000003
#define IDC_REGS_RSRES31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES31_IA_EVENT_LSB 0x0002
#define IDC_REGS_RSRES31_IA_EVENT_MSB 0x0004
#define IDC_REGS_RSRES31_IA_EVENT_RANGE 0x0003
#define IDC_REGS_RSRES31_IA_EVENT_MASK 0x0000001c
#define IDC_REGS_RSRES31_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_RSRES31_RSVD_1_LSB 0x0005
#define IDC_REGS_RSRES31_RSVD_1_MSB 0x0007
#define IDC_REGS_RSRES31_RSVD_1_RANGE 0x0003
#define IDC_REGS_RSRES31_RSVD_1_MASK 0x000000e0
#define IDC_REGS_RSRES31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAPROT31_FLAG
#define IDC_REGS_SEMAPROT31_FLAG
// SEMAPROT31 desc:  Semaphore protection by IA
typedef union {
    struct {
        uint32_t  value                :   6;    //  Access Control of the
                                                 // Semaphore
        uint32_t  RSVD_1               :  26;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_SEMAPROT31_t;
#endif
#define IDC_REGS_SEMAPROT31_OFFSET 0xf0
#define IDC_REGS_SEMAPROT31_SCOPE 0x01
#define IDC_REGS_SEMAPROT31_SIZE 32
#define IDC_REGS_SEMAPROT31_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAPROT31_RESET 0x00000000

#define IDC_REGS_SEMAPROT31_VALUE_LSB 0x0000
#define IDC_REGS_SEMAPROT31_VALUE_MSB 0x0005
#define IDC_REGS_SEMAPROT31_VALUE_RANGE 0x0006
#define IDC_REGS_SEMAPROT31_VALUE_MASK 0x0000003f
#define IDC_REGS_SEMAPROT31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAPROT31_RSVD_1_LSB 0x0006
#define IDC_REGS_SEMAPROT31_RSVD_1_MSB 0x001f
#define IDC_REGS_SEMAPROT31_RSVD_1_RANGE 0x001a
#define IDC_REGS_SEMAPROT31_RSVD_1_MASK 0xffffffc0
#define IDC_REGS_SEMAPROT31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IA0ATTEN_FLAG
#define IDC_REGS_IA0ATTEN_FLAG
// IA0ATTEN desc:  Notify ICE n that a request is pending for it. The data written will
// carry an indication of the operation to be performed:
typedef union {
    struct {
        uint32_t  ICE_TARGET           :   5;    //  ICE number for the attentaion
                                                 // request - to which ICE to send
                                                 // the request
        uint32_t  NOTIFICATION_TYPE    :   3;    //  Notification TYPE: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : Notification
                                                 // address 0 101 : Notification
                                                 // address 1 110 : Notification
                                                 // address 2 111 : Notification
                                                 // address 3
        uint32_t  RSVD_1               :  24;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IA0ATTEN_t;
#endif
#define IDC_REGS_IA0ATTEN_OFFSET 0x00
#define IDC_REGS_IA0ATTEN_SCOPE 0x01
#define IDC_REGS_IA0ATTEN_SIZE 32
#define IDC_REGS_IA0ATTEN_BITFIELD_COUNT 0x03
#define IDC_REGS_IA0ATTEN_RESET 0x00000000

#define IDC_REGS_IA0ATTEN_ICE_TARGET_LSB 0x0000
#define IDC_REGS_IA0ATTEN_ICE_TARGET_MSB 0x0004
#define IDC_REGS_IA0ATTEN_ICE_TARGET_RANGE 0x0005
#define IDC_REGS_IA0ATTEN_ICE_TARGET_MASK 0x0000001f
#define IDC_REGS_IA0ATTEN_ICE_TARGET_RESET_VALUE 0x00000000

#define IDC_REGS_IA0ATTEN_NOTIFICATION_TYPE_LSB 0x0005
#define IDC_REGS_IA0ATTEN_NOTIFICATION_TYPE_MSB 0x0007
#define IDC_REGS_IA0ATTEN_NOTIFICATION_TYPE_RANGE 0x0003
#define IDC_REGS_IA0ATTEN_NOTIFICATION_TYPE_MASK 0x000000e0
#define IDC_REGS_IA0ATTEN_NOTIFICATION_TYPE_RESET_VALUE 0x00000000

#define IDC_REGS_IA0ATTEN_RSVD_1_LSB 0x0008
#define IDC_REGS_IA0ATTEN_RSVD_1_MSB 0x001f
#define IDC_REGS_IA0ATTEN_RSVD_1_RANGE 0x0018
#define IDC_REGS_IA0ATTEN_RSVD_1_MASK 0xffffff00
#define IDC_REGS_IA0ATTEN_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTNOTIA0_FLAG
#define IDC_REGS_EVCTNOTIA0_FLAG
// EVCTNOTIA0 desc:  ICE Counter Notification Control Register
typedef union {
    struct {
        uint32_t  COUNTER_NUMBER       :   6;    //  Counter Number : 0-31
        uint32_t  CONDITION            :   4;    //  Condiition for the counter :
                                                 // 0000b : notification disabled
                                                 // for this ICE/IA 0001b :
                                                 // counter > threshold 0010b :
                                                 // counter < threshold 0011b :
                                                 // counter >= threshold 0100b :
                                                 // counter <= threshold 0101b :
                                                 // Reserved 0110b : Reserved
                                                 // 0111b : counter change other
                                                 // : reserved
        uint32_t  IA_EVENT             :   3;    //  IA Event Number: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : IA
                                                 // Notification Event 0 101 : IA
                                                 // Notification Event 1 110 : IA
                                                 // Notification Event 2 111 : IA
                                                 // Notification Event 3
        uint32_t  RSVD_1               :   3;    //  Reserved
        uint32_t  THRESHOLD            :  16;    //  Threshold Value: 16 bit
                                                 // unsigned integer value.

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTNOTIA0_t;
#endif
#define IDC_REGS_EVCTNOTIA0_OFFSET 0x20
#define IDC_REGS_EVCTNOTIA0_SCOPE 0x01
#define IDC_REGS_EVCTNOTIA0_SIZE 32
#define IDC_REGS_EVCTNOTIA0_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTNOTIA0_RESET 0x00000000

#define IDC_REGS_EVCTNOTIA0_COUNTER_NUMBER_LSB 0x0000
#define IDC_REGS_EVCTNOTIA0_COUNTER_NUMBER_MSB 0x0005
#define IDC_REGS_EVCTNOTIA0_COUNTER_NUMBER_RANGE 0x0006
#define IDC_REGS_EVCTNOTIA0_COUNTER_NUMBER_MASK 0x0000003f
#define IDC_REGS_EVCTNOTIA0_COUNTER_NUMBER_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA0_CONDITION_LSB 0x0006
#define IDC_REGS_EVCTNOTIA0_CONDITION_MSB 0x0009
#define IDC_REGS_EVCTNOTIA0_CONDITION_RANGE 0x0004
#define IDC_REGS_EVCTNOTIA0_CONDITION_MASK 0x000003c0
#define IDC_REGS_EVCTNOTIA0_CONDITION_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA0_IA_EVENT_LSB 0x000a
#define IDC_REGS_EVCTNOTIA0_IA_EVENT_MSB 0x000c
#define IDC_REGS_EVCTNOTIA0_IA_EVENT_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA0_IA_EVENT_MASK 0x00001c00
#define IDC_REGS_EVCTNOTIA0_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA0_RSVD_1_LSB 0x000d
#define IDC_REGS_EVCTNOTIA0_RSVD_1_MSB 0x000f
#define IDC_REGS_EVCTNOTIA0_RSVD_1_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA0_RSVD_1_MASK 0x0000e000
#define IDC_REGS_EVCTNOTIA0_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA0_THRESHOLD_LSB 0x0010
#define IDC_REGS_EVCTNOTIA0_THRESHOLD_MSB 0x001f
#define IDC_REGS_EVCTNOTIA0_THRESHOLD_RANGE 0x0010
#define IDC_REGS_EVCTNOTIA0_THRESHOLD_MASK 0xffff0000
#define IDC_REGS_EVCTNOTIA0_THRESHOLD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTNOTIA1_FLAG
#define IDC_REGS_EVCTNOTIA1_FLAG
// EVCTNOTIA1 desc:  ICE Counter Notification Control Register
typedef union {
    struct {
        uint32_t  COUNTER_NUMBER       :   6;    //  Counter Number : 0-31
        uint32_t  CONDITION            :   4;    //  Condiition for the counter :
                                                 // 0000b : notification disabled
                                                 // for this ICE/IA 0001b :
                                                 // counter > threshold 0010b :
                                                 // counter < threshold 0011b :
                                                 // counter >= threshold 0100b :
                                                 // counter <= threshold 0101b :
                                                 // Reserved 0110b : Reserved
                                                 // 0111b : counter change other
                                                 // : reserved
        uint32_t  IA_EVENT             :   3;    //  IA Event Number: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : IA
                                                 // Notification Event 0 101 : IA
                                                 // Notification Event 1 110 : IA
                                                 // Notification Event 2 111 : IA
                                                 // Notification Event 3
        uint32_t  RSVD_1               :   3;    //  Reserved
        uint32_t  THRESHOLD            :  16;    //  Threshold Value: 16 bit
                                                 // unsigned integer value.

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTNOTIA1_t;
#endif
#define IDC_REGS_EVCTNOTIA1_OFFSET 0x28
#define IDC_REGS_EVCTNOTIA1_SCOPE 0x01
#define IDC_REGS_EVCTNOTIA1_SIZE 32
#define IDC_REGS_EVCTNOTIA1_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTNOTIA1_RESET 0x00000000

#define IDC_REGS_EVCTNOTIA1_COUNTER_NUMBER_LSB 0x0000
#define IDC_REGS_EVCTNOTIA1_COUNTER_NUMBER_MSB 0x0005
#define IDC_REGS_EVCTNOTIA1_COUNTER_NUMBER_RANGE 0x0006
#define IDC_REGS_EVCTNOTIA1_COUNTER_NUMBER_MASK 0x0000003f
#define IDC_REGS_EVCTNOTIA1_COUNTER_NUMBER_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA1_CONDITION_LSB 0x0006
#define IDC_REGS_EVCTNOTIA1_CONDITION_MSB 0x0009
#define IDC_REGS_EVCTNOTIA1_CONDITION_RANGE 0x0004
#define IDC_REGS_EVCTNOTIA1_CONDITION_MASK 0x000003c0
#define IDC_REGS_EVCTNOTIA1_CONDITION_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA1_IA_EVENT_LSB 0x000a
#define IDC_REGS_EVCTNOTIA1_IA_EVENT_MSB 0x000c
#define IDC_REGS_EVCTNOTIA1_IA_EVENT_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA1_IA_EVENT_MASK 0x00001c00
#define IDC_REGS_EVCTNOTIA1_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA1_RSVD_1_LSB 0x000d
#define IDC_REGS_EVCTNOTIA1_RSVD_1_MSB 0x000f
#define IDC_REGS_EVCTNOTIA1_RSVD_1_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA1_RSVD_1_MASK 0x0000e000
#define IDC_REGS_EVCTNOTIA1_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA1_THRESHOLD_LSB 0x0010
#define IDC_REGS_EVCTNOTIA1_THRESHOLD_MSB 0x001f
#define IDC_REGS_EVCTNOTIA1_THRESHOLD_RANGE 0x0010
#define IDC_REGS_EVCTNOTIA1_THRESHOLD_MASK 0xffff0000
#define IDC_REGS_EVCTNOTIA1_THRESHOLD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTNOTIA2_FLAG
#define IDC_REGS_EVCTNOTIA2_FLAG
// EVCTNOTIA2 desc:  ICE Counter Notification Control Register
typedef union {
    struct {
        uint32_t  COUNTER_NUMBER       :   6;    //  Counter Number : 0-31
        uint32_t  CONDITION            :   4;    //  Condiition for the counter :
                                                 // 0000b : notification disabled
                                                 // for this ICE/IA 0001b :
                                                 // counter > threshold 0010b :
                                                 // counter < threshold 0011b :
                                                 // counter >= threshold 0100b :
                                                 // counter <= threshold 0101b :
                                                 // Reserved 0110b : Reserved
                                                 // 0111b : counter change other
                                                 // : reserved
        uint32_t  IA_EVENT             :   3;    //  IA Event Number: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : IA
                                                 // Notification Event 0 101 : IA
                                                 // Notification Event 1 110 : IA
                                                 // Notification Event 2 111 : IA
                                                 // Notification Event 3
        uint32_t  RSVD_1               :   3;    //  Reserved
        uint32_t  THRESHOLD            :  16;    //  Threshold Value: 16 bit
                                                 // unsigned integer value.

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTNOTIA2_t;
#endif
#define IDC_REGS_EVCTNOTIA2_OFFSET 0x30
#define IDC_REGS_EVCTNOTIA2_SCOPE 0x01
#define IDC_REGS_EVCTNOTIA2_SIZE 32
#define IDC_REGS_EVCTNOTIA2_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTNOTIA2_RESET 0x00000000

#define IDC_REGS_EVCTNOTIA2_COUNTER_NUMBER_LSB 0x0000
#define IDC_REGS_EVCTNOTIA2_COUNTER_NUMBER_MSB 0x0005
#define IDC_REGS_EVCTNOTIA2_COUNTER_NUMBER_RANGE 0x0006
#define IDC_REGS_EVCTNOTIA2_COUNTER_NUMBER_MASK 0x0000003f
#define IDC_REGS_EVCTNOTIA2_COUNTER_NUMBER_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA2_CONDITION_LSB 0x0006
#define IDC_REGS_EVCTNOTIA2_CONDITION_MSB 0x0009
#define IDC_REGS_EVCTNOTIA2_CONDITION_RANGE 0x0004
#define IDC_REGS_EVCTNOTIA2_CONDITION_MASK 0x000003c0
#define IDC_REGS_EVCTNOTIA2_CONDITION_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA2_IA_EVENT_LSB 0x000a
#define IDC_REGS_EVCTNOTIA2_IA_EVENT_MSB 0x000c
#define IDC_REGS_EVCTNOTIA2_IA_EVENT_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA2_IA_EVENT_MASK 0x00001c00
#define IDC_REGS_EVCTNOTIA2_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA2_RSVD_1_LSB 0x000d
#define IDC_REGS_EVCTNOTIA2_RSVD_1_MSB 0x000f
#define IDC_REGS_EVCTNOTIA2_RSVD_1_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA2_RSVD_1_MASK 0x0000e000
#define IDC_REGS_EVCTNOTIA2_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA2_THRESHOLD_LSB 0x0010
#define IDC_REGS_EVCTNOTIA2_THRESHOLD_MSB 0x001f
#define IDC_REGS_EVCTNOTIA2_THRESHOLD_RANGE 0x0010
#define IDC_REGS_EVCTNOTIA2_THRESHOLD_MASK 0xffff0000
#define IDC_REGS_EVCTNOTIA2_THRESHOLD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTNOTIA3_FLAG
#define IDC_REGS_EVCTNOTIA3_FLAG
// EVCTNOTIA3 desc:  ICE Counter Notification Control Register
typedef union {
    struct {
        uint32_t  COUNTER_NUMBER       :   6;    //  Counter Number : 0-31
        uint32_t  CONDITION            :   4;    //  Condiition for the counter :
                                                 // 0000b : notification disabled
                                                 // for this ICE/IA 0001b :
                                                 // counter > threshold 0010b :
                                                 // counter < threshold 0011b :
                                                 // counter >= threshold 0100b :
                                                 // counter <= threshold 0101b :
                                                 // Reserved 0110b : Reserved
                                                 // 0111b : counter change other
                                                 // : reserved
        uint32_t  IA_EVENT             :   3;    //  IA Event Number: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : IA
                                                 // Notification Event 0 101 : IA
                                                 // Notification Event 1 110 : IA
                                                 // Notification Event 2 111 : IA
                                                 // Notification Event 3
        uint32_t  RSVD_1               :   3;    //  Reserved
        uint32_t  THRESHOLD            :  16;    //  Threshold Value: 16 bit
                                                 // unsigned integer value.

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTNOTIA3_t;
#endif
#define IDC_REGS_EVCTNOTIA3_OFFSET 0x38
#define IDC_REGS_EVCTNOTIA3_SCOPE 0x01
#define IDC_REGS_EVCTNOTIA3_SIZE 32
#define IDC_REGS_EVCTNOTIA3_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTNOTIA3_RESET 0x00000000

#define IDC_REGS_EVCTNOTIA3_COUNTER_NUMBER_LSB 0x0000
#define IDC_REGS_EVCTNOTIA3_COUNTER_NUMBER_MSB 0x0005
#define IDC_REGS_EVCTNOTIA3_COUNTER_NUMBER_RANGE 0x0006
#define IDC_REGS_EVCTNOTIA3_COUNTER_NUMBER_MASK 0x0000003f
#define IDC_REGS_EVCTNOTIA3_COUNTER_NUMBER_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA3_CONDITION_LSB 0x0006
#define IDC_REGS_EVCTNOTIA3_CONDITION_MSB 0x0009
#define IDC_REGS_EVCTNOTIA3_CONDITION_RANGE 0x0004
#define IDC_REGS_EVCTNOTIA3_CONDITION_MASK 0x000003c0
#define IDC_REGS_EVCTNOTIA3_CONDITION_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA3_IA_EVENT_LSB 0x000a
#define IDC_REGS_EVCTNOTIA3_IA_EVENT_MSB 0x000c
#define IDC_REGS_EVCTNOTIA3_IA_EVENT_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA3_IA_EVENT_MASK 0x00001c00
#define IDC_REGS_EVCTNOTIA3_IA_EVENT_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA3_RSVD_1_LSB 0x000d
#define IDC_REGS_EVCTNOTIA3_RSVD_1_MSB 0x000f
#define IDC_REGS_EVCTNOTIA3_RSVD_1_RANGE 0x0003
#define IDC_REGS_EVCTNOTIA3_RSVD_1_MASK 0x0000e000
#define IDC_REGS_EVCTNOTIA3_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTIA3_THRESHOLD_LSB 0x0010
#define IDC_REGS_EVCTNOTIA3_THRESHOLD_MSB 0x001f
#define IDC_REGS_EVCTNOTIA3_THRESHOLD_RANGE 0x0010
#define IDC_REGS_EVCTNOTIA3_THRESHOLD_MASK 0xffff0000
#define IDC_REGS_EVCTNOTIA3_THRESHOLD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE0_FLAG
#define IDC_REGS_EVCTICE0_FLAG
// EVCTICE0 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE0_t;
#endif
#define IDC_REGS_EVCTICE0_OFFSET 0x00
#define IDC_REGS_EVCTICE0_SCOPE 0x01
#define IDC_REGS_EVCTICE0_SIZE 32
#define IDC_REGS_EVCTICE0_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE0_RESET 0x00000000

#define IDC_REGS_EVCTICE0_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE0_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE0_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE0_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE0_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE0_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE0_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE0_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE0_FLAG
#define IDC_REGS_EVCTINCICE0_FLAG
// EVCTINCICE0 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE0_t;
#endif
#define IDC_REGS_EVCTINCICE0_OFFSET 0x08
#define IDC_REGS_EVCTINCICE0_SCOPE 0x01
#define IDC_REGS_EVCTINCICE0_SIZE 32
#define IDC_REGS_EVCTINCICE0_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE0_RESET 0x00000000

#define IDC_REGS_EVCTINCICE0_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE0_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE0_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE0_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE0_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE0_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE0_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE0_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE1_FLAG
#define IDC_REGS_EVCTICE1_FLAG
// EVCTICE1 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE1_t;
#endif
#define IDC_REGS_EVCTICE1_OFFSET 0x20
#define IDC_REGS_EVCTICE1_SCOPE 0x01
#define IDC_REGS_EVCTICE1_SIZE 32
#define IDC_REGS_EVCTICE1_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE1_RESET 0x00000000

#define IDC_REGS_EVCTICE1_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE1_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE1_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE1_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE1_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE1_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE1_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE1_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE1_FLAG
#define IDC_REGS_EVCTINCICE1_FLAG
// EVCTINCICE1 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE1_t;
#endif
#define IDC_REGS_EVCTINCICE1_OFFSET 0x28
#define IDC_REGS_EVCTINCICE1_SCOPE 0x01
#define IDC_REGS_EVCTINCICE1_SIZE 32
#define IDC_REGS_EVCTINCICE1_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE1_RESET 0x00000000

#define IDC_REGS_EVCTINCICE1_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE1_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE1_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE1_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE1_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE1_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE1_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE1_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE2_FLAG
#define IDC_REGS_EVCTICE2_FLAG
// EVCTICE2 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE2_t;
#endif
#define IDC_REGS_EVCTICE2_OFFSET 0x40
#define IDC_REGS_EVCTICE2_SCOPE 0x01
#define IDC_REGS_EVCTICE2_SIZE 32
#define IDC_REGS_EVCTICE2_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE2_RESET 0x00000000

#define IDC_REGS_EVCTICE2_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE2_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE2_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE2_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE2_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE2_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE2_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE2_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE2_FLAG
#define IDC_REGS_EVCTINCICE2_FLAG
// EVCTINCICE2 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE2_t;
#endif
#define IDC_REGS_EVCTINCICE2_OFFSET 0x48
#define IDC_REGS_EVCTINCICE2_SCOPE 0x01
#define IDC_REGS_EVCTINCICE2_SIZE 32
#define IDC_REGS_EVCTINCICE2_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE2_RESET 0x00000000

#define IDC_REGS_EVCTINCICE2_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE2_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE2_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE2_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE2_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE2_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE2_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE2_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE3_FLAG
#define IDC_REGS_EVCTICE3_FLAG
// EVCTICE3 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE3_t;
#endif
#define IDC_REGS_EVCTICE3_OFFSET 0x60
#define IDC_REGS_EVCTICE3_SCOPE 0x01
#define IDC_REGS_EVCTICE3_SIZE 32
#define IDC_REGS_EVCTICE3_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE3_RESET 0x00000000

#define IDC_REGS_EVCTICE3_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE3_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE3_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE3_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE3_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE3_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE3_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE3_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE3_FLAG
#define IDC_REGS_EVCTINCICE3_FLAG
// EVCTINCICE3 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE3_t;
#endif
#define IDC_REGS_EVCTINCICE3_OFFSET 0x68
#define IDC_REGS_EVCTINCICE3_SCOPE 0x01
#define IDC_REGS_EVCTINCICE3_SIZE 32
#define IDC_REGS_EVCTINCICE3_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE3_RESET 0x00000000

#define IDC_REGS_EVCTINCICE3_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE3_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE3_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE3_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE3_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE3_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE3_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE3_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE4_FLAG
#define IDC_REGS_EVCTICE4_FLAG
// EVCTICE4 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE4_t;
#endif
#define IDC_REGS_EVCTICE4_OFFSET 0x80
#define IDC_REGS_EVCTICE4_SCOPE 0x01
#define IDC_REGS_EVCTICE4_SIZE 32
#define IDC_REGS_EVCTICE4_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE4_RESET 0x00000000

#define IDC_REGS_EVCTICE4_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE4_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE4_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE4_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE4_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE4_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE4_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE4_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE4_FLAG
#define IDC_REGS_EVCTINCICE4_FLAG
// EVCTINCICE4 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE4_t;
#endif
#define IDC_REGS_EVCTINCICE4_OFFSET 0x88
#define IDC_REGS_EVCTINCICE4_SCOPE 0x01
#define IDC_REGS_EVCTINCICE4_SIZE 32
#define IDC_REGS_EVCTINCICE4_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE4_RESET 0x00000000

#define IDC_REGS_EVCTINCICE4_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE4_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE4_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE4_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE4_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE4_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE4_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE4_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE5_FLAG
#define IDC_REGS_EVCTICE5_FLAG
// EVCTICE5 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE5_t;
#endif
#define IDC_REGS_EVCTICE5_OFFSET 0xa0
#define IDC_REGS_EVCTICE5_SCOPE 0x01
#define IDC_REGS_EVCTICE5_SIZE 32
#define IDC_REGS_EVCTICE5_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE5_RESET 0x00000000

#define IDC_REGS_EVCTICE5_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE5_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE5_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE5_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE5_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE5_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE5_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE5_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE5_FLAG
#define IDC_REGS_EVCTINCICE5_FLAG
// EVCTINCICE5 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE5_t;
#endif
#define IDC_REGS_EVCTINCICE5_OFFSET 0xa8
#define IDC_REGS_EVCTINCICE5_SCOPE 0x01
#define IDC_REGS_EVCTINCICE5_SIZE 32
#define IDC_REGS_EVCTINCICE5_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE5_RESET 0x00000000

#define IDC_REGS_EVCTINCICE5_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE5_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE5_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE5_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE5_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE5_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE5_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE5_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE6_FLAG
#define IDC_REGS_EVCTICE6_FLAG
// EVCTICE6 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE6_t;
#endif
#define IDC_REGS_EVCTICE6_OFFSET 0xc0
#define IDC_REGS_EVCTICE6_SCOPE 0x01
#define IDC_REGS_EVCTICE6_SIZE 32
#define IDC_REGS_EVCTICE6_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE6_RESET 0x00000000

#define IDC_REGS_EVCTICE6_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE6_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE6_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE6_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE6_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE6_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE6_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE6_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE6_FLAG
#define IDC_REGS_EVCTINCICE6_FLAG
// EVCTINCICE6 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE6_t;
#endif
#define IDC_REGS_EVCTINCICE6_OFFSET 0xc8
#define IDC_REGS_EVCTINCICE6_SCOPE 0x01
#define IDC_REGS_EVCTINCICE6_SIZE 32
#define IDC_REGS_EVCTINCICE6_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE6_RESET 0x00000000

#define IDC_REGS_EVCTINCICE6_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE6_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE6_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE6_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE6_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE6_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE6_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE6_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE7_FLAG
#define IDC_REGS_EVCTICE7_FLAG
// EVCTICE7 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE7_t;
#endif
#define IDC_REGS_EVCTICE7_OFFSET 0xe0
#define IDC_REGS_EVCTICE7_SCOPE 0x01
#define IDC_REGS_EVCTICE7_SIZE 32
#define IDC_REGS_EVCTICE7_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE7_RESET 0x00000000

#define IDC_REGS_EVCTICE7_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE7_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE7_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE7_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE7_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE7_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE7_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE7_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE7_FLAG
#define IDC_REGS_EVCTINCICE7_FLAG
// EVCTINCICE7 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE7_t;
#endif
#define IDC_REGS_EVCTINCICE7_OFFSET 0xe8
#define IDC_REGS_EVCTINCICE7_SCOPE 0x01
#define IDC_REGS_EVCTINCICE7_SIZE 32
#define IDC_REGS_EVCTINCICE7_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE7_RESET 0x00000000

#define IDC_REGS_EVCTINCICE7_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE7_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE7_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE7_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE7_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE7_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE7_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE7_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE8_FLAG
#define IDC_REGS_EVCTICE8_FLAG
// EVCTICE8 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE8_t;
#endif
#define IDC_REGS_EVCTICE8_OFFSET 0x00
#define IDC_REGS_EVCTICE8_SCOPE 0x01
#define IDC_REGS_EVCTICE8_SIZE 32
#define IDC_REGS_EVCTICE8_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE8_RESET 0x00000000

#define IDC_REGS_EVCTICE8_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE8_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE8_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE8_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE8_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE8_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE8_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE8_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE8_FLAG
#define IDC_REGS_EVCTINCICE8_FLAG
// EVCTINCICE8 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE8_t;
#endif
#define IDC_REGS_EVCTINCICE8_OFFSET 0x08
#define IDC_REGS_EVCTINCICE8_SCOPE 0x01
#define IDC_REGS_EVCTINCICE8_SIZE 32
#define IDC_REGS_EVCTINCICE8_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE8_RESET 0x00000000

#define IDC_REGS_EVCTINCICE8_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE8_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE8_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE8_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE8_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE8_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE8_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE8_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE9_FLAG
#define IDC_REGS_EVCTICE9_FLAG
// EVCTICE9 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE9_t;
#endif
#define IDC_REGS_EVCTICE9_OFFSET 0x20
#define IDC_REGS_EVCTICE9_SCOPE 0x01
#define IDC_REGS_EVCTICE9_SIZE 32
#define IDC_REGS_EVCTICE9_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE9_RESET 0x00000000

#define IDC_REGS_EVCTICE9_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE9_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE9_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE9_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE9_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE9_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE9_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE9_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE9_FLAG
#define IDC_REGS_EVCTINCICE9_FLAG
// EVCTINCICE9 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE9_t;
#endif
#define IDC_REGS_EVCTINCICE9_OFFSET 0x28
#define IDC_REGS_EVCTINCICE9_SCOPE 0x01
#define IDC_REGS_EVCTINCICE9_SIZE 32
#define IDC_REGS_EVCTINCICE9_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE9_RESET 0x00000000

#define IDC_REGS_EVCTINCICE9_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE9_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE9_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE9_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE9_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE9_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE9_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE9_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE10_FLAG
#define IDC_REGS_EVCTICE10_FLAG
// EVCTICE10 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE10_t;
#endif
#define IDC_REGS_EVCTICE10_OFFSET 0x40
#define IDC_REGS_EVCTICE10_SCOPE 0x01
#define IDC_REGS_EVCTICE10_SIZE 32
#define IDC_REGS_EVCTICE10_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE10_RESET 0x00000000

#define IDC_REGS_EVCTICE10_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE10_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE10_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE10_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE10_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE10_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE10_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE10_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE10_FLAG
#define IDC_REGS_EVCTINCICE10_FLAG
// EVCTINCICE10 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE10_t;
#endif
#define IDC_REGS_EVCTINCICE10_OFFSET 0x48
#define IDC_REGS_EVCTINCICE10_SCOPE 0x01
#define IDC_REGS_EVCTINCICE10_SIZE 32
#define IDC_REGS_EVCTINCICE10_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE10_RESET 0x00000000

#define IDC_REGS_EVCTINCICE10_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE10_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE10_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE10_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE10_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE10_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE10_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE10_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE11_FLAG
#define IDC_REGS_EVCTICE11_FLAG
// EVCTICE11 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE11_t;
#endif
#define IDC_REGS_EVCTICE11_OFFSET 0x60
#define IDC_REGS_EVCTICE11_SCOPE 0x01
#define IDC_REGS_EVCTICE11_SIZE 32
#define IDC_REGS_EVCTICE11_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE11_RESET 0x00000000

#define IDC_REGS_EVCTICE11_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE11_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE11_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE11_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE11_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE11_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE11_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE11_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE11_FLAG
#define IDC_REGS_EVCTINCICE11_FLAG
// EVCTINCICE11 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE11_t;
#endif
#define IDC_REGS_EVCTINCICE11_OFFSET 0x68
#define IDC_REGS_EVCTINCICE11_SCOPE 0x01
#define IDC_REGS_EVCTINCICE11_SIZE 32
#define IDC_REGS_EVCTINCICE11_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE11_RESET 0x00000000

#define IDC_REGS_EVCTINCICE11_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE11_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE11_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE11_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE11_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE11_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE11_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE11_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE12_FLAG
#define IDC_REGS_EVCTICE12_FLAG
// EVCTICE12 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE12_t;
#endif
#define IDC_REGS_EVCTICE12_OFFSET 0x80
#define IDC_REGS_EVCTICE12_SCOPE 0x01
#define IDC_REGS_EVCTICE12_SIZE 32
#define IDC_REGS_EVCTICE12_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE12_RESET 0x00000000

#define IDC_REGS_EVCTICE12_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE12_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE12_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE12_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE12_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE12_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE12_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE12_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE12_FLAG
#define IDC_REGS_EVCTINCICE12_FLAG
// EVCTINCICE12 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE12_t;
#endif
#define IDC_REGS_EVCTINCICE12_OFFSET 0x88
#define IDC_REGS_EVCTINCICE12_SCOPE 0x01
#define IDC_REGS_EVCTINCICE12_SIZE 32
#define IDC_REGS_EVCTINCICE12_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE12_RESET 0x00000000

#define IDC_REGS_EVCTINCICE12_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE12_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE12_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE12_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE12_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE12_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE12_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE12_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE13_FLAG
#define IDC_REGS_EVCTICE13_FLAG
// EVCTICE13 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE13_t;
#endif
#define IDC_REGS_EVCTICE13_OFFSET 0xa0
#define IDC_REGS_EVCTICE13_SCOPE 0x01
#define IDC_REGS_EVCTICE13_SIZE 32
#define IDC_REGS_EVCTICE13_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE13_RESET 0x00000000

#define IDC_REGS_EVCTICE13_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE13_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE13_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE13_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE13_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE13_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE13_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE13_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE13_FLAG
#define IDC_REGS_EVCTINCICE13_FLAG
// EVCTINCICE13 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE13_t;
#endif
#define IDC_REGS_EVCTINCICE13_OFFSET 0xa8
#define IDC_REGS_EVCTINCICE13_SCOPE 0x01
#define IDC_REGS_EVCTINCICE13_SIZE 32
#define IDC_REGS_EVCTINCICE13_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE13_RESET 0x00000000

#define IDC_REGS_EVCTINCICE13_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE13_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE13_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE13_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE13_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE13_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE13_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE13_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE14_FLAG
#define IDC_REGS_EVCTICE14_FLAG
// EVCTICE14 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE14_t;
#endif
#define IDC_REGS_EVCTICE14_OFFSET 0xc0
#define IDC_REGS_EVCTICE14_SCOPE 0x01
#define IDC_REGS_EVCTICE14_SIZE 32
#define IDC_REGS_EVCTICE14_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE14_RESET 0x00000000

#define IDC_REGS_EVCTICE14_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE14_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE14_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE14_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE14_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE14_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE14_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE14_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE14_FLAG
#define IDC_REGS_EVCTINCICE14_FLAG
// EVCTINCICE14 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE14_t;
#endif
#define IDC_REGS_EVCTINCICE14_OFFSET 0xc8
#define IDC_REGS_EVCTINCICE14_SCOPE 0x01
#define IDC_REGS_EVCTINCICE14_SIZE 32
#define IDC_REGS_EVCTINCICE14_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE14_RESET 0x00000000

#define IDC_REGS_EVCTINCICE14_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE14_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE14_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE14_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE14_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE14_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE14_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE14_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE15_FLAG
#define IDC_REGS_EVCTICE15_FLAG
// EVCTICE15 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE15_t;
#endif
#define IDC_REGS_EVCTICE15_OFFSET 0xe0
#define IDC_REGS_EVCTICE15_SCOPE 0x01
#define IDC_REGS_EVCTICE15_SIZE 32
#define IDC_REGS_EVCTICE15_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE15_RESET 0x00000000

#define IDC_REGS_EVCTICE15_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE15_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE15_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE15_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE15_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE15_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE15_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE15_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE15_FLAG
#define IDC_REGS_EVCTINCICE15_FLAG
// EVCTINCICE15 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE15_t;
#endif
#define IDC_REGS_EVCTINCICE15_OFFSET 0xe8
#define IDC_REGS_EVCTINCICE15_SCOPE 0x01
#define IDC_REGS_EVCTINCICE15_SIZE 32
#define IDC_REGS_EVCTINCICE15_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE15_RESET 0x00000000

#define IDC_REGS_EVCTINCICE15_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE15_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE15_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE15_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE15_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE15_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE15_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE15_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE16_FLAG
#define IDC_REGS_EVCTICE16_FLAG
// EVCTICE16 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE16_t;
#endif
#define IDC_REGS_EVCTICE16_OFFSET 0x00
#define IDC_REGS_EVCTICE16_SCOPE 0x01
#define IDC_REGS_EVCTICE16_SIZE 32
#define IDC_REGS_EVCTICE16_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE16_RESET 0x00000000

#define IDC_REGS_EVCTICE16_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE16_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE16_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE16_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE16_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE16_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE16_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE16_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE16_FLAG
#define IDC_REGS_EVCTINCICE16_FLAG
// EVCTINCICE16 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE16_t;
#endif
#define IDC_REGS_EVCTINCICE16_OFFSET 0x08
#define IDC_REGS_EVCTINCICE16_SCOPE 0x01
#define IDC_REGS_EVCTINCICE16_SIZE 32
#define IDC_REGS_EVCTINCICE16_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE16_RESET 0x00000000

#define IDC_REGS_EVCTINCICE16_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE16_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE16_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE16_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE16_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE16_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE16_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE16_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE17_FLAG
#define IDC_REGS_EVCTICE17_FLAG
// EVCTICE17 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE17_t;
#endif
#define IDC_REGS_EVCTICE17_OFFSET 0x20
#define IDC_REGS_EVCTICE17_SCOPE 0x01
#define IDC_REGS_EVCTICE17_SIZE 32
#define IDC_REGS_EVCTICE17_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE17_RESET 0x00000000

#define IDC_REGS_EVCTICE17_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE17_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE17_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE17_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE17_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE17_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE17_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE17_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE17_FLAG
#define IDC_REGS_EVCTINCICE17_FLAG
// EVCTINCICE17 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE17_t;
#endif
#define IDC_REGS_EVCTINCICE17_OFFSET 0x28
#define IDC_REGS_EVCTINCICE17_SCOPE 0x01
#define IDC_REGS_EVCTINCICE17_SIZE 32
#define IDC_REGS_EVCTINCICE17_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE17_RESET 0x00000000

#define IDC_REGS_EVCTINCICE17_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE17_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE17_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE17_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE17_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE17_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE17_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE17_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE18_FLAG
#define IDC_REGS_EVCTICE18_FLAG
// EVCTICE18 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE18_t;
#endif
#define IDC_REGS_EVCTICE18_OFFSET 0x40
#define IDC_REGS_EVCTICE18_SCOPE 0x01
#define IDC_REGS_EVCTICE18_SIZE 32
#define IDC_REGS_EVCTICE18_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE18_RESET 0x00000000

#define IDC_REGS_EVCTICE18_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE18_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE18_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE18_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE18_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE18_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE18_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE18_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE18_FLAG
#define IDC_REGS_EVCTINCICE18_FLAG
// EVCTINCICE18 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE18_t;
#endif
#define IDC_REGS_EVCTINCICE18_OFFSET 0x48
#define IDC_REGS_EVCTINCICE18_SCOPE 0x01
#define IDC_REGS_EVCTINCICE18_SIZE 32
#define IDC_REGS_EVCTINCICE18_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE18_RESET 0x00000000

#define IDC_REGS_EVCTINCICE18_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE18_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE18_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE18_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE18_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE18_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE18_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE18_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE19_FLAG
#define IDC_REGS_EVCTICE19_FLAG
// EVCTICE19 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE19_t;
#endif
#define IDC_REGS_EVCTICE19_OFFSET 0x60
#define IDC_REGS_EVCTICE19_SCOPE 0x01
#define IDC_REGS_EVCTICE19_SIZE 32
#define IDC_REGS_EVCTICE19_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE19_RESET 0x00000000

#define IDC_REGS_EVCTICE19_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE19_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE19_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE19_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE19_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE19_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE19_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE19_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE19_FLAG
#define IDC_REGS_EVCTINCICE19_FLAG
// EVCTINCICE19 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE19_t;
#endif
#define IDC_REGS_EVCTINCICE19_OFFSET 0x68
#define IDC_REGS_EVCTINCICE19_SCOPE 0x01
#define IDC_REGS_EVCTINCICE19_SIZE 32
#define IDC_REGS_EVCTINCICE19_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE19_RESET 0x00000000

#define IDC_REGS_EVCTINCICE19_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE19_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE19_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE19_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE19_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE19_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE19_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE19_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE20_FLAG
#define IDC_REGS_EVCTICE20_FLAG
// EVCTICE20 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE20_t;
#endif
#define IDC_REGS_EVCTICE20_OFFSET 0x80
#define IDC_REGS_EVCTICE20_SCOPE 0x01
#define IDC_REGS_EVCTICE20_SIZE 32
#define IDC_REGS_EVCTICE20_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE20_RESET 0x00000000

#define IDC_REGS_EVCTICE20_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE20_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE20_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE20_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE20_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE20_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE20_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE20_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE20_FLAG
#define IDC_REGS_EVCTINCICE20_FLAG
// EVCTINCICE20 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE20_t;
#endif
#define IDC_REGS_EVCTINCICE20_OFFSET 0x88
#define IDC_REGS_EVCTINCICE20_SCOPE 0x01
#define IDC_REGS_EVCTINCICE20_SIZE 32
#define IDC_REGS_EVCTINCICE20_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE20_RESET 0x00000000

#define IDC_REGS_EVCTINCICE20_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE20_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE20_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE20_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE20_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE20_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE20_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE20_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE21_FLAG
#define IDC_REGS_EVCTICE21_FLAG
// EVCTICE21 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE21_t;
#endif
#define IDC_REGS_EVCTICE21_OFFSET 0xa0
#define IDC_REGS_EVCTICE21_SCOPE 0x01
#define IDC_REGS_EVCTICE21_SIZE 32
#define IDC_REGS_EVCTICE21_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE21_RESET 0x00000000

#define IDC_REGS_EVCTICE21_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE21_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE21_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE21_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE21_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE21_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE21_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE21_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE21_FLAG
#define IDC_REGS_EVCTINCICE21_FLAG
// EVCTINCICE21 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE21_t;
#endif
#define IDC_REGS_EVCTINCICE21_OFFSET 0xa8
#define IDC_REGS_EVCTINCICE21_SCOPE 0x01
#define IDC_REGS_EVCTINCICE21_SIZE 32
#define IDC_REGS_EVCTINCICE21_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE21_RESET 0x00000000

#define IDC_REGS_EVCTINCICE21_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE21_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE21_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE21_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE21_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE21_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE21_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE21_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE22_FLAG
#define IDC_REGS_EVCTICE22_FLAG
// EVCTICE22 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE22_t;
#endif
#define IDC_REGS_EVCTICE22_OFFSET 0xc0
#define IDC_REGS_EVCTICE22_SCOPE 0x01
#define IDC_REGS_EVCTICE22_SIZE 32
#define IDC_REGS_EVCTICE22_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE22_RESET 0x00000000

#define IDC_REGS_EVCTICE22_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE22_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE22_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE22_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE22_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE22_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE22_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE22_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE22_FLAG
#define IDC_REGS_EVCTINCICE22_FLAG
// EVCTINCICE22 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE22_t;
#endif
#define IDC_REGS_EVCTINCICE22_OFFSET 0xc8
#define IDC_REGS_EVCTINCICE22_SCOPE 0x01
#define IDC_REGS_EVCTINCICE22_SIZE 32
#define IDC_REGS_EVCTINCICE22_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE22_RESET 0x00000000

#define IDC_REGS_EVCTINCICE22_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE22_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE22_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE22_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE22_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE22_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE22_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE22_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE23_FLAG
#define IDC_REGS_EVCTICE23_FLAG
// EVCTICE23 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE23_t;
#endif
#define IDC_REGS_EVCTICE23_OFFSET 0xe0
#define IDC_REGS_EVCTICE23_SCOPE 0x01
#define IDC_REGS_EVCTICE23_SIZE 32
#define IDC_REGS_EVCTICE23_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE23_RESET 0x00000000

#define IDC_REGS_EVCTICE23_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE23_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE23_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE23_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE23_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE23_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE23_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE23_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE23_FLAG
#define IDC_REGS_EVCTINCICE23_FLAG
// EVCTINCICE23 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE23_t;
#endif
#define IDC_REGS_EVCTINCICE23_OFFSET 0xe8
#define IDC_REGS_EVCTINCICE23_SCOPE 0x01
#define IDC_REGS_EVCTINCICE23_SIZE 32
#define IDC_REGS_EVCTINCICE23_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE23_RESET 0x00000000

#define IDC_REGS_EVCTINCICE23_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE23_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE23_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE23_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE23_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE23_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE23_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE23_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE24_FLAG
#define IDC_REGS_EVCTICE24_FLAG
// EVCTICE24 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE24_t;
#endif
#define IDC_REGS_EVCTICE24_OFFSET 0x00
#define IDC_REGS_EVCTICE24_SCOPE 0x01
#define IDC_REGS_EVCTICE24_SIZE 32
#define IDC_REGS_EVCTICE24_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE24_RESET 0x00000000

#define IDC_REGS_EVCTICE24_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE24_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE24_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE24_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE24_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE24_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE24_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE24_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE24_FLAG
#define IDC_REGS_EVCTINCICE24_FLAG
// EVCTINCICE24 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE24_t;
#endif
#define IDC_REGS_EVCTINCICE24_OFFSET 0x08
#define IDC_REGS_EVCTINCICE24_SCOPE 0x01
#define IDC_REGS_EVCTINCICE24_SIZE 32
#define IDC_REGS_EVCTINCICE24_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE24_RESET 0x00000000

#define IDC_REGS_EVCTINCICE24_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE24_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE24_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE24_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE24_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE24_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE24_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE24_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE25_FLAG
#define IDC_REGS_EVCTICE25_FLAG
// EVCTICE25 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE25_t;
#endif
#define IDC_REGS_EVCTICE25_OFFSET 0x20
#define IDC_REGS_EVCTICE25_SCOPE 0x01
#define IDC_REGS_EVCTICE25_SIZE 32
#define IDC_REGS_EVCTICE25_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE25_RESET 0x00000000

#define IDC_REGS_EVCTICE25_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE25_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE25_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE25_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE25_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE25_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE25_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE25_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE25_FLAG
#define IDC_REGS_EVCTINCICE25_FLAG
// EVCTINCICE25 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE25_t;
#endif
#define IDC_REGS_EVCTINCICE25_OFFSET 0x28
#define IDC_REGS_EVCTINCICE25_SCOPE 0x01
#define IDC_REGS_EVCTINCICE25_SIZE 32
#define IDC_REGS_EVCTINCICE25_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE25_RESET 0x00000000

#define IDC_REGS_EVCTINCICE25_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE25_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE25_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE25_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE25_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE25_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE25_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE25_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE26_FLAG
#define IDC_REGS_EVCTICE26_FLAG
// EVCTICE26 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE26_t;
#endif
#define IDC_REGS_EVCTICE26_OFFSET 0x40
#define IDC_REGS_EVCTICE26_SCOPE 0x01
#define IDC_REGS_EVCTICE26_SIZE 32
#define IDC_REGS_EVCTICE26_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE26_RESET 0x00000000

#define IDC_REGS_EVCTICE26_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE26_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE26_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE26_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE26_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE26_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE26_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE26_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE26_FLAG
#define IDC_REGS_EVCTINCICE26_FLAG
// EVCTINCICE26 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE26_t;
#endif
#define IDC_REGS_EVCTINCICE26_OFFSET 0x48
#define IDC_REGS_EVCTINCICE26_SCOPE 0x01
#define IDC_REGS_EVCTINCICE26_SIZE 32
#define IDC_REGS_EVCTINCICE26_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE26_RESET 0x00000000

#define IDC_REGS_EVCTINCICE26_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE26_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE26_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE26_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE26_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE26_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE26_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE26_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE27_FLAG
#define IDC_REGS_EVCTICE27_FLAG
// EVCTICE27 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE27_t;
#endif
#define IDC_REGS_EVCTICE27_OFFSET 0x60
#define IDC_REGS_EVCTICE27_SCOPE 0x01
#define IDC_REGS_EVCTICE27_SIZE 32
#define IDC_REGS_EVCTICE27_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE27_RESET 0x00000000

#define IDC_REGS_EVCTICE27_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE27_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE27_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE27_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE27_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE27_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE27_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE27_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE27_FLAG
#define IDC_REGS_EVCTINCICE27_FLAG
// EVCTINCICE27 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE27_t;
#endif
#define IDC_REGS_EVCTINCICE27_OFFSET 0x68
#define IDC_REGS_EVCTINCICE27_SCOPE 0x01
#define IDC_REGS_EVCTINCICE27_SIZE 32
#define IDC_REGS_EVCTINCICE27_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE27_RESET 0x00000000

#define IDC_REGS_EVCTINCICE27_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE27_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE27_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE27_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE27_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE27_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE27_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE27_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE28_FLAG
#define IDC_REGS_EVCTICE28_FLAG
// EVCTICE28 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE28_t;
#endif
#define IDC_REGS_EVCTICE28_OFFSET 0x80
#define IDC_REGS_EVCTICE28_SCOPE 0x01
#define IDC_REGS_EVCTICE28_SIZE 32
#define IDC_REGS_EVCTICE28_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE28_RESET 0x00000000

#define IDC_REGS_EVCTICE28_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE28_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE28_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE28_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE28_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE28_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE28_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE28_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE28_FLAG
#define IDC_REGS_EVCTINCICE28_FLAG
// EVCTINCICE28 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE28_t;
#endif
#define IDC_REGS_EVCTINCICE28_OFFSET 0x88
#define IDC_REGS_EVCTINCICE28_SCOPE 0x01
#define IDC_REGS_EVCTINCICE28_SIZE 32
#define IDC_REGS_EVCTINCICE28_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE28_RESET 0x00000000

#define IDC_REGS_EVCTINCICE28_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE28_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE28_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE28_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE28_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE28_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE28_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE28_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE29_FLAG
#define IDC_REGS_EVCTICE29_FLAG
// EVCTICE29 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE29_t;
#endif
#define IDC_REGS_EVCTICE29_OFFSET 0xa0
#define IDC_REGS_EVCTICE29_SCOPE 0x01
#define IDC_REGS_EVCTICE29_SIZE 32
#define IDC_REGS_EVCTICE29_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE29_RESET 0x00000000

#define IDC_REGS_EVCTICE29_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE29_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE29_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE29_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE29_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE29_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE29_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE29_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE29_FLAG
#define IDC_REGS_EVCTINCICE29_FLAG
// EVCTINCICE29 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE29_t;
#endif
#define IDC_REGS_EVCTINCICE29_OFFSET 0xa8
#define IDC_REGS_EVCTINCICE29_SCOPE 0x01
#define IDC_REGS_EVCTINCICE29_SIZE 32
#define IDC_REGS_EVCTINCICE29_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE29_RESET 0x00000000

#define IDC_REGS_EVCTINCICE29_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE29_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE29_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE29_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE29_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE29_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE29_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE29_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE30_FLAG
#define IDC_REGS_EVCTICE30_FLAG
// EVCTICE30 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE30_t;
#endif
#define IDC_REGS_EVCTICE30_OFFSET 0xc0
#define IDC_REGS_EVCTICE30_SCOPE 0x01
#define IDC_REGS_EVCTICE30_SIZE 32
#define IDC_REGS_EVCTICE30_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE30_RESET 0x00000000

#define IDC_REGS_EVCTICE30_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE30_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE30_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE30_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE30_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE30_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE30_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE30_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE30_FLAG
#define IDC_REGS_EVCTINCICE30_FLAG
// EVCTINCICE30 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE30_t;
#endif
#define IDC_REGS_EVCTINCICE30_OFFSET 0xc8
#define IDC_REGS_EVCTINCICE30_SCOPE 0x01
#define IDC_REGS_EVCTINCICE30_SIZE 32
#define IDC_REGS_EVCTINCICE30_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE30_RESET 0x00000000

#define IDC_REGS_EVCTINCICE30_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE30_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE30_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE30_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE30_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE30_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE30_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE30_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTICE31_FLAG
#define IDC_REGS_EVCTICE31_FLAG
// EVCTICE31 desc:  Counter register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint32_t  value                :  16;    //  counter register value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTICE31_t;
#endif
#define IDC_REGS_EVCTICE31_OFFSET 0xe0
#define IDC_REGS_EVCTICE31_SCOPE 0x01
#define IDC_REGS_EVCTICE31_SIZE 32
#define IDC_REGS_EVCTICE31_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTICE31_RESET 0x00000000

#define IDC_REGS_EVCTICE31_VALUE_LSB 0x0000
#define IDC_REGS_EVCTICE31_VALUE_MSB 0x000f
#define IDC_REGS_EVCTICE31_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTICE31_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTICE31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTICE31_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTICE31_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTICE31_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTICE31_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTICE31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTINCICE31_FLAG
#define IDC_REGS_EVCTINCICE31_FLAG
// EVCTINCICE31 desc:  value for incremnet the registers conter- can be negetive value -
// this is write only register - virutal register
typedef union {
    struct {
        uint32_t  value                :  16;    //  increment counter register
                                                 // value
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTINCICE31_t;
#endif
#define IDC_REGS_EVCTINCICE31_OFFSET 0xe8
#define IDC_REGS_EVCTINCICE31_SCOPE 0x01
#define IDC_REGS_EVCTINCICE31_SIZE 32
#define IDC_REGS_EVCTINCICE31_BITFIELD_COUNT 0x02
#define IDC_REGS_EVCTINCICE31_RESET 0x00000000

#define IDC_REGS_EVCTINCICE31_VALUE_LSB 0x0000
#define IDC_REGS_EVCTINCICE31_VALUE_MSB 0x000f
#define IDC_REGS_EVCTINCICE31_VALUE_RANGE 0x0010
#define IDC_REGS_EVCTINCICE31_VALUE_MASK 0x0000ffff
#define IDC_REGS_EVCTINCICE31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTINCICE31_RSVD_1_LSB 0x0010
#define IDC_REGS_EVCTINCICE31_RSVD_1_MSB 0x001f
#define IDC_REGS_EVCTINCICE31_RSVD_1_RANGE 0x0010
#define IDC_REGS_EVCTINCICE31_RSVD_1_MASK 0xffff0000
#define IDC_REGS_EVCTINCICE31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_EVCTNOTICE_FLAG
#define IDC_REGS_EVCTNOTICE_FLAG
// EVCTNOTICE desc:  ICE Counter Notification Control Register
typedef union {
    struct {
        uint32_t  COUNTER_NUMBER       :   6;    //  Counter Number : 0-31
        uint32_t  CONDITION            :   4;    //  Condiition for the counter :
                                                 // 0000b : notification disabled
                                                 // for this ICE/IA 0001b :
                                                 // counter > threshold 0010b :
                                                 // counter < threshold 0011b :
                                                 // counter >= threshold 0100b :
                                                 // counter <= threshold 0101b :
                                                 // Reserved 0110b : Reserved
                                                 // 0111b : counter change other
                                                 // : reserved
        uint32_t  NOTIFICATION_TYPE    :   3;    //  Notification Type : 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : Notification
                                                 // address 0 101 : Notification
                                                 // address 1 110 : Notification
                                                 // address 2 111 : Notification
                                                 // address 3
        uint32_t  RSVD_1               :   3;    //  Reserved
        uint32_t  THRESHOLD            :  16;    //  Threshold Value: 16 bit
                                                 // unsigned integer value.

    }                                field;
    uint32_t                         val;
} IDC_REGS_EVCTNOTICE_t;
#endif
#define IDC_REGS_EVCTNOTICE_OFFSET 0x00
#define IDC_REGS_EVCTNOTICE_SCOPE 0x01
#define IDC_REGS_EVCTNOTICE_SIZE 32
#define IDC_REGS_EVCTNOTICE_BITFIELD_COUNT 0x05
#define IDC_REGS_EVCTNOTICE_RESET 0x00000000

#define IDC_REGS_EVCTNOTICE_COUNTER_NUMBER_LSB 0x0000
#define IDC_REGS_EVCTNOTICE_COUNTER_NUMBER_MSB 0x0005
#define IDC_REGS_EVCTNOTICE_COUNTER_NUMBER_RANGE 0x0006
#define IDC_REGS_EVCTNOTICE_COUNTER_NUMBER_MASK 0x0000003f
#define IDC_REGS_EVCTNOTICE_COUNTER_NUMBER_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTICE_CONDITION_LSB 0x0006
#define IDC_REGS_EVCTNOTICE_CONDITION_MSB 0x0009
#define IDC_REGS_EVCTNOTICE_CONDITION_RANGE 0x0004
#define IDC_REGS_EVCTNOTICE_CONDITION_MASK 0x000003c0
#define IDC_REGS_EVCTNOTICE_CONDITION_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTICE_NOTIFICATION_TYPE_LSB 0x000a
#define IDC_REGS_EVCTNOTICE_NOTIFICATION_TYPE_MSB 0x000c
#define IDC_REGS_EVCTNOTICE_NOTIFICATION_TYPE_RANGE 0x0003
#define IDC_REGS_EVCTNOTICE_NOTIFICATION_TYPE_MASK 0x00001c00
#define IDC_REGS_EVCTNOTICE_NOTIFICATION_TYPE_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTICE_RSVD_1_LSB 0x000d
#define IDC_REGS_EVCTNOTICE_RSVD_1_MSB 0x000f
#define IDC_REGS_EVCTNOTICE_RSVD_1_RANGE 0x0003
#define IDC_REGS_EVCTNOTICE_RSVD_1_MASK 0x0000e000
#define IDC_REGS_EVCTNOTICE_RSVD_1_RESET_VALUE 0x00000000

#define IDC_REGS_EVCTNOTICE_THRESHOLD_LSB 0x0010
#define IDC_REGS_EVCTNOTICE_THRESHOLD_MSB 0x001f
#define IDC_REGS_EVCTNOTICE_THRESHOLD_RANGE 0x0010
#define IDC_REGS_EVCTNOTICE_THRESHOLD_MASK 0xffff0000
#define IDC_REGS_EVCTNOTICE_THRESHOLD_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEATTEN_FLAG
#define IDC_REGS_ICEATTEN_FLAG
// ICEATTEN desc:  Notify ICE n that a request is pending for it. The data written will
// carry an indication of the operation to be performed:
typedef union {
    struct {
        uint32_t  ICE_TARGET           :   5;    //  ICE number for the attentaion
                                                 // request - to which ICE to send
                                                 // the request
        uint32_t  NOTIFICATION_TYPE    :   3;    //  Notification TYPE: 000 :
                                                 // notification disabled 001 011
                                                 // : reserved 100 : Notification
                                                 // address 0 101 : Notification
                                                 // address 1 110 : Notification
                                                 // address 2 111 : Notification
                                                 // address 3
        uint32_t  RSVD_1               :  24;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEATTEN_t;
#endif
#define IDC_REGS_ICEATTEN_OFFSET 0x10
#define IDC_REGS_ICEATTEN_SCOPE 0x01
#define IDC_REGS_ICEATTEN_SIZE 32
#define IDC_REGS_ICEATTEN_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEATTEN_RESET 0x00000000

#define IDC_REGS_ICEATTEN_ICE_TARGET_LSB 0x0000
#define IDC_REGS_ICEATTEN_ICE_TARGET_MSB 0x0004
#define IDC_REGS_ICEATTEN_ICE_TARGET_RANGE 0x0005
#define IDC_REGS_ICEATTEN_ICE_TARGET_MASK 0x0000001f
#define IDC_REGS_ICEATTEN_ICE_TARGET_RESET_VALUE 0x00000000

#define IDC_REGS_ICEATTEN_NOTIFICATION_TYPE_LSB 0x0005
#define IDC_REGS_ICEATTEN_NOTIFICATION_TYPE_MSB 0x0007
#define IDC_REGS_ICEATTEN_NOTIFICATION_TYPE_RANGE 0x0003
#define IDC_REGS_ICEATTEN_NOTIFICATION_TYPE_MASK 0x000000e0
#define IDC_REGS_ICEATTEN_NOTIFICATION_TYPE_RESET_VALUE 0x00000000

#define IDC_REGS_ICEATTEN_RSVD_1_LSB 0x0008
#define IDC_REGS_ICEATTEN_RSVD_1_MSB 0x001f
#define IDC_REGS_ICEATTEN_RSVD_1_RANGE 0x0018
#define IDC_REGS_ICEATTEN_RSVD_1_MASK 0xffffff00
#define IDC_REGS_ICEATTEN_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE0_FLAG
#define IDC_REGS_SEMAVALICE0_FLAG
// SEMAVALICE0 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE0_t;
#endif
#define IDC_REGS_SEMAVALICE0_OFFSET 0x00
#define IDC_REGS_SEMAVALICE0_SCOPE 0x01
#define IDC_REGS_SEMAVALICE0_SIZE 8
#define IDC_REGS_SEMAVALICE0_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE0_RESET 0x00000000

#define IDC_REGS_SEMAVALICE0_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE0_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE0_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE0_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE0_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE0_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE0_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE0_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE0_FLAG
#define IDC_REGS_SEMAREQICE0_FLAG
// SEMAREQICE0 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE0_t;
#endif
#define IDC_REGS_SEMAREQICE0_OFFSET 0x08
#define IDC_REGS_SEMAREQICE0_SCOPE 0x01
#define IDC_REGS_SEMAREQICE0_SIZE 8
#define IDC_REGS_SEMAREQICE0_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE0_RESET 0x00000000

#define IDC_REGS_SEMAREQICE0_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE0_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE0_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE0_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE0_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE0_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE0_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE0_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE0_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE0_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW00_FLAG
#define IDC_REGS_RSOW00_FLAG
// RSOW00 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW00_t;
#endif
#define IDC_REGS_RSOW00_OFFSET 0x10
#define IDC_REGS_RSOW00_SCOPE 0x01
#define IDC_REGS_RSOW00_SIZE 8
#define IDC_REGS_RSOW00_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW00_RESET 0x00000000

#define IDC_REGS_RSOW00_VALUE_LSB 0x0000
#define IDC_REGS_RSOW00_VALUE_MSB 0x0000
#define IDC_REGS_RSOW00_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW00_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW00_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW00_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW00_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW00_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW00_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW00_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW10_FLAG
#define IDC_REGS_RSOW10_FLAG
// RSOW10 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW10_t;
#endif
#define IDC_REGS_RSOW10_OFFSET 0x18
#define IDC_REGS_RSOW10_SCOPE 0x01
#define IDC_REGS_RSOW10_SIZE 8
#define IDC_REGS_RSOW10_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW10_RESET 0x00000000

#define IDC_REGS_RSOW10_VALUE_LSB 0x0000
#define IDC_REGS_RSOW10_VALUE_MSB 0x0000
#define IDC_REGS_RSOW10_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW10_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW10_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW10_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW10_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW10_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW20_FLAG
#define IDC_REGS_RSOW20_FLAG
// RSOW20 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW20_t;
#endif
#define IDC_REGS_RSOW20_OFFSET 0x20
#define IDC_REGS_RSOW20_SCOPE 0x01
#define IDC_REGS_RSOW20_SIZE 8
#define IDC_REGS_RSOW20_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW20_RESET 0x00000000

#define IDC_REGS_RSOW20_VALUE_LSB 0x0000
#define IDC_REGS_RSOW20_VALUE_MSB 0x0000
#define IDC_REGS_RSOW20_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW20_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW20_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW20_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW20_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW20_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW30_FLAG
#define IDC_REGS_RSOW30_FLAG
// RSOW30 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW30_t;
#endif
#define IDC_REGS_RSOW30_OFFSET 0x28
#define IDC_REGS_RSOW30_SCOPE 0x01
#define IDC_REGS_RSOW30_SIZE 8
#define IDC_REGS_RSOW30_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW30_RESET 0x00000000

#define IDC_REGS_RSOW30_VALUE_LSB 0x0000
#define IDC_REGS_RSOW30_VALUE_MSB 0x0000
#define IDC_REGS_RSOW30_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW30_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW30_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW30_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW30_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW30_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE1_FLAG
#define IDC_REGS_SEMAVALICE1_FLAG
// SEMAVALICE1 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE1_t;
#endif
#define IDC_REGS_SEMAVALICE1_OFFSET 0x40
#define IDC_REGS_SEMAVALICE1_SCOPE 0x01
#define IDC_REGS_SEMAVALICE1_SIZE 8
#define IDC_REGS_SEMAVALICE1_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE1_RESET 0x00000000

#define IDC_REGS_SEMAVALICE1_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE1_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE1_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE1_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE1_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE1_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE1_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE1_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE1_FLAG
#define IDC_REGS_SEMAREQICE1_FLAG
// SEMAREQICE1 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE1_t;
#endif
#define IDC_REGS_SEMAREQICE1_OFFSET 0x48
#define IDC_REGS_SEMAREQICE1_SCOPE 0x01
#define IDC_REGS_SEMAREQICE1_SIZE 8
#define IDC_REGS_SEMAREQICE1_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE1_RESET 0x00000000

#define IDC_REGS_SEMAREQICE1_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE1_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE1_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE1_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE1_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE1_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE1_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE1_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE1_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW01_FLAG
#define IDC_REGS_RSOW01_FLAG
// RSOW01 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW01_t;
#endif
#define IDC_REGS_RSOW01_OFFSET 0x50
#define IDC_REGS_RSOW01_SCOPE 0x01
#define IDC_REGS_RSOW01_SIZE 8
#define IDC_REGS_RSOW01_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW01_RESET 0x00000000

#define IDC_REGS_RSOW01_VALUE_LSB 0x0000
#define IDC_REGS_RSOW01_VALUE_MSB 0x0000
#define IDC_REGS_RSOW01_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW01_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW01_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW01_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW01_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW01_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW01_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW01_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW11_FLAG
#define IDC_REGS_RSOW11_FLAG
// RSOW11 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW11_t;
#endif
#define IDC_REGS_RSOW11_OFFSET 0x58
#define IDC_REGS_RSOW11_SCOPE 0x01
#define IDC_REGS_RSOW11_SIZE 8
#define IDC_REGS_RSOW11_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW11_RESET 0x00000000

#define IDC_REGS_RSOW11_VALUE_LSB 0x0000
#define IDC_REGS_RSOW11_VALUE_MSB 0x0000
#define IDC_REGS_RSOW11_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW11_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW11_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW11_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW11_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW11_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW21_FLAG
#define IDC_REGS_RSOW21_FLAG
// RSOW21 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW21_t;
#endif
#define IDC_REGS_RSOW21_OFFSET 0x60
#define IDC_REGS_RSOW21_SCOPE 0x01
#define IDC_REGS_RSOW21_SIZE 8
#define IDC_REGS_RSOW21_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW21_RESET 0x00000000

#define IDC_REGS_RSOW21_VALUE_LSB 0x0000
#define IDC_REGS_RSOW21_VALUE_MSB 0x0000
#define IDC_REGS_RSOW21_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW21_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW21_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW21_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW21_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW21_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW31_FLAG
#define IDC_REGS_RSOW31_FLAG
// RSOW31 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW31_t;
#endif
#define IDC_REGS_RSOW31_OFFSET 0x68
#define IDC_REGS_RSOW31_SCOPE 0x01
#define IDC_REGS_RSOW31_SIZE 8
#define IDC_REGS_RSOW31_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW31_RESET 0x00000000

#define IDC_REGS_RSOW31_VALUE_LSB 0x0000
#define IDC_REGS_RSOW31_VALUE_MSB 0x0000
#define IDC_REGS_RSOW31_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW31_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW31_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW31_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW31_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW31_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE2_FLAG
#define IDC_REGS_SEMAVALICE2_FLAG
// SEMAVALICE2 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE2_t;
#endif
#define IDC_REGS_SEMAVALICE2_OFFSET 0x80
#define IDC_REGS_SEMAVALICE2_SCOPE 0x01
#define IDC_REGS_SEMAVALICE2_SIZE 8
#define IDC_REGS_SEMAVALICE2_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE2_RESET 0x00000000

#define IDC_REGS_SEMAVALICE2_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE2_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE2_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE2_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE2_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE2_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE2_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE2_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE2_FLAG
#define IDC_REGS_SEMAREQICE2_FLAG
// SEMAREQICE2 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE2_t;
#endif
#define IDC_REGS_SEMAREQICE2_OFFSET 0x88
#define IDC_REGS_SEMAREQICE2_SCOPE 0x01
#define IDC_REGS_SEMAREQICE2_SIZE 8
#define IDC_REGS_SEMAREQICE2_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE2_RESET 0x00000000

#define IDC_REGS_SEMAREQICE2_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE2_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE2_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE2_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE2_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE2_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE2_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE2_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE2_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW02_FLAG
#define IDC_REGS_RSOW02_FLAG
// RSOW02 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW02_t;
#endif
#define IDC_REGS_RSOW02_OFFSET 0x90
#define IDC_REGS_RSOW02_SCOPE 0x01
#define IDC_REGS_RSOW02_SIZE 8
#define IDC_REGS_RSOW02_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW02_RESET 0x00000000

#define IDC_REGS_RSOW02_VALUE_LSB 0x0000
#define IDC_REGS_RSOW02_VALUE_MSB 0x0000
#define IDC_REGS_RSOW02_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW02_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW02_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW02_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW02_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW02_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW02_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW02_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW12_FLAG
#define IDC_REGS_RSOW12_FLAG
// RSOW12 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW12_t;
#endif
#define IDC_REGS_RSOW12_OFFSET 0x98
#define IDC_REGS_RSOW12_SCOPE 0x01
#define IDC_REGS_RSOW12_SIZE 8
#define IDC_REGS_RSOW12_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW12_RESET 0x00000000

#define IDC_REGS_RSOW12_VALUE_LSB 0x0000
#define IDC_REGS_RSOW12_VALUE_MSB 0x0000
#define IDC_REGS_RSOW12_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW12_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW12_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW12_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW12_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW12_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW22_FLAG
#define IDC_REGS_RSOW22_FLAG
// RSOW22 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW22_t;
#endif
#define IDC_REGS_RSOW22_OFFSET 0xa0
#define IDC_REGS_RSOW22_SCOPE 0x01
#define IDC_REGS_RSOW22_SIZE 8
#define IDC_REGS_RSOW22_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW22_RESET 0x00000000

#define IDC_REGS_RSOW22_VALUE_LSB 0x0000
#define IDC_REGS_RSOW22_VALUE_MSB 0x0000
#define IDC_REGS_RSOW22_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW22_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW22_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW22_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW22_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW22_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW32_FLAG
#define IDC_REGS_RSOW32_FLAG
// RSOW32 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW32_t;
#endif
#define IDC_REGS_RSOW32_OFFSET 0xa8
#define IDC_REGS_RSOW32_SCOPE 0x01
#define IDC_REGS_RSOW32_SIZE 8
#define IDC_REGS_RSOW32_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW32_RESET 0x00000000

#define IDC_REGS_RSOW32_VALUE_LSB 0x0000
#define IDC_REGS_RSOW32_VALUE_MSB 0x0000
#define IDC_REGS_RSOW32_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW32_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW32_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW32_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW32_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW32_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW32_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW32_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE3_FLAG
#define IDC_REGS_SEMAVALICE3_FLAG
// SEMAVALICE3 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE3_t;
#endif
#define IDC_REGS_SEMAVALICE3_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE3_SCOPE 0x01
#define IDC_REGS_SEMAVALICE3_SIZE 8
#define IDC_REGS_SEMAVALICE3_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE3_RESET 0x00000000

#define IDC_REGS_SEMAVALICE3_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE3_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE3_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE3_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE3_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE3_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE3_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE3_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE3_FLAG
#define IDC_REGS_SEMAREQICE3_FLAG
// SEMAREQICE3 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE3_t;
#endif
#define IDC_REGS_SEMAREQICE3_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE3_SCOPE 0x01
#define IDC_REGS_SEMAREQICE3_SIZE 8
#define IDC_REGS_SEMAREQICE3_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE3_RESET 0x00000000

#define IDC_REGS_SEMAREQICE3_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE3_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE3_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE3_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE3_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE3_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE3_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE3_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE3_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE3_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW03_FLAG
#define IDC_REGS_RSOW03_FLAG
// RSOW03 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW03_t;
#endif
#define IDC_REGS_RSOW03_OFFSET 0xd0
#define IDC_REGS_RSOW03_SCOPE 0x01
#define IDC_REGS_RSOW03_SIZE 8
#define IDC_REGS_RSOW03_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW03_RESET 0x00000000

#define IDC_REGS_RSOW03_VALUE_LSB 0x0000
#define IDC_REGS_RSOW03_VALUE_MSB 0x0000
#define IDC_REGS_RSOW03_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW03_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW03_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW03_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW03_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW03_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW03_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW03_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW13_FLAG
#define IDC_REGS_RSOW13_FLAG
// RSOW13 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW13_t;
#endif
#define IDC_REGS_RSOW13_OFFSET 0xd8
#define IDC_REGS_RSOW13_SCOPE 0x01
#define IDC_REGS_RSOW13_SIZE 8
#define IDC_REGS_RSOW13_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW13_RESET 0x00000000

#define IDC_REGS_RSOW13_VALUE_LSB 0x0000
#define IDC_REGS_RSOW13_VALUE_MSB 0x0000
#define IDC_REGS_RSOW13_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW13_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW13_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW13_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW13_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW13_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW23_FLAG
#define IDC_REGS_RSOW23_FLAG
// RSOW23 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW23_t;
#endif
#define IDC_REGS_RSOW23_OFFSET 0xe0
#define IDC_REGS_RSOW23_SCOPE 0x01
#define IDC_REGS_RSOW23_SIZE 8
#define IDC_REGS_RSOW23_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW23_RESET 0x00000000

#define IDC_REGS_RSOW23_VALUE_LSB 0x0000
#define IDC_REGS_RSOW23_VALUE_MSB 0x0000
#define IDC_REGS_RSOW23_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW23_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW23_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW23_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW23_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW23_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW33_FLAG
#define IDC_REGS_RSOW33_FLAG
// RSOW33 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW33_t;
#endif
#define IDC_REGS_RSOW33_OFFSET 0xe8
#define IDC_REGS_RSOW33_SCOPE 0x01
#define IDC_REGS_RSOW33_SIZE 8
#define IDC_REGS_RSOW33_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW33_RESET 0x00000000

#define IDC_REGS_RSOW33_VALUE_LSB 0x0000
#define IDC_REGS_RSOW33_VALUE_MSB 0x0000
#define IDC_REGS_RSOW33_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW33_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW33_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW33_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW33_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW33_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW33_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW33_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE4_FLAG
#define IDC_REGS_SEMAVALICE4_FLAG
// SEMAVALICE4 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE4_t;
#endif
#define IDC_REGS_SEMAVALICE4_OFFSET 0x00
#define IDC_REGS_SEMAVALICE4_SCOPE 0x01
#define IDC_REGS_SEMAVALICE4_SIZE 8
#define IDC_REGS_SEMAVALICE4_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE4_RESET 0x00000000

#define IDC_REGS_SEMAVALICE4_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE4_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE4_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE4_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE4_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE4_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE4_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE4_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE4_FLAG
#define IDC_REGS_SEMAREQICE4_FLAG
// SEMAREQICE4 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE4_t;
#endif
#define IDC_REGS_SEMAREQICE4_OFFSET 0x08
#define IDC_REGS_SEMAREQICE4_SCOPE 0x01
#define IDC_REGS_SEMAREQICE4_SIZE 8
#define IDC_REGS_SEMAREQICE4_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE4_RESET 0x00000000

#define IDC_REGS_SEMAREQICE4_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE4_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE4_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE4_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE4_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE4_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE4_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE4_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE4_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE4_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW04_FLAG
#define IDC_REGS_RSOW04_FLAG
// RSOW04 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW04_t;
#endif
#define IDC_REGS_RSOW04_OFFSET 0x10
#define IDC_REGS_RSOW04_SCOPE 0x01
#define IDC_REGS_RSOW04_SIZE 8
#define IDC_REGS_RSOW04_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW04_RESET 0x00000000

#define IDC_REGS_RSOW04_VALUE_LSB 0x0000
#define IDC_REGS_RSOW04_VALUE_MSB 0x0000
#define IDC_REGS_RSOW04_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW04_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW04_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW04_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW04_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW04_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW04_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW04_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW14_FLAG
#define IDC_REGS_RSOW14_FLAG
// RSOW14 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW14_t;
#endif
#define IDC_REGS_RSOW14_OFFSET 0x18
#define IDC_REGS_RSOW14_SCOPE 0x01
#define IDC_REGS_RSOW14_SIZE 8
#define IDC_REGS_RSOW14_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW14_RESET 0x00000000

#define IDC_REGS_RSOW14_VALUE_LSB 0x0000
#define IDC_REGS_RSOW14_VALUE_MSB 0x0000
#define IDC_REGS_RSOW14_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW14_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW14_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW14_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW14_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW14_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW24_FLAG
#define IDC_REGS_RSOW24_FLAG
// RSOW24 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW24_t;
#endif
#define IDC_REGS_RSOW24_OFFSET 0x20
#define IDC_REGS_RSOW24_SCOPE 0x01
#define IDC_REGS_RSOW24_SIZE 8
#define IDC_REGS_RSOW24_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW24_RESET 0x00000000

#define IDC_REGS_RSOW24_VALUE_LSB 0x0000
#define IDC_REGS_RSOW24_VALUE_MSB 0x0000
#define IDC_REGS_RSOW24_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW24_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW24_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW24_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW24_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW24_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW34_FLAG
#define IDC_REGS_RSOW34_FLAG
// RSOW34 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW34_t;
#endif
#define IDC_REGS_RSOW34_OFFSET 0x28
#define IDC_REGS_RSOW34_SCOPE 0x01
#define IDC_REGS_RSOW34_SIZE 8
#define IDC_REGS_RSOW34_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW34_RESET 0x00000000

#define IDC_REGS_RSOW34_VALUE_LSB 0x0000
#define IDC_REGS_RSOW34_VALUE_MSB 0x0000
#define IDC_REGS_RSOW34_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW34_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW34_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW34_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW34_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW34_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW34_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW34_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE5_FLAG
#define IDC_REGS_SEMAVALICE5_FLAG
// SEMAVALICE5 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE5_t;
#endif
#define IDC_REGS_SEMAVALICE5_OFFSET 0x40
#define IDC_REGS_SEMAVALICE5_SCOPE 0x01
#define IDC_REGS_SEMAVALICE5_SIZE 8
#define IDC_REGS_SEMAVALICE5_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE5_RESET 0x00000000

#define IDC_REGS_SEMAVALICE5_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE5_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE5_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE5_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE5_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE5_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE5_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE5_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE5_FLAG
#define IDC_REGS_SEMAREQICE5_FLAG
// SEMAREQICE5 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE5_t;
#endif
#define IDC_REGS_SEMAREQICE5_OFFSET 0x48
#define IDC_REGS_SEMAREQICE5_SCOPE 0x01
#define IDC_REGS_SEMAREQICE5_SIZE 8
#define IDC_REGS_SEMAREQICE5_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE5_RESET 0x00000000

#define IDC_REGS_SEMAREQICE5_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE5_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE5_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE5_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE5_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE5_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE5_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE5_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE5_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE5_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW05_FLAG
#define IDC_REGS_RSOW05_FLAG
// RSOW05 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW05_t;
#endif
#define IDC_REGS_RSOW05_OFFSET 0x50
#define IDC_REGS_RSOW05_SCOPE 0x01
#define IDC_REGS_RSOW05_SIZE 8
#define IDC_REGS_RSOW05_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW05_RESET 0x00000000

#define IDC_REGS_RSOW05_VALUE_LSB 0x0000
#define IDC_REGS_RSOW05_VALUE_MSB 0x0000
#define IDC_REGS_RSOW05_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW05_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW05_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW05_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW05_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW05_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW05_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW05_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW15_FLAG
#define IDC_REGS_RSOW15_FLAG
// RSOW15 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW15_t;
#endif
#define IDC_REGS_RSOW15_OFFSET 0x58
#define IDC_REGS_RSOW15_SCOPE 0x01
#define IDC_REGS_RSOW15_SIZE 8
#define IDC_REGS_RSOW15_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW15_RESET 0x00000000

#define IDC_REGS_RSOW15_VALUE_LSB 0x0000
#define IDC_REGS_RSOW15_VALUE_MSB 0x0000
#define IDC_REGS_RSOW15_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW15_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW15_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW15_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW15_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW15_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW25_FLAG
#define IDC_REGS_RSOW25_FLAG
// RSOW25 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW25_t;
#endif
#define IDC_REGS_RSOW25_OFFSET 0x60
#define IDC_REGS_RSOW25_SCOPE 0x01
#define IDC_REGS_RSOW25_SIZE 8
#define IDC_REGS_RSOW25_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW25_RESET 0x00000000

#define IDC_REGS_RSOW25_VALUE_LSB 0x0000
#define IDC_REGS_RSOW25_VALUE_MSB 0x0000
#define IDC_REGS_RSOW25_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW25_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW25_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW25_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW25_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW25_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW35_FLAG
#define IDC_REGS_RSOW35_FLAG
// RSOW35 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW35_t;
#endif
#define IDC_REGS_RSOW35_OFFSET 0x68
#define IDC_REGS_RSOW35_SCOPE 0x01
#define IDC_REGS_RSOW35_SIZE 8
#define IDC_REGS_RSOW35_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW35_RESET 0x00000000

#define IDC_REGS_RSOW35_VALUE_LSB 0x0000
#define IDC_REGS_RSOW35_VALUE_MSB 0x0000
#define IDC_REGS_RSOW35_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW35_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW35_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW35_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW35_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW35_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW35_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW35_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE6_FLAG
#define IDC_REGS_SEMAVALICE6_FLAG
// SEMAVALICE6 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE6_t;
#endif
#define IDC_REGS_SEMAVALICE6_OFFSET 0x80
#define IDC_REGS_SEMAVALICE6_SCOPE 0x01
#define IDC_REGS_SEMAVALICE6_SIZE 8
#define IDC_REGS_SEMAVALICE6_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE6_RESET 0x00000000

#define IDC_REGS_SEMAVALICE6_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE6_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE6_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE6_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE6_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE6_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE6_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE6_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE6_FLAG
#define IDC_REGS_SEMAREQICE6_FLAG
// SEMAREQICE6 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE6_t;
#endif
#define IDC_REGS_SEMAREQICE6_OFFSET 0x88
#define IDC_REGS_SEMAREQICE6_SCOPE 0x01
#define IDC_REGS_SEMAREQICE6_SIZE 8
#define IDC_REGS_SEMAREQICE6_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE6_RESET 0x00000000

#define IDC_REGS_SEMAREQICE6_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE6_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE6_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE6_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE6_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE6_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE6_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE6_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE6_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE6_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW06_FLAG
#define IDC_REGS_RSOW06_FLAG
// RSOW06 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW06_t;
#endif
#define IDC_REGS_RSOW06_OFFSET 0x90
#define IDC_REGS_RSOW06_SCOPE 0x01
#define IDC_REGS_RSOW06_SIZE 8
#define IDC_REGS_RSOW06_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW06_RESET 0x00000000

#define IDC_REGS_RSOW06_VALUE_LSB 0x0000
#define IDC_REGS_RSOW06_VALUE_MSB 0x0000
#define IDC_REGS_RSOW06_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW06_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW06_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW06_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW06_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW06_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW06_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW06_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW16_FLAG
#define IDC_REGS_RSOW16_FLAG
// RSOW16 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW16_t;
#endif
#define IDC_REGS_RSOW16_OFFSET 0x98
#define IDC_REGS_RSOW16_SCOPE 0x01
#define IDC_REGS_RSOW16_SIZE 8
#define IDC_REGS_RSOW16_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW16_RESET 0x00000000

#define IDC_REGS_RSOW16_VALUE_LSB 0x0000
#define IDC_REGS_RSOW16_VALUE_MSB 0x0000
#define IDC_REGS_RSOW16_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW16_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW16_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW16_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW16_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW16_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW26_FLAG
#define IDC_REGS_RSOW26_FLAG
// RSOW26 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW26_t;
#endif
#define IDC_REGS_RSOW26_OFFSET 0xa0
#define IDC_REGS_RSOW26_SCOPE 0x01
#define IDC_REGS_RSOW26_SIZE 8
#define IDC_REGS_RSOW26_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW26_RESET 0x00000000

#define IDC_REGS_RSOW26_VALUE_LSB 0x0000
#define IDC_REGS_RSOW26_VALUE_MSB 0x0000
#define IDC_REGS_RSOW26_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW26_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW26_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW26_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW26_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW26_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW36_FLAG
#define IDC_REGS_RSOW36_FLAG
// RSOW36 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW36_t;
#endif
#define IDC_REGS_RSOW36_OFFSET 0xa8
#define IDC_REGS_RSOW36_SCOPE 0x01
#define IDC_REGS_RSOW36_SIZE 8
#define IDC_REGS_RSOW36_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW36_RESET 0x00000000

#define IDC_REGS_RSOW36_VALUE_LSB 0x0000
#define IDC_REGS_RSOW36_VALUE_MSB 0x0000
#define IDC_REGS_RSOW36_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW36_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW36_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW36_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW36_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW36_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW36_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW36_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE7_FLAG
#define IDC_REGS_SEMAVALICE7_FLAG
// SEMAVALICE7 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE7_t;
#endif
#define IDC_REGS_SEMAVALICE7_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE7_SCOPE 0x01
#define IDC_REGS_SEMAVALICE7_SIZE 8
#define IDC_REGS_SEMAVALICE7_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE7_RESET 0x00000000

#define IDC_REGS_SEMAVALICE7_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE7_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE7_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE7_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE7_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE7_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE7_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE7_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE7_FLAG
#define IDC_REGS_SEMAREQICE7_FLAG
// SEMAREQICE7 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE7_t;
#endif
#define IDC_REGS_SEMAREQICE7_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE7_SCOPE 0x01
#define IDC_REGS_SEMAREQICE7_SIZE 8
#define IDC_REGS_SEMAREQICE7_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE7_RESET 0x00000000

#define IDC_REGS_SEMAREQICE7_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE7_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE7_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE7_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE7_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE7_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE7_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE7_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE7_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE7_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW07_FLAG
#define IDC_REGS_RSOW07_FLAG
// RSOW07 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW07_t;
#endif
#define IDC_REGS_RSOW07_OFFSET 0xd0
#define IDC_REGS_RSOW07_SCOPE 0x01
#define IDC_REGS_RSOW07_SIZE 8
#define IDC_REGS_RSOW07_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW07_RESET 0x00000000

#define IDC_REGS_RSOW07_VALUE_LSB 0x0000
#define IDC_REGS_RSOW07_VALUE_MSB 0x0000
#define IDC_REGS_RSOW07_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW07_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW07_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW07_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW07_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW07_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW07_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW07_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW17_FLAG
#define IDC_REGS_RSOW17_FLAG
// RSOW17 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW17_t;
#endif
#define IDC_REGS_RSOW17_OFFSET 0xd8
#define IDC_REGS_RSOW17_SCOPE 0x01
#define IDC_REGS_RSOW17_SIZE 8
#define IDC_REGS_RSOW17_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW17_RESET 0x00000000

#define IDC_REGS_RSOW17_VALUE_LSB 0x0000
#define IDC_REGS_RSOW17_VALUE_MSB 0x0000
#define IDC_REGS_RSOW17_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW17_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW17_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW17_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW17_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW17_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW27_FLAG
#define IDC_REGS_RSOW27_FLAG
// RSOW27 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW27_t;
#endif
#define IDC_REGS_RSOW27_OFFSET 0xe0
#define IDC_REGS_RSOW27_SCOPE 0x01
#define IDC_REGS_RSOW27_SIZE 8
#define IDC_REGS_RSOW27_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW27_RESET 0x00000000

#define IDC_REGS_RSOW27_VALUE_LSB 0x0000
#define IDC_REGS_RSOW27_VALUE_MSB 0x0000
#define IDC_REGS_RSOW27_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW27_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW27_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW27_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW27_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW27_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW37_FLAG
#define IDC_REGS_RSOW37_FLAG
// RSOW37 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW37_t;
#endif
#define IDC_REGS_RSOW37_OFFSET 0xe8
#define IDC_REGS_RSOW37_SCOPE 0x01
#define IDC_REGS_RSOW37_SIZE 8
#define IDC_REGS_RSOW37_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW37_RESET 0x00000000

#define IDC_REGS_RSOW37_VALUE_LSB 0x0000
#define IDC_REGS_RSOW37_VALUE_MSB 0x0000
#define IDC_REGS_RSOW37_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW37_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW37_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW37_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW37_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW37_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW37_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW37_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE8_FLAG
#define IDC_REGS_SEMAVALICE8_FLAG
// SEMAVALICE8 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE8_t;
#endif
#define IDC_REGS_SEMAVALICE8_OFFSET 0x00
#define IDC_REGS_SEMAVALICE8_SCOPE 0x01
#define IDC_REGS_SEMAVALICE8_SIZE 8
#define IDC_REGS_SEMAVALICE8_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE8_RESET 0x00000000

#define IDC_REGS_SEMAVALICE8_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE8_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE8_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE8_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE8_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE8_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE8_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE8_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE8_FLAG
#define IDC_REGS_SEMAREQICE8_FLAG
// SEMAREQICE8 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE8_t;
#endif
#define IDC_REGS_SEMAREQICE8_OFFSET 0x08
#define IDC_REGS_SEMAREQICE8_SCOPE 0x01
#define IDC_REGS_SEMAREQICE8_SIZE 8
#define IDC_REGS_SEMAREQICE8_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE8_RESET 0x00000000

#define IDC_REGS_SEMAREQICE8_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE8_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE8_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE8_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE8_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE8_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE8_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE8_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE8_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE8_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW08_FLAG
#define IDC_REGS_RSOW08_FLAG
// RSOW08 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW08_t;
#endif
#define IDC_REGS_RSOW08_OFFSET 0x10
#define IDC_REGS_RSOW08_SCOPE 0x01
#define IDC_REGS_RSOW08_SIZE 8
#define IDC_REGS_RSOW08_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW08_RESET 0x00000000

#define IDC_REGS_RSOW08_VALUE_LSB 0x0000
#define IDC_REGS_RSOW08_VALUE_MSB 0x0000
#define IDC_REGS_RSOW08_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW08_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW08_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW08_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW08_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW08_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW08_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW08_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW18_FLAG
#define IDC_REGS_RSOW18_FLAG
// RSOW18 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW18_t;
#endif
#define IDC_REGS_RSOW18_OFFSET 0x18
#define IDC_REGS_RSOW18_SCOPE 0x01
#define IDC_REGS_RSOW18_SIZE 8
#define IDC_REGS_RSOW18_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW18_RESET 0x00000000

#define IDC_REGS_RSOW18_VALUE_LSB 0x0000
#define IDC_REGS_RSOW18_VALUE_MSB 0x0000
#define IDC_REGS_RSOW18_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW18_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW18_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW18_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW18_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW18_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW28_FLAG
#define IDC_REGS_RSOW28_FLAG
// RSOW28 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW28_t;
#endif
#define IDC_REGS_RSOW28_OFFSET 0x20
#define IDC_REGS_RSOW28_SCOPE 0x01
#define IDC_REGS_RSOW28_SIZE 8
#define IDC_REGS_RSOW28_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW28_RESET 0x00000000

#define IDC_REGS_RSOW28_VALUE_LSB 0x0000
#define IDC_REGS_RSOW28_VALUE_MSB 0x0000
#define IDC_REGS_RSOW28_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW28_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW28_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW28_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW28_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW28_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW38_FLAG
#define IDC_REGS_RSOW38_FLAG
// RSOW38 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW38_t;
#endif
#define IDC_REGS_RSOW38_OFFSET 0x28
#define IDC_REGS_RSOW38_SCOPE 0x01
#define IDC_REGS_RSOW38_SIZE 8
#define IDC_REGS_RSOW38_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW38_RESET 0x00000000

#define IDC_REGS_RSOW38_VALUE_LSB 0x0000
#define IDC_REGS_RSOW38_VALUE_MSB 0x0000
#define IDC_REGS_RSOW38_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW38_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW38_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW38_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW38_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW38_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW38_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW38_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE9_FLAG
#define IDC_REGS_SEMAVALICE9_FLAG
// SEMAVALICE9 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE9_t;
#endif
#define IDC_REGS_SEMAVALICE9_OFFSET 0x40
#define IDC_REGS_SEMAVALICE9_SCOPE 0x01
#define IDC_REGS_SEMAVALICE9_SIZE 8
#define IDC_REGS_SEMAVALICE9_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE9_RESET 0x00000000

#define IDC_REGS_SEMAVALICE9_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE9_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE9_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE9_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE9_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE9_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE9_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE9_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE9_FLAG
#define IDC_REGS_SEMAREQICE9_FLAG
// SEMAREQICE9 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE9_t;
#endif
#define IDC_REGS_SEMAREQICE9_OFFSET 0x48
#define IDC_REGS_SEMAREQICE9_SCOPE 0x01
#define IDC_REGS_SEMAREQICE9_SIZE 8
#define IDC_REGS_SEMAREQICE9_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE9_RESET 0x00000000

#define IDC_REGS_SEMAREQICE9_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE9_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE9_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE9_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE9_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE9_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE9_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE9_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE9_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE9_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW09_FLAG
#define IDC_REGS_RSOW09_FLAG
// RSOW09 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW09_t;
#endif
#define IDC_REGS_RSOW09_OFFSET 0x50
#define IDC_REGS_RSOW09_SCOPE 0x01
#define IDC_REGS_RSOW09_SIZE 8
#define IDC_REGS_RSOW09_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW09_RESET 0x00000000

#define IDC_REGS_RSOW09_VALUE_LSB 0x0000
#define IDC_REGS_RSOW09_VALUE_MSB 0x0000
#define IDC_REGS_RSOW09_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW09_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW09_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW09_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW09_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW09_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW09_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW09_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW19_FLAG
#define IDC_REGS_RSOW19_FLAG
// RSOW19 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW19_t;
#endif
#define IDC_REGS_RSOW19_OFFSET 0x58
#define IDC_REGS_RSOW19_SCOPE 0x01
#define IDC_REGS_RSOW19_SIZE 8
#define IDC_REGS_RSOW19_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW19_RESET 0x00000000

#define IDC_REGS_RSOW19_VALUE_LSB 0x0000
#define IDC_REGS_RSOW19_VALUE_MSB 0x0000
#define IDC_REGS_RSOW19_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW19_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW19_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW19_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW19_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW19_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW29_FLAG
#define IDC_REGS_RSOW29_FLAG
// RSOW29 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW29_t;
#endif
#define IDC_REGS_RSOW29_OFFSET 0x60
#define IDC_REGS_RSOW29_SCOPE 0x01
#define IDC_REGS_RSOW29_SIZE 8
#define IDC_REGS_RSOW29_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW29_RESET 0x00000000

#define IDC_REGS_RSOW29_VALUE_LSB 0x0000
#define IDC_REGS_RSOW29_VALUE_MSB 0x0000
#define IDC_REGS_RSOW29_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW29_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW29_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW29_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW29_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW29_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW39_FLAG
#define IDC_REGS_RSOW39_FLAG
// RSOW39 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW39_t;
#endif
#define IDC_REGS_RSOW39_OFFSET 0x68
#define IDC_REGS_RSOW39_SCOPE 0x01
#define IDC_REGS_RSOW39_SIZE 8
#define IDC_REGS_RSOW39_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW39_RESET 0x00000000

#define IDC_REGS_RSOW39_VALUE_LSB 0x0000
#define IDC_REGS_RSOW39_VALUE_MSB 0x0000
#define IDC_REGS_RSOW39_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW39_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW39_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW39_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW39_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW39_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW39_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW39_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE10_FLAG
#define IDC_REGS_SEMAVALICE10_FLAG
// SEMAVALICE10 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE10_t;
#endif
#define IDC_REGS_SEMAVALICE10_OFFSET 0x80
#define IDC_REGS_SEMAVALICE10_SCOPE 0x01
#define IDC_REGS_SEMAVALICE10_SIZE 8
#define IDC_REGS_SEMAVALICE10_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE10_RESET 0x00000000

#define IDC_REGS_SEMAVALICE10_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE10_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE10_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE10_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE10_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE10_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE10_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE10_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE10_FLAG
#define IDC_REGS_SEMAREQICE10_FLAG
// SEMAREQICE10 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE10_t;
#endif
#define IDC_REGS_SEMAREQICE10_OFFSET 0x88
#define IDC_REGS_SEMAREQICE10_SCOPE 0x01
#define IDC_REGS_SEMAREQICE10_SIZE 8
#define IDC_REGS_SEMAREQICE10_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE10_RESET 0x00000000

#define IDC_REGS_SEMAREQICE10_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE10_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE10_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE10_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE10_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE10_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE10_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE10_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE10_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE10_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW010_FLAG
#define IDC_REGS_RSOW010_FLAG
// RSOW010 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW010_t;
#endif
#define IDC_REGS_RSOW010_OFFSET 0x90
#define IDC_REGS_RSOW010_SCOPE 0x01
#define IDC_REGS_RSOW010_SIZE 8
#define IDC_REGS_RSOW010_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW010_RESET 0x00000000

#define IDC_REGS_RSOW010_VALUE_LSB 0x0000
#define IDC_REGS_RSOW010_VALUE_MSB 0x0000
#define IDC_REGS_RSOW010_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW010_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW010_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW010_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW010_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW010_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW010_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW010_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW110_FLAG
#define IDC_REGS_RSOW110_FLAG
// RSOW110 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW110_t;
#endif
#define IDC_REGS_RSOW110_OFFSET 0x98
#define IDC_REGS_RSOW110_SCOPE 0x01
#define IDC_REGS_RSOW110_SIZE 8
#define IDC_REGS_RSOW110_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW110_RESET 0x00000000

#define IDC_REGS_RSOW110_VALUE_LSB 0x0000
#define IDC_REGS_RSOW110_VALUE_MSB 0x0000
#define IDC_REGS_RSOW110_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW110_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW110_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW110_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW110_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW110_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW110_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW110_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW210_FLAG
#define IDC_REGS_RSOW210_FLAG
// RSOW210 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW210_t;
#endif
#define IDC_REGS_RSOW210_OFFSET 0xa0
#define IDC_REGS_RSOW210_SCOPE 0x01
#define IDC_REGS_RSOW210_SIZE 8
#define IDC_REGS_RSOW210_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW210_RESET 0x00000000

#define IDC_REGS_RSOW210_VALUE_LSB 0x0000
#define IDC_REGS_RSOW210_VALUE_MSB 0x0000
#define IDC_REGS_RSOW210_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW210_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW210_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW210_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW210_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW210_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW210_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW210_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW310_FLAG
#define IDC_REGS_RSOW310_FLAG
// RSOW310 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW310_t;
#endif
#define IDC_REGS_RSOW310_OFFSET 0xa8
#define IDC_REGS_RSOW310_SCOPE 0x01
#define IDC_REGS_RSOW310_SIZE 8
#define IDC_REGS_RSOW310_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW310_RESET 0x00000000

#define IDC_REGS_RSOW310_VALUE_LSB 0x0000
#define IDC_REGS_RSOW310_VALUE_MSB 0x0000
#define IDC_REGS_RSOW310_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW310_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW310_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW310_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW310_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW310_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW310_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW310_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE11_FLAG
#define IDC_REGS_SEMAVALICE11_FLAG
// SEMAVALICE11 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE11_t;
#endif
#define IDC_REGS_SEMAVALICE11_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE11_SCOPE 0x01
#define IDC_REGS_SEMAVALICE11_SIZE 8
#define IDC_REGS_SEMAVALICE11_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE11_RESET 0x00000000

#define IDC_REGS_SEMAVALICE11_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE11_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE11_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE11_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE11_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE11_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE11_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE11_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE11_FLAG
#define IDC_REGS_SEMAREQICE11_FLAG
// SEMAREQICE11 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE11_t;
#endif
#define IDC_REGS_SEMAREQICE11_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE11_SCOPE 0x01
#define IDC_REGS_SEMAREQICE11_SIZE 8
#define IDC_REGS_SEMAREQICE11_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE11_RESET 0x00000000

#define IDC_REGS_SEMAREQICE11_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE11_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE11_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE11_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE11_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE11_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE11_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE11_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE11_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE11_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW011_FLAG
#define IDC_REGS_RSOW011_FLAG
// RSOW011 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW011_t;
#endif
#define IDC_REGS_RSOW011_OFFSET 0xd0
#define IDC_REGS_RSOW011_SCOPE 0x01
#define IDC_REGS_RSOW011_SIZE 8
#define IDC_REGS_RSOW011_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW011_RESET 0x00000000

#define IDC_REGS_RSOW011_VALUE_LSB 0x0000
#define IDC_REGS_RSOW011_VALUE_MSB 0x0000
#define IDC_REGS_RSOW011_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW011_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW011_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW011_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW011_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW011_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW011_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW011_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW111_FLAG
#define IDC_REGS_RSOW111_FLAG
// RSOW111 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW111_t;
#endif
#define IDC_REGS_RSOW111_OFFSET 0xd8
#define IDC_REGS_RSOW111_SCOPE 0x01
#define IDC_REGS_RSOW111_SIZE 8
#define IDC_REGS_RSOW111_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW111_RESET 0x00000000

#define IDC_REGS_RSOW111_VALUE_LSB 0x0000
#define IDC_REGS_RSOW111_VALUE_MSB 0x0000
#define IDC_REGS_RSOW111_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW111_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW111_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW111_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW111_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW111_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW111_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW111_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW211_FLAG
#define IDC_REGS_RSOW211_FLAG
// RSOW211 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW211_t;
#endif
#define IDC_REGS_RSOW211_OFFSET 0xe0
#define IDC_REGS_RSOW211_SCOPE 0x01
#define IDC_REGS_RSOW211_SIZE 8
#define IDC_REGS_RSOW211_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW211_RESET 0x00000000

#define IDC_REGS_RSOW211_VALUE_LSB 0x0000
#define IDC_REGS_RSOW211_VALUE_MSB 0x0000
#define IDC_REGS_RSOW211_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW211_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW211_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW211_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW211_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW211_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW211_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW211_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW311_FLAG
#define IDC_REGS_RSOW311_FLAG
// RSOW311 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW311_t;
#endif
#define IDC_REGS_RSOW311_OFFSET 0xe8
#define IDC_REGS_RSOW311_SCOPE 0x01
#define IDC_REGS_RSOW311_SIZE 8
#define IDC_REGS_RSOW311_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW311_RESET 0x00000000

#define IDC_REGS_RSOW311_VALUE_LSB 0x0000
#define IDC_REGS_RSOW311_VALUE_MSB 0x0000
#define IDC_REGS_RSOW311_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW311_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW311_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW311_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW311_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW311_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW311_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW311_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE12_FLAG
#define IDC_REGS_SEMAVALICE12_FLAG
// SEMAVALICE12 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE12_t;
#endif
#define IDC_REGS_SEMAVALICE12_OFFSET 0x00
#define IDC_REGS_SEMAVALICE12_SCOPE 0x01
#define IDC_REGS_SEMAVALICE12_SIZE 8
#define IDC_REGS_SEMAVALICE12_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE12_RESET 0x00000000

#define IDC_REGS_SEMAVALICE12_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE12_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE12_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE12_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE12_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE12_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE12_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE12_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE12_FLAG
#define IDC_REGS_SEMAREQICE12_FLAG
// SEMAREQICE12 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE12_t;
#endif
#define IDC_REGS_SEMAREQICE12_OFFSET 0x08
#define IDC_REGS_SEMAREQICE12_SCOPE 0x01
#define IDC_REGS_SEMAREQICE12_SIZE 8
#define IDC_REGS_SEMAREQICE12_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE12_RESET 0x00000000

#define IDC_REGS_SEMAREQICE12_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE12_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE12_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE12_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE12_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE12_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE12_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE12_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE12_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE12_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW012_FLAG
#define IDC_REGS_RSOW012_FLAG
// RSOW012 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW012_t;
#endif
#define IDC_REGS_RSOW012_OFFSET 0x10
#define IDC_REGS_RSOW012_SCOPE 0x01
#define IDC_REGS_RSOW012_SIZE 8
#define IDC_REGS_RSOW012_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW012_RESET 0x00000000

#define IDC_REGS_RSOW012_VALUE_LSB 0x0000
#define IDC_REGS_RSOW012_VALUE_MSB 0x0000
#define IDC_REGS_RSOW012_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW012_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW012_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW012_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW012_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW012_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW012_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW012_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW112_FLAG
#define IDC_REGS_RSOW112_FLAG
// RSOW112 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW112_t;
#endif
#define IDC_REGS_RSOW112_OFFSET 0x18
#define IDC_REGS_RSOW112_SCOPE 0x01
#define IDC_REGS_RSOW112_SIZE 8
#define IDC_REGS_RSOW112_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW112_RESET 0x00000000

#define IDC_REGS_RSOW112_VALUE_LSB 0x0000
#define IDC_REGS_RSOW112_VALUE_MSB 0x0000
#define IDC_REGS_RSOW112_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW112_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW112_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW112_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW112_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW112_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW112_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW112_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW212_FLAG
#define IDC_REGS_RSOW212_FLAG
// RSOW212 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW212_t;
#endif
#define IDC_REGS_RSOW212_OFFSET 0x20
#define IDC_REGS_RSOW212_SCOPE 0x01
#define IDC_REGS_RSOW212_SIZE 8
#define IDC_REGS_RSOW212_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW212_RESET 0x00000000

#define IDC_REGS_RSOW212_VALUE_LSB 0x0000
#define IDC_REGS_RSOW212_VALUE_MSB 0x0000
#define IDC_REGS_RSOW212_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW212_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW212_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW212_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW212_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW212_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW212_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW212_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW312_FLAG
#define IDC_REGS_RSOW312_FLAG
// RSOW312 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW312_t;
#endif
#define IDC_REGS_RSOW312_OFFSET 0x28
#define IDC_REGS_RSOW312_SCOPE 0x01
#define IDC_REGS_RSOW312_SIZE 8
#define IDC_REGS_RSOW312_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW312_RESET 0x00000000

#define IDC_REGS_RSOW312_VALUE_LSB 0x0000
#define IDC_REGS_RSOW312_VALUE_MSB 0x0000
#define IDC_REGS_RSOW312_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW312_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW312_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW312_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW312_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW312_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW312_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW312_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE13_FLAG
#define IDC_REGS_SEMAVALICE13_FLAG
// SEMAVALICE13 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE13_t;
#endif
#define IDC_REGS_SEMAVALICE13_OFFSET 0x40
#define IDC_REGS_SEMAVALICE13_SCOPE 0x01
#define IDC_REGS_SEMAVALICE13_SIZE 8
#define IDC_REGS_SEMAVALICE13_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE13_RESET 0x00000000

#define IDC_REGS_SEMAVALICE13_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE13_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE13_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE13_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE13_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE13_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE13_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE13_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE13_FLAG
#define IDC_REGS_SEMAREQICE13_FLAG
// SEMAREQICE13 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE13_t;
#endif
#define IDC_REGS_SEMAREQICE13_OFFSET 0x48
#define IDC_REGS_SEMAREQICE13_SCOPE 0x01
#define IDC_REGS_SEMAREQICE13_SIZE 8
#define IDC_REGS_SEMAREQICE13_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE13_RESET 0x00000000

#define IDC_REGS_SEMAREQICE13_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE13_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE13_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE13_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE13_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE13_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE13_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE13_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE13_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE13_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW013_FLAG
#define IDC_REGS_RSOW013_FLAG
// RSOW013 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW013_t;
#endif
#define IDC_REGS_RSOW013_OFFSET 0x50
#define IDC_REGS_RSOW013_SCOPE 0x01
#define IDC_REGS_RSOW013_SIZE 8
#define IDC_REGS_RSOW013_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW013_RESET 0x00000000

#define IDC_REGS_RSOW013_VALUE_LSB 0x0000
#define IDC_REGS_RSOW013_VALUE_MSB 0x0000
#define IDC_REGS_RSOW013_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW013_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW013_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW013_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW013_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW013_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW013_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW013_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW113_FLAG
#define IDC_REGS_RSOW113_FLAG
// RSOW113 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW113_t;
#endif
#define IDC_REGS_RSOW113_OFFSET 0x58
#define IDC_REGS_RSOW113_SCOPE 0x01
#define IDC_REGS_RSOW113_SIZE 8
#define IDC_REGS_RSOW113_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW113_RESET 0x00000000

#define IDC_REGS_RSOW113_VALUE_LSB 0x0000
#define IDC_REGS_RSOW113_VALUE_MSB 0x0000
#define IDC_REGS_RSOW113_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW113_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW113_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW113_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW113_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW113_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW113_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW113_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW213_FLAG
#define IDC_REGS_RSOW213_FLAG
// RSOW213 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW213_t;
#endif
#define IDC_REGS_RSOW213_OFFSET 0x60
#define IDC_REGS_RSOW213_SCOPE 0x01
#define IDC_REGS_RSOW213_SIZE 8
#define IDC_REGS_RSOW213_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW213_RESET 0x00000000

#define IDC_REGS_RSOW213_VALUE_LSB 0x0000
#define IDC_REGS_RSOW213_VALUE_MSB 0x0000
#define IDC_REGS_RSOW213_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW213_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW213_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW213_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW213_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW213_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW213_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW213_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW313_FLAG
#define IDC_REGS_RSOW313_FLAG
// RSOW313 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW313_t;
#endif
#define IDC_REGS_RSOW313_OFFSET 0x68
#define IDC_REGS_RSOW313_SCOPE 0x01
#define IDC_REGS_RSOW313_SIZE 8
#define IDC_REGS_RSOW313_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW313_RESET 0x00000000

#define IDC_REGS_RSOW313_VALUE_LSB 0x0000
#define IDC_REGS_RSOW313_VALUE_MSB 0x0000
#define IDC_REGS_RSOW313_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW313_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW313_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW313_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW313_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW313_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW313_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW313_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE14_FLAG
#define IDC_REGS_SEMAVALICE14_FLAG
// SEMAVALICE14 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE14_t;
#endif
#define IDC_REGS_SEMAVALICE14_OFFSET 0x80
#define IDC_REGS_SEMAVALICE14_SCOPE 0x01
#define IDC_REGS_SEMAVALICE14_SIZE 8
#define IDC_REGS_SEMAVALICE14_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE14_RESET 0x00000000

#define IDC_REGS_SEMAVALICE14_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE14_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE14_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE14_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE14_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE14_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE14_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE14_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE14_FLAG
#define IDC_REGS_SEMAREQICE14_FLAG
// SEMAREQICE14 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE14_t;
#endif
#define IDC_REGS_SEMAREQICE14_OFFSET 0x88
#define IDC_REGS_SEMAREQICE14_SCOPE 0x01
#define IDC_REGS_SEMAREQICE14_SIZE 8
#define IDC_REGS_SEMAREQICE14_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE14_RESET 0x00000000

#define IDC_REGS_SEMAREQICE14_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE14_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE14_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE14_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE14_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE14_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE14_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE14_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE14_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE14_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW014_FLAG
#define IDC_REGS_RSOW014_FLAG
// RSOW014 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW014_t;
#endif
#define IDC_REGS_RSOW014_OFFSET 0x90
#define IDC_REGS_RSOW014_SCOPE 0x01
#define IDC_REGS_RSOW014_SIZE 8
#define IDC_REGS_RSOW014_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW014_RESET 0x00000000

#define IDC_REGS_RSOW014_VALUE_LSB 0x0000
#define IDC_REGS_RSOW014_VALUE_MSB 0x0000
#define IDC_REGS_RSOW014_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW014_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW014_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW014_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW014_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW014_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW014_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW014_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW114_FLAG
#define IDC_REGS_RSOW114_FLAG
// RSOW114 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW114_t;
#endif
#define IDC_REGS_RSOW114_OFFSET 0x98
#define IDC_REGS_RSOW114_SCOPE 0x01
#define IDC_REGS_RSOW114_SIZE 8
#define IDC_REGS_RSOW114_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW114_RESET 0x00000000

#define IDC_REGS_RSOW114_VALUE_LSB 0x0000
#define IDC_REGS_RSOW114_VALUE_MSB 0x0000
#define IDC_REGS_RSOW114_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW114_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW114_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW114_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW114_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW114_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW114_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW114_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW214_FLAG
#define IDC_REGS_RSOW214_FLAG
// RSOW214 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW214_t;
#endif
#define IDC_REGS_RSOW214_OFFSET 0xa0
#define IDC_REGS_RSOW214_SCOPE 0x01
#define IDC_REGS_RSOW214_SIZE 8
#define IDC_REGS_RSOW214_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW214_RESET 0x00000000

#define IDC_REGS_RSOW214_VALUE_LSB 0x0000
#define IDC_REGS_RSOW214_VALUE_MSB 0x0000
#define IDC_REGS_RSOW214_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW214_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW214_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW214_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW214_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW214_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW214_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW214_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW314_FLAG
#define IDC_REGS_RSOW314_FLAG
// RSOW314 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW314_t;
#endif
#define IDC_REGS_RSOW314_OFFSET 0xa8
#define IDC_REGS_RSOW314_SCOPE 0x01
#define IDC_REGS_RSOW314_SIZE 8
#define IDC_REGS_RSOW314_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW314_RESET 0x00000000

#define IDC_REGS_RSOW314_VALUE_LSB 0x0000
#define IDC_REGS_RSOW314_VALUE_MSB 0x0000
#define IDC_REGS_RSOW314_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW314_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW314_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW314_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW314_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW314_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW314_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW314_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE15_FLAG
#define IDC_REGS_SEMAVALICE15_FLAG
// SEMAVALICE15 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE15_t;
#endif
#define IDC_REGS_SEMAVALICE15_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE15_SCOPE 0x01
#define IDC_REGS_SEMAVALICE15_SIZE 8
#define IDC_REGS_SEMAVALICE15_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE15_RESET 0x00000000

#define IDC_REGS_SEMAVALICE15_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE15_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE15_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE15_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE15_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE15_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE15_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE15_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE15_FLAG
#define IDC_REGS_SEMAREQICE15_FLAG
// SEMAREQICE15 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE15_t;
#endif
#define IDC_REGS_SEMAREQICE15_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE15_SCOPE 0x01
#define IDC_REGS_SEMAREQICE15_SIZE 8
#define IDC_REGS_SEMAREQICE15_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE15_RESET 0x00000000

#define IDC_REGS_SEMAREQICE15_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE15_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE15_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE15_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE15_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE15_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE15_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE15_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE15_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE15_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW015_FLAG
#define IDC_REGS_RSOW015_FLAG
// RSOW015 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW015_t;
#endif
#define IDC_REGS_RSOW015_OFFSET 0xd0
#define IDC_REGS_RSOW015_SCOPE 0x01
#define IDC_REGS_RSOW015_SIZE 8
#define IDC_REGS_RSOW015_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW015_RESET 0x00000000

#define IDC_REGS_RSOW015_VALUE_LSB 0x0000
#define IDC_REGS_RSOW015_VALUE_MSB 0x0000
#define IDC_REGS_RSOW015_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW015_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW015_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW015_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW015_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW015_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW015_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW015_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW115_FLAG
#define IDC_REGS_RSOW115_FLAG
// RSOW115 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW115_t;
#endif
#define IDC_REGS_RSOW115_OFFSET 0xd8
#define IDC_REGS_RSOW115_SCOPE 0x01
#define IDC_REGS_RSOW115_SIZE 8
#define IDC_REGS_RSOW115_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW115_RESET 0x00000000

#define IDC_REGS_RSOW115_VALUE_LSB 0x0000
#define IDC_REGS_RSOW115_VALUE_MSB 0x0000
#define IDC_REGS_RSOW115_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW115_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW115_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW115_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW115_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW115_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW115_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW115_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW215_FLAG
#define IDC_REGS_RSOW215_FLAG
// RSOW215 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW215_t;
#endif
#define IDC_REGS_RSOW215_OFFSET 0xe0
#define IDC_REGS_RSOW215_SCOPE 0x01
#define IDC_REGS_RSOW215_SIZE 8
#define IDC_REGS_RSOW215_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW215_RESET 0x00000000

#define IDC_REGS_RSOW215_VALUE_LSB 0x0000
#define IDC_REGS_RSOW215_VALUE_MSB 0x0000
#define IDC_REGS_RSOW215_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW215_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW215_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW215_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW215_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW215_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW215_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW215_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW315_FLAG
#define IDC_REGS_RSOW315_FLAG
// RSOW315 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW315_t;
#endif
#define IDC_REGS_RSOW315_OFFSET 0xe8
#define IDC_REGS_RSOW315_SCOPE 0x01
#define IDC_REGS_RSOW315_SIZE 8
#define IDC_REGS_RSOW315_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW315_RESET 0x00000000

#define IDC_REGS_RSOW315_VALUE_LSB 0x0000
#define IDC_REGS_RSOW315_VALUE_MSB 0x0000
#define IDC_REGS_RSOW315_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW315_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW315_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW315_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW315_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW315_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW315_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW315_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE16_FLAG
#define IDC_REGS_SEMAVALICE16_FLAG
// SEMAVALICE16 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE16_t;
#endif
#define IDC_REGS_SEMAVALICE16_OFFSET 0x00
#define IDC_REGS_SEMAVALICE16_SCOPE 0x01
#define IDC_REGS_SEMAVALICE16_SIZE 8
#define IDC_REGS_SEMAVALICE16_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE16_RESET 0x00000000

#define IDC_REGS_SEMAVALICE16_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE16_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE16_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE16_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE16_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE16_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE16_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE16_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE16_FLAG
#define IDC_REGS_SEMAREQICE16_FLAG
// SEMAREQICE16 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE16_t;
#endif
#define IDC_REGS_SEMAREQICE16_OFFSET 0x08
#define IDC_REGS_SEMAREQICE16_SCOPE 0x01
#define IDC_REGS_SEMAREQICE16_SIZE 8
#define IDC_REGS_SEMAREQICE16_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE16_RESET 0x00000000

#define IDC_REGS_SEMAREQICE16_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE16_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE16_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE16_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE16_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE16_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE16_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE16_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE16_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE16_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW016_FLAG
#define IDC_REGS_RSOW016_FLAG
// RSOW016 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW016_t;
#endif
#define IDC_REGS_RSOW016_OFFSET 0x10
#define IDC_REGS_RSOW016_SCOPE 0x01
#define IDC_REGS_RSOW016_SIZE 8
#define IDC_REGS_RSOW016_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW016_RESET 0x00000000

#define IDC_REGS_RSOW016_VALUE_LSB 0x0000
#define IDC_REGS_RSOW016_VALUE_MSB 0x0000
#define IDC_REGS_RSOW016_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW016_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW016_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW016_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW016_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW016_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW016_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW016_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW116_FLAG
#define IDC_REGS_RSOW116_FLAG
// RSOW116 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW116_t;
#endif
#define IDC_REGS_RSOW116_OFFSET 0x18
#define IDC_REGS_RSOW116_SCOPE 0x01
#define IDC_REGS_RSOW116_SIZE 8
#define IDC_REGS_RSOW116_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW116_RESET 0x00000000

#define IDC_REGS_RSOW116_VALUE_LSB 0x0000
#define IDC_REGS_RSOW116_VALUE_MSB 0x0000
#define IDC_REGS_RSOW116_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW116_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW116_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW116_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW116_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW116_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW116_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW116_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW216_FLAG
#define IDC_REGS_RSOW216_FLAG
// RSOW216 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW216_t;
#endif
#define IDC_REGS_RSOW216_OFFSET 0x20
#define IDC_REGS_RSOW216_SCOPE 0x01
#define IDC_REGS_RSOW216_SIZE 8
#define IDC_REGS_RSOW216_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW216_RESET 0x00000000

#define IDC_REGS_RSOW216_VALUE_LSB 0x0000
#define IDC_REGS_RSOW216_VALUE_MSB 0x0000
#define IDC_REGS_RSOW216_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW216_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW216_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW216_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW216_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW216_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW216_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW216_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW316_FLAG
#define IDC_REGS_RSOW316_FLAG
// RSOW316 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW316_t;
#endif
#define IDC_REGS_RSOW316_OFFSET 0x28
#define IDC_REGS_RSOW316_SCOPE 0x01
#define IDC_REGS_RSOW316_SIZE 8
#define IDC_REGS_RSOW316_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW316_RESET 0x00000000

#define IDC_REGS_RSOW316_VALUE_LSB 0x0000
#define IDC_REGS_RSOW316_VALUE_MSB 0x0000
#define IDC_REGS_RSOW316_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW316_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW316_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW316_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW316_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW316_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW316_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW316_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE17_FLAG
#define IDC_REGS_SEMAVALICE17_FLAG
// SEMAVALICE17 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE17_t;
#endif
#define IDC_REGS_SEMAVALICE17_OFFSET 0x40
#define IDC_REGS_SEMAVALICE17_SCOPE 0x01
#define IDC_REGS_SEMAVALICE17_SIZE 8
#define IDC_REGS_SEMAVALICE17_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE17_RESET 0x00000000

#define IDC_REGS_SEMAVALICE17_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE17_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE17_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE17_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE17_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE17_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE17_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE17_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE17_FLAG
#define IDC_REGS_SEMAREQICE17_FLAG
// SEMAREQICE17 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE17_t;
#endif
#define IDC_REGS_SEMAREQICE17_OFFSET 0x48
#define IDC_REGS_SEMAREQICE17_SCOPE 0x01
#define IDC_REGS_SEMAREQICE17_SIZE 8
#define IDC_REGS_SEMAREQICE17_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE17_RESET 0x00000000

#define IDC_REGS_SEMAREQICE17_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE17_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE17_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE17_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE17_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE17_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE17_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE17_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE17_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE17_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW017_FLAG
#define IDC_REGS_RSOW017_FLAG
// RSOW017 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW017_t;
#endif
#define IDC_REGS_RSOW017_OFFSET 0x50
#define IDC_REGS_RSOW017_SCOPE 0x01
#define IDC_REGS_RSOW017_SIZE 8
#define IDC_REGS_RSOW017_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW017_RESET 0x00000000

#define IDC_REGS_RSOW017_VALUE_LSB 0x0000
#define IDC_REGS_RSOW017_VALUE_MSB 0x0000
#define IDC_REGS_RSOW017_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW017_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW017_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW017_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW017_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW017_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW017_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW017_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW117_FLAG
#define IDC_REGS_RSOW117_FLAG
// RSOW117 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW117_t;
#endif
#define IDC_REGS_RSOW117_OFFSET 0x58
#define IDC_REGS_RSOW117_SCOPE 0x01
#define IDC_REGS_RSOW117_SIZE 8
#define IDC_REGS_RSOW117_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW117_RESET 0x00000000

#define IDC_REGS_RSOW117_VALUE_LSB 0x0000
#define IDC_REGS_RSOW117_VALUE_MSB 0x0000
#define IDC_REGS_RSOW117_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW117_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW117_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW117_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW117_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW117_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW117_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW117_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW217_FLAG
#define IDC_REGS_RSOW217_FLAG
// RSOW217 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW217_t;
#endif
#define IDC_REGS_RSOW217_OFFSET 0x60
#define IDC_REGS_RSOW217_SCOPE 0x01
#define IDC_REGS_RSOW217_SIZE 8
#define IDC_REGS_RSOW217_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW217_RESET 0x00000000

#define IDC_REGS_RSOW217_VALUE_LSB 0x0000
#define IDC_REGS_RSOW217_VALUE_MSB 0x0000
#define IDC_REGS_RSOW217_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW217_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW217_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW217_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW217_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW217_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW217_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW217_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW317_FLAG
#define IDC_REGS_RSOW317_FLAG
// RSOW317 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW317_t;
#endif
#define IDC_REGS_RSOW317_OFFSET 0x68
#define IDC_REGS_RSOW317_SCOPE 0x01
#define IDC_REGS_RSOW317_SIZE 8
#define IDC_REGS_RSOW317_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW317_RESET 0x00000000

#define IDC_REGS_RSOW317_VALUE_LSB 0x0000
#define IDC_REGS_RSOW317_VALUE_MSB 0x0000
#define IDC_REGS_RSOW317_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW317_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW317_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW317_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW317_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW317_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW317_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW317_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE18_FLAG
#define IDC_REGS_SEMAVALICE18_FLAG
// SEMAVALICE18 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE18_t;
#endif
#define IDC_REGS_SEMAVALICE18_OFFSET 0x80
#define IDC_REGS_SEMAVALICE18_SCOPE 0x01
#define IDC_REGS_SEMAVALICE18_SIZE 8
#define IDC_REGS_SEMAVALICE18_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE18_RESET 0x00000000

#define IDC_REGS_SEMAVALICE18_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE18_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE18_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE18_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE18_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE18_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE18_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE18_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE18_FLAG
#define IDC_REGS_SEMAREQICE18_FLAG
// SEMAREQICE18 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE18_t;
#endif
#define IDC_REGS_SEMAREQICE18_OFFSET 0x88
#define IDC_REGS_SEMAREQICE18_SCOPE 0x01
#define IDC_REGS_SEMAREQICE18_SIZE 8
#define IDC_REGS_SEMAREQICE18_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE18_RESET 0x00000000

#define IDC_REGS_SEMAREQICE18_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE18_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE18_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE18_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE18_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE18_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE18_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE18_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE18_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE18_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW018_FLAG
#define IDC_REGS_RSOW018_FLAG
// RSOW018 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW018_t;
#endif
#define IDC_REGS_RSOW018_OFFSET 0x90
#define IDC_REGS_RSOW018_SCOPE 0x01
#define IDC_REGS_RSOW018_SIZE 8
#define IDC_REGS_RSOW018_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW018_RESET 0x00000000

#define IDC_REGS_RSOW018_VALUE_LSB 0x0000
#define IDC_REGS_RSOW018_VALUE_MSB 0x0000
#define IDC_REGS_RSOW018_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW018_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW018_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW018_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW018_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW018_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW018_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW018_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW118_FLAG
#define IDC_REGS_RSOW118_FLAG
// RSOW118 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW118_t;
#endif
#define IDC_REGS_RSOW118_OFFSET 0x98
#define IDC_REGS_RSOW118_SCOPE 0x01
#define IDC_REGS_RSOW118_SIZE 8
#define IDC_REGS_RSOW118_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW118_RESET 0x00000000

#define IDC_REGS_RSOW118_VALUE_LSB 0x0000
#define IDC_REGS_RSOW118_VALUE_MSB 0x0000
#define IDC_REGS_RSOW118_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW118_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW118_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW118_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW118_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW118_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW118_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW118_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW218_FLAG
#define IDC_REGS_RSOW218_FLAG
// RSOW218 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW218_t;
#endif
#define IDC_REGS_RSOW218_OFFSET 0xa0
#define IDC_REGS_RSOW218_SCOPE 0x01
#define IDC_REGS_RSOW218_SIZE 8
#define IDC_REGS_RSOW218_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW218_RESET 0x00000000

#define IDC_REGS_RSOW218_VALUE_LSB 0x0000
#define IDC_REGS_RSOW218_VALUE_MSB 0x0000
#define IDC_REGS_RSOW218_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW218_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW218_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW218_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW218_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW218_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW218_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW218_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW318_FLAG
#define IDC_REGS_RSOW318_FLAG
// RSOW318 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW318_t;
#endif
#define IDC_REGS_RSOW318_OFFSET 0xa8
#define IDC_REGS_RSOW318_SCOPE 0x01
#define IDC_REGS_RSOW318_SIZE 8
#define IDC_REGS_RSOW318_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW318_RESET 0x00000000

#define IDC_REGS_RSOW318_VALUE_LSB 0x0000
#define IDC_REGS_RSOW318_VALUE_MSB 0x0000
#define IDC_REGS_RSOW318_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW318_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW318_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW318_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW318_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW318_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW318_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW318_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE19_FLAG
#define IDC_REGS_SEMAVALICE19_FLAG
// SEMAVALICE19 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE19_t;
#endif
#define IDC_REGS_SEMAVALICE19_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE19_SCOPE 0x01
#define IDC_REGS_SEMAVALICE19_SIZE 8
#define IDC_REGS_SEMAVALICE19_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE19_RESET 0x00000000

#define IDC_REGS_SEMAVALICE19_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE19_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE19_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE19_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE19_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE19_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE19_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE19_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE19_FLAG
#define IDC_REGS_SEMAREQICE19_FLAG
// SEMAREQICE19 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE19_t;
#endif
#define IDC_REGS_SEMAREQICE19_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE19_SCOPE 0x01
#define IDC_REGS_SEMAREQICE19_SIZE 8
#define IDC_REGS_SEMAREQICE19_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE19_RESET 0x00000000

#define IDC_REGS_SEMAREQICE19_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE19_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE19_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE19_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE19_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE19_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE19_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE19_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE19_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE19_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW019_FLAG
#define IDC_REGS_RSOW019_FLAG
// RSOW019 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW019_t;
#endif
#define IDC_REGS_RSOW019_OFFSET 0xd0
#define IDC_REGS_RSOW019_SCOPE 0x01
#define IDC_REGS_RSOW019_SIZE 8
#define IDC_REGS_RSOW019_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW019_RESET 0x00000000

#define IDC_REGS_RSOW019_VALUE_LSB 0x0000
#define IDC_REGS_RSOW019_VALUE_MSB 0x0000
#define IDC_REGS_RSOW019_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW019_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW019_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW019_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW019_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW019_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW019_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW019_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW119_FLAG
#define IDC_REGS_RSOW119_FLAG
// RSOW119 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW119_t;
#endif
#define IDC_REGS_RSOW119_OFFSET 0xd8
#define IDC_REGS_RSOW119_SCOPE 0x01
#define IDC_REGS_RSOW119_SIZE 8
#define IDC_REGS_RSOW119_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW119_RESET 0x00000000

#define IDC_REGS_RSOW119_VALUE_LSB 0x0000
#define IDC_REGS_RSOW119_VALUE_MSB 0x0000
#define IDC_REGS_RSOW119_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW119_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW119_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW119_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW119_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW119_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW119_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW119_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW219_FLAG
#define IDC_REGS_RSOW219_FLAG
// RSOW219 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW219_t;
#endif
#define IDC_REGS_RSOW219_OFFSET 0xe0
#define IDC_REGS_RSOW219_SCOPE 0x01
#define IDC_REGS_RSOW219_SIZE 8
#define IDC_REGS_RSOW219_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW219_RESET 0x00000000

#define IDC_REGS_RSOW219_VALUE_LSB 0x0000
#define IDC_REGS_RSOW219_VALUE_MSB 0x0000
#define IDC_REGS_RSOW219_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW219_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW219_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW219_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW219_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW219_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW219_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW219_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW319_FLAG
#define IDC_REGS_RSOW319_FLAG
// RSOW319 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW319_t;
#endif
#define IDC_REGS_RSOW319_OFFSET 0xe8
#define IDC_REGS_RSOW319_SCOPE 0x01
#define IDC_REGS_RSOW319_SIZE 8
#define IDC_REGS_RSOW319_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW319_RESET 0x00000000

#define IDC_REGS_RSOW319_VALUE_LSB 0x0000
#define IDC_REGS_RSOW319_VALUE_MSB 0x0000
#define IDC_REGS_RSOW319_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW319_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW319_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW319_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW319_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW319_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW319_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW319_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE20_FLAG
#define IDC_REGS_SEMAVALICE20_FLAG
// SEMAVALICE20 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE20_t;
#endif
#define IDC_REGS_SEMAVALICE20_OFFSET 0x00
#define IDC_REGS_SEMAVALICE20_SCOPE 0x01
#define IDC_REGS_SEMAVALICE20_SIZE 8
#define IDC_REGS_SEMAVALICE20_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE20_RESET 0x00000000

#define IDC_REGS_SEMAVALICE20_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE20_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE20_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE20_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE20_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE20_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE20_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE20_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE20_FLAG
#define IDC_REGS_SEMAREQICE20_FLAG
// SEMAREQICE20 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE20_t;
#endif
#define IDC_REGS_SEMAREQICE20_OFFSET 0x08
#define IDC_REGS_SEMAREQICE20_SCOPE 0x01
#define IDC_REGS_SEMAREQICE20_SIZE 8
#define IDC_REGS_SEMAREQICE20_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE20_RESET 0x00000000

#define IDC_REGS_SEMAREQICE20_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE20_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE20_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE20_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE20_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE20_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE20_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE20_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE20_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE20_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW020_FLAG
#define IDC_REGS_RSOW020_FLAG
// RSOW020 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW020_t;
#endif
#define IDC_REGS_RSOW020_OFFSET 0x10
#define IDC_REGS_RSOW020_SCOPE 0x01
#define IDC_REGS_RSOW020_SIZE 8
#define IDC_REGS_RSOW020_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW020_RESET 0x00000000

#define IDC_REGS_RSOW020_VALUE_LSB 0x0000
#define IDC_REGS_RSOW020_VALUE_MSB 0x0000
#define IDC_REGS_RSOW020_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW020_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW020_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW020_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW020_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW020_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW020_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW020_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW120_FLAG
#define IDC_REGS_RSOW120_FLAG
// RSOW120 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW120_t;
#endif
#define IDC_REGS_RSOW120_OFFSET 0x18
#define IDC_REGS_RSOW120_SCOPE 0x01
#define IDC_REGS_RSOW120_SIZE 8
#define IDC_REGS_RSOW120_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW120_RESET 0x00000000

#define IDC_REGS_RSOW120_VALUE_LSB 0x0000
#define IDC_REGS_RSOW120_VALUE_MSB 0x0000
#define IDC_REGS_RSOW120_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW120_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW120_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW120_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW120_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW120_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW120_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW120_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW220_FLAG
#define IDC_REGS_RSOW220_FLAG
// RSOW220 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW220_t;
#endif
#define IDC_REGS_RSOW220_OFFSET 0x20
#define IDC_REGS_RSOW220_SCOPE 0x01
#define IDC_REGS_RSOW220_SIZE 8
#define IDC_REGS_RSOW220_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW220_RESET 0x00000000

#define IDC_REGS_RSOW220_VALUE_LSB 0x0000
#define IDC_REGS_RSOW220_VALUE_MSB 0x0000
#define IDC_REGS_RSOW220_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW220_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW220_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW220_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW220_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW220_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW220_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW220_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW320_FLAG
#define IDC_REGS_RSOW320_FLAG
// RSOW320 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW320_t;
#endif
#define IDC_REGS_RSOW320_OFFSET 0x28
#define IDC_REGS_RSOW320_SCOPE 0x01
#define IDC_REGS_RSOW320_SIZE 8
#define IDC_REGS_RSOW320_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW320_RESET 0x00000000

#define IDC_REGS_RSOW320_VALUE_LSB 0x0000
#define IDC_REGS_RSOW320_VALUE_MSB 0x0000
#define IDC_REGS_RSOW320_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW320_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW320_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW320_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW320_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW320_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW320_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW320_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE21_FLAG
#define IDC_REGS_SEMAVALICE21_FLAG
// SEMAVALICE21 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE21_t;
#endif
#define IDC_REGS_SEMAVALICE21_OFFSET 0x40
#define IDC_REGS_SEMAVALICE21_SCOPE 0x01
#define IDC_REGS_SEMAVALICE21_SIZE 8
#define IDC_REGS_SEMAVALICE21_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE21_RESET 0x00000000

#define IDC_REGS_SEMAVALICE21_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE21_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE21_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE21_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE21_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE21_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE21_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE21_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE21_FLAG
#define IDC_REGS_SEMAREQICE21_FLAG
// SEMAREQICE21 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE21_t;
#endif
#define IDC_REGS_SEMAREQICE21_OFFSET 0x48
#define IDC_REGS_SEMAREQICE21_SCOPE 0x01
#define IDC_REGS_SEMAREQICE21_SIZE 8
#define IDC_REGS_SEMAREQICE21_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE21_RESET 0x00000000

#define IDC_REGS_SEMAREQICE21_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE21_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE21_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE21_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE21_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE21_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE21_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE21_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE21_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE21_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW021_FLAG
#define IDC_REGS_RSOW021_FLAG
// RSOW021 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW021_t;
#endif
#define IDC_REGS_RSOW021_OFFSET 0x50
#define IDC_REGS_RSOW021_SCOPE 0x01
#define IDC_REGS_RSOW021_SIZE 8
#define IDC_REGS_RSOW021_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW021_RESET 0x00000000

#define IDC_REGS_RSOW021_VALUE_LSB 0x0000
#define IDC_REGS_RSOW021_VALUE_MSB 0x0000
#define IDC_REGS_RSOW021_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW021_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW021_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW021_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW021_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW021_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW021_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW021_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW121_FLAG
#define IDC_REGS_RSOW121_FLAG
// RSOW121 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW121_t;
#endif
#define IDC_REGS_RSOW121_OFFSET 0x58
#define IDC_REGS_RSOW121_SCOPE 0x01
#define IDC_REGS_RSOW121_SIZE 8
#define IDC_REGS_RSOW121_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW121_RESET 0x00000000

#define IDC_REGS_RSOW121_VALUE_LSB 0x0000
#define IDC_REGS_RSOW121_VALUE_MSB 0x0000
#define IDC_REGS_RSOW121_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW121_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW121_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW121_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW121_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW121_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW121_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW121_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW221_FLAG
#define IDC_REGS_RSOW221_FLAG
// RSOW221 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW221_t;
#endif
#define IDC_REGS_RSOW221_OFFSET 0x60
#define IDC_REGS_RSOW221_SCOPE 0x01
#define IDC_REGS_RSOW221_SIZE 8
#define IDC_REGS_RSOW221_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW221_RESET 0x00000000

#define IDC_REGS_RSOW221_VALUE_LSB 0x0000
#define IDC_REGS_RSOW221_VALUE_MSB 0x0000
#define IDC_REGS_RSOW221_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW221_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW221_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW221_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW221_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW221_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW221_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW221_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW321_FLAG
#define IDC_REGS_RSOW321_FLAG
// RSOW321 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW321_t;
#endif
#define IDC_REGS_RSOW321_OFFSET 0x68
#define IDC_REGS_RSOW321_SCOPE 0x01
#define IDC_REGS_RSOW321_SIZE 8
#define IDC_REGS_RSOW321_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW321_RESET 0x00000000

#define IDC_REGS_RSOW321_VALUE_LSB 0x0000
#define IDC_REGS_RSOW321_VALUE_MSB 0x0000
#define IDC_REGS_RSOW321_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW321_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW321_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW321_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW321_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW321_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW321_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW321_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE22_FLAG
#define IDC_REGS_SEMAVALICE22_FLAG
// SEMAVALICE22 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE22_t;
#endif
#define IDC_REGS_SEMAVALICE22_OFFSET 0x80
#define IDC_REGS_SEMAVALICE22_SCOPE 0x01
#define IDC_REGS_SEMAVALICE22_SIZE 8
#define IDC_REGS_SEMAVALICE22_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE22_RESET 0x00000000

#define IDC_REGS_SEMAVALICE22_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE22_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE22_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE22_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE22_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE22_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE22_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE22_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE22_FLAG
#define IDC_REGS_SEMAREQICE22_FLAG
// SEMAREQICE22 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE22_t;
#endif
#define IDC_REGS_SEMAREQICE22_OFFSET 0x88
#define IDC_REGS_SEMAREQICE22_SCOPE 0x01
#define IDC_REGS_SEMAREQICE22_SIZE 8
#define IDC_REGS_SEMAREQICE22_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE22_RESET 0x00000000

#define IDC_REGS_SEMAREQICE22_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE22_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE22_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE22_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE22_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE22_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE22_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE22_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE22_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE22_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW022_FLAG
#define IDC_REGS_RSOW022_FLAG
// RSOW022 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW022_t;
#endif
#define IDC_REGS_RSOW022_OFFSET 0x90
#define IDC_REGS_RSOW022_SCOPE 0x01
#define IDC_REGS_RSOW022_SIZE 8
#define IDC_REGS_RSOW022_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW022_RESET 0x00000000

#define IDC_REGS_RSOW022_VALUE_LSB 0x0000
#define IDC_REGS_RSOW022_VALUE_MSB 0x0000
#define IDC_REGS_RSOW022_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW022_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW022_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW022_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW022_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW022_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW022_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW022_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW122_FLAG
#define IDC_REGS_RSOW122_FLAG
// RSOW122 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW122_t;
#endif
#define IDC_REGS_RSOW122_OFFSET 0x98
#define IDC_REGS_RSOW122_SCOPE 0x01
#define IDC_REGS_RSOW122_SIZE 8
#define IDC_REGS_RSOW122_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW122_RESET 0x00000000

#define IDC_REGS_RSOW122_VALUE_LSB 0x0000
#define IDC_REGS_RSOW122_VALUE_MSB 0x0000
#define IDC_REGS_RSOW122_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW122_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW122_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW122_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW122_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW122_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW122_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW122_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW222_FLAG
#define IDC_REGS_RSOW222_FLAG
// RSOW222 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW222_t;
#endif
#define IDC_REGS_RSOW222_OFFSET 0xa0
#define IDC_REGS_RSOW222_SCOPE 0x01
#define IDC_REGS_RSOW222_SIZE 8
#define IDC_REGS_RSOW222_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW222_RESET 0x00000000

#define IDC_REGS_RSOW222_VALUE_LSB 0x0000
#define IDC_REGS_RSOW222_VALUE_MSB 0x0000
#define IDC_REGS_RSOW222_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW222_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW222_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW222_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW222_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW222_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW222_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW222_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW322_FLAG
#define IDC_REGS_RSOW322_FLAG
// RSOW322 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW322_t;
#endif
#define IDC_REGS_RSOW322_OFFSET 0xa8
#define IDC_REGS_RSOW322_SCOPE 0x01
#define IDC_REGS_RSOW322_SIZE 8
#define IDC_REGS_RSOW322_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW322_RESET 0x00000000

#define IDC_REGS_RSOW322_VALUE_LSB 0x0000
#define IDC_REGS_RSOW322_VALUE_MSB 0x0000
#define IDC_REGS_RSOW322_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW322_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW322_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW322_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW322_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW322_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW322_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW322_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE23_FLAG
#define IDC_REGS_SEMAVALICE23_FLAG
// SEMAVALICE23 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE23_t;
#endif
#define IDC_REGS_SEMAVALICE23_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE23_SCOPE 0x01
#define IDC_REGS_SEMAVALICE23_SIZE 8
#define IDC_REGS_SEMAVALICE23_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE23_RESET 0x00000000

#define IDC_REGS_SEMAVALICE23_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE23_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE23_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE23_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE23_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE23_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE23_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE23_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE23_FLAG
#define IDC_REGS_SEMAREQICE23_FLAG
// SEMAREQICE23 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE23_t;
#endif
#define IDC_REGS_SEMAREQICE23_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE23_SCOPE 0x01
#define IDC_REGS_SEMAREQICE23_SIZE 8
#define IDC_REGS_SEMAREQICE23_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE23_RESET 0x00000000

#define IDC_REGS_SEMAREQICE23_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE23_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE23_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE23_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE23_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE23_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE23_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE23_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE23_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE23_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW023_FLAG
#define IDC_REGS_RSOW023_FLAG
// RSOW023 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW023_t;
#endif
#define IDC_REGS_RSOW023_OFFSET 0xd0
#define IDC_REGS_RSOW023_SCOPE 0x01
#define IDC_REGS_RSOW023_SIZE 8
#define IDC_REGS_RSOW023_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW023_RESET 0x00000000

#define IDC_REGS_RSOW023_VALUE_LSB 0x0000
#define IDC_REGS_RSOW023_VALUE_MSB 0x0000
#define IDC_REGS_RSOW023_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW023_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW023_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW023_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW023_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW023_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW023_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW023_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW123_FLAG
#define IDC_REGS_RSOW123_FLAG
// RSOW123 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW123_t;
#endif
#define IDC_REGS_RSOW123_OFFSET 0xd8
#define IDC_REGS_RSOW123_SCOPE 0x01
#define IDC_REGS_RSOW123_SIZE 8
#define IDC_REGS_RSOW123_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW123_RESET 0x00000000

#define IDC_REGS_RSOW123_VALUE_LSB 0x0000
#define IDC_REGS_RSOW123_VALUE_MSB 0x0000
#define IDC_REGS_RSOW123_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW123_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW123_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW123_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW123_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW123_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW123_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW123_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW223_FLAG
#define IDC_REGS_RSOW223_FLAG
// RSOW223 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW223_t;
#endif
#define IDC_REGS_RSOW223_OFFSET 0xe0
#define IDC_REGS_RSOW223_SCOPE 0x01
#define IDC_REGS_RSOW223_SIZE 8
#define IDC_REGS_RSOW223_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW223_RESET 0x00000000

#define IDC_REGS_RSOW223_VALUE_LSB 0x0000
#define IDC_REGS_RSOW223_VALUE_MSB 0x0000
#define IDC_REGS_RSOW223_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW223_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW223_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW223_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW223_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW223_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW223_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW223_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW323_FLAG
#define IDC_REGS_RSOW323_FLAG
// RSOW323 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW323_t;
#endif
#define IDC_REGS_RSOW323_OFFSET 0xe8
#define IDC_REGS_RSOW323_SCOPE 0x01
#define IDC_REGS_RSOW323_SIZE 8
#define IDC_REGS_RSOW323_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW323_RESET 0x00000000

#define IDC_REGS_RSOW323_VALUE_LSB 0x0000
#define IDC_REGS_RSOW323_VALUE_MSB 0x0000
#define IDC_REGS_RSOW323_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW323_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW323_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW323_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW323_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW323_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW323_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW323_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE24_FLAG
#define IDC_REGS_SEMAVALICE24_FLAG
// SEMAVALICE24 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE24_t;
#endif
#define IDC_REGS_SEMAVALICE24_OFFSET 0x00
#define IDC_REGS_SEMAVALICE24_SCOPE 0x01
#define IDC_REGS_SEMAVALICE24_SIZE 8
#define IDC_REGS_SEMAVALICE24_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE24_RESET 0x00000000

#define IDC_REGS_SEMAVALICE24_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE24_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE24_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE24_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE24_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE24_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE24_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE24_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE24_FLAG
#define IDC_REGS_SEMAREQICE24_FLAG
// SEMAREQICE24 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE24_t;
#endif
#define IDC_REGS_SEMAREQICE24_OFFSET 0x08
#define IDC_REGS_SEMAREQICE24_SCOPE 0x01
#define IDC_REGS_SEMAREQICE24_SIZE 8
#define IDC_REGS_SEMAREQICE24_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE24_RESET 0x00000000

#define IDC_REGS_SEMAREQICE24_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE24_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE24_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE24_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE24_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE24_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE24_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE24_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE24_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE24_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW024_FLAG
#define IDC_REGS_RSOW024_FLAG
// RSOW024 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW024_t;
#endif
#define IDC_REGS_RSOW024_OFFSET 0x10
#define IDC_REGS_RSOW024_SCOPE 0x01
#define IDC_REGS_RSOW024_SIZE 8
#define IDC_REGS_RSOW024_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW024_RESET 0x00000000

#define IDC_REGS_RSOW024_VALUE_LSB 0x0000
#define IDC_REGS_RSOW024_VALUE_MSB 0x0000
#define IDC_REGS_RSOW024_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW024_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW024_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW024_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW024_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW024_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW024_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW024_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW124_FLAG
#define IDC_REGS_RSOW124_FLAG
// RSOW124 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW124_t;
#endif
#define IDC_REGS_RSOW124_OFFSET 0x18
#define IDC_REGS_RSOW124_SCOPE 0x01
#define IDC_REGS_RSOW124_SIZE 8
#define IDC_REGS_RSOW124_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW124_RESET 0x00000000

#define IDC_REGS_RSOW124_VALUE_LSB 0x0000
#define IDC_REGS_RSOW124_VALUE_MSB 0x0000
#define IDC_REGS_RSOW124_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW124_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW124_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW124_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW124_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW124_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW124_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW124_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW224_FLAG
#define IDC_REGS_RSOW224_FLAG
// RSOW224 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW224_t;
#endif
#define IDC_REGS_RSOW224_OFFSET 0x20
#define IDC_REGS_RSOW224_SCOPE 0x01
#define IDC_REGS_RSOW224_SIZE 8
#define IDC_REGS_RSOW224_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW224_RESET 0x00000000

#define IDC_REGS_RSOW224_VALUE_LSB 0x0000
#define IDC_REGS_RSOW224_VALUE_MSB 0x0000
#define IDC_REGS_RSOW224_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW224_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW224_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW224_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW224_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW224_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW224_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW224_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW324_FLAG
#define IDC_REGS_RSOW324_FLAG
// RSOW324 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW324_t;
#endif
#define IDC_REGS_RSOW324_OFFSET 0x28
#define IDC_REGS_RSOW324_SCOPE 0x01
#define IDC_REGS_RSOW324_SIZE 8
#define IDC_REGS_RSOW324_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW324_RESET 0x00000000

#define IDC_REGS_RSOW324_VALUE_LSB 0x0000
#define IDC_REGS_RSOW324_VALUE_MSB 0x0000
#define IDC_REGS_RSOW324_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW324_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW324_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW324_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW324_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW324_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW324_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW324_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE25_FLAG
#define IDC_REGS_SEMAVALICE25_FLAG
// SEMAVALICE25 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE25_t;
#endif
#define IDC_REGS_SEMAVALICE25_OFFSET 0x40
#define IDC_REGS_SEMAVALICE25_SCOPE 0x01
#define IDC_REGS_SEMAVALICE25_SIZE 8
#define IDC_REGS_SEMAVALICE25_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE25_RESET 0x00000000

#define IDC_REGS_SEMAVALICE25_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE25_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE25_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE25_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE25_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE25_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE25_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE25_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE25_FLAG
#define IDC_REGS_SEMAREQICE25_FLAG
// SEMAREQICE25 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE25_t;
#endif
#define IDC_REGS_SEMAREQICE25_OFFSET 0x48
#define IDC_REGS_SEMAREQICE25_SCOPE 0x01
#define IDC_REGS_SEMAREQICE25_SIZE 8
#define IDC_REGS_SEMAREQICE25_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE25_RESET 0x00000000

#define IDC_REGS_SEMAREQICE25_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE25_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE25_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE25_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE25_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE25_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE25_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE25_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE25_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE25_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW025_FLAG
#define IDC_REGS_RSOW025_FLAG
// RSOW025 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW025_t;
#endif
#define IDC_REGS_RSOW025_OFFSET 0x50
#define IDC_REGS_RSOW025_SCOPE 0x01
#define IDC_REGS_RSOW025_SIZE 8
#define IDC_REGS_RSOW025_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW025_RESET 0x00000000

#define IDC_REGS_RSOW025_VALUE_LSB 0x0000
#define IDC_REGS_RSOW025_VALUE_MSB 0x0000
#define IDC_REGS_RSOW025_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW025_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW025_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW025_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW025_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW025_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW025_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW025_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW125_FLAG
#define IDC_REGS_RSOW125_FLAG
// RSOW125 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW125_t;
#endif
#define IDC_REGS_RSOW125_OFFSET 0x58
#define IDC_REGS_RSOW125_SCOPE 0x01
#define IDC_REGS_RSOW125_SIZE 8
#define IDC_REGS_RSOW125_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW125_RESET 0x00000000

#define IDC_REGS_RSOW125_VALUE_LSB 0x0000
#define IDC_REGS_RSOW125_VALUE_MSB 0x0000
#define IDC_REGS_RSOW125_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW125_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW125_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW125_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW125_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW125_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW125_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW125_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW225_FLAG
#define IDC_REGS_RSOW225_FLAG
// RSOW225 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW225_t;
#endif
#define IDC_REGS_RSOW225_OFFSET 0x60
#define IDC_REGS_RSOW225_SCOPE 0x01
#define IDC_REGS_RSOW225_SIZE 8
#define IDC_REGS_RSOW225_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW225_RESET 0x00000000

#define IDC_REGS_RSOW225_VALUE_LSB 0x0000
#define IDC_REGS_RSOW225_VALUE_MSB 0x0000
#define IDC_REGS_RSOW225_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW225_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW225_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW225_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW225_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW225_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW225_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW225_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW325_FLAG
#define IDC_REGS_RSOW325_FLAG
// RSOW325 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW325_t;
#endif
#define IDC_REGS_RSOW325_OFFSET 0x68
#define IDC_REGS_RSOW325_SCOPE 0x01
#define IDC_REGS_RSOW325_SIZE 8
#define IDC_REGS_RSOW325_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW325_RESET 0x00000000

#define IDC_REGS_RSOW325_VALUE_LSB 0x0000
#define IDC_REGS_RSOW325_VALUE_MSB 0x0000
#define IDC_REGS_RSOW325_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW325_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW325_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW325_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW325_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW325_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW325_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW325_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE26_FLAG
#define IDC_REGS_SEMAVALICE26_FLAG
// SEMAVALICE26 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE26_t;
#endif
#define IDC_REGS_SEMAVALICE26_OFFSET 0x80
#define IDC_REGS_SEMAVALICE26_SCOPE 0x01
#define IDC_REGS_SEMAVALICE26_SIZE 8
#define IDC_REGS_SEMAVALICE26_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE26_RESET 0x00000000

#define IDC_REGS_SEMAVALICE26_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE26_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE26_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE26_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE26_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE26_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE26_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE26_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE26_FLAG
#define IDC_REGS_SEMAREQICE26_FLAG
// SEMAREQICE26 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE26_t;
#endif
#define IDC_REGS_SEMAREQICE26_OFFSET 0x88
#define IDC_REGS_SEMAREQICE26_SCOPE 0x01
#define IDC_REGS_SEMAREQICE26_SIZE 8
#define IDC_REGS_SEMAREQICE26_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE26_RESET 0x00000000

#define IDC_REGS_SEMAREQICE26_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE26_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE26_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE26_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE26_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE26_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE26_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE26_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE26_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE26_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW026_FLAG
#define IDC_REGS_RSOW026_FLAG
// RSOW026 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW026_t;
#endif
#define IDC_REGS_RSOW026_OFFSET 0x90
#define IDC_REGS_RSOW026_SCOPE 0x01
#define IDC_REGS_RSOW026_SIZE 8
#define IDC_REGS_RSOW026_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW026_RESET 0x00000000

#define IDC_REGS_RSOW026_VALUE_LSB 0x0000
#define IDC_REGS_RSOW026_VALUE_MSB 0x0000
#define IDC_REGS_RSOW026_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW026_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW026_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW026_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW026_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW026_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW026_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW026_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW126_FLAG
#define IDC_REGS_RSOW126_FLAG
// RSOW126 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW126_t;
#endif
#define IDC_REGS_RSOW126_OFFSET 0x98
#define IDC_REGS_RSOW126_SCOPE 0x01
#define IDC_REGS_RSOW126_SIZE 8
#define IDC_REGS_RSOW126_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW126_RESET 0x00000000

#define IDC_REGS_RSOW126_VALUE_LSB 0x0000
#define IDC_REGS_RSOW126_VALUE_MSB 0x0000
#define IDC_REGS_RSOW126_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW126_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW126_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW126_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW126_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW126_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW126_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW126_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW226_FLAG
#define IDC_REGS_RSOW226_FLAG
// RSOW226 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW226_t;
#endif
#define IDC_REGS_RSOW226_OFFSET 0xa0
#define IDC_REGS_RSOW226_SCOPE 0x01
#define IDC_REGS_RSOW226_SIZE 8
#define IDC_REGS_RSOW226_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW226_RESET 0x00000000

#define IDC_REGS_RSOW226_VALUE_LSB 0x0000
#define IDC_REGS_RSOW226_VALUE_MSB 0x0000
#define IDC_REGS_RSOW226_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW226_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW226_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW226_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW226_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW226_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW226_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW226_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW326_FLAG
#define IDC_REGS_RSOW326_FLAG
// RSOW326 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW326_t;
#endif
#define IDC_REGS_RSOW326_OFFSET 0xa8
#define IDC_REGS_RSOW326_SCOPE 0x01
#define IDC_REGS_RSOW326_SIZE 8
#define IDC_REGS_RSOW326_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW326_RESET 0x00000000

#define IDC_REGS_RSOW326_VALUE_LSB 0x0000
#define IDC_REGS_RSOW326_VALUE_MSB 0x0000
#define IDC_REGS_RSOW326_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW326_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW326_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW326_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW326_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW326_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW326_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW326_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE27_FLAG
#define IDC_REGS_SEMAVALICE27_FLAG
// SEMAVALICE27 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE27_t;
#endif
#define IDC_REGS_SEMAVALICE27_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE27_SCOPE 0x01
#define IDC_REGS_SEMAVALICE27_SIZE 8
#define IDC_REGS_SEMAVALICE27_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE27_RESET 0x00000000

#define IDC_REGS_SEMAVALICE27_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE27_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE27_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE27_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE27_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE27_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE27_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE27_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE27_FLAG
#define IDC_REGS_SEMAREQICE27_FLAG
// SEMAREQICE27 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE27_t;
#endif
#define IDC_REGS_SEMAREQICE27_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE27_SCOPE 0x01
#define IDC_REGS_SEMAREQICE27_SIZE 8
#define IDC_REGS_SEMAREQICE27_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE27_RESET 0x00000000

#define IDC_REGS_SEMAREQICE27_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE27_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE27_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE27_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE27_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE27_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE27_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE27_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE27_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE27_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW027_FLAG
#define IDC_REGS_RSOW027_FLAG
// RSOW027 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW027_t;
#endif
#define IDC_REGS_RSOW027_OFFSET 0xd0
#define IDC_REGS_RSOW027_SCOPE 0x01
#define IDC_REGS_RSOW027_SIZE 8
#define IDC_REGS_RSOW027_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW027_RESET 0x00000000

#define IDC_REGS_RSOW027_VALUE_LSB 0x0000
#define IDC_REGS_RSOW027_VALUE_MSB 0x0000
#define IDC_REGS_RSOW027_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW027_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW027_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW027_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW027_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW027_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW027_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW027_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW127_FLAG
#define IDC_REGS_RSOW127_FLAG
// RSOW127 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW127_t;
#endif
#define IDC_REGS_RSOW127_OFFSET 0xd8
#define IDC_REGS_RSOW127_SCOPE 0x01
#define IDC_REGS_RSOW127_SIZE 8
#define IDC_REGS_RSOW127_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW127_RESET 0x00000000

#define IDC_REGS_RSOW127_VALUE_LSB 0x0000
#define IDC_REGS_RSOW127_VALUE_MSB 0x0000
#define IDC_REGS_RSOW127_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW127_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW127_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW127_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW127_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW127_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW127_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW127_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW227_FLAG
#define IDC_REGS_RSOW227_FLAG
// RSOW227 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW227_t;
#endif
#define IDC_REGS_RSOW227_OFFSET 0xe0
#define IDC_REGS_RSOW227_SCOPE 0x01
#define IDC_REGS_RSOW227_SIZE 8
#define IDC_REGS_RSOW227_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW227_RESET 0x00000000

#define IDC_REGS_RSOW227_VALUE_LSB 0x0000
#define IDC_REGS_RSOW227_VALUE_MSB 0x0000
#define IDC_REGS_RSOW227_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW227_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW227_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW227_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW227_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW227_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW227_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW227_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW327_FLAG
#define IDC_REGS_RSOW327_FLAG
// RSOW327 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW327_t;
#endif
#define IDC_REGS_RSOW327_OFFSET 0xe8
#define IDC_REGS_RSOW327_SCOPE 0x01
#define IDC_REGS_RSOW327_SIZE 8
#define IDC_REGS_RSOW327_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW327_RESET 0x00000000

#define IDC_REGS_RSOW327_VALUE_LSB 0x0000
#define IDC_REGS_RSOW327_VALUE_MSB 0x0000
#define IDC_REGS_RSOW327_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW327_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW327_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW327_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW327_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW327_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW327_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW327_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE28_FLAG
#define IDC_REGS_SEMAVALICE28_FLAG
// SEMAVALICE28 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE28_t;
#endif
#define IDC_REGS_SEMAVALICE28_OFFSET 0x00
#define IDC_REGS_SEMAVALICE28_SCOPE 0x01
#define IDC_REGS_SEMAVALICE28_SIZE 8
#define IDC_REGS_SEMAVALICE28_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE28_RESET 0x00000000

#define IDC_REGS_SEMAVALICE28_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE28_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE28_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE28_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE28_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE28_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE28_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE28_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE28_FLAG
#define IDC_REGS_SEMAREQICE28_FLAG
// SEMAREQICE28 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE28_t;
#endif
#define IDC_REGS_SEMAREQICE28_OFFSET 0x08
#define IDC_REGS_SEMAREQICE28_SCOPE 0x01
#define IDC_REGS_SEMAREQICE28_SIZE 8
#define IDC_REGS_SEMAREQICE28_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE28_RESET 0x00000000

#define IDC_REGS_SEMAREQICE28_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE28_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE28_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE28_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE28_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE28_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE28_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE28_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE28_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE28_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW028_FLAG
#define IDC_REGS_RSOW028_FLAG
// RSOW028 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW028_t;
#endif
#define IDC_REGS_RSOW028_OFFSET 0x10
#define IDC_REGS_RSOW028_SCOPE 0x01
#define IDC_REGS_RSOW028_SIZE 8
#define IDC_REGS_RSOW028_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW028_RESET 0x00000000

#define IDC_REGS_RSOW028_VALUE_LSB 0x0000
#define IDC_REGS_RSOW028_VALUE_MSB 0x0000
#define IDC_REGS_RSOW028_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW028_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW028_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW028_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW028_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW028_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW028_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW028_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW128_FLAG
#define IDC_REGS_RSOW128_FLAG
// RSOW128 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW128_t;
#endif
#define IDC_REGS_RSOW128_OFFSET 0x18
#define IDC_REGS_RSOW128_SCOPE 0x01
#define IDC_REGS_RSOW128_SIZE 8
#define IDC_REGS_RSOW128_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW128_RESET 0x00000000

#define IDC_REGS_RSOW128_VALUE_LSB 0x0000
#define IDC_REGS_RSOW128_VALUE_MSB 0x0000
#define IDC_REGS_RSOW128_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW128_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW128_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW128_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW128_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW128_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW128_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW128_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW228_FLAG
#define IDC_REGS_RSOW228_FLAG
// RSOW228 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW228_t;
#endif
#define IDC_REGS_RSOW228_OFFSET 0x20
#define IDC_REGS_RSOW228_SCOPE 0x01
#define IDC_REGS_RSOW228_SIZE 8
#define IDC_REGS_RSOW228_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW228_RESET 0x00000000

#define IDC_REGS_RSOW228_VALUE_LSB 0x0000
#define IDC_REGS_RSOW228_VALUE_MSB 0x0000
#define IDC_REGS_RSOW228_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW228_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW228_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW228_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW228_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW228_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW228_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW228_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW328_FLAG
#define IDC_REGS_RSOW328_FLAG
// RSOW328 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW328_t;
#endif
#define IDC_REGS_RSOW328_OFFSET 0x28
#define IDC_REGS_RSOW328_SCOPE 0x01
#define IDC_REGS_RSOW328_SIZE 8
#define IDC_REGS_RSOW328_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW328_RESET 0x00000000

#define IDC_REGS_RSOW328_VALUE_LSB 0x0000
#define IDC_REGS_RSOW328_VALUE_MSB 0x0000
#define IDC_REGS_RSOW328_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW328_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW328_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW328_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW328_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW328_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW328_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW328_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE29_FLAG
#define IDC_REGS_SEMAVALICE29_FLAG
// SEMAVALICE29 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE29_t;
#endif
#define IDC_REGS_SEMAVALICE29_OFFSET 0x40
#define IDC_REGS_SEMAVALICE29_SCOPE 0x01
#define IDC_REGS_SEMAVALICE29_SIZE 8
#define IDC_REGS_SEMAVALICE29_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE29_RESET 0x00000000

#define IDC_REGS_SEMAVALICE29_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE29_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE29_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE29_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE29_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE29_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE29_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE29_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE29_FLAG
#define IDC_REGS_SEMAREQICE29_FLAG
// SEMAREQICE29 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE29_t;
#endif
#define IDC_REGS_SEMAREQICE29_OFFSET 0x48
#define IDC_REGS_SEMAREQICE29_SCOPE 0x01
#define IDC_REGS_SEMAREQICE29_SIZE 8
#define IDC_REGS_SEMAREQICE29_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE29_RESET 0x00000000

#define IDC_REGS_SEMAREQICE29_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE29_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE29_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE29_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE29_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE29_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE29_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE29_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE29_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE29_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW029_FLAG
#define IDC_REGS_RSOW029_FLAG
// RSOW029 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW029_t;
#endif
#define IDC_REGS_RSOW029_OFFSET 0x50
#define IDC_REGS_RSOW029_SCOPE 0x01
#define IDC_REGS_RSOW029_SIZE 8
#define IDC_REGS_RSOW029_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW029_RESET 0x00000000

#define IDC_REGS_RSOW029_VALUE_LSB 0x0000
#define IDC_REGS_RSOW029_VALUE_MSB 0x0000
#define IDC_REGS_RSOW029_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW029_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW029_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW029_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW029_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW029_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW029_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW029_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW129_FLAG
#define IDC_REGS_RSOW129_FLAG
// RSOW129 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW129_t;
#endif
#define IDC_REGS_RSOW129_OFFSET 0x58
#define IDC_REGS_RSOW129_SCOPE 0x01
#define IDC_REGS_RSOW129_SIZE 8
#define IDC_REGS_RSOW129_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW129_RESET 0x00000000

#define IDC_REGS_RSOW129_VALUE_LSB 0x0000
#define IDC_REGS_RSOW129_VALUE_MSB 0x0000
#define IDC_REGS_RSOW129_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW129_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW129_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW129_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW129_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW129_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW129_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW129_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW229_FLAG
#define IDC_REGS_RSOW229_FLAG
// RSOW229 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW229_t;
#endif
#define IDC_REGS_RSOW229_OFFSET 0x60
#define IDC_REGS_RSOW229_SCOPE 0x01
#define IDC_REGS_RSOW229_SIZE 8
#define IDC_REGS_RSOW229_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW229_RESET 0x00000000

#define IDC_REGS_RSOW229_VALUE_LSB 0x0000
#define IDC_REGS_RSOW229_VALUE_MSB 0x0000
#define IDC_REGS_RSOW229_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW229_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW229_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW229_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW229_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW229_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW229_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW229_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW329_FLAG
#define IDC_REGS_RSOW329_FLAG
// RSOW329 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW329_t;
#endif
#define IDC_REGS_RSOW329_OFFSET 0x68
#define IDC_REGS_RSOW329_SCOPE 0x01
#define IDC_REGS_RSOW329_SIZE 8
#define IDC_REGS_RSOW329_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW329_RESET 0x00000000

#define IDC_REGS_RSOW329_VALUE_LSB 0x0000
#define IDC_REGS_RSOW329_VALUE_MSB 0x0000
#define IDC_REGS_RSOW329_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW329_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW329_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW329_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW329_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW329_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW329_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW329_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE30_FLAG
#define IDC_REGS_SEMAVALICE30_FLAG
// SEMAVALICE30 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE30_t;
#endif
#define IDC_REGS_SEMAVALICE30_OFFSET 0x80
#define IDC_REGS_SEMAVALICE30_SCOPE 0x01
#define IDC_REGS_SEMAVALICE30_SIZE 8
#define IDC_REGS_SEMAVALICE30_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE30_RESET 0x00000000

#define IDC_REGS_SEMAVALICE30_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE30_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE30_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE30_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE30_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE30_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE30_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE30_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE30_FLAG
#define IDC_REGS_SEMAREQICE30_FLAG
// SEMAREQICE30 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE30_t;
#endif
#define IDC_REGS_SEMAREQICE30_OFFSET 0x88
#define IDC_REGS_SEMAREQICE30_SCOPE 0x01
#define IDC_REGS_SEMAREQICE30_SIZE 8
#define IDC_REGS_SEMAREQICE30_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE30_RESET 0x00000000

#define IDC_REGS_SEMAREQICE30_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE30_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE30_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE30_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE30_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE30_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE30_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE30_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE30_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE30_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW030_FLAG
#define IDC_REGS_RSOW030_FLAG
// RSOW030 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW030_t;
#endif
#define IDC_REGS_RSOW030_OFFSET 0x90
#define IDC_REGS_RSOW030_SCOPE 0x01
#define IDC_REGS_RSOW030_SIZE 8
#define IDC_REGS_RSOW030_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW030_RESET 0x00000000

#define IDC_REGS_RSOW030_VALUE_LSB 0x0000
#define IDC_REGS_RSOW030_VALUE_MSB 0x0000
#define IDC_REGS_RSOW030_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW030_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW030_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW030_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW030_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW030_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW030_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW030_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW130_FLAG
#define IDC_REGS_RSOW130_FLAG
// RSOW130 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW130_t;
#endif
#define IDC_REGS_RSOW130_OFFSET 0x98
#define IDC_REGS_RSOW130_SCOPE 0x01
#define IDC_REGS_RSOW130_SIZE 8
#define IDC_REGS_RSOW130_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW130_RESET 0x00000000

#define IDC_REGS_RSOW130_VALUE_LSB 0x0000
#define IDC_REGS_RSOW130_VALUE_MSB 0x0000
#define IDC_REGS_RSOW130_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW130_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW130_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW130_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW130_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW130_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW130_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW130_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW230_FLAG
#define IDC_REGS_RSOW230_FLAG
// RSOW230 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW230_t;
#endif
#define IDC_REGS_RSOW230_OFFSET 0xa0
#define IDC_REGS_RSOW230_SCOPE 0x01
#define IDC_REGS_RSOW230_SIZE 8
#define IDC_REGS_RSOW230_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW230_RESET 0x00000000

#define IDC_REGS_RSOW230_VALUE_LSB 0x0000
#define IDC_REGS_RSOW230_VALUE_MSB 0x0000
#define IDC_REGS_RSOW230_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW230_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW230_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW230_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW230_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW230_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW230_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW230_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW330_FLAG
#define IDC_REGS_RSOW330_FLAG
// RSOW330 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW330_t;
#endif
#define IDC_REGS_RSOW330_OFFSET 0xa8
#define IDC_REGS_RSOW330_SCOPE 0x01
#define IDC_REGS_RSOW330_SIZE 8
#define IDC_REGS_RSOW330_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW330_RESET 0x00000000

#define IDC_REGS_RSOW330_VALUE_LSB 0x0000
#define IDC_REGS_RSOW330_VALUE_MSB 0x0000
#define IDC_REGS_RSOW330_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW330_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW330_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW330_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW330_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW330_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW330_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW330_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAVALICE31_FLAG
#define IDC_REGS_SEMAVALICE31_FLAG
// SEMAVALICE31 desc:  semaphore register N holding the value for spesific ice or pool
typedef union {
    struct {
        uint8_t   value                :   1;    //  counter value
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAVALICE31_t;
#endif
#define IDC_REGS_SEMAVALICE31_OFFSET 0xc0
#define IDC_REGS_SEMAVALICE31_SCOPE 0x01
#define IDC_REGS_SEMAVALICE31_SIZE 8
#define IDC_REGS_SEMAVALICE31_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAVALICE31_RESET 0x00000000

#define IDC_REGS_SEMAVALICE31_VALUE_LSB 0x0000
#define IDC_REGS_SEMAVALICE31_VALUE_MSB 0x0000
#define IDC_REGS_SEMAVALICE31_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAVALICE31_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAVALICE31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAVALICE31_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAVALICE31_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAVALICE31_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAVALICE31_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAVALICE31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_SEMAREQICE31_FLAG
#define IDC_REGS_SEMAREQICE31_FLAG
// SEMAREQICE31 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_SEMAREQICE31_t;
#endif
#define IDC_REGS_SEMAREQICE31_OFFSET 0xc8
#define IDC_REGS_SEMAREQICE31_SCOPE 0x01
#define IDC_REGS_SEMAREQICE31_SIZE 8
#define IDC_REGS_SEMAREQICE31_BITFIELD_COUNT 0x02
#define IDC_REGS_SEMAREQICE31_RESET 0x00000000

#define IDC_REGS_SEMAREQICE31_VALUE_LSB 0x0000
#define IDC_REGS_SEMAREQICE31_VALUE_MSB 0x0000
#define IDC_REGS_SEMAREQICE31_VALUE_RANGE 0x0001
#define IDC_REGS_SEMAREQICE31_VALUE_MASK 0x00000001
#define IDC_REGS_SEMAREQICE31_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_SEMAREQICE31_RSVD_1_LSB 0x0001
#define IDC_REGS_SEMAREQICE31_RSVD_1_MSB 0x0007
#define IDC_REGS_SEMAREQICE31_RSVD_1_RANGE 0x0007
#define IDC_REGS_SEMAREQICE31_RSVD_1_MASK 0x000000fe
#define IDC_REGS_SEMAREQICE31_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW031_FLAG
#define IDC_REGS_RSOW031_FLAG
// RSOW031 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA0
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 0
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW031_t;
#endif
#define IDC_REGS_RSOW031_OFFSET 0xd0
#define IDC_REGS_RSOW031_SCOPE 0x01
#define IDC_REGS_RSOW031_SIZE 8
#define IDC_REGS_RSOW031_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW031_RESET 0x00000000

#define IDC_REGS_RSOW031_VALUE_LSB 0x0000
#define IDC_REGS_RSOW031_VALUE_MSB 0x0000
#define IDC_REGS_RSOW031_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW031_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW031_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW031_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW031_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW031_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW031_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW031_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW131_FLAG
#define IDC_REGS_RSOW131_FLAG
// RSOW131 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA1
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 1
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW131_t;
#endif
#define IDC_REGS_RSOW131_OFFSET 0xd8
#define IDC_REGS_RSOW131_SCOPE 0x01
#define IDC_REGS_RSOW131_SIZE 8
#define IDC_REGS_RSOW131_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW131_RESET 0x00000000

#define IDC_REGS_RSOW131_VALUE_LSB 0x0000
#define IDC_REGS_RSOW131_VALUE_MSB 0x0000
#define IDC_REGS_RSOW131_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW131_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW131_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW131_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW131_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW131_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW131_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW131_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW231_FLAG
#define IDC_REGS_RSOW231_FLAG
// RSOW231 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA2
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 2
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW231_t;
#endif
#define IDC_REGS_RSOW231_OFFSET 0xe0
#define IDC_REGS_RSOW231_SCOPE 0x01
#define IDC_REGS_RSOW231_SIZE 8
#define IDC_REGS_RSOW231_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW231_RESET 0x00000000

#define IDC_REGS_RSOW231_VALUE_LSB 0x0000
#define IDC_REGS_RSOW231_VALUE_MSB 0x0000
#define IDC_REGS_RSOW231_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW231_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW231_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW231_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW231_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW231_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW231_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW231_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_RSOW331_FLAG
#define IDC_REGS_RSOW331_FLAG
// RSOW331 desc:  Take ownership of the semaphore (set to 1) Return a 1 if the bit was
// 0 before the set operation indicating ownership gained If ownership
// was not gained (bit was already a 1) the ICE is registers for
// Notification to be sent to ICENOTA3
typedef union {
    struct {
        uint8_t   value                :   1;    //  Request Semaphore Ownership
                                                 // and Wait with Notification 3
        uint8_t   RSVD_1               :   7;    //  Reserved

    }                                field;
    uint8_t                          val;
} IDC_REGS_RSOW331_t;
#endif
#define IDC_REGS_RSOW331_OFFSET 0xe8
#define IDC_REGS_RSOW331_SCOPE 0x01
#define IDC_REGS_RSOW331_SIZE 8
#define IDC_REGS_RSOW331_BITFIELD_COUNT 0x02
#define IDC_REGS_RSOW331_RESET 0x00000000

#define IDC_REGS_RSOW331_VALUE_LSB 0x0000
#define IDC_REGS_RSOW331_VALUE_MSB 0x0000
#define IDC_REGS_RSOW331_VALUE_RANGE 0x0001
#define IDC_REGS_RSOW331_VALUE_MASK 0x00000001
#define IDC_REGS_RSOW331_VALUE_RESET_VALUE 0x00000000

#define IDC_REGS_RSOW331_RSVD_1_LSB 0x0001
#define IDC_REGS_RSOW331_RSVD_1_MSB 0x0007
#define IDC_REGS_RSOW331_RSVD_1_RANGE 0x0007
#define IDC_REGS_RSOW331_RSVD_1_MASK 0x000000fe
#define IDC_REGS_RSOW331_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_ICEMASKCR_FLAG
#define IDC_REGS_ICEMASKCR_FLAG
// ICEMASKCR desc:  This register contains a bit per ICE that disables (mask) specific
// ICE. The values are written the PCU based on fuses via ICEMASC
// register and are visible to SW. Once and ICE is disabled the Enable
// bit is forced to zero
typedef union {
    struct {
        uint32_t  RSVD_0               :   4;    //  Reserved
        uint32_t  ICEMASK              :  12;    //  ICE n Mask Status Each of the
                                                 // bits is a associated with the
                                                 // propler ICE unit. 0 Ice is
                                                 // enabled in the system. 1 Ice
                                                 // is masked and cant be accessed
        uint32_t  RSVD_1               :  16;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_ICEMASKCR_t;
#endif
#define IDC_REGS_ICEMASKCR_OFFSET 0x00
#define IDC_REGS_ICEMASKCR_SCOPE 0x01
#define IDC_REGS_ICEMASKCR_SIZE 32
#define IDC_REGS_ICEMASKCR_BITFIELD_COUNT 0x03
#define IDC_REGS_ICEMASKCR_RESET 0x00000000

#define IDC_REGS_ICEMASKCR_RSVD_0_LSB 0x0000
#define IDC_REGS_ICEMASKCR_RSVD_0_MSB 0x0003
#define IDC_REGS_ICEMASKCR_RSVD_0_RANGE 0x0004
#define IDC_REGS_ICEMASKCR_RSVD_0_MASK 0x0000000f
#define IDC_REGS_ICEMASKCR_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_ICEMASKCR_ICEMASK_LSB 0x0004
#define IDC_REGS_ICEMASKCR_ICEMASK_MSB 0x000f
#define IDC_REGS_ICEMASKCR_ICEMASK_RANGE 0x000c
#define IDC_REGS_ICEMASKCR_ICEMASK_MASK 0x0000fff0
#define IDC_REGS_ICEMASKCR_ICEMASK_RESET_VALUE 0x00000000

#define IDC_REGS_ICEMASKCR_RSVD_1_LSB 0x0010
#define IDC_REGS_ICEMASKCR_RSVD_1_MSB 0x001f
#define IDC_REGS_ICEMASKCR_RSVD_1_RANGE 0x0010
#define IDC_REGS_ICEMASKCR_RSVD_1_MASK 0xffff0000
#define IDC_REGS_ICEMASKCR_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCSLVFCOV1_FLAG
#define IDC_REGS_IDCSLVFCOV1_FLAG
// IDCSLVFCOV1 desc:  The bits in this register reflect the original bits value at all
// times. Write operation to these bits should be done as part of a
// restore by Power Management Controller only; other write operations
// may cause failure of the ICEDC.
typedef union {
    struct {
        uint32_t  RSVD_0               :   8;    //  Reserved
        uint32_t  SSIV                 :   1;    //  SSIV Lock Status Holds the
                                                 // lock status of the register.
                                                 // This is informative only as
                                                 // save restore of local state is
                                                 // done via chassis signal. 0 not
                                                 // locked 1 - locked
        uint32_t  SSI                  :   1;    //  SSI Lock Status Holds the
                                                 // lock status of the register.
                                                 // This is informative only as
                                                 // save restore of local state is
                                                 // done via chassis signal. 0 not
                                                 // locked 1 - locked
        uint32_t  RSVD_1               :  22;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCSLVFCOV1_t;
#endif
#define IDC_REGS_IDCSLVFCOV1_OFFSET 0x04
#define IDC_REGS_IDCSLVFCOV1_SCOPE 0x01
#define IDC_REGS_IDCSLVFCOV1_SIZE 32
#define IDC_REGS_IDCSLVFCOV1_BITFIELD_COUNT 0x04
#define IDC_REGS_IDCSLVFCOV1_RESET 0x00000000

#define IDC_REGS_IDCSLVFCOV1_RSVD_0_LSB 0x0000
#define IDC_REGS_IDCSLVFCOV1_RSVD_0_MSB 0x0007
#define IDC_REGS_IDCSLVFCOV1_RSVD_0_RANGE 0x0008
#define IDC_REGS_IDCSLVFCOV1_RSVD_0_MASK 0x000000ff
#define IDC_REGS_IDCSLVFCOV1_RSVD_0_RESET_VALUE 0x00000000

#define IDC_REGS_IDCSLVFCOV1_SSIV_LSB 0x0008
#define IDC_REGS_IDCSLVFCOV1_SSIV_MSB 0x0008
#define IDC_REGS_IDCSLVFCOV1_SSIV_RANGE 0x0001
#define IDC_REGS_IDCSLVFCOV1_SSIV_MASK 0x00000100
#define IDC_REGS_IDCSLVFCOV1_SSIV_RESET_VALUE 0x00000000

#define IDC_REGS_IDCSLVFCOV1_SSI_LSB 0x0009
#define IDC_REGS_IDCSLVFCOV1_SSI_MSB 0x0009
#define IDC_REGS_IDCSLVFCOV1_SSI_RANGE 0x0001
#define IDC_REGS_IDCSLVFCOV1_SSI_MASK 0x00000200
#define IDC_REGS_IDCSLVFCOV1_SSI_RESET_VALUE 0x00000000

#define IDC_REGS_IDCSLVFCOV1_RSVD_1_LSB 0x000a
#define IDC_REGS_IDCSLVFCOV1_RSVD_1_MSB 0x001f
#define IDC_REGS_IDCSLVFCOV1_RSVD_1_RANGE 0x0016
#define IDC_REGS_IDCSLVFCOV1_RSVD_1_MASK 0xfffffc00
#define IDC_REGS_IDCSLVFCOV1_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCSLVFCOV2_FLAG
#define IDC_REGS_IDCSLVFCOV2_FLAG
// IDCSLVFCOV2 desc:  This is Demo reg
typedef union {
    struct {
        uint32_t  RSVD_1               :  32;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCSLVFCOV2_t;
#endif
#define IDC_REGS_IDCSLVFCOV2_OFFSET 0x08
#define IDC_REGS_IDCSLVFCOV2_SCOPE 0x01
#define IDC_REGS_IDCSLVFCOV2_SIZE 32
#define IDC_REGS_IDCSLVFCOV2_BITFIELD_COUNT 0x01
#define IDC_REGS_IDCSLVFCOV2_RESET 0x00000000

#define IDC_REGS_IDCSLVFCOV2_RSVD_1_LSB 0x0000
#define IDC_REGS_IDCSLVFCOV2_RSVD_1_MSB 0x001f
#define IDC_REGS_IDCSLVFCOV2_RSVD_1_RANGE 0x0020
#define IDC_REGS_IDCSLVFCOV2_RSVD_1_MASK 0xffffffff
#define IDC_REGS_IDCSLVFCOV2_RSVD_1_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCOBV0_FLAG
#define IDC_REGS_IDCOBV0_FLAG
// IDCOBV0 desc:  ICEDC Debug register - access to internal signals
typedef union {
    struct {
        uint32_t  ICEDCPMFSM0          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 0
        uint32_t  ICEDCPMFSM1          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 1
        uint32_t  ICEDCPMFSM2          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 2
        uint32_t  ICEDCPMFSM3          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 3
        uint32_t  ICEDCPMFSM4          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 4
        uint32_t  ICEDCPMFSM5          :   2;    //  value of the interanl ICEDC
                                                 // FSM state of PM flows with
                                                 // ICEBO 5
        uint32_t  PENDINGPMREQ0        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_O while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PENDINGPMREQ1        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_1 while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PENDINGPMREQ2        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_2 while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PENDINGPMREQ3        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_3 while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PENDINGPMREQ4        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_4 while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PENDINGPMREQ5        :   1;    //  ICEDC have a pending PM
                                                 // request to ICEBO_5 while
                                                 // previous PM req didnt finished
                                                 // yet
        uint32_t  PCIFSM               :   3;    //  value of the interanl ICEDC
                                                 // PCI PM FSM - state machine of
                                                 // FLR/D3/D0I3
        uint32_t  PMBLOCK              :   1;    //  ICEDC interanl state is FLR
                                                 // or D3/DOI3 - registers access
                                                 // are block as defiend in spec
        uint32_t  HOLDFIFO             :   1;    //  ICEDC interanl state is FLR
                                                 // or D3/DOI3 - registers access
                                                 // are block as defiend in spec
        uint32_t  FIFOEMPTYP           :   1;    //  Primary posted FIFO empty
        uint32_t  FIFOEMPTYNP          :   1;    //  Primary Non-posted FIFO empty
        uint32_t  SBFIFOEMPTY          :   1;    //  SB Bridge FIFO is empty - No
                                                 // Pending NP ICE completion MSG
        uint32_t  SBFIFOFULL           :   1;    //  SB Bridge FIFO is full - 8
                                                 // Pending NP ICE completion MSG
                                                 // is on the fly
        uint32_t  MSISENT              :   4;    //  MSI interupt was sent (for
                                                 // each 32 bits of IDC & ICE
                                                 // interupt register - if bit is
                                                 // 1 , No new MSI will be send
                                                 // until SW read [bit 3 = 32 bits
                                                 // MSB of IDCINTST, bit 2 = 32
                                                 // bits LSB of IDCINTST, bit 1 =
                                                 // bits MSB of ICEINTST, bit 0 =
                                                 // 32 bits LSB of ICEINTST
        uint32_t  RSVD_0               :   1;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCOBV0_t;
#endif
#define IDC_REGS_IDCOBV0_OFFSET 0x10
#define IDC_REGS_IDCOBV0_SCOPE 0x01
#define IDC_REGS_IDCOBV0_SIZE 32
#define IDC_REGS_IDCOBV0_BITFIELD_COUNT 0x15
#define IDC_REGS_IDCOBV0_RESET 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM0_LSB 0x0000
#define IDC_REGS_IDCOBV0_ICEDCPMFSM0_MSB 0x0001
#define IDC_REGS_IDCOBV0_ICEDCPMFSM0_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM0_MASK 0x00000003
#define IDC_REGS_IDCOBV0_ICEDCPMFSM0_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM1_LSB 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM1_MSB 0x0003
#define IDC_REGS_IDCOBV0_ICEDCPMFSM1_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM1_MASK 0x0000000c
#define IDC_REGS_IDCOBV0_ICEDCPMFSM1_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM2_LSB 0x0004
#define IDC_REGS_IDCOBV0_ICEDCPMFSM2_MSB 0x0005
#define IDC_REGS_IDCOBV0_ICEDCPMFSM2_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM2_MASK 0x00000030
#define IDC_REGS_IDCOBV0_ICEDCPMFSM2_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM3_LSB 0x0006
#define IDC_REGS_IDCOBV0_ICEDCPMFSM3_MSB 0x0007
#define IDC_REGS_IDCOBV0_ICEDCPMFSM3_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM3_MASK 0x000000c0
#define IDC_REGS_IDCOBV0_ICEDCPMFSM3_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM4_LSB 0x0008
#define IDC_REGS_IDCOBV0_ICEDCPMFSM4_MSB 0x0009
#define IDC_REGS_IDCOBV0_ICEDCPMFSM4_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM4_MASK 0x00000300
#define IDC_REGS_IDCOBV0_ICEDCPMFSM4_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_ICEDCPMFSM5_LSB 0x000a
#define IDC_REGS_IDCOBV0_ICEDCPMFSM5_MSB 0x000b
#define IDC_REGS_IDCOBV0_ICEDCPMFSM5_RANGE 0x0002
#define IDC_REGS_IDCOBV0_ICEDCPMFSM5_MASK 0x00000c00
#define IDC_REGS_IDCOBV0_ICEDCPMFSM5_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ0_LSB 0x000c
#define IDC_REGS_IDCOBV0_PENDINGPMREQ0_MSB 0x000c
#define IDC_REGS_IDCOBV0_PENDINGPMREQ0_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ0_MASK 0x00001000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ0_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ1_LSB 0x000d
#define IDC_REGS_IDCOBV0_PENDINGPMREQ1_MSB 0x000d
#define IDC_REGS_IDCOBV0_PENDINGPMREQ1_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ1_MASK 0x00002000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ1_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ2_LSB 0x000e
#define IDC_REGS_IDCOBV0_PENDINGPMREQ2_MSB 0x000e
#define IDC_REGS_IDCOBV0_PENDINGPMREQ2_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ2_MASK 0x00004000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ2_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ3_LSB 0x000f
#define IDC_REGS_IDCOBV0_PENDINGPMREQ3_MSB 0x000f
#define IDC_REGS_IDCOBV0_PENDINGPMREQ3_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ3_MASK 0x00008000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ3_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ4_LSB 0x0010
#define IDC_REGS_IDCOBV0_PENDINGPMREQ4_MSB 0x0010
#define IDC_REGS_IDCOBV0_PENDINGPMREQ4_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ4_MASK 0x00010000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ4_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PENDINGPMREQ5_LSB 0x0011
#define IDC_REGS_IDCOBV0_PENDINGPMREQ5_MSB 0x0011
#define IDC_REGS_IDCOBV0_PENDINGPMREQ5_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PENDINGPMREQ5_MASK 0x00020000
#define IDC_REGS_IDCOBV0_PENDINGPMREQ5_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PCIFSM_LSB 0x0012
#define IDC_REGS_IDCOBV0_PCIFSM_MSB 0x0014
#define IDC_REGS_IDCOBV0_PCIFSM_RANGE 0x0003
#define IDC_REGS_IDCOBV0_PCIFSM_MASK 0x001c0000
#define IDC_REGS_IDCOBV0_PCIFSM_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_PMBLOCK_LSB 0x0015
#define IDC_REGS_IDCOBV0_PMBLOCK_MSB 0x0015
#define IDC_REGS_IDCOBV0_PMBLOCK_RANGE 0x0001
#define IDC_REGS_IDCOBV0_PMBLOCK_MASK 0x00200000
#define IDC_REGS_IDCOBV0_PMBLOCK_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_HOLDFIFO_LSB 0x0016
#define IDC_REGS_IDCOBV0_HOLDFIFO_MSB 0x0016
#define IDC_REGS_IDCOBV0_HOLDFIFO_RANGE 0x0001
#define IDC_REGS_IDCOBV0_HOLDFIFO_MASK 0x00400000
#define IDC_REGS_IDCOBV0_HOLDFIFO_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_FIFOEMPTYP_LSB 0x0017
#define IDC_REGS_IDCOBV0_FIFOEMPTYP_MSB 0x0017
#define IDC_REGS_IDCOBV0_FIFOEMPTYP_RANGE 0x0001
#define IDC_REGS_IDCOBV0_FIFOEMPTYP_MASK 0x00800000
#define IDC_REGS_IDCOBV0_FIFOEMPTYP_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_FIFOEMPTYNP_LSB 0x0018
#define IDC_REGS_IDCOBV0_FIFOEMPTYNP_MSB 0x0018
#define IDC_REGS_IDCOBV0_FIFOEMPTYNP_RANGE 0x0001
#define IDC_REGS_IDCOBV0_FIFOEMPTYNP_MASK 0x01000000
#define IDC_REGS_IDCOBV0_FIFOEMPTYNP_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_SBFIFOEMPTY_LSB 0x0019
#define IDC_REGS_IDCOBV0_SBFIFOEMPTY_MSB 0x0019
#define IDC_REGS_IDCOBV0_SBFIFOEMPTY_RANGE 0x0001
#define IDC_REGS_IDCOBV0_SBFIFOEMPTY_MASK 0x02000000
#define IDC_REGS_IDCOBV0_SBFIFOEMPTY_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_SBFIFOFULL_LSB 0x001a
#define IDC_REGS_IDCOBV0_SBFIFOFULL_MSB 0x001a
#define IDC_REGS_IDCOBV0_SBFIFOFULL_RANGE 0x0001
#define IDC_REGS_IDCOBV0_SBFIFOFULL_MASK 0x04000000
#define IDC_REGS_IDCOBV0_SBFIFOFULL_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_MSISENT_LSB 0x001b
#define IDC_REGS_IDCOBV0_MSISENT_MSB 0x001e
#define IDC_REGS_IDCOBV0_MSISENT_RANGE 0x0004
#define IDC_REGS_IDCOBV0_MSISENT_MASK 0x78000000
#define IDC_REGS_IDCOBV0_MSISENT_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV0_RSVD_0_LSB 0x001f
#define IDC_REGS_IDCOBV0_RSVD_0_MSB 0x001f
#define IDC_REGS_IDCOBV0_RSVD_0_RANGE 0x0001
#define IDC_REGS_IDCOBV0_RSVD_0_MASK 0x80000000
#define IDC_REGS_IDCOBV0_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCOBV1_FLAG
#define IDC_REGS_IDCOBV1_FLAG
// IDCOBV1 desc:  ICEDC Debug register - access to internal signals
typedef union {
    struct {
        uint32_t  ICETRIGGERDONE       :  12;    //  ICE alrady got counter
                                                 // notifcation MSG for the
                                                 // spesific counter - no new MSG
                                                 // will be sent until new
                                                 // condition setup
        uint32_t  IATRIGGERDONE        :   4;    //  IA alrady got counter
                                                 // notifcation MSG for the
                                                 // spesific counter - no new MSG
                                                 // will be sent until new
                                                 // condition setup
        uint32_t  ICESEMA              :  12;    //  ICE is pending to Semaphore
                                                 // releases notification (for at
                                                 // least one of the 32 semaphores
        uint32_t  CORESEMA             :   1;    //  CORE is pending to Semaphore
                                                 // releases notification (for at
                                                 // least one of the 32 semaphores
        uint32_t  RSVD_0               :   3;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCOBV1_t;
#endif
#define IDC_REGS_IDCOBV1_OFFSET 0x14
#define IDC_REGS_IDCOBV1_SCOPE 0x01
#define IDC_REGS_IDCOBV1_SIZE 32
#define IDC_REGS_IDCOBV1_BITFIELD_COUNT 0x05
#define IDC_REGS_IDCOBV1_RESET 0x00000000

#define IDC_REGS_IDCOBV1_ICETRIGGERDONE_LSB 0x0000
#define IDC_REGS_IDCOBV1_ICETRIGGERDONE_MSB 0x000b
#define IDC_REGS_IDCOBV1_ICETRIGGERDONE_RANGE 0x000c
#define IDC_REGS_IDCOBV1_ICETRIGGERDONE_MASK 0x00000fff
#define IDC_REGS_IDCOBV1_ICETRIGGERDONE_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV1_IATRIGGERDONE_LSB 0x000c
#define IDC_REGS_IDCOBV1_IATRIGGERDONE_MSB 0x000f
#define IDC_REGS_IDCOBV1_IATRIGGERDONE_RANGE 0x0004
#define IDC_REGS_IDCOBV1_IATRIGGERDONE_MASK 0x0000f000
#define IDC_REGS_IDCOBV1_IATRIGGERDONE_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV1_ICESEMA_LSB 0x0010
#define IDC_REGS_IDCOBV1_ICESEMA_MSB 0x001b
#define IDC_REGS_IDCOBV1_ICESEMA_RANGE 0x000c
#define IDC_REGS_IDCOBV1_ICESEMA_MASK 0x0fff0000
#define IDC_REGS_IDCOBV1_ICESEMA_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV1_CORESEMA_LSB 0x001c
#define IDC_REGS_IDCOBV1_CORESEMA_MSB 0x001c
#define IDC_REGS_IDCOBV1_CORESEMA_RANGE 0x0001
#define IDC_REGS_IDCOBV1_CORESEMA_MASK 0x10000000
#define IDC_REGS_IDCOBV1_CORESEMA_RESET_VALUE 0x00000000

#define IDC_REGS_IDCOBV1_RSVD_0_LSB 0x001d
#define IDC_REGS_IDCOBV1_RSVD_0_MSB 0x001f
#define IDC_REGS_IDCOBV1_RSVD_0_RANGE 0x0003
#define IDC_REGS_IDCOBV1_RSVD_0_MASK 0xe0000000
#define IDC_REGS_IDCOBV1_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCOBV2_FLAG
#define IDC_REGS_IDCOBV2_FLAG
// IDCOBV2 desc:  ICEDC Debug register - access to internal signals
typedef union {
    struct {
        uint32_t  RSVD_0               :  32;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCOBV2_t;
#endif
#define IDC_REGS_IDCOBV2_OFFSET 0x18
#define IDC_REGS_IDCOBV2_SCOPE 0x01
#define IDC_REGS_IDCOBV2_SIZE 32
#define IDC_REGS_IDCOBV2_BITFIELD_COUNT 0x01
#define IDC_REGS_IDCOBV2_RESET 0x00000000

#define IDC_REGS_IDCOBV2_RSVD_0_LSB 0x0000
#define IDC_REGS_IDCOBV2_RSVD_0_MSB 0x001f
#define IDC_REGS_IDCOBV2_RSVD_0_RANGE 0x0020
#define IDC_REGS_IDCOBV2_RSVD_0_MASK 0xffffffff
#define IDC_REGS_IDCOBV2_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCOBV3_FLAG
#define IDC_REGS_IDCOBV3_FLAG
// IDCOBV3 desc:  ICEDC Debug register - access to internal signals
typedef union {
    struct {
        uint32_t  RSVD_0               :  32;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCOBV3_t;
#endif
#define IDC_REGS_IDCOBV3_OFFSET 0x1c
#define IDC_REGS_IDCOBV3_SCOPE 0x01
#define IDC_REGS_IDCOBV3_SIZE 32
#define IDC_REGS_IDCOBV3_BITFIELD_COUNT 0x01
#define IDC_REGS_IDCOBV3_RESET 0x00000000

#define IDC_REGS_IDCOBV3_RSVD_0_LSB 0x0000
#define IDC_REGS_IDCOBV3_RSVD_0_MSB 0x001f
#define IDC_REGS_IDCOBV3_RSVD_0_RANGE 0x0020
#define IDC_REGS_IDCOBV3_RSVD_0_MASK 0xffffffff
#define IDC_REGS_IDCOBV3_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

#ifndef IDC_REGS_IDCOBV4_FLAG
#define IDC_REGS_IDCOBV4_FLAG
// IDCOBV4 desc:  ICEDC Debug register - access to internal signals
typedef union {
    struct {
        uint32_t  RSVD_0               :  32;    //  Reserved

    }                                field;
    uint32_t                         val;
} IDC_REGS_IDCOBV4_t;
#endif
#define IDC_REGS_IDCOBV4_OFFSET 0x20
#define IDC_REGS_IDCOBV4_SCOPE 0x01
#define IDC_REGS_IDCOBV4_SIZE 32
#define IDC_REGS_IDCOBV4_BITFIELD_COUNT 0x01
#define IDC_REGS_IDCOBV4_RESET 0x00000000

#define IDC_REGS_IDCOBV4_RSVD_0_LSB 0x0000
#define IDC_REGS_IDCOBV4_RSVD_0_MSB 0x001f
#define IDC_REGS_IDCOBV4_RSVD_0_RANGE 0x0020
#define IDC_REGS_IDCOBV4_RSVD_0_MASK 0xffffffff
#define IDC_REGS_IDCOBV4_RSVD_0_RESET_VALUE 0x00000000


// --------------------------------------------------------------------------------------------------------------------------------

// starting the array instantiation section
typedef struct {
    IDC_REGS_ID_t              ID;               // offset 4'h0, width 32
    IDC_REGS_DCTRL_t           DCTRL;            // offset 4'h4, width 16
    IDC_REGS_DSTS_t            DSTS;             // offset 4'h6, width 16
    IDC_REGS_RID_DLCO_t        RID_DLCO;         // offset 4'h8, width 32
    IDC_REGS_CLS_t             CLS;              // offset 8'h0C, width 8
    uint8_t                    rsvd0[1];
    IDC_REGS_HTYPE_t           HTYPE;            // offset 8'h0E, width 8
    uint8_t                    rsvd1[1];
    IDC_REGS_BIST_t            BIST;             // offset 8'h0F, width 8
    uint8_t                    rsvd2[1];
    IDC_REGS_IDCBAR0_t         IDCBAR0;          // offset 8'h10, width 64
    IDC_REGS_IDCBAR1_t         IDCBAR1;          // offset 8'h18, width 64
    uint8_t                    rsvd3[12];
    IDC_REGS_SSVI_t            SSVI;             // offset 8'h2C, width 16
    IDC_REGS_SSI_t             SSI;              // offset 8'h2E, width 16
    uint8_t                    rsvd4[4];
    IDC_REGS_CAPP_t            CAPP;             // offset 8'h34, width 8
    uint8_t                    rsvd5[7];
    IDC_REGS_INTL_t            INTL;             // offset 8'h3C, width 8
    uint8_t                    rsvd6[7];
    IDC_REGS_INTP_t            INTP;             // offset 8'h3D, width 8
    uint8_t                    rsvd7[7];
    IDC_REGS_MINGNTLAT_t       MINGNTLAT;        // offset 8'h3E, width 16
    IDC_REGS_OVRCFGCTL_t       OVRCFGCTL;        // offset 8'h40, width 32
    uint8_t                    rsvd8[76];
    IDC_REGS_MSICAPID_t        MSICAPID;         // offset 8'h90, width 16
    IDC_REGS_MC_t              MC;               // offset 8'h92, width 16
    IDC_REGS_MA_t              MA;               // offset 8'h94, width 32
    IDC_REGS_MD_t              MD;               // offset 8'h98, width 16
    uint8_t                    rsvd9[6];
    IDC_REGS_D0I3CAPID_t       D0I3CAPID;        // offset 12'h0A0, width 16
    IDC_REGS_D0I3CAP_t         D0I3CAP;          // offset 12'h0A2, width 16
    IDC_REGS_D0I3VSEC_t        D0I3VSEC;         // offset 12'h0A4, width 32
    IDC_REGS_D0I3SWLTRPTR_t    D0I3SWLTRPTR;     // offset 12'h0A8, width 32
    IDC_REGS_D0I3DEVIDLEPTR_t  D0I3DEVIDLEPTR;   // offset 12'h0AC, width 32
    IDC_REGS_D0I3DEVIDLEPOL_t  D0I3DEVIDLEPOL;   // offset 12'h0B0, width 16
    IDC_REGS_PCE_t             PCE;              // offset 12'h0B2, width 16
    uint8_t                    rsvd10[40];
    IDC_REGS_PMCAPID_t         PMCAPID;          // offset 12'h0DC, width 16
    IDC_REGS_PMCAP_t           PMCAP;            // offset 12'h0DE, width 16
    IDC_REGS_PMCS_t            PMCS;             // offset 12'h0E0, width 16
    uint8_t                    rsvd11[14];
    IDC_REGS_FLRCAPID_t        FLRCAPID;         // offset 12'h0F0, width 16
    IDC_REGS_FLRMISC_t         FLRMISC;          // offset 12'h0F2, width 16
    IDC_REGS_FLRCTL_t          FLRCTL;           // offset 12'h0F4, width 8
    IDC_REGS_FLRSTS_t          FLRSTS;           // offset 12'h0F5, width 8
    uint8_t                    rsvd12[10];
    IDC_REGS_IDC_MMIO_BAR0_SAI_CP_t IDC_MMIO_BAR0_SAI_CP; // offset 12'h100, width 64
    IDC_REGS_IDC_MMIO_BAR0_SAI_RD_t IDC_MMIO_BAR0_SAI_RD; // offset 12'h108, width 64
    IDC_REGS_IDC_MMIO_BAR0_SAI_WR_t IDC_MMIO_BAR0_SAI_WR; // offset 12'h110, width 64
    uint8_t                    rsvd13[8];
    IDC_REGS_IDC_MMIO_BAR1_SAI_CP_t IDC_MMIO_BAR1_SAI_CP; // offset 12'h120, width 64
    IDC_REGS_IDC_MMIO_BAR1_SAI_RD_t IDC_MMIO_BAR1_SAI_RD; // offset 12'h128, width 64
    IDC_REGS_IDC_MMIO_BAR1_SAI_WR_t IDC_MMIO_BAR1_SAI_WR; // offset 12'h130, width 64
    uint8_t                    rsvd14[8];
    IDC_REGS_IDC_SBPR_SAI_CP_t IDC_SBPR_SAI_CP;  // offset 12'h140, width 64
    IDC_REGS_IDC_SBPR_SAI_RD_t IDC_SBPR_SAI_RD;  // offset 12'h148, width 64
    IDC_REGS_IDC_SBPR_SAI_WR_t IDC_SBPR_SAI_WR;  // offset 12'h150, width 64
    IDC_REGS_ICEPE_t           ICEPE;            // offset 4'h0, width 32
    uint8_t                    rsvd15[4];
    IDC_REGS_ICERST_t          ICERST;           // offset 4'h8, width 32
    uint8_t                    rsvd16[4];
    IDC_REGS_ICERDY_t          ICERDY;           // offset 8'h10, width 32
    uint8_t                    rsvd17[4];
    IDC_REGS_ICEMASKSTS_t      ICEMASKSTS;       // offset 8'h18, width 32
    uint8_t                    rsvd18[4];
    IDC_REGS_ICENOTE_t         ICENOTE;          // offset 8'h20, width 32
    uint8_t                    rsvd19[4];
    IDC_REGS_NOTCLR_t          NOTCLR;           // offset 8'h28, width 32
    uint8_t                    rsvd20[20];
    IDC_REGS_ICEINTST_t        ICEINTST;         // offset 8'h40, width 64
    IDC_REGS_ICEINTEN_t        ICEINTEN;         // offset 8'h48, width 64
    IDC_REGS_IDCINTST_t        IDCINTST;         // offset 8'h50, width 64
    IDC_REGS_IDCINTEN_t        IDCINTEN;         // offset 8'h58, width 64
    IDC_REGS_IDCSPARE_t        IDCSPARE;         // offset 8'h60, width 64
    uint8_t                    rsvd21[64];
    IDC_REGS_IDCD0I3C_t        IDCD0I3C;         // offset 12'h0A8, width 8
    uint8_t                    rsvd22[1879];
    IDC_REGS_ICEPOOL0_t        ICEPOOL0;         // offset 12'h800, width 32
    uint8_t                    rsvd23[4];
    IDC_REGS_ICEPOOL1_t        ICEPOOL1;         // offset 12'h808, width 32
    uint8_t                    rsvd24[4];
    IDC_REGS_ICEPOOL2_t        ICEPOOL2;         // offset 12'h810, width 32
    uint8_t                    rsvd25[4];
    IDC_REGS_ICEPOOL3_t        ICEPOOL3;         // offset 12'h818, width 32
    uint8_t                    rsvd26[4];
    IDC_REGS_ICEPOOL4_t        ICEPOOL4;         // offset 12'h820, width 32
    uint8_t                    rsvd27[4];
    IDC_REGS_ICEPOOL5_t        ICEPOOL5;         // offset 12'h828, width 32
    uint8_t                    rsvd28[20];
    IDC_REGS_ICENOTA0_t        ICENOTA0;         // offset 12'h840, width 32
    uint8_t                    rsvd29[4];
    IDC_REGS_ICENOTA1_t        ICENOTA1;         // offset 12'h848, width 32
    uint8_t                    rsvd30[4];
    IDC_REGS_ICENOTA2_t        ICENOTA2;         // offset 12'h850, width 32
    uint8_t                    rsvd31[4];
    IDC_REGS_ICENOTA3_t        ICENOTA3;         // offset 12'h858, width 32
    uint8_t                    rsvd32[1956];
    IDC_REGS_EVCTIA0_t         EVCTIA0;          // offset 16'h1000, width 32
    uint8_t                    rsvd33[4];
    IDC_REGS_EVCTIAINC0_t      EVCTIAINC0;       // offset 16'h1008, width 32
    uint8_t                    rsvd34[4];
    IDC_REGS_EVCTPROT0_t       EVCTPROT0;        // offset 16'h1010, width 32
    uint8_t                    rsvd35[12];
    IDC_REGS_EVCTIA1_t         EVCTIA1;          // offset 16'h1020, width 32
    uint8_t                    rsvd36[4];
    IDC_REGS_EVCTIAINC1_t      EVCTIAINC1;       // offset 16'h1028, width 32
    uint8_t                    rsvd37[4];
    IDC_REGS_EVCTPROT1_t       EVCTPROT1;        // offset 16'h1030, width 32
    uint8_t                    rsvd38[12];
    IDC_REGS_EVCTIA2_t         EVCTIA2;          // offset 16'h1040, width 32
    uint8_t                    rsvd39[4];
    IDC_REGS_EVCTIAINC2_t      EVCTIAINC2;       // offset 16'h1048, width 32
    uint8_t                    rsvd40[4];
    IDC_REGS_EVCTPROT2_t       EVCTPROT2;        // offset 16'h1050, width 32
    uint8_t                    rsvd41[12];
    IDC_REGS_EVCTIA3_t         EVCTIA3;          // offset 16'h1060, width 32
    uint8_t                    rsvd42[4];
    IDC_REGS_EVCTIAINC3_t      EVCTIAINC3;       // offset 16'h1068, width 32
    uint8_t                    rsvd43[4];
    IDC_REGS_EVCTPROT3_t       EVCTPROT3;        // offset 16'h1070, width 32
    uint8_t                    rsvd44[12];
    IDC_REGS_EVCTIA4_t         EVCTIA4;          // offset 16'h1080, width 32
    uint8_t                    rsvd45[4];
    IDC_REGS_EVCTIAINC4_t      EVCTIAINC4;       // offset 16'h1088, width 32
    uint8_t                    rsvd46[4];
    IDC_REGS_EVCTPROT4_t       EVCTPROT4;        // offset 16'h1090, width 32
    uint8_t                    rsvd47[12];
    IDC_REGS_EVCTIA5_t         EVCTIA5;          // offset 16'h10A0, width 32
    uint8_t                    rsvd48[4];
    IDC_REGS_EVCTIAINC5_t      EVCTIAINC5;       // offset 16'h10A8, width 32
    uint8_t                    rsvd49[4];
    IDC_REGS_EVCTPROT5_t       EVCTPROT5;        // offset 16'h10B0, width 32
    uint8_t                    rsvd50[12];
    IDC_REGS_EVCTIA6_t         EVCTIA6;          // offset 16'h10C0, width 32
    uint8_t                    rsvd51[4];
    IDC_REGS_EVCTIAINC6_t      EVCTIAINC6;       // offset 16'h10C8, width 32
    uint8_t                    rsvd52[4];
    IDC_REGS_EVCTPROT6_t       EVCTPROT6;        // offset 16'h10D0, width 32
    uint8_t                    rsvd53[12];
    IDC_REGS_EVCTIA7_t         EVCTIA7;          // offset 16'h10E0, width 32
    uint8_t                    rsvd54[4];
    IDC_REGS_EVCTIAINC7_t      EVCTIAINC7;       // offset 16'h10E8, width 32
    uint8_t                    rsvd55[4];
    IDC_REGS_EVCTPROT7_t       EVCTPROT7;        // offset 16'h10F0, width 32
    uint8_t                    rsvd56[12];
    IDC_REGS_EVCTIA8_t         EVCTIA8;          // offset 16'h1100, width 32
    uint8_t                    rsvd57[4];
    IDC_REGS_EVCTIAINC8_t      EVCTIAINC8;       // offset 16'h1108, width 32
    uint8_t                    rsvd58[4];
    IDC_REGS_EVCTPROT8_t       EVCTPROT8;        // offset 16'h1110, width 32
    uint8_t                    rsvd59[12];
    IDC_REGS_EVCTIA9_t         EVCTIA9;          // offset 16'h1120, width 32
    uint8_t                    rsvd60[4];
    IDC_REGS_EVCTIAINC9_t      EVCTIAINC9;       // offset 16'h1128, width 32
    uint8_t                    rsvd61[4];
    IDC_REGS_EVCTPROT9_t       EVCTPROT9;        // offset 16'h1130, width 32
    uint8_t                    rsvd62[12];
    IDC_REGS_EVCTIA10_t        EVCTIA10;         // offset 16'h1140, width 32
    uint8_t                    rsvd63[4];
    IDC_REGS_EVCTIAINC10_t     EVCTIAINC10;      // offset 16'h1148, width 32
    uint8_t                    rsvd64[4];
    IDC_REGS_EVCTPROT10_t      EVCTPROT10;       // offset 16'h1150, width 32
    uint8_t                    rsvd65[12];
    IDC_REGS_EVCTIA11_t        EVCTIA11;         // offset 16'h1160, width 32
    uint8_t                    rsvd66[4];
    IDC_REGS_EVCTIAINC11_t     EVCTIAINC11;      // offset 16'h1168, width 32
    uint8_t                    rsvd67[4];
    IDC_REGS_EVCTPROT11_t      EVCTPROT11;       // offset 16'h1170, width 32
    uint8_t                    rsvd68[12];
    IDC_REGS_EVCTIA12_t        EVCTIA12;         // offset 16'h1180, width 32
    uint8_t                    rsvd69[4];
    IDC_REGS_EVCTIAINC12_t     EVCTIAINC12;      // offset 16'h1188, width 32
    uint8_t                    rsvd70[4];
    IDC_REGS_EVCTPROT12_t      EVCTPROT12;       // offset 16'h1190, width 32
    uint8_t                    rsvd71[12];
    IDC_REGS_EVCTIA13_t        EVCTIA13;         // offset 16'h11A0, width 32
    uint8_t                    rsvd72[4];
    IDC_REGS_EVCTIAINC13_t     EVCTIAINC13;      // offset 16'h11A8, width 32
    uint8_t                    rsvd73[4];
    IDC_REGS_EVCTPROT13_t      EVCTPROT13;       // offset 16'h11B0, width 32
    uint8_t                    rsvd74[12];
    IDC_REGS_EVCTIA14_t        EVCTIA14;         // offset 16'h11C0, width 32
    uint8_t                    rsvd75[4];
    IDC_REGS_EVCTIAINC14_t     EVCTIAINC14;      // offset 16'h11C8, width 32
    uint8_t                    rsvd76[4];
    IDC_REGS_EVCTPROT14_t      EVCTPROT14;       // offset 16'h11D0, width 32
    uint8_t                    rsvd77[12];
    IDC_REGS_EVCTIA15_t        EVCTIA15;         // offset 16'h11E0, width 32
    uint8_t                    rsvd78[4];
    IDC_REGS_EVCTIAINC15_t     EVCTIAINC15;      // offset 16'h11E8, width 32
    uint8_t                    rsvd79[4];
    IDC_REGS_EVCTPROT15_t      EVCTPROT15;       // offset 16'h11F0, width 32
    uint8_t                    rsvd80[12];
    IDC_REGS_EVCTIA16_t        EVCTIA16;         // offset 16'h1200, width 32
    uint8_t                    rsvd81[4];
    IDC_REGS_EVCTIAINC16_t     EVCTIAINC16;      // offset 16'h1208, width 32
    uint8_t                    rsvd82[4];
    IDC_REGS_EVCTPROT16_t      EVCTPROT16;       // offset 16'h1210, width 32
    uint8_t                    rsvd83[12];
    IDC_REGS_EVCTIA17_t        EVCTIA17;         // offset 16'h1220, width 32
    uint8_t                    rsvd84[4];
    IDC_REGS_EVCTIAINC17_t     EVCTIAINC17;      // offset 16'h1228, width 32
    uint8_t                    rsvd85[4];
    IDC_REGS_EVCTPROT17_t      EVCTPROT17;       // offset 16'h1230, width 32
    uint8_t                    rsvd86[12];
    IDC_REGS_EVCTIA18_t        EVCTIA18;         // offset 16'h1240, width 32
    uint8_t                    rsvd87[4];
    IDC_REGS_EVCTIAINC18_t     EVCTIAINC18;      // offset 16'h1248, width 32
    uint8_t                    rsvd88[4];
    IDC_REGS_EVCTPROT18_t      EVCTPROT18;       // offset 16'h1250, width 32
    uint8_t                    rsvd89[12];
    IDC_REGS_EVCTIA19_t        EVCTIA19;         // offset 16'h1260, width 32
    uint8_t                    rsvd90[4];
    IDC_REGS_EVCTIAINC19_t     EVCTIAINC19;      // offset 16'h1268, width 32
    uint8_t                    rsvd91[4];
    IDC_REGS_EVCTPROT19_t      EVCTPROT19;       // offset 16'h1270, width 32
    uint8_t                    rsvd92[12];
    IDC_REGS_EVCTIA20_t        EVCTIA20;         // offset 16'h1280, width 32
    uint8_t                    rsvd93[4];
    IDC_REGS_EVCTIAINC20_t     EVCTIAINC20;      // offset 16'h1288, width 32
    uint8_t                    rsvd94[4];
    IDC_REGS_EVCTPROT20_t      EVCTPROT20;       // offset 16'h1290, width 32
    uint8_t                    rsvd95[12];
    IDC_REGS_EVCTIA21_t        EVCTIA21;         // offset 16'h12A0, width 32
    uint8_t                    rsvd96[4];
    IDC_REGS_EVCTIAINC21_t     EVCTIAINC21;      // offset 16'h12A8, width 32
    uint8_t                    rsvd97[4];
    IDC_REGS_EVCTPROT21_t      EVCTPROT21;       // offset 16'h12B0, width 32
    uint8_t                    rsvd98[12];
    IDC_REGS_EVCTIA22_t        EVCTIA22;         // offset 16'h12C0, width 32
    uint8_t                    rsvd99[4];
    IDC_REGS_EVCTIAINC22_t     EVCTIAINC22;      // offset 16'h12C8, width 32
    uint8_t                    rsvd100[4];
    IDC_REGS_EVCTPROT22_t      EVCTPROT22;       // offset 16'h12D0, width 32
    uint8_t                    rsvd101[12];
    IDC_REGS_EVCTIA23_t        EVCTIA23;         // offset 16'h12E0, width 32
    uint8_t                    rsvd102[4];
    IDC_REGS_EVCTIAINC23_t     EVCTIAINC23;      // offset 16'h12E8, width 32
    uint8_t                    rsvd103[4];
    IDC_REGS_EVCTPROT23_t      EVCTPROT23;       // offset 16'h12F0, width 32
    uint8_t                    rsvd104[12];
    IDC_REGS_EVCTIA24_t        EVCTIA24;         // offset 16'h1300, width 32
    uint8_t                    rsvd105[4];
    IDC_REGS_EVCTIAINC24_t     EVCTIAINC24;      // offset 16'h1308, width 32
    uint8_t                    rsvd106[4];
    IDC_REGS_EVCTPROT24_t      EVCTPROT24;       // offset 16'h1310, width 32
    uint8_t                    rsvd107[12];
    IDC_REGS_EVCTIA25_t        EVCTIA25;         // offset 16'h1320, width 32
    uint8_t                    rsvd108[4];
    IDC_REGS_EVCTIAINC25_t     EVCTIAINC25;      // offset 16'h1328, width 32
    uint8_t                    rsvd109[4];
    IDC_REGS_EVCTPROT25_t      EVCTPROT25;       // offset 16'h1330, width 32
    uint8_t                    rsvd110[12];
    IDC_REGS_EVCTIA26_t        EVCTIA26;         // offset 16'h1340, width 32
    uint8_t                    rsvd111[4];
    IDC_REGS_EVCTIAINC26_t     EVCTIAINC26;      // offset 16'h1348, width 32
    uint8_t                    rsvd112[4];
    IDC_REGS_EVCTPROT26_t      EVCTPROT26;       // offset 16'h1350, width 32
    uint8_t                    rsvd113[12];
    IDC_REGS_EVCTIA27_t        EVCTIA27;         // offset 16'h1360, width 32
    uint8_t                    rsvd114[4];
    IDC_REGS_EVCTIAINC27_t     EVCTIAINC27;      // offset 16'h1368, width 32
    uint8_t                    rsvd115[4];
    IDC_REGS_EVCTPROT27_t      EVCTPROT27;       // offset 16'h1370, width 32
    uint8_t                    rsvd116[12];
    IDC_REGS_EVCTIA28_t        EVCTIA28;         // offset 16'h1380, width 32
    uint8_t                    rsvd117[4];
    IDC_REGS_EVCTIAINC28_t     EVCTIAINC28;      // offset 16'h1388, width 32
    uint8_t                    rsvd118[4];
    IDC_REGS_EVCTPROT28_t      EVCTPROT28;       // offset 16'h1390, width 32
    uint8_t                    rsvd119[12];
    IDC_REGS_EVCTIA29_t        EVCTIA29;         // offset 16'h13A0, width 32
    uint8_t                    rsvd120[4];
    IDC_REGS_EVCTIAINC29_t     EVCTIAINC29;      // offset 16'h13A8, width 32
    uint8_t                    rsvd121[4];
    IDC_REGS_EVCTPROT29_t      EVCTPROT29;       // offset 16'h13B0, width 32
    uint8_t                    rsvd122[12];
    IDC_REGS_EVCTIA30_t        EVCTIA30;         // offset 16'h13C0, width 32
    uint8_t                    rsvd123[4];
    IDC_REGS_EVCTIAINC30_t     EVCTIAINC30;      // offset 16'h13C8, width 32
    uint8_t                    rsvd124[4];
    IDC_REGS_EVCTPROT30_t      EVCTPROT30;       // offset 16'h13D0, width 32
    uint8_t                    rsvd125[12];
    IDC_REGS_EVCTIA31_t        EVCTIA31;         // offset 16'h13E0, width 32
    uint8_t                    rsvd126[4];
    IDC_REGS_EVCTIAINC31_t     EVCTIAINC31;      // offset 16'h13E8, width 32
    uint8_t                    rsvd127[4];
    IDC_REGS_EVCTPROT31_t      EVCTPROT31;       // offset 16'h13F0, width 32
    uint8_t                    rsvd128[1036];
    IDC_REGS_SEMAVALIA0_t      SEMAVALIA0;       // offset 16'h1800, width 8
    uint8_t                    rsvd129[7];
    IDC_REGS_RSRES0_t          RSRES0;           // offset 16'h1808, width 8
    uint8_t                    rsvd130[7];
    IDC_REGS_SEMAPROT0_t       SEMAPROT0;        // offset 16'h1810, width 32
    uint8_t                    rsvd131[12];
    IDC_REGS_SEMAVALIA1_t      SEMAVALIA1;       // offset 16'h1820, width 8
    uint8_t                    rsvd132[7];
    IDC_REGS_RSRES1_t          RSRES1;           // offset 16'h1828, width 8
    uint8_t                    rsvd133[7];
    IDC_REGS_SEMAPROT1_t       SEMAPROT1;        // offset 16'h1830, width 32
    uint8_t                    rsvd134[12];
    IDC_REGS_SEMAVALIA2_t      SEMAVALIA2;       // offset 16'h1840, width 8
    uint8_t                    rsvd135[7];
    IDC_REGS_RSRES2_t          RSRES2;           // offset 16'h1848, width 8
    uint8_t                    rsvd136[7];
    IDC_REGS_SEMAPROT2_t       SEMAPROT2;        // offset 16'h1850, width 32
    uint8_t                    rsvd137[12];
    IDC_REGS_SEMAVALIA3_t      SEMAVALIA3;       // offset 16'h1860, width 8
    uint8_t                    rsvd138[7];
    IDC_REGS_RSRES3_t          RSRES3;           // offset 16'h1868, width 8
    uint8_t                    rsvd139[7];
    IDC_REGS_SEMAPROT3_t       SEMAPROT3;        // offset 16'h1870, width 32
    uint8_t                    rsvd140[12];
    IDC_REGS_SEMAVALIA4_t      SEMAVALIA4;       // offset 16'h1880, width 8
    uint8_t                    rsvd141[7];
    IDC_REGS_RSRES4_t          RSRES4;           // offset 16'h1888, width 8
    uint8_t                    rsvd142[7];
    IDC_REGS_SEMAPROT4_t       SEMAPROT4;        // offset 16'h1890, width 32
    uint8_t                    rsvd143[12];
    IDC_REGS_SEMAVALIA5_t      SEMAVALIA5;       // offset 16'h18A0, width 8
    uint8_t                    rsvd144[7];
    IDC_REGS_RSRES5_t          RSRES5;           // offset 16'h18A8, width 8
    uint8_t                    rsvd145[7];
    IDC_REGS_SEMAPROT5_t       SEMAPROT5;        // offset 16'h18B0, width 32
    uint8_t                    rsvd146[12];
    IDC_REGS_SEMAVALIA6_t      SEMAVALIA6;       // offset 16'h18C0, width 8
    uint8_t                    rsvd147[7];
    IDC_REGS_RSRES6_t          RSRES6;           // offset 16'h18C8, width 8
    uint8_t                    rsvd148[7];
    IDC_REGS_SEMAPROT6_t       SEMAPROT6;        // offset 16'h18D0, width 32
    uint8_t                    rsvd149[12];
    IDC_REGS_SEMAVALIA7_t      SEMAVALIA7;       // offset 16'h18E0, width 8
    uint8_t                    rsvd150[7];
    IDC_REGS_RSRES7_t          RSRES7;           // offset 16'h18E8, width 8
    uint8_t                    rsvd151[7];
    IDC_REGS_SEMAPROT7_t       SEMAPROT7;        // offset 16'h18F0, width 32
    uint8_t                    rsvd152[12];
    IDC_REGS_SEMAVALIA8_t      SEMAVALIA8;       // offset 16'h1900, width 8
    uint8_t                    rsvd153[7];
    IDC_REGS_RSRES8_t          RSRES8;           // offset 16'h1908, width 8
    uint8_t                    rsvd154[7];
    IDC_REGS_SEMAPROT8_t       SEMAPROT8;        // offset 16'h1910, width 32
    uint8_t                    rsvd155[12];
    IDC_REGS_SEMAVALIA9_t      SEMAVALIA9;       // offset 16'h1920, width 8
    uint8_t                    rsvd156[7];
    IDC_REGS_RSRES9_t          RSRES9;           // offset 16'h1928, width 8
    uint8_t                    rsvd157[7];
    IDC_REGS_SEMAPROT9_t       SEMAPROT9;        // offset 16'h1930, width 32
    uint8_t                    rsvd158[12];
    IDC_REGS_SEMAVALIA10_t     SEMAVALIA10;      // offset 16'h1940, width 8
    uint8_t                    rsvd159[7];
    IDC_REGS_RSRES10_t         RSRES10;          // offset 16'h1948, width 8
    uint8_t                    rsvd160[7];
    IDC_REGS_SEMAPROT10_t      SEMAPROT10;       // offset 16'h1950, width 32
    uint8_t                    rsvd161[12];
    IDC_REGS_SEMAVALIA11_t     SEMAVALIA11;      // offset 16'h1960, width 8
    uint8_t                    rsvd162[7];
    IDC_REGS_RSRES11_t         RSRES11;          // offset 16'h1968, width 8
    uint8_t                    rsvd163[7];
    IDC_REGS_SEMAPROT11_t      SEMAPROT11;       // offset 16'h1970, width 32
    uint8_t                    rsvd164[12];
    IDC_REGS_SEMAVALIA12_t     SEMAVALIA12;      // offset 16'h1980, width 8
    uint8_t                    rsvd165[7];
    IDC_REGS_RSRES12_t         RSRES12;          // offset 16'h1988, width 8
    uint8_t                    rsvd166[7];
    IDC_REGS_SEMAPROT12_t      SEMAPROT12;       // offset 16'h1990, width 32
    uint8_t                    rsvd167[12];
    IDC_REGS_SEMAVALIA13_t     SEMAVALIA13;      // offset 16'h19A0, width 8
    uint8_t                    rsvd168[7];
    IDC_REGS_RSRES13_t         RSRES13;          // offset 16'h19A8, width 8
    uint8_t                    rsvd169[7];
    IDC_REGS_SEMAPROT13_t      SEMAPROT13;       // offset 16'h19B0, width 32
    uint8_t                    rsvd170[12];
    IDC_REGS_SEMAVALIA14_t     SEMAVALIA14;      // offset 16'h19C0, width 8
    uint8_t                    rsvd171[7];
    IDC_REGS_RSRES14_t         RSRES14;          // offset 16'h19C8, width 8
    uint8_t                    rsvd172[7];
    IDC_REGS_SEMAPROT14_t      SEMAPROT14;       // offset 16'h19D0, width 32
    uint8_t                    rsvd173[12];
    IDC_REGS_SEMAVALIA15_t     SEMAVALIA15;      // offset 16'h19E0, width 8
    uint8_t                    rsvd174[7];
    IDC_REGS_RSRES15_t         RSRES15;          // offset 16'h19E8, width 8
    uint8_t                    rsvd175[7];
    IDC_REGS_SEMAPROT15_t      SEMAPROT15;       // offset 16'h19F0, width 32
    uint8_t                    rsvd176[12];
    IDC_REGS_SEMAVALIA16_t     SEMAVALIA16;      // offset 16'h1A00, width 8
    uint8_t                    rsvd177[7];
    IDC_REGS_RSRES16_t         RSRES16;          // offset 16'h1A08, width 8
    uint8_t                    rsvd178[7];
    IDC_REGS_SEMAPROT16_t      SEMAPROT16;       // offset 16'h1A10, width 32
    uint8_t                    rsvd179[12];
    IDC_REGS_SEMAVALIA17_t     SEMAVALIA17;      // offset 16'h1A20, width 8
    uint8_t                    rsvd180[7];
    IDC_REGS_RSRES17_t         RSRES17;          // offset 16'h1A28, width 8
    uint8_t                    rsvd181[7];
    IDC_REGS_SEMAPROT17_t      SEMAPROT17;       // offset 16'h1A30, width 32
    uint8_t                    rsvd182[12];
    IDC_REGS_SEMAVALIA18_t     SEMAVALIA18;      // offset 16'h1A40, width 8
    uint8_t                    rsvd183[7];
    IDC_REGS_RSRES18_t         RSRES18;          // offset 16'h1A48, width 8
    uint8_t                    rsvd184[7];
    IDC_REGS_SEMAPROT18_t      SEMAPROT18;       // offset 16'h1A50, width 32
    uint8_t                    rsvd185[12];
    IDC_REGS_SEMAVALIA19_t     SEMAVALIA19;      // offset 16'h1A60, width 8
    uint8_t                    rsvd186[7];
    IDC_REGS_RSRES19_t         RSRES19;          // offset 16'h1A68, width 8
    uint8_t                    rsvd187[7];
    IDC_REGS_SEMAPROT19_t      SEMAPROT19;       // offset 16'h1A70, width 32
    uint8_t                    rsvd188[12];
    IDC_REGS_SEMAVALIA20_t     SEMAVALIA20;      // offset 16'h1A80, width 8
    uint8_t                    rsvd189[7];
    IDC_REGS_RSRES20_t         RSRES20;          // offset 16'h1A88, width 8
    uint8_t                    rsvd190[7];
    IDC_REGS_SEMAPROT20_t      SEMAPROT20;       // offset 16'h1A90, width 32
    uint8_t                    rsvd191[12];
    IDC_REGS_SEMAVALIA21_t     SEMAVALIA21;      // offset 16'h1AA0, width 8
    uint8_t                    rsvd192[7];
    IDC_REGS_RSRES21_t         RSRES21;          // offset 16'h1AA8, width 8
    uint8_t                    rsvd193[7];
    IDC_REGS_SEMAPROT21_t      SEMAPROT21;       // offset 16'h1AB0, width 32
    uint8_t                    rsvd194[12];
    IDC_REGS_SEMAVALIA22_t     SEMAVALIA22;      // offset 16'h1AC0, width 8
    uint8_t                    rsvd195[7];
    IDC_REGS_RSRES22_t         RSRES22;          // offset 16'h1AC8, width 8
    uint8_t                    rsvd196[7];
    IDC_REGS_SEMAPROT22_t      SEMAPROT22;       // offset 16'h1AD0, width 32
    uint8_t                    rsvd197[12];
    IDC_REGS_SEMAVALIA23_t     SEMAVALIA23;      // offset 16'h1AE0, width 8
    uint8_t                    rsvd198[7];
    IDC_REGS_RSRES23_t         RSRES23;          // offset 16'h1AE8, width 8
    uint8_t                    rsvd199[7];
    IDC_REGS_SEMAPROT23_t      SEMAPROT23;       // offset 16'h1AF0, width 32
    uint8_t                    rsvd200[12];
    IDC_REGS_SEMAVALIA24_t     SEMAVALIA24;      // offset 16'h1B00, width 8
    uint8_t                    rsvd201[7];
    IDC_REGS_RSRES24_t         RSRES24;          // offset 16'h1B08, width 8
    uint8_t                    rsvd202[7];
    IDC_REGS_SEMAPROT24_t      SEMAPROT24;       // offset 16'h1B10, width 32
    uint8_t                    rsvd203[12];
    IDC_REGS_SEMAVALIA25_t     SEMAVALIA25;      // offset 16'h1B20, width 8
    uint8_t                    rsvd204[7];
    IDC_REGS_RSRES25_t         RSRES25;          // offset 16'h1B28, width 8
    uint8_t                    rsvd205[7];
    IDC_REGS_SEMAPROT25_t      SEMAPROT25;       // offset 16'h1B30, width 32
    uint8_t                    rsvd206[12];
    IDC_REGS_SEMAVALIA26_t     SEMAVALIA26;      // offset 16'h1B40, width 8
    uint8_t                    rsvd207[7];
    IDC_REGS_RSRES26_t         RSRES26;          // offset 16'h1B48, width 8
    uint8_t                    rsvd208[7];
    IDC_REGS_SEMAPROT26_t      SEMAPROT26;       // offset 16'h1B50, width 32
    uint8_t                    rsvd209[12];
    IDC_REGS_SEMAVALIA27_t     SEMAVALIA27;      // offset 16'h1B60, width 8
    uint8_t                    rsvd210[7];
    IDC_REGS_RSRES27_t         RSRES27;          // offset 16'h1B68, width 8
    uint8_t                    rsvd211[7];
    IDC_REGS_SEMAPROT27_t      SEMAPROT27;       // offset 16'h1B70, width 32
    uint8_t                    rsvd212[12];
    IDC_REGS_SEMAVALIA28_t     SEMAVALIA28;      // offset 16'h1B80, width 8
    uint8_t                    rsvd213[7];
    IDC_REGS_RSRES28_t         RSRES28;          // offset 16'h1B88, width 8
    uint8_t                    rsvd214[7];
    IDC_REGS_SEMAPROT28_t      SEMAPROT28;       // offset 16'h1B90, width 32
    uint8_t                    rsvd215[12];
    IDC_REGS_SEMAVALIA29_t     SEMAVALIA29;      // offset 16'h1BA0, width 8
    uint8_t                    rsvd216[7];
    IDC_REGS_RSRES29_t         RSRES29;          // offset 16'h1BA8, width 8
    uint8_t                    rsvd217[7];
    IDC_REGS_SEMAPROT29_t      SEMAPROT29;       // offset 16'h1BB0, width 32
    uint8_t                    rsvd218[12];
    IDC_REGS_SEMAVALIA30_t     SEMAVALIA30;      // offset 16'h1BC0, width 8
    uint8_t                    rsvd219[7];
    IDC_REGS_RSRES30_t         RSRES30;          // offset 16'h1BC8, width 8
    uint8_t                    rsvd220[7];
    IDC_REGS_SEMAPROT30_t      SEMAPROT30;       // offset 16'h1BD0, width 32
    uint8_t                    rsvd221[12];
    IDC_REGS_SEMAVALIA31_t     SEMAVALIA31;      // offset 16'h1BE0, width 8
    uint8_t                    rsvd222[7];
    IDC_REGS_RSRES31_t         RSRES31;          // offset 16'h1BE8, width 8
    uint8_t                    rsvd223[7];
    IDC_REGS_SEMAPROT31_t      SEMAPROT31;       // offset 16'h1BF0, width 32
    uint8_t                    rsvd224[1036];
    IDC_REGS_IA0ATTEN_t        IA0ATTEN;         // offset 16'h2000, width 32
    uint8_t                    rsvd225[28];
    IDC_REGS_EVCTNOTIA0_t      EVCTNOTIA0;       // offset 16'h2020, width 32
    uint8_t                    rsvd226[4];
    IDC_REGS_EVCTNOTIA1_t      EVCTNOTIA1;       // offset 16'h2028, width 32
    uint8_t                    rsvd227[4];
    IDC_REGS_EVCTNOTIA2_t      EVCTNOTIA2;       // offset 16'h2030, width 32
    uint8_t                    rsvd228[4];
    IDC_REGS_EVCTNOTIA3_t      EVCTNOTIA3;       // offset 16'h2038, width 32
    IDC_REGS_EVCTICE0_t        EVCTICE0;         // offset 4'h0, width 32
    uint8_t                    rsvd229[4];
    IDC_REGS_EVCTINCICE0_t     EVCTINCICE0;      // offset 4'h8, width 32
    uint8_t                    rsvd230[20];
    IDC_REGS_EVCTICE1_t        EVCTICE1;         // offset 8'h20, width 32
    uint8_t                    rsvd231[4];
    IDC_REGS_EVCTINCICE1_t     EVCTINCICE1;      // offset 8'h28, width 32
    uint8_t                    rsvd232[20];
    IDC_REGS_EVCTICE2_t        EVCTICE2;         // offset 8'h40, width 32
    uint8_t                    rsvd233[4];
    IDC_REGS_EVCTINCICE2_t     EVCTINCICE2;      // offset 8'h48, width 32
    uint8_t                    rsvd234[20];
    IDC_REGS_EVCTICE3_t        EVCTICE3;         // offset 8'h60, width 32
    uint8_t                    rsvd235[4];
    IDC_REGS_EVCTINCICE3_t     EVCTINCICE3;      // offset 8'h68, width 32
    uint8_t                    rsvd236[20];
    IDC_REGS_EVCTICE4_t        EVCTICE4;         // offset 8'h80, width 32
    uint8_t                    rsvd237[4];
    IDC_REGS_EVCTINCICE4_t     EVCTINCICE4;      // offset 8'h88, width 32
    uint8_t                    rsvd238[20];
    IDC_REGS_EVCTICE5_t        EVCTICE5;         // offset 12'h0A0, width 32
    uint8_t                    rsvd239[4];
    IDC_REGS_EVCTINCICE5_t     EVCTINCICE5;      // offset 12'h0A8, width 32
    uint8_t                    rsvd240[20];
    IDC_REGS_EVCTICE6_t        EVCTICE6;         // offset 12'h0C0, width 32
    uint8_t                    rsvd241[4];
    IDC_REGS_EVCTINCICE6_t     EVCTINCICE6;      // offset 12'h0C8, width 32
    uint8_t                    rsvd242[20];
    IDC_REGS_EVCTICE7_t        EVCTICE7;         // offset 12'h0E0, width 32
    uint8_t                    rsvd243[4];
    IDC_REGS_EVCTINCICE7_t     EVCTINCICE7;      // offset 12'h0E8, width 32
    uint8_t                    rsvd244[20];
    IDC_REGS_EVCTICE8_t        EVCTICE8;         // offset 12'h100, width 32
    uint8_t                    rsvd245[4];
    IDC_REGS_EVCTINCICE8_t     EVCTINCICE8;      // offset 12'h108, width 32
    uint8_t                    rsvd246[20];
    IDC_REGS_EVCTICE9_t        EVCTICE9;         // offset 12'h120, width 32
    uint8_t                    rsvd247[4];
    IDC_REGS_EVCTINCICE9_t     EVCTINCICE9;      // offset 12'h128, width 32
    uint8_t                    rsvd248[20];
    IDC_REGS_EVCTICE10_t       EVCTICE10;        // offset 12'h140, width 32
    uint8_t                    rsvd249[4];
    IDC_REGS_EVCTINCICE10_t    EVCTINCICE10;     // offset 12'h148, width 32
    uint8_t                    rsvd250[20];
    IDC_REGS_EVCTICE11_t       EVCTICE11;        // offset 12'h160, width 32
    uint8_t                    rsvd251[4];
    IDC_REGS_EVCTINCICE11_t    EVCTINCICE11;     // offset 12'h168, width 32
    uint8_t                    rsvd252[20];
    IDC_REGS_EVCTICE12_t       EVCTICE12;        // offset 12'h180, width 32
    uint8_t                    rsvd253[4];
    IDC_REGS_EVCTINCICE12_t    EVCTINCICE12;     // offset 12'h188, width 32
    uint8_t                    rsvd254[20];
    IDC_REGS_EVCTICE13_t       EVCTICE13;        // offset 12'h1A0, width 32
    uint8_t                    rsvd255[4];
    IDC_REGS_EVCTINCICE13_t    EVCTINCICE13;     // offset 12'h1A8, width 32
    uint8_t                    rsvd256[20];
    IDC_REGS_EVCTICE14_t       EVCTICE14;        // offset 12'h1C0, width 32
    uint8_t                    rsvd257[4];
    IDC_REGS_EVCTINCICE14_t    EVCTINCICE14;     // offset 12'h1C8, width 32
    uint8_t                    rsvd258[20];
    IDC_REGS_EVCTICE15_t       EVCTICE15;        // offset 12'h1E0, width 32
    uint8_t                    rsvd259[4];
    IDC_REGS_EVCTINCICE15_t    EVCTINCICE15;     // offset 12'h1E8, width 32
    uint8_t                    rsvd260[20];
    IDC_REGS_EVCTICE16_t       EVCTICE16;        // offset 12'h200, width 32
    uint8_t                    rsvd261[4];
    IDC_REGS_EVCTINCICE16_t    EVCTINCICE16;     // offset 12'h208, width 32
    uint8_t                    rsvd262[20];
    IDC_REGS_EVCTICE17_t       EVCTICE17;        // offset 12'h220, width 32
    uint8_t                    rsvd263[4];
    IDC_REGS_EVCTINCICE17_t    EVCTINCICE17;     // offset 12'h228, width 32
    uint8_t                    rsvd264[20];
    IDC_REGS_EVCTICE18_t       EVCTICE18;        // offset 12'h240, width 32
    uint8_t                    rsvd265[4];
    IDC_REGS_EVCTINCICE18_t    EVCTINCICE18;     // offset 12'h248, width 32
    uint8_t                    rsvd266[20];
    IDC_REGS_EVCTICE19_t       EVCTICE19;        // offset 12'h260, width 32
    uint8_t                    rsvd267[4];
    IDC_REGS_EVCTINCICE19_t    EVCTINCICE19;     // offset 12'h268, width 32
    uint8_t                    rsvd268[20];
    IDC_REGS_EVCTICE20_t       EVCTICE20;        // offset 12'h280, width 32
    uint8_t                    rsvd269[4];
    IDC_REGS_EVCTINCICE20_t    EVCTINCICE20;     // offset 12'h288, width 32
    uint8_t                    rsvd270[20];
    IDC_REGS_EVCTICE21_t       EVCTICE21;        // offset 12'h2A0, width 32
    uint8_t                    rsvd271[4];
    IDC_REGS_EVCTINCICE21_t    EVCTINCICE21;     // offset 12'h2A8, width 32
    uint8_t                    rsvd272[20];
    IDC_REGS_EVCTICE22_t       EVCTICE22;        // offset 12'h2C0, width 32
    uint8_t                    rsvd273[4];
    IDC_REGS_EVCTINCICE22_t    EVCTINCICE22;     // offset 12'h2C8, width 32
    uint8_t                    rsvd274[20];
    IDC_REGS_EVCTICE23_t       EVCTICE23;        // offset 12'h2E0, width 32
    uint8_t                    rsvd275[4];
    IDC_REGS_EVCTINCICE23_t    EVCTINCICE23;     // offset 12'h2E8, width 32
    uint8_t                    rsvd276[20];
    IDC_REGS_EVCTICE24_t       EVCTICE24;        // offset 12'h300, width 32
    uint8_t                    rsvd277[4];
    IDC_REGS_EVCTINCICE24_t    EVCTINCICE24;     // offset 12'h308, width 32
    uint8_t                    rsvd278[20];
    IDC_REGS_EVCTICE25_t       EVCTICE25;        // offset 12'h320, width 32
    uint8_t                    rsvd279[4];
    IDC_REGS_EVCTINCICE25_t    EVCTINCICE25;     // offset 12'h328, width 32
    uint8_t                    rsvd280[20];
    IDC_REGS_EVCTICE26_t       EVCTICE26;        // offset 12'h340, width 32
    uint8_t                    rsvd281[4];
    IDC_REGS_EVCTINCICE26_t    EVCTINCICE26;     // offset 12'h348, width 32
    uint8_t                    rsvd282[20];
    IDC_REGS_EVCTICE27_t       EVCTICE27;        // offset 12'h360, width 32
    uint8_t                    rsvd283[4];
    IDC_REGS_EVCTINCICE27_t    EVCTINCICE27;     // offset 12'h368, width 32
    uint8_t                    rsvd284[20];
    IDC_REGS_EVCTICE28_t       EVCTICE28;        // offset 12'h380, width 32
    uint8_t                    rsvd285[4];
    IDC_REGS_EVCTINCICE28_t    EVCTINCICE28;     // offset 12'h388, width 32
    uint8_t                    rsvd286[20];
    IDC_REGS_EVCTICE29_t       EVCTICE29;        // offset 12'h3A0, width 32
    uint8_t                    rsvd287[4];
    IDC_REGS_EVCTINCICE29_t    EVCTINCICE29;     // offset 12'h3A8, width 32
    uint8_t                    rsvd288[20];
    IDC_REGS_EVCTICE30_t       EVCTICE30;        // offset 12'h3C0, width 32
    uint8_t                    rsvd289[4];
    IDC_REGS_EVCTINCICE30_t    EVCTINCICE30;     // offset 12'h3C8, width 32
    uint8_t                    rsvd290[20];
    IDC_REGS_EVCTICE31_t       EVCTICE31;        // offset 12'h3E0, width 32
    uint8_t                    rsvd291[4];
    IDC_REGS_EVCTINCICE31_t    EVCTINCICE31;     // offset 12'h3E8, width 32
    uint8_t                    rsvd292[1044];
    IDC_REGS_EVCTNOTICE_t      EVCTNOTICE;       // offset 12'h800, width 32
    uint8_t                    rsvd293[12];
    IDC_REGS_ICEATTEN_t        ICEATTEN;         // offset 12'h810, width 32
    uint8_t                    rsvd294[2028];
    IDC_REGS_SEMAVALICE0_t     SEMAVALICE0;      // offset 16'h1000, width 8
    uint8_t                    rsvd295[7];
    IDC_REGS_SEMAREQICE0_t     SEMAREQICE0;      // offset 16'h1008, width 8
    uint8_t                    rsvd296[7];
    IDC_REGS_RSOW00_t          RSOW00;           // offset 16'h1010, width 8
    uint8_t                    rsvd297[7];
    IDC_REGS_RSOW10_t          RSOW10;           // offset 16'h1018, width 8
    uint8_t                    rsvd298[7];
    IDC_REGS_RSOW20_t          RSOW20;           // offset 16'h1020, width 8
    uint8_t                    rsvd299[7];
    IDC_REGS_RSOW30_t          RSOW30;           // offset 16'h1028, width 8
    uint8_t                    rsvd300[23];
    IDC_REGS_SEMAVALICE1_t     SEMAVALICE1;      // offset 16'h1040, width 8
    uint8_t                    rsvd301[7];
    IDC_REGS_SEMAREQICE1_t     SEMAREQICE1;      // offset 16'h1048, width 8
    uint8_t                    rsvd302[7];
    IDC_REGS_RSOW01_t          RSOW01;           // offset 16'h1050, width 8
    uint8_t                    rsvd303[7];
    IDC_REGS_RSOW11_t          RSOW11;           // offset 16'h1058, width 8
    uint8_t                    rsvd304[7];
    IDC_REGS_RSOW21_t          RSOW21;           // offset 16'h1060, width 8
    uint8_t                    rsvd305[7];
    IDC_REGS_RSOW31_t          RSOW31;           // offset 16'h1068, width 8
    uint8_t                    rsvd306[23];
    IDC_REGS_SEMAVALICE2_t     SEMAVALICE2;      // offset 16'h1080, width 8
    uint8_t                    rsvd307[7];
    IDC_REGS_SEMAREQICE2_t     SEMAREQICE2;      // offset 16'h1088, width 8
    uint8_t                    rsvd308[7];
    IDC_REGS_RSOW02_t          RSOW02;           // offset 16'h1090, width 8
    uint8_t                    rsvd309[7];
    IDC_REGS_RSOW12_t          RSOW12;           // offset 16'h1098, width 8
    uint8_t                    rsvd310[7];
    IDC_REGS_RSOW22_t          RSOW22;           // offset 16'h10A0, width 8
    uint8_t                    rsvd311[7];
    IDC_REGS_RSOW32_t          RSOW32;           // offset 16'h10A8, width 8
    uint8_t                    rsvd312[23];
    IDC_REGS_SEMAVALICE3_t     SEMAVALICE3;      // offset 16'h10C0, width 8
    uint8_t                    rsvd313[7];
    IDC_REGS_SEMAREQICE3_t     SEMAREQICE3;      // offset 16'h10C8, width 8
    uint8_t                    rsvd314[7];
    IDC_REGS_RSOW03_t          RSOW03;           // offset 16'h10D0, width 8
    uint8_t                    rsvd315[7];
    IDC_REGS_RSOW13_t          RSOW13;           // offset 16'h10D8, width 8
    uint8_t                    rsvd316[7];
    IDC_REGS_RSOW23_t          RSOW23;           // offset 16'h10E0, width 8
    uint8_t                    rsvd317[7];
    IDC_REGS_RSOW33_t          RSOW33;           // offset 16'h10E8, width 8
    uint8_t                    rsvd318[23];
    IDC_REGS_SEMAVALICE4_t     SEMAVALICE4;      // offset 16'h1100, width 8
    uint8_t                    rsvd319[7];
    IDC_REGS_SEMAREQICE4_t     SEMAREQICE4;      // offset 16'h1108, width 8
    uint8_t                    rsvd320[7];
    IDC_REGS_RSOW04_t          RSOW04;           // offset 16'h1110, width 8
    uint8_t                    rsvd321[7];
    IDC_REGS_RSOW14_t          RSOW14;           // offset 16'h1118, width 8
    uint8_t                    rsvd322[7];
    IDC_REGS_RSOW24_t          RSOW24;           // offset 16'h1120, width 8
    uint8_t                    rsvd323[7];
    IDC_REGS_RSOW34_t          RSOW34;           // offset 16'h1128, width 8
    uint8_t                    rsvd324[23];
    IDC_REGS_SEMAVALICE5_t     SEMAVALICE5;      // offset 16'h1140, width 8
    uint8_t                    rsvd325[7];
    IDC_REGS_SEMAREQICE5_t     SEMAREQICE5;      // offset 16'h1148, width 8
    uint8_t                    rsvd326[7];
    IDC_REGS_RSOW05_t          RSOW05;           // offset 16'h1150, width 8
    uint8_t                    rsvd327[7];
    IDC_REGS_RSOW15_t          RSOW15;           // offset 16'h1158, width 8
    uint8_t                    rsvd328[7];
    IDC_REGS_RSOW25_t          RSOW25;           // offset 16'h1160, width 8
    uint8_t                    rsvd329[7];
    IDC_REGS_RSOW35_t          RSOW35;           // offset 16'h1168, width 8
    uint8_t                    rsvd330[23];
    IDC_REGS_SEMAVALICE6_t     SEMAVALICE6;      // offset 16'h1180, width 8
    uint8_t                    rsvd331[7];
    IDC_REGS_SEMAREQICE6_t     SEMAREQICE6;      // offset 16'h1188, width 8
    uint8_t                    rsvd332[7];
    IDC_REGS_RSOW06_t          RSOW06;           // offset 16'h1190, width 8
    uint8_t                    rsvd333[7];
    IDC_REGS_RSOW16_t          RSOW16;           // offset 16'h1198, width 8
    uint8_t                    rsvd334[7];
    IDC_REGS_RSOW26_t          RSOW26;           // offset 16'h11A0, width 8
    uint8_t                    rsvd335[7];
    IDC_REGS_RSOW36_t          RSOW36;           // offset 16'h11A8, width 8
    uint8_t                    rsvd336[23];
    IDC_REGS_SEMAVALICE7_t     SEMAVALICE7;      // offset 16'h11C0, width 8
    uint8_t                    rsvd337[7];
    IDC_REGS_SEMAREQICE7_t     SEMAREQICE7;      // offset 16'h11C8, width 8
    uint8_t                    rsvd338[7];
    IDC_REGS_RSOW07_t          RSOW07;           // offset 16'h11D0, width 8
    uint8_t                    rsvd339[7];
    IDC_REGS_RSOW17_t          RSOW17;           // offset 16'h11D8, width 8
    uint8_t                    rsvd340[7];
    IDC_REGS_RSOW27_t          RSOW27;           // offset 16'h11E0, width 8
    uint8_t                    rsvd341[7];
    IDC_REGS_RSOW37_t          RSOW37;           // offset 16'h11E8, width 8
    uint8_t                    rsvd342[23];
    IDC_REGS_SEMAVALICE8_t     SEMAVALICE8;      // offset 16'h1200, width 8
    uint8_t                    rsvd343[7];
    IDC_REGS_SEMAREQICE8_t     SEMAREQICE8;      // offset 16'h1208, width 8
    uint8_t                    rsvd344[7];
    IDC_REGS_RSOW08_t          RSOW08;           // offset 16'h1210, width 8
    uint8_t                    rsvd345[7];
    IDC_REGS_RSOW18_t          RSOW18;           // offset 16'h1218, width 8
    uint8_t                    rsvd346[7];
    IDC_REGS_RSOW28_t          RSOW28;           // offset 16'h1220, width 8
    uint8_t                    rsvd347[7];
    IDC_REGS_RSOW38_t          RSOW38;           // offset 16'h1228, width 8
    uint8_t                    rsvd348[23];
    IDC_REGS_SEMAVALICE9_t     SEMAVALICE9;      // offset 16'h1240, width 8
    uint8_t                    rsvd349[7];
    IDC_REGS_SEMAREQICE9_t     SEMAREQICE9;      // offset 16'h1248, width 8
    uint8_t                    rsvd350[7];
    IDC_REGS_RSOW09_t          RSOW09;           // offset 16'h1250, width 8
    uint8_t                    rsvd351[7];
    IDC_REGS_RSOW19_t          RSOW19;           // offset 16'h1258, width 8
    uint8_t                    rsvd352[7];
    IDC_REGS_RSOW29_t          RSOW29;           // offset 16'h1260, width 8
    uint8_t                    rsvd353[7];
    IDC_REGS_RSOW39_t          RSOW39;           // offset 16'h1268, width 8
    uint8_t                    rsvd354[23];
    IDC_REGS_SEMAVALICE10_t    SEMAVALICE10;     // offset 16'h1280, width 8
    uint8_t                    rsvd355[7];
    IDC_REGS_SEMAREQICE10_t    SEMAREQICE10;     // offset 16'h1288, width 8
    uint8_t                    rsvd356[7];
    IDC_REGS_RSOW010_t         RSOW010;          // offset 16'h1290, width 8
    uint8_t                    rsvd357[7];
    IDC_REGS_RSOW110_t         RSOW110;          // offset 16'h1298, width 8
    uint8_t                    rsvd358[7];
    IDC_REGS_RSOW210_t         RSOW210;          // offset 16'h12A0, width 8
    uint8_t                    rsvd359[7];
    IDC_REGS_RSOW310_t         RSOW310;          // offset 16'h12A8, width 8
    uint8_t                    rsvd360[23];
    IDC_REGS_SEMAVALICE11_t    SEMAVALICE11;     // offset 16'h12C0, width 8
    uint8_t                    rsvd361[7];
    IDC_REGS_SEMAREQICE11_t    SEMAREQICE11;     // offset 16'h12C8, width 8
    uint8_t                    rsvd362[7];
    IDC_REGS_RSOW011_t         RSOW011;          // offset 16'h12D0, width 8
    uint8_t                    rsvd363[7];
    IDC_REGS_RSOW111_t         RSOW111;          // offset 16'h12D8, width 8
    uint8_t                    rsvd364[7];
    IDC_REGS_RSOW211_t         RSOW211;          // offset 16'h12E0, width 8
    uint8_t                    rsvd365[7];
    IDC_REGS_RSOW311_t         RSOW311;          // offset 16'h12E8, width 8
    uint8_t                    rsvd366[23];
    IDC_REGS_SEMAVALICE12_t    SEMAVALICE12;     // offset 16'h1300, width 8
    uint8_t                    rsvd367[7];
    IDC_REGS_SEMAREQICE12_t    SEMAREQICE12;     // offset 16'h1308, width 8
    uint8_t                    rsvd368[7];
    IDC_REGS_RSOW012_t         RSOW012;          // offset 16'h1310, width 8
    uint8_t                    rsvd369[7];
    IDC_REGS_RSOW112_t         RSOW112;          // offset 16'h1318, width 8
    uint8_t                    rsvd370[7];
    IDC_REGS_RSOW212_t         RSOW212;          // offset 16'h1320, width 8
    uint8_t                    rsvd371[7];
    IDC_REGS_RSOW312_t         RSOW312;          // offset 16'h1328, width 8
    uint8_t                    rsvd372[23];
    IDC_REGS_SEMAVALICE13_t    SEMAVALICE13;     // offset 16'h1340, width 8
    uint8_t                    rsvd373[7];
    IDC_REGS_SEMAREQICE13_t    SEMAREQICE13;     // offset 16'h1348, width 8
    uint8_t                    rsvd374[7];
    IDC_REGS_RSOW013_t         RSOW013;          // offset 16'h1350, width 8
    uint8_t                    rsvd375[7];
    IDC_REGS_RSOW113_t         RSOW113;          // offset 16'h1358, width 8
    uint8_t                    rsvd376[7];
    IDC_REGS_RSOW213_t         RSOW213;          // offset 16'h1360, width 8
    uint8_t                    rsvd377[7];
    IDC_REGS_RSOW313_t         RSOW313;          // offset 16'h1368, width 8
    uint8_t                    rsvd378[23];
    IDC_REGS_SEMAVALICE14_t    SEMAVALICE14;     // offset 16'h1380, width 8
    uint8_t                    rsvd379[7];
    IDC_REGS_SEMAREQICE14_t    SEMAREQICE14;     // offset 16'h1388, width 8
    uint8_t                    rsvd380[7];
    IDC_REGS_RSOW014_t         RSOW014;          // offset 16'h1390, width 8
    uint8_t                    rsvd381[7];
    IDC_REGS_RSOW114_t         RSOW114;          // offset 16'h1398, width 8
    uint8_t                    rsvd382[7];
    IDC_REGS_RSOW214_t         RSOW214;          // offset 16'h13A0, width 8
    uint8_t                    rsvd383[7];
    IDC_REGS_RSOW314_t         RSOW314;          // offset 16'h13A8, width 8
    uint8_t                    rsvd384[23];
    IDC_REGS_SEMAVALICE15_t    SEMAVALICE15;     // offset 16'h13C0, width 8
    uint8_t                    rsvd385[7];
    IDC_REGS_SEMAREQICE15_t    SEMAREQICE15;     // offset 16'h13C8, width 8
    uint8_t                    rsvd386[7];
    IDC_REGS_RSOW015_t         RSOW015;          // offset 16'h13D0, width 8
    uint8_t                    rsvd387[7];
    IDC_REGS_RSOW115_t         RSOW115;          // offset 16'h13D8, width 8
    uint8_t                    rsvd388[7];
    IDC_REGS_RSOW215_t         RSOW215;          // offset 16'h13E0, width 8
    uint8_t                    rsvd389[7];
    IDC_REGS_RSOW315_t         RSOW315;          // offset 16'h13E8, width 8
    uint8_t                    rsvd390[23];
    IDC_REGS_SEMAVALICE16_t    SEMAVALICE16;     // offset 16'h1400, width 8
    uint8_t                    rsvd391[7];
    IDC_REGS_SEMAREQICE16_t    SEMAREQICE16;     // offset 16'h1408, width 8
    uint8_t                    rsvd392[7];
    IDC_REGS_RSOW016_t         RSOW016;          // offset 16'h1410, width 8
    uint8_t                    rsvd393[7];
    IDC_REGS_RSOW116_t         RSOW116;          // offset 16'h1418, width 8
    uint8_t                    rsvd394[7];
    IDC_REGS_RSOW216_t         RSOW216;          // offset 16'h1420, width 8
    uint8_t                    rsvd395[7];
    IDC_REGS_RSOW316_t         RSOW316;          // offset 16'h1428, width 8
    uint8_t                    rsvd396[23];
    IDC_REGS_SEMAVALICE17_t    SEMAVALICE17;     // offset 16'h1440, width 8
    uint8_t                    rsvd397[7];
    IDC_REGS_SEMAREQICE17_t    SEMAREQICE17;     // offset 16'h1448, width 8
    uint8_t                    rsvd398[7];
    IDC_REGS_RSOW017_t         RSOW017;          // offset 16'h1450, width 8
    uint8_t                    rsvd399[7];
    IDC_REGS_RSOW117_t         RSOW117;          // offset 16'h1458, width 8
    uint8_t                    rsvd400[7];
    IDC_REGS_RSOW217_t         RSOW217;          // offset 16'h1460, width 8
    uint8_t                    rsvd401[7];
    IDC_REGS_RSOW317_t         RSOW317;          // offset 16'h1468, width 8
    uint8_t                    rsvd402[23];
    IDC_REGS_SEMAVALICE18_t    SEMAVALICE18;     // offset 16'h1480, width 8
    uint8_t                    rsvd403[7];
    IDC_REGS_SEMAREQICE18_t    SEMAREQICE18;     // offset 16'h1488, width 8
    uint8_t                    rsvd404[7];
    IDC_REGS_RSOW018_t         RSOW018;          // offset 16'h1490, width 8
    uint8_t                    rsvd405[7];
    IDC_REGS_RSOW118_t         RSOW118;          // offset 16'h1498, width 8
    uint8_t                    rsvd406[7];
    IDC_REGS_RSOW218_t         RSOW218;          // offset 16'h14A0, width 8
    uint8_t                    rsvd407[7];
    IDC_REGS_RSOW318_t         RSOW318;          // offset 16'h14A8, width 8
    uint8_t                    rsvd408[23];
    IDC_REGS_SEMAVALICE19_t    SEMAVALICE19;     // offset 16'h14C0, width 8
    uint8_t                    rsvd409[7];
    IDC_REGS_SEMAREQICE19_t    SEMAREQICE19;     // offset 16'h14C8, width 8
    uint8_t                    rsvd410[7];
    IDC_REGS_RSOW019_t         RSOW019;          // offset 16'h14D0, width 8
    uint8_t                    rsvd411[7];
    IDC_REGS_RSOW119_t         RSOW119;          // offset 16'h14D8, width 8
    uint8_t                    rsvd412[7];
    IDC_REGS_RSOW219_t         RSOW219;          // offset 16'h14E0, width 8
    uint8_t                    rsvd413[7];
    IDC_REGS_RSOW319_t         RSOW319;          // offset 16'h14E8, width 8
    uint8_t                    rsvd414[23];
    IDC_REGS_SEMAVALICE20_t    SEMAVALICE20;     // offset 16'h1500, width 8
    uint8_t                    rsvd415[7];
    IDC_REGS_SEMAREQICE20_t    SEMAREQICE20;     // offset 16'h1508, width 8
    uint8_t                    rsvd416[7];
    IDC_REGS_RSOW020_t         RSOW020;          // offset 16'h1510, width 8
    uint8_t                    rsvd417[7];
    IDC_REGS_RSOW120_t         RSOW120;          // offset 16'h1518, width 8
    uint8_t                    rsvd418[7];
    IDC_REGS_RSOW220_t         RSOW220;          // offset 16'h1520, width 8
    uint8_t                    rsvd419[7];
    IDC_REGS_RSOW320_t         RSOW320;          // offset 16'h1528, width 8
    uint8_t                    rsvd420[23];
    IDC_REGS_SEMAVALICE21_t    SEMAVALICE21;     // offset 16'h1540, width 8
    uint8_t                    rsvd421[7];
    IDC_REGS_SEMAREQICE21_t    SEMAREQICE21;     // offset 16'h1548, width 8
    uint8_t                    rsvd422[7];
    IDC_REGS_RSOW021_t         RSOW021;          // offset 16'h1550, width 8
    uint8_t                    rsvd423[7];
    IDC_REGS_RSOW121_t         RSOW121;          // offset 16'h1558, width 8
    uint8_t                    rsvd424[7];
    IDC_REGS_RSOW221_t         RSOW221;          // offset 16'h1560, width 8
    uint8_t                    rsvd425[7];
    IDC_REGS_RSOW321_t         RSOW321;          // offset 16'h1568, width 8
    uint8_t                    rsvd426[23];
    IDC_REGS_SEMAVALICE22_t    SEMAVALICE22;     // offset 16'h1580, width 8
    uint8_t                    rsvd427[7];
    IDC_REGS_SEMAREQICE22_t    SEMAREQICE22;     // offset 16'h1588, width 8
    uint8_t                    rsvd428[7];
    IDC_REGS_RSOW022_t         RSOW022;          // offset 16'h1590, width 8
    uint8_t                    rsvd429[7];
    IDC_REGS_RSOW122_t         RSOW122;          // offset 16'h1598, width 8
    uint8_t                    rsvd430[7];
    IDC_REGS_RSOW222_t         RSOW222;          // offset 16'h15A0, width 8
    uint8_t                    rsvd431[7];
    IDC_REGS_RSOW322_t         RSOW322;          // offset 16'h15A8, width 8
    uint8_t                    rsvd432[23];
    IDC_REGS_SEMAVALICE23_t    SEMAVALICE23;     // offset 16'h15C0, width 8
    uint8_t                    rsvd433[7];
    IDC_REGS_SEMAREQICE23_t    SEMAREQICE23;     // offset 16'h15C8, width 8
    uint8_t                    rsvd434[7];
    IDC_REGS_RSOW023_t         RSOW023;          // offset 16'h15D0, width 8
    uint8_t                    rsvd435[7];
    IDC_REGS_RSOW123_t         RSOW123;          // offset 16'h15D8, width 8
    uint8_t                    rsvd436[7];
    IDC_REGS_RSOW223_t         RSOW223;          // offset 16'h15E0, width 8
    uint8_t                    rsvd437[7];
    IDC_REGS_RSOW323_t         RSOW323;          // offset 16'h15E8, width 8
    uint8_t                    rsvd438[23];
    IDC_REGS_SEMAVALICE24_t    SEMAVALICE24;     // offset 16'h1600, width 8
    uint8_t                    rsvd439[7];
    IDC_REGS_SEMAREQICE24_t    SEMAREQICE24;     // offset 16'h1608, width 8
    uint8_t                    rsvd440[7];
    IDC_REGS_RSOW024_t         RSOW024;          // offset 16'h1610, width 8
    uint8_t                    rsvd441[7];
    IDC_REGS_RSOW124_t         RSOW124;          // offset 16'h1618, width 8
    uint8_t                    rsvd442[7];
    IDC_REGS_RSOW224_t         RSOW224;          // offset 16'h1620, width 8
    uint8_t                    rsvd443[7];
    IDC_REGS_RSOW324_t         RSOW324;          // offset 16'h1628, width 8
    uint8_t                    rsvd444[23];
    IDC_REGS_SEMAVALICE25_t    SEMAVALICE25;     // offset 16'h1640, width 8
    uint8_t                    rsvd445[7];
    IDC_REGS_SEMAREQICE25_t    SEMAREQICE25;     // offset 16'h1648, width 8
    uint8_t                    rsvd446[7];
    IDC_REGS_RSOW025_t         RSOW025;          // offset 16'h1650, width 8
    uint8_t                    rsvd447[7];
    IDC_REGS_RSOW125_t         RSOW125;          // offset 16'h1658, width 8
    uint8_t                    rsvd448[7];
    IDC_REGS_RSOW225_t         RSOW225;          // offset 16'h1660, width 8
    uint8_t                    rsvd449[7];
    IDC_REGS_RSOW325_t         RSOW325;          // offset 16'h1668, width 8
    uint8_t                    rsvd450[23];
    IDC_REGS_SEMAVALICE26_t    SEMAVALICE26;     // offset 16'h1680, width 8
    uint8_t                    rsvd451[7];
    IDC_REGS_SEMAREQICE26_t    SEMAREQICE26;     // offset 16'h1688, width 8
    uint8_t                    rsvd452[7];
    IDC_REGS_RSOW026_t         RSOW026;          // offset 16'h1690, width 8
    uint8_t                    rsvd453[7];
    IDC_REGS_RSOW126_t         RSOW126;          // offset 16'h1698, width 8
    uint8_t                    rsvd454[7];
    IDC_REGS_RSOW226_t         RSOW226;          // offset 16'h16A0, width 8
    uint8_t                    rsvd455[7];
    IDC_REGS_RSOW326_t         RSOW326;          // offset 16'h16A8, width 8
    uint8_t                    rsvd456[23];
    IDC_REGS_SEMAVALICE27_t    SEMAVALICE27;     // offset 16'h16C0, width 8
    uint8_t                    rsvd457[7];
    IDC_REGS_SEMAREQICE27_t    SEMAREQICE27;     // offset 16'h16C8, width 8
    uint8_t                    rsvd458[7];
    IDC_REGS_RSOW027_t         RSOW027;          // offset 16'h16D0, width 8
    uint8_t                    rsvd459[7];
    IDC_REGS_RSOW127_t         RSOW127;          // offset 16'h16D8, width 8
    uint8_t                    rsvd460[7];
    IDC_REGS_RSOW227_t         RSOW227;          // offset 16'h16E0, width 8
    uint8_t                    rsvd461[7];
    IDC_REGS_RSOW327_t         RSOW327;          // offset 16'h16E8, width 8
    uint8_t                    rsvd462[23];
    IDC_REGS_SEMAVALICE28_t    SEMAVALICE28;     // offset 16'h1700, width 8
    uint8_t                    rsvd463[7];
    IDC_REGS_SEMAREQICE28_t    SEMAREQICE28;     // offset 16'h1708, width 8
    uint8_t                    rsvd464[7];
    IDC_REGS_RSOW028_t         RSOW028;          // offset 16'h1710, width 8
    uint8_t                    rsvd465[7];
    IDC_REGS_RSOW128_t         RSOW128;          // offset 16'h1718, width 8
    uint8_t                    rsvd466[7];
    IDC_REGS_RSOW228_t         RSOW228;          // offset 16'h1720, width 8
    uint8_t                    rsvd467[7];
    IDC_REGS_RSOW328_t         RSOW328;          // offset 16'h1728, width 8
    uint8_t                    rsvd468[23];
    IDC_REGS_SEMAVALICE29_t    SEMAVALICE29;     // offset 16'h1740, width 8
    uint8_t                    rsvd469[7];
    IDC_REGS_SEMAREQICE29_t    SEMAREQICE29;     // offset 16'h1748, width 8
    uint8_t                    rsvd470[7];
    IDC_REGS_RSOW029_t         RSOW029;          // offset 16'h1750, width 8
    uint8_t                    rsvd471[7];
    IDC_REGS_RSOW129_t         RSOW129;          // offset 16'h1758, width 8
    uint8_t                    rsvd472[7];
    IDC_REGS_RSOW229_t         RSOW229;          // offset 16'h1760, width 8
    uint8_t                    rsvd473[7];
    IDC_REGS_RSOW329_t         RSOW329;          // offset 16'h1768, width 8
    uint8_t                    rsvd474[23];
    IDC_REGS_SEMAVALICE30_t    SEMAVALICE30;     // offset 16'h1780, width 8
    uint8_t                    rsvd475[7];
    IDC_REGS_SEMAREQICE30_t    SEMAREQICE30;     // offset 16'h1788, width 8
    uint8_t                    rsvd476[7];
    IDC_REGS_RSOW030_t         RSOW030;          // offset 16'h1790, width 8
    uint8_t                    rsvd477[7];
    IDC_REGS_RSOW130_t         RSOW130;          // offset 16'h1798, width 8
    uint8_t                    rsvd478[7];
    IDC_REGS_RSOW230_t         RSOW230;          // offset 16'h17A0, width 8
    uint8_t                    rsvd479[7];
    IDC_REGS_RSOW330_t         RSOW330;          // offset 16'h17A8, width 8
    uint8_t                    rsvd480[23];
    IDC_REGS_SEMAVALICE31_t    SEMAVALICE31;     // offset 16'h17C0, width 8
    uint8_t                    rsvd481[7];
    IDC_REGS_SEMAREQICE31_t    SEMAREQICE31;     // offset 16'h17C8, width 8
    uint8_t                    rsvd482[7];
    IDC_REGS_RSOW031_t         RSOW031;          // offset 16'h17D0, width 8
    uint8_t                    rsvd483[7];
    IDC_REGS_RSOW131_t         RSOW131;          // offset 16'h17D8, width 8
    uint8_t                    rsvd484[7];
    IDC_REGS_RSOW231_t         RSOW231;          // offset 16'h17E0, width 8
    uint8_t                    rsvd485[7];
    IDC_REGS_RSOW331_t         RSOW331;          // offset 16'h17E8, width 8
    IDC_REGS_ICEMASKCR_t       ICEMASKCR;        // offset 4'h0, width 32
    IDC_REGS_IDCSLVFCOV1_t     IDCSLVFCOV1;      // offset 4'h4, width 32
    IDC_REGS_IDCSLVFCOV2_t     IDCSLVFCOV2;      // offset 4'h8, width 32
    uint8_t                    rsvd486[4];
    IDC_REGS_IDCOBV0_t         IDCOBV0;          // offset 8'h10, width 32
    IDC_REGS_IDCOBV1_t         IDCOBV1;          // offset 8'h14, width 32
    IDC_REGS_IDCOBV2_t         IDCOBV2;          // offset 8'h18, width 32
    IDC_REGS_IDCOBV3_t         IDCOBV3;          // offset 8'h1C, width 32
    IDC_REGS_IDCOBV4_t         IDCOBV4;          // offset 8'h20, width 32
} idc_regs_t;                                    // size:  16'h39B1


#endif // _IDC_REGS_REGS_H_

