/*******************************************************************************
INTEL CORPORATION CONFIDENTIAL Copyright(c) 2015-2019 Intel Corporation. All Rights Reserved.

The source code contained or described herein and all documents related to the
source code ("Material") are owned by Intel Corporation or its suppliers or
licensors. Title to the Material remains with Intel Corporation or its suppliers
and licensors. The Material contains trade secrets and proprietary and
confidential information of Intel or its suppliers and licensors. The Material
is protected by worldwide copyright and trade secret laws and treaty provisions.
No part of the Material may be used, copied, reproduced, modified, published,
uploaded, posted, transmitted, distributed, or disclosed in any way without
Intel's prior express written permission.

No license under any patent, copyright, trade secret or other intellectual
property right is granted to or conferred upon you by disclosure or delivery of
the Materials, either expressly, by implication, inducement, estoppel or
otherwise. Any license under such intellectual property rights must be express
and approved by Intel in writing.
*******************************************************************************/

#ifndef _CVE_DELPHI_CFG_REGS_H_
#define _CVE_DELPHI_CFG_REGS_H_
#define CVE_DELPHI_BASE 0x9000
#define CVE_DELPHI_DELPHI_ALGO_CTRL_REG_MMOFFSET 0x0
#define CVE_DELPHI_DELPHI_CTRL_NUM_TILE_REG_MMOFFSET 0x4
#define CVE_DELPHI_DELPHI_WORK_PARTN_CTRL_REG_MMOFFSET 0x8
#define CVE_DELPHI_LUT_CTRL_1_REG_MMOFFSET 0x10
#define CVE_DELPHI_LUT_CTRL_2_REG_MMOFFSET 0x14
#define CVE_DELPHI_LUT_CTRL_3_REG_MMOFFSET 0x18
#define CVE_DELPHI_LUT_CTRL_4_REG_MMOFFSET 0x1C
#define CVE_DELPHI_LUT_CTRL_5_REG_MMOFFSET 0x20
#define CVE_DELPHI_LUT_CTRL_6_REG_MMOFFSET 0x24
#define CVE_DELPHI_LUT_CTRL_7_REG_MMOFFSET 0x28
#define CVE_DELPHI_LUT_CTRL_8_REG_MMOFFSET 0x2C
#define CVE_DELPHI_LUT_CTRL_9_REG_MMOFFSET 0x30
#define CVE_DELPHI_LUT_CTRL_10_REG_MMOFFSET 0x34
#define CVE_DELPHI_LUT_CTRL_11_REG_MMOFFSET 0x38
#define CVE_DELPHI_LUT_CTRL_12_REG_MMOFFSET 0x3C
#define CVE_DELPHI_LUT_CTRL_13_REG_MMOFFSET 0x40
#define CVE_DELPHI_LUT_CTRL_14_REG_MMOFFSET 0x44
#define CVE_DELPHI_LUT_CTRL_15_REG_MMOFFSET 0x48
#define CVE_DELPHI_LUT_CTRL_16_REG_MMOFFSET 0x4C
#define CVE_DELPHI_NONLINEAR_ALGO_CTRL_REG_MMOFFSET 0x50
#define CVE_DELPHI_INT8_LOWP_OFFSET_REG_MMOFFSET 0x54
#define CVE_DELPHI_INT8_QUANTIZATION_PARAM_REG_MMOFFSET 0x58
#define CVE_DELPHI_NONLINEAR_ALGO_CTRL_INT8_REG_MMOFFSET 0x5C
#define CVE_DELPHI_CNN_IFM_DIMENSION_REG_MMOFFSET 0x60
#define CVE_DELPHI_CNN_IFM_CTRL_REG_MMOFFSET 0x64
#define CVE_DELPHI_CNN_IFM_PIX_CNT_REG_MMOFFSET 0x68
#define CVE_DELPHI_CNN_KERNEL_DIMENSION_REG_MMOFFSET 0x70
#define CVE_DELPHI_CNN_KERNEL_CTRL_REG_MMOFFSET 0x74
#define CVE_DELPHI_CNN_BIAS_CTRL_REG_MMOFFSET 0x78
#define CVE_DELPHI_CNN_OFM_DIMENSION_REG_MMOFFSET 0x80
#define CVE_DELPHI_CNN_OFM_CTRL_REG_MMOFFSET 0x84
#define CVE_DELPHI_CNN_MAXPOOL_CTRL_REG_MMOFFSET 0x88
#define CVE_DELPHI_CNN_MAXPOOL_BYPASS_REG_MMOFFSET 0x8C
#define CVE_DELPHI_CNN_ZERO_PADDING_VALUE_REG_MMOFFSET 0x90
#define CVE_DELPHI_CNN_ZERO_PADDING_REG_MMOFFSET 0x94
#define CVE_DELPHI_CNN_IFM_OFM_CTRL_REG_MMOFFSET 0x98
#define CVE_DELPHI_DELPHI_CORE_INTR_STATUS_REG_MMOFFSET 0x100
#define CVE_DELPHI_DELPHI_CORE_INTR_ENABLE_REG_MMOFFSET 0x104
#define CVE_DELPHI_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_MMOFFSET 0x108
#define CVE_DELPHI_DELPHI_DBG_PERF_CTRL_REG_MMOFFSET 0x10C
#define CVE_DELPHI_DELPHI_DBG_PERF_CNT_1_REG_MMOFFSET 0x110
#define CVE_DELPHI_DELPHI_DBG_PERF_CNT_2_REG_MMOFFSET 0x114
#define CVE_DELPHI_DELPHI_DBG_PERF_STATUS_REG_MMOFFSET 0x118
#define CVE_DELPHI_DELPHI_SCRATCH_PAD_REG_MMOFFSET 0x11C
#define CVE_DELPHI_CNN_ISRAM_ZERO_PAD_REG_MMOFFSET 0x120
#define CVE_DELPHI_IFM_NUM_INVALID_ROWS_REG_MMOFFSET 0x124
#define CVE_DELPHI_A_BLOCK_SIZE_NORMAL_REG_MMOFFSET 0x130
#define CVE_DELPHI_A_NUM_BLOCKS_IN_MB_NORMAL_REG_MMOFFSET 0x134
#define CVE_DELPHI_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_MMOFFSET 0x138
#define CVE_DELPHI_A_MB_IN_SPB_REG_MMOFFSET 0x13C
#define CVE_DELPHI_A_DER_BLOCK_ROW_SIZE_SPB_REG_MMOFFSET 0x140
#define CVE_DELPHI_A_DER_NUM_BLOCKS_SPB_REG_MMOFFSET 0x144
#define CVE_DELPHI_A_TRANSPOSE_REG_MMOFFSET 0x148
#define CVE_DELPHI_B_BLOCK_SIZE_BOUNDARY_REG_MMOFFSET 0x14C
#define CVE_DELPHI_B_NUM_BLOCKS_IN_MB_NORMAL_REG_MMOFFSET 0x150
#define CVE_DELPHI_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_MMOFFSET 0x154
#define CVE_DELPHI_B_MB_IN_SPB_REG_MMOFFSET 0x158
#define CVE_DELPHI_B_DER_BLOCK_ROW_SIZE_SPB_REG_MMOFFSET 0x15C
#define CVE_DELPHI_B_DER_NUM_BLOCKS_SPB_REG_MMOFFSET 0x160
#define CVE_DELPHI_C_BLOCK_SIZE_NORMAL_REG_MMOFFSET 0x164
#define CVE_DELPHI_C_NUM_BLOCKS_IN_MB_NORMAL_REG_MMOFFSET 0x168
#define CVE_DELPHI_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_MMOFFSET 0x16C
#define CVE_DELPHI_C_MB_IN_SPB_REG_MMOFFSET 0x170
#define CVE_DELPHI_C_DER_BLOCK_ROW_SIZE_SPB_REG_MMOFFSET 0x174
#define CVE_DELPHI_C_DER_NUM_BLOCKS_SPB_REG_MMOFFSET 0x178
#define CVE_DELPHI_C_DER_SUBMB_NORMAL_REG_MMOFFSET 0x17C
#define CVE_DELPHI_C_DER_SUBMB_BOUNDARY_REG_MMOFFSET 0x180
#define CVE_DELPHI_GEMM_STREAM_MODE_REG_MMOFFSET 0x184
#define CVE_DELPHI_CNN_KERNEL_BYTES_REG_MMOFFSET 0x188
#define CVE_DELPHI_OUT_OFFSET_REG_MMOFFSET 0x18C
#define CVE_DELPHI_BATCH_MODE_REG_MMOFFSET 0x190
#define CVE_DELPHI_ELTWISE_CNTRL_REG_MMOFFSET 0x194
#define CVE_DELPHI_ELTWISE_DIMENSION_REG_MMOFFSET 0x198
#define CVE_DELPHI_ELTWISE_DER_BLOCK_ROW_SIZE_REG_MMOFFSET 0x19C
#define CVE_DELPHI_ELTWISE_DER_NUM_BLOCKS_REG_MMOFFSET 0x1A0
#define CVE_DELPHI_GROUP_CONV_REG_MMOFFSET 0x1A4
#define CVE_DELPHI_CORE_STATUS_1_MMOFFSET 0x1B0
#define CVE_DELPHI_CORE_STATUS_2_MMOFFSET 0x1B4
#define CVE_DELPHI_CORE_STATUS_3_MMOFFSET 0x1B8
#define CVE_DELPHI_CORE_STATUS_4_MMOFFSET 0x1BC
#define CVE_DELPHI_CORE_STATUS_5_MMOFFSET 0x1C0
#define CVE_DELPHI_CORE_STATUS_6_MMOFFSET 0x1C4
#define CVE_DELPHI_CORE_STATUS_7_MMOFFSET 0x1C8
#define CVE_DELPHI_CORE_STATUS_8_MMOFFSET 0x1CC
#define CVE_DELPHI_CORE_STATUS_9_MMOFFSET 0x1D0
#define CVE_DELPHI_CORE_STATUS_10_MMOFFSET 0x1D4
#define CVE_DELPHI_CORE_STATUS_11_MMOFFSET 0x1D8
#define CVE_DELPHI_CORE_STATUS_12_MMOFFSET 0x1DC
#define CVE_DELPHI_CORE_STATUS_13_MMOFFSET 0x1E0
#define CVE_DELPHI_CORE_STATUS_14_MMOFFSET 0x1E4
#define CVE_DELPHI_CORE_STATUS_15_MMOFFSET 0x1E8
#define CVE_DELPHI_CORE_STATUS_16_MMOFFSET 0x1EC
#define CVE_DELPHI_CORE_STATUS_17_MMOFFSET 0x1F0
#define CVE_DELPHI_CORE_STATUS_18_MMOFFSET 0x1F4
#define CVE_DELPHI_CORE_STATUS_19_MMOFFSET 0x1F8
#define CVE_DELPHI_PERF_CTRL_REG_MMOFFSET 0x1FC
#define CVE_DELPHI_LSU_IRAM_LOWER_ADDR1_REG_MMOFFSET 0x200
#define CVE_DELPHI_LSU_IRAM_HIGHER_ADDR1_REG_MMOFFSET 0x204
#define CVE_DELPHI_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x208
#define CVE_DELPHI_LSU_IRAM_ADDR1_CONTROL_REG_MMOFFSET 0x20C
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_10_REG_MMOFFSET 0x210
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_11_REG_MMOFFSET 0x214
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_12_REG_MMOFFSET 0x218
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_13_REG_MMOFFSET 0x21C
#define CVE_DELPHI_IFM_BID_REG_MMOFFSET 0x220
#define CVE_DELPHI_IFM_ENTRY_SIZE_REG_MMOFFSET 0x224
#define CVE_DELPHI_LSU_IRAM_OUTSTANDING_CTRL_REG_MMOFFSET 0x228
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_1_REG_MMOFFSET 0x22C
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_2_REG_MMOFFSET 0x230
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_3_REG_MMOFFSET 0x234
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_4_REG_MMOFFSET 0x238
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_5_REG_MMOFFSET 0x23C
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_6_REG_MMOFFSET 0x240
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_7_REG_MMOFFSET 0x244
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_8_REG_MMOFFSET 0x248
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_9_REG_MMOFFSET 0x24C
#define CVE_DELPHI_LSU_EXTRA_CREDITS_IRAM_REG_MMOFFSET 0x250
#define CVE_DELPHI_LSU_UOW_START_ADDR_IRAM_REG_MMOFFSET 0x254
#define CVE_DELPHI_LSU_IRAM_HIGHER_ADDR_CTRL_REG_MMOFFSET 0x258
#define CVE_DELPHI_LSU_BRAM_LOWER_ADDR1_REG_MMOFFSET 0x260
#define CVE_DELPHI_LSU_BRAM_HIGHER_ADDR1_REG_MMOFFSET 0x264
#define CVE_DELPHI_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x268
#define CVE_DELPHI_LSU_BRAM_ADDR1_CONTROL_REG_MMOFFSET 0x26C
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_10_REG_MMOFFSET 0x270
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_11_REG_MMOFFSET 0x274
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_12_REG_MMOFFSET 0x278
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_13_REG_MMOFFSET 0x27C
#define CVE_DELPHI_WEIGHTS_BID_REG_MMOFFSET 0x280
#define CVE_DELPHI_WEIGHTS_ENTRY_SIZE_REG_MMOFFSET 0x284
#define CVE_DELPHI_LSU_BRAM_OUTSTANDING_CTRL_REG_MMOFFSET 0x288
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_1_REG_MMOFFSET 0x28C
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_2_REG_MMOFFSET 0x290
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_3_REG_MMOFFSET 0x294
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_4_REG_MMOFFSET 0x298
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_5_REG_MMOFFSET 0x29C
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_6_REG_MMOFFSET 0x2A0
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_7_REG_MMOFFSET 0x2A4
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_8_REG_MMOFFSET 0x2A8
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_9_REG_MMOFFSET 0x2AC
#define CVE_DELPHI_LSU_EXTRA_CREDITS_BRAM_REG_MMOFFSET 0x2B0
#define CVE_DELPHI_LSU_UOW_START_ADDR_BRAM_REG_MMOFFSET 0x2B4
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_14_REG_MMOFFSET 0x2B8
#define CVE_DELPHI_WEIGHTS_BID_HIGHER_REG_MMOFFSET 0x2BC
#define CVE_DELPHI_LSU_ORAM_PF_LOWER_ADDR1_REG_MMOFFSET 0x2C0
#define CVE_DELPHI_LSU_ORAM_PF_HIGHER_ADDR1_REG_MMOFFSET 0x2C4
#define CVE_DELPHI_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x2C8
#define CVE_DELPHI_LSU_ORAM_PF_ADDR1_CONTROL_REG_MMOFFSET 0x2CC
#define CVE_DELPHI_LSU_ORAM_PF_LOWER_ADDR2_REG_MMOFFSET 0x2D0
#define CVE_DELPHI_LSU_ORAM_PF_HIGHER_ADDR2_REG_MMOFFSET 0x2D4
#define CVE_DELPHI_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_MMOFFSET 0x2D8
#define CVE_DELPHI_LSU_ORAM_PF_ADDR2_CONTROL_REG_MMOFFSET 0x2DC
#define CVE_DELPHI_POFM_BID_REG_MMOFFSET 0x2E0
#define CVE_DELPHI_POFM_ENTRY_SIZE_REG_MMOFFSET 0x2E4
#define CVE_DELPHI_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_MMOFFSET 0x2E8
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_1_REG_MMOFFSET 0x2EC
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_2_REG_MMOFFSET 0x2F0
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_3_REG_MMOFFSET 0x2F4
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_4_REG_MMOFFSET 0x2F8
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_5_REG_MMOFFSET 0x2FC
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_6_REG_MMOFFSET 0x300
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_7_REG_MMOFFSET 0x304
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_8_REG_MMOFFSET 0x308
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_9_REG_MMOFFSET 0x30C
#define CVE_DELPHI_LSU_EXTRA_CREDITS_POF_REG_MMOFFSET 0x310
#define CVE_DELPHI_LSU_UOW_START_ADDR_POF_REG_MMOFFSET 0x314
#define CVE_DELPHI_LSU_ORAM_LOWER_ADDR1_REG_MMOFFSET 0x320
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR1_REG_MMOFFSET 0x324
#define CVE_DELPHI_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x328
#define CVE_DELPHI_LSU_ORAM_ADDR1_CONTROL_REG_MMOFFSET 0x32C
#define CVE_DELPHI_LSU_ORAM_LOWER_ADDR2_REG_MMOFFSET 0x330
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR2_REG_MMOFFSET 0x334
#define CVE_DELPHI_AXI_USER_INFO_ORAM_REG_MMOFFSET 0x338
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR_CTRL_REG_MMOFFSET 0x33C
#define CVE_DELPHI_OFM_BID_REG_MMOFFSET 0x340
#define CVE_DELPHI_OFM_ENTRY_SIZE_REG_MMOFFSET 0x344
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_1_REG_MMOFFSET 0x348
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_2_REG_MMOFFSET 0x34C
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_3_REG_MMOFFSET 0x350
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_4_REG_MMOFFSET 0x354
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_5_REG_MMOFFSET 0x358
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_6_REG_MMOFFSET 0x35C
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_7_REG_MMOFFSET 0x360
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_8_REG_MMOFFSET 0x364
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_9_REG_MMOFFSET 0x368
#define CVE_DELPHI_LSU_EXTRA_CREDITS_ORAM_REG_MMOFFSET 0x36C
#define CVE_DELPHI_LSU_COMPLETION_MSG_REG_MMOFFSET 0x370
#define CVE_DELPHI_LSU_UOW_START_ADDR_ORAM_REG_MMOFFSET 0x374
#define CVE_DELPHI_LSU_INTR_STATUS_REG_MMOFFSET 0x380
#define CVE_DELPHI_LSU_INTR_ENABLE_REG_MMOFFSET 0x384
#define CVE_DELPHI_LSU_INTR_SIGNAL_ENABLE_REG_MMOFFSET 0x388
#define CVE_DELPHI_WR_NON_POSTED_CTRL_REG_MMOFFSET 0x38C
#define CVE_DELPHI_AXI_USER_INFO_BRAM_REG_MMOFFSET 0x390
#define CVE_DELPHI_AXI_USER_INFO_IRAM_REG_MMOFFSET 0x394
#define CVE_DELPHI_STATE_0_CREDIT_STATUS_1_MMOFFSET 0x398
#define CVE_DELPHI_STATE_0_CREDIT_STATUS_2_MMOFFSET 0x39C
#define CVE_DELPHI_STATE_1_CREDIT_STATUS_1_MMOFFSET 0x3A0
#define CVE_DELPHI_STATE_1_CREDIT_STATUS_2_MMOFFSET 0x3A4
#define CVE_DELPHI_STATE_2_CREDIT_STATUS_1_MMOFFSET 0x3A8
#define CVE_DELPHI_STATE_2_CREDIT_STATUS_2_MMOFFSET 0x3AC
#define CVE_DELPHI_STATE_3_CREDIT_STATUS_1_MMOFFSET 0x3B0
#define CVE_DELPHI_STATE_3_CREDIT_STATUS_2_MMOFFSET 0x3B4
#define CVE_DELPHI_STATE_4_CREDIT_STATUS_1_MMOFFSET 0x3B8
#define CVE_DELPHI_STATE_4_CREDIT_STATUS_2_MMOFFSET 0x3BC
#define CVE_DELPHI_STATE_5_CREDIT_STATUS_1_MMOFFSET 0x3C0
#define CVE_DELPHI_STATE_5_CREDIT_STATUS_2_MMOFFSET 0x3C4
#define CVE_DELPHI_STATE_6_CREDIT_STATUS_1_MMOFFSET 0x3C8
#define CVE_DELPHI_STATE_6_CREDIT_STATUS_2_MMOFFSET 0x3CC
#define CVE_DELPHI_STATE_7_CREDIT_STATUS_1_MMOFFSET 0x3D0
#define CVE_DELPHI_STATE_7_CREDIT_STATUS_2_MMOFFSET 0x3D4
#define CVE_DELPHI_LSU_CH_STATUS_1_MMOFFSET 0x3D8
#define CVE_DELPHI_LSU_CH_STATUS_2_MMOFFSET 0x3DC
#define CVE_DELPHI_LSU_CH_STATUS_3_MMOFFSET 0x3E0
#define CVE_DELPHI_LSU_CH_STATUS_4_MMOFFSET 0x3E4
#define CVE_DELPHI_LSU_CH_STATUS_5_MMOFFSET 0x3E8
#define CVE_DELPHI_LSU_CH_STATUS_6_MMOFFSET 0x3EC
#define CVE_DELPHI_LSU_CH_STATUS_7_MMOFFSET 0x3F0
#define CVE_DELPHI_LSU_CH_STATUS_8_MMOFFSET 0x3F4
#define CVE_DELPHI_LSU_CH_STATUS_9_MMOFFSET 0x3F8
#define CVE_DELPHI_LSU_CH_STATUS_10_MMOFFSET 0x3FC
#define CVE_DELPHI_COM_CRD_UPD_REG_MMOFFSET 0x400
#define CVE_DELPHI_COM_STATE_MSG_REG_MMOFFSET 0x408
#define CVE_DELPHI_LSU_PCQ_LOWER_ADDR1_REG_MMOFFSET 0x450
#define CVE_DELPHI_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x454
#define CVE_DELPHI_LSU_PCQ_ADDR1_CONTROL_REG_MMOFFSET 0x458
#define CVE_DELPHI_PCQ_BID_REG_MMOFFSET 0x45C
#define CVE_DELPHI_PCQ_ENTRY_SIZE_REG_MMOFFSET 0x460
#define CVE_DELPHI_LSU_PCQ_OUTSTANDING_CTRL_REG_MMOFFSET 0x464
#define CVE_DELPHI_LSU_UOW_START_ADDR_PCQ_REG_MMOFFSET 0x468
#define CVE_DELPHI_LSU_PCQ_STRIDE_CTRL_1_REG_MMOFFSET 0x46C
#define CVE_DELPHI_LSU_PCQ_STRIDE_CTRL_9_REG_MMOFFSET 0x470
#define CVE_DELPHI_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_MMOFFSET 0x474
#define CVE_DELPHI_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_MMOFFSET 0x478
#define CVE_DELPHI_LSU_NUM_PATCH_MMOFFSET 0x47C
#define CVE_DELPHI_LSU_LAST_INPUT_MMOFFSET 0x480
#define CVE_DELPHI_IFM_CREDIT_GRANNULARITY_MMOFFSET 0x484
#define CVE_DELPHI_WEIGHTS_CREDIT_GRANNULARITY_MMOFFSET 0x488
#define CVE_DELPHI_POFM_CREDIT_GRANNULARITY_MMOFFSET 0x48C
#define CVE_DELPHI_OFM_CREDIT_GRANNULARITY_MMOFFSET 0x490
#define CVE_DELPHI_PCQ_CREDIT_GRANNULARITY_MMOFFSET 0x494
#define CVE_DELPHI_BIAS_CREDIT_GRANNULARITY_MMOFFSET 0x498
#define CVE_DELPHI_LSU_BIAS_LOWER_ADDR1_REG_MMOFFSET 0x49C
#define CVE_DELPHI_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x4A0
#define CVE_DELPHI_LSU_BIAS_ADDR1_CONTROL_REG_MMOFFSET 0x4A4
#define CVE_DELPHI_BIAS_BID_REG_MMOFFSET 0x4A8
#define CVE_DELPHI_BIAS_ENTRY_SIZE_REG_MMOFFSET 0x4AC
#define CVE_DELPHI_LSU_BIAS_OUTSTANDING_CTRL_REG_MMOFFSET 0x4B0
#define CVE_DELPHI_LSU_UOW_START_ADDR_BIAS_REG_MMOFFSET 0x4B4
#define CVE_DELPHI_LSU_BIAS_STRIDE_CTRL_1_REG_MMOFFSET 0x4B8
#define CVE_DELPHI_LSU_BIAS_STRIDE_CTRL_9_REG_MMOFFSET 0x4BC
#define CVE_DELPHI_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_MMOFFSET 0x4C0
#define CVE_DELPHI_AXI_USER_INFO_PCQ_REG_MMOFFSET 0x4C4
#define CVE_DELPHI_AXI_USER_INFO_BIAS_REG_MMOFFSET 0x4C8
#define CVE_DELPHI_LSU_ELTWISE_LOWER_ADDR1_REG_MMOFFSET 0x4E0
#define CVE_DELPHI_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_MMOFFSET 0x4E4
#define CVE_DELPHI_LSU_ELTWISE_ADDR1_CONTROL_REG_MMOFFSET 0x4E8
#define CVE_DELPHI_ELTWISE_BID_REG_MMOFFSET 0x4EC
#define CVE_DELPHI_ELTWISE_CONFIG_HIGHER_ADDR_REG_MMOFFSET 0x4F0
#define CVE_DELPHI_ELTWISE_ENTRY_SIZE_REG_MMOFFSET 0x4F4
#define CVE_DELPHI_LSU_ELTWISE_OUTSTANDING_CTRL_REG_MMOFFSET 0x4F8
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_1_REG_MMOFFSET 0x4FC
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_2_REG_MMOFFSET 0x500
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_3_REG_MMOFFSET 0x504
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_4_REG_MMOFFSET 0x508
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_5_REG_MMOFFSET 0x50C
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_6_REG_MMOFFSET 0x510
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_7_REG_MMOFFSET 0x514
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_8_REG_MMOFFSET 0x518
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_9_REG_MMOFFSET 0x51C
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_10_REG_MMOFFSET 0x520
#define CVE_DELPHI_LSU_EXTRA_CREDITS_ELTWISE_REG_MMOFFSET 0x524
#define CVE_DELPHI_LSU_UOW_START_ADDR_ELTWISE_REG_MMOFFSET 0x528
#define CVE_DELPHI_AXI_USER_INFO_ELTWISE_REG_MMOFFSET 0x52C
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_11_REG_MMOFFSET 0x530
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_12_REG_MMOFFSET 0x534
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_13_REG_MMOFFSET 0x538
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_14_REG_MMOFFSET 0x53C
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_10_REG_MMOFFSET 0x540
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_11_REG_MMOFFSET 0x544
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_12_REG_MMOFFSET 0x548
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_13_REG_MMOFFSET 0x54C
#define CVE_DELPHI_MS_CFG_MMOFFSET 0x600
#define CVE_DELPHI_MS_SP_REG_ADDR_MMOFFSET 0x604
#define CVE_DELPHI_MS_SP_REG_HIGHER_ADDR_MMOFFSET 0x608
#define CVE_DELPHI_AXI_USER_INFO_CFG_BLOB_REG_MMOFFSET 0x610
#define CVE_DELPHI_MS_CREDIT_RESET_MMOFFSET 0x614
#define CVE_DELPHI_GECOE_MAX_BURST_LENGTH_MMOFFSET 0x0C00
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_FLAG
/* DELPHI_ALGO_CTRL_REG desc:  DELPHI Algorithm Control register*/
union CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_t {
	struct {
uint32_t  delphi_start         :   1;
/*   SW trigger to start hw */
/* accelerator after initial set*/
/* up. Hardware clears it when a*/
/* UOW is completed*/
uint32_t  Reserved2            :   3;    /*  Reserved Field*/
uint32_t  pc_quantization_en   :   1;
/*   Apllicable only in INT8 */
/* (DFP/Symmetric lowp only).*/
/* This will enable per channel*/
/* output quantization. If this*/
/* is enabled DELPHI need to be*/
/* programmed with PCQ LSU*/
/* channel with BID information.*/
uint32_t  Reserved1            :   3;    /*  Reserved Field*/
uint32_t  algo_mode            :   8;
/*   FP16/INT8 possible values 2 - */
/* CNN, 4 - GEMM, 8- Maxpool*/
/* separate layer, 18- Depth wise*/
/* seprable Convolution (DWSC).*/
/* 16-Grouped Convolution*/
uint32_t  data_type            :   4;
/*   0- FP16, 1- INT8 DFP, 2- INT8 */
/* LOWP (CNNLOWP/GEMMLOWP), 3-*/
/* FP32 (GEMM only).*/
uint32_t  operand_type         :   4;
/*   This should be used in INT8 */
/* mode only. operand_type[0] =*/
/* 1- IFM/Matrix B is signed, 0-*/
/* IFM/Matrix B is unsigned.*/
/* operand_type[1] = 1-*/
/* Weights/Matrix A is signed, 0-*/
/* IFM/Matrix A is unsigned.*/
/* operand_type[2] = 1-*/
/* Ofm/Matrix C is signed, 0 -*/
/* OFM/Matrix is unsigned.*/
/* operand_type[3] = 1- eltwise*/
/* data is signed, 0 - eltwise*/
/* data is is unsigned. Note: The*/
/* Reset value is 7 , which means*/
/* all operands are signed.*/
uint32_t  bypass_quantization  :   1;
/*   This should be used in INT8 */
/* mode only. In INT8 mode if*/
/* this bit is set DELPHI*/
/* bypasses te output*/
/* truncation/quantization (32*/
/* bit to 8 bit conversion)*/
/* scheme. That means DELPHI*/
/* write the 32-bit output data*/
/* to SP. This should be used*/
/* when last_unit_of_work=1*/
/* (epilogue) only.*/
uint32_t  round_bit_en         :   3;
/*   This should be used in INT8 */
/* mode only. if this bit is set*/
/* during truncation/quantization*/
/* DELPHI adds msb of throwing*/
/* bits to the result.*/
/* round_bit_en[0] - this enables*/
/* adding round bit in output*/
/* quantization. round_bit_en[1]*/
/* - this enables roundbit*/
/* addition on element wise data*/
/* re quantization.*/
/* round_bit_en[2] - 0 - Half*/
/* round up , 1- Half round to*/
/* nearest even.*/
uint32_t  disable_t2           :   1;
/*   This should be used with INT8 */
/* LOWP mode only. If this bit is*/
/* set DELPHI disables*/
/* calculation of running sum for*/
/* term T2 (associated with*/
/* kernels/A matrix)*/
uint32_t  disable_t3           :   1;
/*   This should be used with INT8 */
/* LOWP mode only. If this bit is*/
/* set DELPHI disables*/
/* calculation of running sum for*/
/* term T3 (associated with IFM/B*/
/* Matrix)*/
uint32_t  Reserved0            :   2;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BITFIELD_COUNT 0x0c
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESET 0x00f00000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DELPHI_START_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DELPHI_START_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DELPHI_START_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DELPHI_START_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DELPHI_START_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED2_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED2_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED2_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED2_MASK 0x0000000e
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_PC_QUANTIZATION_EN_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_PC_QUANTIZATION_EN_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_PC_QUANTIZATION_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_PC_QUANTIZATION_EN_MASK 0x00000010
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_PC_QUANTIZATION_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED1_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED1_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED1_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED1_MASK 0x000000e0
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ALGO_MODE_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ALGO_MODE_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ALGO_MODE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ALGO_MODE_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ALGO_MODE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DATA_TYPE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DATA_TYPE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DATA_TYPE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DATA_TYPE_MASK 0x000f0000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DATA_TYPE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OPERAND_TYPE_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OPERAND_TYPE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OPERAND_TYPE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OPERAND_TYPE_MASK 0x00f00000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_OPERAND_TYPE_RESET_VALUE 0x0000000f
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BYPASS_QUANTIZATION_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BYPASS_QUANTIZATION_MSB 0x0018
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BYPASS_QUANTIZATION_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BYPASS_QUANTIZATION_MASK 0x01000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_BYPASS_QUANTIZATION_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ROUND_BIT_EN_LSB 0x0019
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ROUND_BIT_EN_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ROUND_BIT_EN_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ROUND_BIT_EN_MASK 0x0e000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_ROUND_BIT_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T2_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T2_MSB 0x001c
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T2_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T2_MASK 0x10000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T3_LSB 0x001d
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T3_MSB 0x001d
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T3_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T3_MASK 0x20000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_DISABLE_T3_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED0_LSB 0x001e
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED0_RANGE 0x0002
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED0_MASK 0xc0000000
#define CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_FLAG

/*  DELPHI_CTRL_NUM_TILE_REG desc:  DELPHI Control NUM Active Tiles */
/* register */
union CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_t {
	struct {
uint32_t  num_active_tiles     :  32;
/*   Indicates number of active */
/* tiles. Each bit corresponds to*/
/* one tile. For FP16/INT8,*/
/* possible values are - 1*/
/* active tile -> 32'h0000_0001*/
/* 2 active tiles ->*/
/* 32'h0000_0003 4 active tiles*/
/* -> 32'h0000_000F 8 active*/
/* tiles -> 32'h0000_00FF 16*/
/* active tiles -> 32'h0000_FFFF*/
/* 32 active tiles ->*/
/* 32'hFFFF_FFFF*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_NUM_ACTIVE_TILES_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_NUM_ACTIVE_TILES_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_NUM_ACTIVE_TILES_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_NUM_ACTIVE_TILES_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_NUM_ACTIVE_TILES_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_FLAG

/*  DELPHI_WORK_PARTN_CTRL_REG desc:  DELPHI Work Partition Control */
/* register */
union CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_t {
	struct {
uint32_t  accumulate_osram     :   1;
/*   0 -> DELPHI takes the */
/* previous partially computed*/
/* OFMs from Scratch pad memory*/
/* as input in to the accumulater*/
/* before computing the current*/
/* OFM 1 -> DELPHI doesn't load*/
/* the partially computed OFMs*/
/* from Scratch pad memory (Used*/
/* in case of first unit of work)*/
uint32_t  last_unit_of_work    :   1;
/*   If a layer compute is */
/* partitioned into multiple unit*/
/* of work, this bit indicates*/
/* that the currtent programming*/
/* is for the last unit of work.*/
/* DELPHI uses this information*/
/* to pack the data appropriately*/
/* to the memory. This can help*/
/* if this written OFM becomes an*/
/* IFM for the next compute*/
uint32_t  Reserved1            :   6;    /*  Reserved Field*/
uint32_t  en_partial_or_bias_fetch_from_sp :   1;
/*   Program field if partail */
/* fetch or bias fetch is*/
/* required for a particulare*/
/* state*/
uint32_t  en_partial_or_final_save_to_sp :   1;
/*   Program field if partail data */
/* save or final data save is*/
/* required for a particulare*/
/* state.*/
uint32_t  Reserved0            :  22;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESET 0x00000303
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_ACCUMULATE_OSRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_ACCUMULATE_OSRAM_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_ACCUMULATE_OSRAM_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_ACCUMULATE_OSRAM_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_ACCUMULATE_OSRAM_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_LAST_UNIT_OF_WORK_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_LAST_UNIT_OF_WORK_MSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_LAST_UNIT_OF_WORK_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_LAST_UNIT_OF_WORK_MASK 0x00000002
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_LAST_UNIT_OF_WORK_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED1_LSB 0x0002
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED1_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED1_RANGE 0x0006
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED1_MASK 0x000000fc
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_BIAS_FETCH_FROM_SP_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_BIAS_FETCH_FROM_SP_MSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_BIAS_FETCH_FROM_SP_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_BIAS_FETCH_FROM_SP_MASK 0x00000100
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_BIAS_FETCH_FROM_SP_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_FINAL_SAVE_TO_SP_LSB 0x0009
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_FINAL_SAVE_TO_SP_MSB 0x0009
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_FINAL_SAVE_TO_SP_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_FINAL_SAVE_TO_SP_MASK 0x00000200
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_EN_PARTIAL_OR_FINAL_SAVE_TO_SP_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED0_LSB 0x000a
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED0_RANGE 0x0016
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED0_MASK 0xfffffc00
#define CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_FLAG
/* LUT_CTRL_1_REG desc:  LUT control 1 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_t {
	struct {
uint32_t  nnl_lut_1            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - x2 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - x1*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m4*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m3 (3rd byte) nnl_lut_1[15:8]*/
/* - m2 (2nd byte) nnl_lut_1[7:0]*/
/* - m1 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_NNL_LUT_1_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_NNL_LUT_1_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_NNL_LUT_1_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_NNL_LUT_1_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_NNL_LUT_1_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_FLAG
/* LUT_CTRL_2_REG desc:  LUT control 2 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_t {
	struct {
uint32_t  nnl_lut_2            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - x4 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - x3*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m8*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m7 (3rd byte) nnl_lut_1[15:8]*/
/* - m6 (2nd byte) nnl_lut_1[7:0]*/
/* - m5 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_NNL_LUT_2_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_NNL_LUT_2_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_NNL_LUT_2_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_NNL_LUT_2_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_NNL_LUT_2_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_FLAG
/* LUT_CTRL_3_REG desc:  LUT control 3 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_t {
	struct {
uint32_t  nnl_lut_3            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - x6 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - x5*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m12*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m11 (3rd byte) nnl_lut_1[15:8]*/
/* - m10 (2nd byte)*/
/* nnl_lut_1[7:0] - m9 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_OFFSET 0x18
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_NNL_LUT_3_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_NNL_LUT_3_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_NNL_LUT_3_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_NNL_LUT_3_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_NNL_LUT_3_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_FLAG
/* LUT_CTRL_4_REG desc:  LUT control 4 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_t {
	struct {
uint32_t  nnl_lut_4            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - x8 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - x7*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m16*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m15 (3rd byte) nnl_lut_1[15:8]*/
/* - m14 (2nd byte)*/
/* nnl_lut_1[7:0] - m13 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_OFFSET 0x1c
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_NNL_LUT_4_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_NNL_LUT_4_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_NNL_LUT_4_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_NNL_LUT_4_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_NNL_LUT_4_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_FLAG
/* LUT_CTRL_5_REG desc:  LUT control 5 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_t {
	struct {
uint32_t  nnl_lut_5            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - m2 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - m1*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m20*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m19 (3rd byte) nnl_lut_1[15:8]*/
/* - m18 (2nd byte)*/
/* nnl_lut_1[7:0] - m17 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_OFFSET 0x20
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_NNL_LUT_5_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_NNL_LUT_5_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_NNL_LUT_5_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_NNL_LUT_5_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_NNL_LUT_5_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_FLAG
/* LUT_CTRL_6_REG desc:  LUT control 6 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_t {
	struct {
uint32_t  nnl_lut_6            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - m4 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - m3*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m24*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m23 (3rd byte) nnl_lut_1[15:8]*/
/* - m22 (2nd byte)*/
/* nnl_lut_1[7:0] - m21 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_OFFSET 0x24
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_NNL_LUT_6_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_NNL_LUT_6_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_NNL_LUT_6_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_NNL_LUT_6_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_NNL_LUT_6_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_FLAG
/* LUT_CTRL_7_REG desc:  LUT control 7 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_t {
	struct {
uint32_t  nnl_lut_7            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - m6 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - m5*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m28*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m27 (3rd byte) nnl_lut_1[15:8]*/
/* - m26 (2nd byte)*/
/* nnl_lut_1[7:0] - m25 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_OFFSET 0x28
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_NNL_LUT_7_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_NNL_LUT_7_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_NNL_LUT_7_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_NNL_LUT_7_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_NNL_LUT_7_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_FLAG
/* LUT_CTRL_8_REG desc:  LUT control 8 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_t {
	struct {
uint32_t  nnl_lut_8            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - m8 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - m7*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - m32*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* m31 (3rd byte) nnl_lut_1[15:8]*/
/* - m30 (2nd byte)*/
/* nnl_lut_1[7:0] - m29 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_OFFSET 0x2c
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_NNL_LUT_8_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_NNL_LUT_8_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_NNL_LUT_8_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_NNL_LUT_8_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_NNL_LUT_8_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_FLAG
/* LUT_CTRL_9_REG desc:  LUT control 9 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_t {
	struct {
uint32_t  nnl_lut_9            :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - y2 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - y1*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y4*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y3 (3rd byte) nnl_lut_1[15:8]*/
/* - y2 (2nd byte) nnl_lut_1[7:0]*/
/* - y1 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_OFFSET 0x30
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_NNL_LUT_9_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_NNL_LUT_9_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_NNL_LUT_9_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_NNL_LUT_9_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_NNL_LUT_9_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_FLAG
/* LUT_CTRL_10_REG desc:  LUT control 10 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_t {
	struct {
uint32_t  nnl_lut_10           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - y4 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - y3*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y8*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y7 (3rd byte) nnl_lut_1[15:8]*/
/* - y6 (2nd byte) nnl_lut_1[7:0]*/
/* - y5 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_OFFSET 0x34
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_NNL_LUT_10_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_NNL_LUT_10_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_NNL_LUT_10_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_NNL_LUT_10_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_NNL_LUT_10_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_FLAG
/* LUT_CTRL_11_REG desc:  LUT control 11 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_t {
	struct {
uint32_t  nnl_lut_11           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - y6 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - y5*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y12*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y11 (3rd byte) nnl_lut_1[15:8]*/
/* - y10 (2nd byte)*/
/* nnl_lut_1[7:0] - y9 (1st byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_OFFSET 0x38
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_NNL_LUT_11_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_NNL_LUT_11_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_NNL_LUT_11_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_NNL_LUT_11_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_NNL_LUT_11_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_FLAG
/* LUT_CTRL_12_REG desc:  LUT control 12 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_t {
	struct {
uint32_t  nnl_lut_12           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - y8 (Upper 2*/
/* bytes) nnl_lut_1[15:0] - y7*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y16*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y15 (3rd byte) nnl_lut_1[15:8]*/
/* - y14 (2nd byte)*/
/* nnl_lut_1[7:0] - y13 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_OFFSET 0x3c
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_NNL_LUT_12_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_NNL_LUT_12_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_NNL_LUT_12_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_NNL_LUT_12_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_NNL_LUT_12_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_FLAG
/* LUT_CTRL_13_REG desc:  LUT control 13 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_t {
	struct {
uint32_t  nnl_lut_13           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - not used*/
/* (Upper 2 bytes)*/
/* nnl_lut_1[15:0] - not used*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y20*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y19 (3rd byte) nnl_lut_1[15:8]*/
/* - y18 (2nd byte)*/
/* nnl_lut_1[7:0] - y17 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_OFFSET 0x40
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_NNL_LUT_13_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_NNL_LUT_13_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_NNL_LUT_13_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_NNL_LUT_13_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_NNL_LUT_13_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_FLAG
/* LUT_CTRL_14_REG desc:  LUT control 14 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_t {
	struct {
uint32_t  nnl_lut_14           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - not used*/
/* (Upper 2 bytes)*/
/* nnl_lut_1[15:0] - not used*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y24*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y23 (3rd byte) nnl_lut_1[15:8]*/
/* - y22 (2nd byte)*/
/* nnl_lut_1[7:0] - y21 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_OFFSET 0x44
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_NNL_LUT_14_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_NNL_LUT_14_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_NNL_LUT_14_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_NNL_LUT_14_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_NNL_LUT_14_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_FLAG
/* LUT_CTRL_15_REG desc:  LUT control 15 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_t {
	struct {
uint32_t  nnl_lut_15           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - not used*/
/* (Upper 2 bytes)*/
/* nnl_lut_1[15:0] - not used*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y28*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y27 (3rd byte) nnl_lut_1[15:8]*/
/* - y26 (2nd byte)*/
/* nnl_lut_1[7:0] - y25 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_OFFSET 0x48
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_NNL_LUT_15_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_NNL_LUT_15_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_NNL_LUT_15_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_NNL_LUT_15_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_NNL_LUT_15_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_FLAG
/* LUT_CTRL_16_REG desc:  LUT control 16 register*/
union CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_t {
	struct {
uint32_t  nnl_lut_16           :  32;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* if(data_type==0) //Fp16*/
/* nnl_lut_1[31:16] - not used*/
/* (Upper 2 bytes)*/
/* nnl_lut_1[15:0] - not used*/
/* (lower 2 bytes) else*/
/* //data_type=1 or data_type=2*/
/* INT8 nnl_lut_1[31:24] - y32*/
/* (4th byte) nnl_lut_1[23:16] -*/
/* y31 (3rd byte) nnl_lut_1[15:8]*/
/* - y30 (2nd byte)*/
/* nnl_lut_1[7:0] - y29 (1st*/
/* byte)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_OFFSET 0x4c
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_NNL_LUT_16_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_NNL_LUT_16_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_NNL_LUT_16_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_NNL_LUT_16_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_NNL_LUT_16_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_FLAG

/*  NONLINEAR_ALGO_CTRL_REG desc:  Non Linear Algorithm Control */
/* Register1 */
union CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_t {
	struct {
uint32_t  non_linear_type      :   8;
/*   8'h00 - No Activation 8'h01 - */
/* Piecewise Linear*/
/* Approximation(Sigmoid/tanH/etc).*/
/* Not applicable for FP32. 8'h02*/
/* - RELU*/
uint32_t  nnl_y_symmetry_value :  16;
/*   Used only in the case when */
/* non_linear_type == 8'h01.*/
/* Shall not be used otherwise.*/
/* Set this to 2*Y where Y is the*/
/* point at which the curve is*/
/* symmetric. For example, in*/
/* case of tanh, the curve is*/
/* symmetric at Y =0, hence this*/
/* should be programmed to 0*/
uint32_t  nnl_symmetry_en      :   8;
/*   This bit is not used in RTL */
/* and for future use. Keep it at*/
/* 0. In future, this bit will be*/
/* set to 1 if NNL function is*/
/* symmetric about X=0*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_OFFSET 0x50
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NON_LINEAR_TYPE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NON_LINEAR_TYPE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NON_LINEAR_TYPE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NON_LINEAR_TYPE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NON_LINEAR_TYPE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_Y_SYMMETRY_VALUE_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_Y_SYMMETRY_VALUE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_Y_SYMMETRY_VALUE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_Y_SYMMETRY_VALUE_MASK 0x00ffff00
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_Y_SYMMETRY_VALUE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_SYMMETRY_EN_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_SYMMETRY_EN_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_SYMMETRY_EN_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_SYMMETRY_EN_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_NNL_SYMMETRY_EN_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_FLAG
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_FLAG
/* INT8_LOWP_OFFSET_REG desc:  int8 Lowp offset register*/
union CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_t {
	struct {
uint32_t  t2_offset            :  16;
/*   This should be used in INT8 */
/* lowp mode only. Lowp offset*/
/* associated with Weights/A*/
/* matrix*/
uint32_t  t3_offset            :  16;
/*   This should be used in INT8 */
/* lowp mode only. Lowp offset*/
/* associated with IFMs/B matrix*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_OFFSET 0x54
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T2_OFFSET_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T2_OFFSET_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T2_OFFSET_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T2_OFFSET_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T2_OFFSET_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T3_OFFSET_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T3_OFFSET_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T3_OFFSET_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T3_OFFSET_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_T3_OFFSET_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_FLAG

/*  INT8_QUANTIZATION_PARAM_REG desc:  int8 lowp or dfp quantization */
/* register */
union CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_t {
	struct {
uint32_t  result_shift_value   :   5;
/*   This should be used in INT8 */
/* mode only. The result of*/
/* 32-bit value will be reight*/
/* shifted by programmable value*/
uint32_t  Reserved1            :   3;    /*  Reserved Field*/
uint32_t  result_mult_int      :   8;
/*   This should be used in INT8 */
/* mode only.in INT8 DFP mode*/
/* (data_type=1), this has to be*/
/* 1 and in INT8 LOWP mode*/
/* (data_type=2) this will be a*/
/* integer value multiplied with*/
/* 32-bit result.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_OFFSET 0x58
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESET 0x00000100
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_SHIFT_VALUE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_SHIFT_VALUE_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_SHIFT_VALUE_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_SHIFT_VALUE_MASK 0x0000001f
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_SHIFT_VALUE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED1_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED1_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED1_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED1_MASK 0x000000e0
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_MULT_INT_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_MULT_INT_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_MULT_INT_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_MULT_INT_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESULT_MULT_INT_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_FLAG

/*  NONLINEAR_ALGO_CTRL_INT8_REG desc:  Non Linear Algorithm Control */
/* Register2 */
union CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_t {
	struct {
uint32_t  nonlinear_offset     :  16;
/*   nonlinera offset value in */
/* LOWP mode*/
uint32_t  nonlinear_step       :   4;
/*   This will provide x_i */
/* information to DELPHI. This*/
/* can be 1, 2 ,4, 8. (difference*/
/* between adjacent taps)*/
uint32_t  nonlinear_right_shift_value :   4;
/*   This is to align the */
/* non-linear output to required*/
/* output format. For example if*/
/* input format is Q1.2.5, slope*/
/* format is Q1.0.7, and output*/
/* format is Q1.0.7 then right*/
/* shift value will be 5*/
/* [input_fractional_part +*/
/* slope_fractional_part-*/
/* output_fractional_part].*/
/* similarly for lowp qy/qxqm*/
/* would be aproximated to right*/
/* shift value.*/
uint32_t  nonlinear_saturated_value :   8;
/*   nonlinear saturated value */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_OFFSET 0x5c
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_OFFSET_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_OFFSET_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_OFFSET_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_OFFSET_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_OFFSET_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_STEP_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_STEP_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_STEP_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_STEP_MASK 0x000f0000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_STEP_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_RIGHT_SHIFT_VALUE_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_RIGHT_SHIFT_VALUE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_RIGHT_SHIFT_VALUE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_RIGHT_SHIFT_VALUE_MASK 0x00f00000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_RIGHT_SHIFT_VALUE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_SATURATED_VALUE_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_SATURATED_VALUE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_SATURATED_VALUE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_SATURATED_VALUE_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_NONLINEAR_SATURATED_VALUE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_FLAG

/*  CNN_IFM_DIMENSION_REG desc:  Input Feature Map dimension Register */
/* */
union CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_t {
	struct {
uint32_t  ifm_size_rows        :  16;
/*   Number of rows in Input */
/* Feature Map*/
uint32_t  ifm_size_cols        :  16;
/*   Number of columns in Input */
/* Feature Map. This should be*/
/* the actual number of columns (*/
/* even if*/
/* cfg_ifm_row_cache_aligned is*/
/* set )*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_OFFSET 0x60
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_ROWS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_ROWS_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_ROWS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_ROWS_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_ROWS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_COLS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_COLS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_COLS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_COLS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_IFM_SIZE_COLS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_FLAG
/* CNN_IFM_CTRL_REG desc:  Input Feature Map Control register*/
union CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_t {
	struct {
uint32_t  ifm_slices_cnt       :   8;
/*   This should always be */
/* programmed to a value 1.*/
/* Slicing is required in case of*/
/* bigger IFMs which cannot be*/
/* fit in the ISRAM. This field*/
/* tells the number of IFM*/
/* slices. This feature in not*/
/* supported currently. It is*/
/* meant for future use.*/
uint32_t  isram_entry_cnt_per_ifm_row :   8;
/*   Number of ISRAM(Memory used */
/* to store IFMS inside DELPHI)*/
/* rows required to store one row*/
/* of the IFM Formula*/
/* isram_entry_cnt_per_ifm_row =*/
/* kernel_stride * ceil*/
/* ((ifm_size_cols +*/
/* ifm_column_pdg_at_ifm_lhs*/
/* +ifm_column_pdg_at_ifm_rhs)/*/
/* (NUM_PE * kernel_stride))*/
uint32_t  number_of_ifms       :  16;
/*   Total number of Input Feature */
/* Maps*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_OFFSET 0x64
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_IFM_SLICES_CNT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_IFM_SLICES_CNT_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_IFM_SLICES_CNT_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_IFM_SLICES_CNT_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_IFM_SLICES_CNT_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_ISRAM_ENTRY_CNT_PER_IFM_ROW_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_ISRAM_ENTRY_CNT_PER_IFM_ROW_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_ISRAM_ENTRY_CNT_PER_IFM_ROW_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_ISRAM_ENTRY_CNT_PER_IFM_ROW_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_ISRAM_ENTRY_CNT_PER_IFM_ROW_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_NUMBER_OF_IFMS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_NUMBER_OF_IFMS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_NUMBER_OF_IFMS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_NUMBER_OF_IFMS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_NUMBER_OF_IFMS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_FLAG

/*  CNN_IFM_PIX_CNT_REG desc:  Input Feature Map Pixel Count register */
/* */
union CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_t {
	struct {
uint32_t  ifm_pixel_cnt        :  32;
/*   Total number of pixels in a */
/* given IFM. If*/
/* cfg_ifm_row_cache_aligned is*/
/* 0, it is calculated as*/
/* (ifm_size_cols **/
/* ifm_size_rows) . If*/
/* cfg_ifm_row_cache_aligned is*/
/* 1, it is calculated as*/
/* (ceil(ifm_size_cols/32)*32) **/
/* ifm_size_rows)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_OFFSET 0x68
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_IFM_PIXEL_CNT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_IFM_PIXEL_CNT_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_IFM_PIXEL_CNT_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_IFM_PIXEL_CNT_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_IFM_PIXEL_CNT_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_FLAG
/* CNN_KERNEL_DIMENSION_REG desc:  Kernel Dimension egister*/
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_t {
	struct {
uint32_t  kernel_size          :   8;
/*   program kernel size cols. */
/* Possible values are 1 .. 15*/
uint32_t  kernel_stride_x      :   4;
/*   Convolution stride in x */
/* direction. The next*/
/* convolution is performed by*/
/* skipping these many number of*/
/* rows/columns. Possible values*/
/* are 1,2,4.*/
uint32_t  kernel_stride_y      :   4;
/*   Convolution stride in y */
/* direction if rect_stride_en*/
/* =1. Possible values are 1,2,4*/
uint32_t  kernel_block_size    :   8;
/*   Number of BSRAM rows occupied */
/* by one kernel block. if(*/
/* kernel_size_rows == 1 &*/
/* kernel_size ==1) //1x1*/
/* convolution program this field*/
/* = ceil[var1 / var2] else //for*/
/* all other cases program this*/
/* filed = var1 **/
/* ceil[kernel_kxk/var2] Where*/
/* var2= if (data_type==0) 16*/
/* else 4 Where var1=*/
/* if(ofm_streaming_to_sp_en)*/
/* then local_ofm_per_iteration*/
/* else ofm_per_iteration.*/
uint32_t  rect_kernel_en       :   1;
/*   program to 1 if the kernel is */
/* rectangular. this should be*/
/* used in CNN mode only. In GEMM*/
/* mode this should be 0.*/
uint32_t  rect_stride_en       :   1;
/*   program to 1 if the stride is */
/* rectangular. this should be*/
/* used in CNN mode only. In GEMM*/
/* mode this should be 0.*/
uint32_t  Reserved0            :   6;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_OFFSET 0x70
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_BITFIELD_COUNT 0x07
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_SIZE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_SIZE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_SIZE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_X_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_X_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_X_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_X_MASK 0x00000f00
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_X_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_Y_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_Y_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_Y_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_Y_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_STRIDE_Y_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_BLOCK_SIZE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_BLOCK_SIZE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_BLOCK_SIZE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_BLOCK_SIZE_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_KERNEL_BLOCK_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_KERNEL_EN_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_KERNEL_EN_MSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_KERNEL_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_KERNEL_EN_MASK 0x01000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_KERNEL_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_STRIDE_EN_LSB 0x0019
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_STRIDE_EN_MSB 0x0019
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_STRIDE_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_STRIDE_EN_MASK 0x02000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RECT_STRIDE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESERVED0_LSB 0x001a
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESERVED0_RANGE 0x0006
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESERVED0_MASK 0xfc000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_FLAG
/* CNN_KERNEL_CTRL_REG desc:  Kernel Control register*/
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_t {
	struct {
uint32_t  kernel_kxk           :  16;
/*   kernel_size * kernel_size. */
/* This is to avoid the*/
/* multiplication inside DELPHI.*/
uint32_t  kernel_size_rows     :  16;
/*   program kernel size rows if */
/* rect_kernel_en = 1.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_OFFSET 0x74
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_KXK_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_KXK_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_KXK_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_KXK_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_KXK_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_SIZE_ROWS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_SIZE_ROWS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_SIZE_ROWS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_SIZE_ROWS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_KERNEL_SIZE_ROWS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_FLAG
/* CNN_BIAS_CTRL_REG desc:  Kernel Bias Control register*/
union CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_t {
	struct {
uint32_t  bias_enable          :   1;
/*   Enable to preload BIAS for */
/* CNN and GEMM.*/
uint32_t  bias_mode            :   1;
/*   if (bias_enable==1 || */
/* per_ch_quant_en==1) if*/
/* (algo_mode == CNN) -- > this*/
/* should be zero. (no use case*/
/* with bias_mode=1 for CNN).*/
/* If(algo_mode == GEMM) -->*/
/* depends on use case. Ex1:*/
/* bias_mode =0 if 1x1 Conv as*/
/* GEMM with A-Matrix as kernels.*/
/* Ex2: bias_mode=1 if FC layer*/
/* GEMM with B-Matrix as weights.*/
/* else program it to 0*/
uint32_t  Reserved0            :  30;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_OFFSET 0x78
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_ENABLE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_ENABLE_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_ENABLE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_ENABLE_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_ENABLE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_MODE_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_MODE_MSB 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_MODE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_MODE_MASK 0x00000002
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_BIAS_MODE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESERVED0_LSB 0x0002
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESERVED0_RANGE 0x001e
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESERVED0_MASK 0xfffffffc
#define CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_FLAG

/*  CNN_OFM_DIMENSION_REG desc:  Output Feature Map dimension register */
/* */
union CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_t {
	struct {
uint32_t  ofm_size_rows        :  16;
/*   Number of rows in Output */
/* Feature Map after*/
/* convolution(before*/
/* Maxpooling).Possible values*/
/* are 1.. 255 (provided it fits*/
/* in the OSRAM)*/
uint32_t  ofm_size_cols        :  16;
/*   Number of columns in Output */
/* Feature Map after*/
/* convolution(before*/
/* Maxpooling). Possible values*/
/* are 1.. 255 (provided it fits*/
/* in the OSRAM)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFFSET 0x80
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_ROWS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_ROWS_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_ROWS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_ROWS_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_ROWS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_COLS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_COLS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_COLS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_COLS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_OFM_SIZE_COLS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_FLAG
/* CNN_OFM_CTRL_REG desc:  Output Feature Map Control register*/
union CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_t {
	struct {
uint32_t  ofm_y_simd_en        :   1;
/*   When enabled (1) two rows of */
/* an OFM are computed in*/
/* parallel. Rows across OFM's*/
/* are never computed together.*/
/* If this register is enabled,*/
/* then ofm_size_col has to be <=*/
/* (NO_OF_PE/2) and*/
/* kernel_stride, bypass_maxpool*/
/* has to be 1. where NUM_PE =16*/
uint32_t  Reserved1            :   3;    /*  Reserved Field*/
uint32_t  ofm_streaming_to_sp_en :   1;
/*   This is to enable HW */
/* streaming mode. Applicable*/
/* only for CNN mode. If we*/
/* enable this mode program*/
/* local_ofm_per_iteration and*/
/* ifms_per_iram*/
uint32_t  Reserved0            :   3;    /*  Reserved Field*/
uint32_t  ofm_per_iteration    :   8;
/*   Number of OFMs being */
/* calculated in one iteration.*/
/* Number of iteration is*/
/* determined by the OSRAM size*/
/* and BSRAM size. (i.e) Total*/
/* OFM calcuation is split up*/
/* into multiple iterations, each*/
/* iteration depends on the*/
/* DELPHI SRAM sizing. Possible*/
/* values 1 .. 127*/
uint32_t  number_of_ofms_per_tile :  16;
/*   Total number of Output */
/* Feature Map Per Tile (= Total*/
/* number of OFMs to be computed*/
/* / num_active_tiles). This*/
/* shall be an integral multiple*/
/* of ofm_per_iteration. Possible*/
/* values are 1 .. 4095*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFFSET 0x84
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_Y_SIMD_EN_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_Y_SIMD_EN_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_Y_SIMD_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_Y_SIMD_EN_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_Y_SIMD_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED1_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED1_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED1_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED1_MASK 0x0000000e
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_STREAMING_TO_SP_EN_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_STREAMING_TO_SP_EN_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_STREAMING_TO_SP_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_STREAMING_TO_SP_EN_MASK 0x00000010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_STREAMING_TO_SP_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED0_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED0_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED0_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED0_MASK 0x000000e0
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_PER_ITERATION_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_PER_ITERATION_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_PER_ITERATION_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_PER_ITERATION_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_OFM_PER_ITERATION_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_NUMBER_OF_OFMS_PER_TILE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_NUMBER_OF_OFMS_PER_TILE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_NUMBER_OF_OFMS_PER_TILE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_NUMBER_OF_OFMS_PER_TILE_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_NUMBER_OF_OFMS_PER_TILE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_FLAG
/* CNN_MAXPOOL_CTRL_REG desc:  Maxpool Control Register*/
union CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_t {
	struct {
uint32_t  maxpool_size         :   8;
/*   Size of the box in which the */
/* maximum is picked to form the*/
/* OFM. The box is always assumed*/
/* to be square. Possible values*/
/* are 2 and 3*/
uint32_t  maxpool_stride       :   8;
/*   Maxpool Stride. Advance the */
/* maxpool box by the stride.*/
/* Possible values is 2.*/
uint32_t  ofm_rows_maxpool     :   8;
/*   Number of rows in Output */
/* Feature Map after max*/
/* pooling.Possible values are*/
/* 1.. 255 (provided it fits in*/
/* the OSRAM)*/
uint32_t  ofm_cols_maxpool     :   8;
/*   Number of columns in Output */
/* Feature Map after max*/
/* pooling.Possible values are*/
/* 1.. 255 (provided it fits in*/
/* the OSRAM)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFFSET 0x88
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_SIZE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_SIZE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_SIZE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_STRIDE_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_STRIDE_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_STRIDE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_STRIDE_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_MAXPOOL_STRIDE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_ROWS_MAXPOOL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_ROWS_MAXPOOL_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_ROWS_MAXPOOL_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_ROWS_MAXPOOL_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_ROWS_MAXPOOL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_COLS_MAXPOOL_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_COLS_MAXPOOL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_COLS_MAXPOOL_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_COLS_MAXPOOL_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_OFM_COLS_MAXPOOL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_FLAG
/* CNN_MAXPOOL_BYPASS_REG desc:  Maxpool Bypass Register*/
union CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_t {
	struct {
uint32_t  maxpool_bypass       :   1;
/*   Maxpool Bypass. When Enabled */
/* maxpool operation is skipped*/
/* on OFMs*/
uint32_t  Reserved0            :  15;    /*  Reserved Field*/
uint32_t  ceil_maxpool         :  16;
/*   ceil_maxpool[1:0] right */
/* padding (possible values 0 or*/
/* 1). ceil_maxpool[3:2] left*/
/* padding (possible values 0 or*/
/* 1). ceil_maxpool[5:4] bottom*/
/* (possible values 0 or 1).*/
/* ceil_maxpool[7:6] top padding*/
/* (possible values 0 or 1).*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_OFFSET 0x8c
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_MAXPOOL_BYPASS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_MAXPOOL_BYPASS_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_MAXPOOL_BYPASS_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_MAXPOOL_BYPASS_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_MAXPOOL_BYPASS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESERVED0_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESERVED0_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESERVED0_RANGE 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESERVED0_MASK 0x0000fffe
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_CEIL_MAXPOOL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_CEIL_MAXPOOL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_CEIL_MAXPOOL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_CEIL_MAXPOOL_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_CEIL_MAXPOOL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_FLAG
/* CNN_ZERO_PADDING_VALUE_REG desc:  Zero padding value register*/
union CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_t {
	struct {
uint32_t  output_zero_padding_value :  32;
/*   DELPHI pads the OFM by */
/* specified programmable value.*/
/* for FP16 case lower 16 bits*/
/* will be used.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OFFSET 0x90
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OUTPUT_ZERO_PADDING_VALUE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OUTPUT_ZERO_PADDING_VALUE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OUTPUT_ZERO_PADDING_VALUE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OUTPUT_ZERO_PADDING_VALUE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_OUTPUT_ZERO_PADDING_VALUE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_FLAG
/* CNN_ZERO_PADDING_REG desc:  Zero padding register*/
union CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_t {
	struct {
uint32_t  zero_padding_x_right :   8;
/*   These many zeros will be */
/* padded to right of the OFM*/
uint32_t  zero_padding_x_left  :   8;
/*   These many zeros will be */
/* padded to left of the OFM*/
uint32_t  zero_padding_y_bottom :   8;
/*   These many rows of zeros will */
/* be padded at bottom of the OFM*/
uint32_t  zero_padding_y_top   :   8;
/*   These many rows of zeros will */
/* be padded on top of the OFM*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_OFFSET 0x94
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_RIGHT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_RIGHT_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_RIGHT_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_RIGHT_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_RIGHT_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_LEFT_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_LEFT_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_LEFT_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_LEFT_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_X_LEFT_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_BOTTOM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_BOTTOM_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_BOTTOM_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_BOTTOM_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_BOTTOM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_TOP_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_TOP_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_TOP_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_TOP_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_ZERO_PADDING_Y_TOP_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_FLAG

/*  CNN_IFM_OFM_CTRL_REG desc:  Partial Output input Feature Map */
/* Control register */
union CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_t {
	struct {
uint32_t  local_ofm_per_iteration :   8;
/*   This can be equal to 1 if */
/* ifms_per_iram_normal >=1. If*/
/* ifms_per_iram_normal = 0, then*/
/* local_ofm_per_iteration =*/
/* ofm_per_iteration. For*/
/* kernel_size =1, for better*/
/* performance*/
/* local_ofm_per_iteration >= 4*/
/* if ofm_per_iteration >=4.*/
/* ofm_per_iteration %*/
/* local_ofm_per_iteration should*/
/* be equal to zero.*/
uint32_t  pos_data_32byte_aligned :   1;
/*   this bit is applicable in CNN */
/* mode only. If the*/
/* ofm_size_cols < 32 bytes,*/
/* pos_data_32byte_aligned = 1,*/
/* last_unit_of_work =0, DELPHI*/
/* will save the partial data in*/
/* SP by packing 2 ofm rows in 1*/
/* cacheline (64 byte). This bit*/
/* should be enabled only if*/
/* ofm_size_cols < 32 bytes and*/
/* Fp16 data type (data_type==0)*/
/* this bit is not applicable if*/
/* last_unit_of_work = 1. in*/
/* general DELPHI writes partial*/
/* data to SP with each ofm row*/
/* being cacheline aligned.*/
uint32_t  Reserved0            :   3;    /*  Reserved Field*/
uint32_t  ifm_simd_depth       :   4;
/*   Applicable only for INT8 */
/* mode. This is used to process*/
/* number of ifms in parallel.*/
/* (active ifm simd)*/
/* Default/Reset is 4 for which*/
/* DELPHI operates in D4 mode*/
/* (process 4 IFMs in parallel).*/
/* Ifm_simd_depth = 1 -> called*/
/* as D1 mode. (process 1 IFM at*/
/* a time). Ifm_simd_depth = 2 ->*/
/* called as D2 mode. (process 2*/
/* IFMs in parallel).*/
/* ifm_simd_depth = 4 -> called*/
/* as D4 mode. (process 4 IFMs in*/
/* parallel).*/
uint32_t  ifms_per_iram_normal :   8;
/*   How many IFMs can fit in */
/* DELPHI IRAM Buffer. Formula*/
/* to calculate No of IFMs that*/
/* can fit in IRAM :*/
/* floor((Iram_size)/(Ifm_size))*/
/* Ifm_size =*/
/* [(ifm_row_pdg_at_ifm_top +*/
/* ifm_size_rows +*/
/* ifm_row_pdg_at_ifm_bottom) **/
/* isram_entry_cnt_per_ifm_row **/
/* NUM_PE * Element_size]*/
/* Iram_size = 8192 Element_size*/
/* = 2 for FP16(data_type=0) and*/
/* 1 for INT8 (data_type=1 or 2)*/
/* number_of_ifms %*/
/* ifms_per_iram_normal should be*/
/* zero. INT8 case*/
/* ifms_per_iram_normal has to be*/
/* multiple of 2 or equal to*/
/* number_of_ifms.*/
uint32_t  ifms_per_iram_boundary :   8;
/*   ifms per iram boundary */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_OFFSET 0x98
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESET 0x00004000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_LOCAL_OFM_PER_ITERATION_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_LOCAL_OFM_PER_ITERATION_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_LOCAL_OFM_PER_ITERATION_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_LOCAL_OFM_PER_ITERATION_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_LOCAL_OFM_PER_ITERATION_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_POS_DATA_32BYTE_ALIGNED_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_POS_DATA_32BYTE_ALIGNED_MSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_POS_DATA_32BYTE_ALIGNED_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_POS_DATA_32BYTE_ALIGNED_MASK 0x00000100
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_POS_DATA_32BYTE_ALIGNED_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESERVED0_LSB 0x0009
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESERVED0_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESERVED0_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESERVED0_MASK 0x00000e00
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFM_SIMD_DEPTH_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFM_SIMD_DEPTH_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFM_SIMD_DEPTH_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFM_SIMD_DEPTH_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFM_SIMD_DEPTH_RESET_VALUE 0x00000004
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_NORMAL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_NORMAL_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_NORMAL_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_NORMAL_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_NORMAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_BOUNDARY_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_BOUNDARY_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_BOUNDARY_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_BOUNDARY_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_IFMS_PER_IRAM_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_FLAG

/*  DELPHI_CORE_INTR_STATUS_REG desc:  DELPHI Core Interrupt Status */
/* Register */
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_t {
	struct {
uint32_t  core_intr_status     :   8;
/*   Status of various interrupts. */
/* Set by h/w cleared by s/w;*/
/* ISRAM Read Write Control Debug*/
/* Status (Latched high) bit[06]*/
/* -*/
/* wr_put_wo_put_only_error_bank1,*/
/* bit[05] -*/
/* wr_put_wo_put_only_error_bank0,*/
/* bit[04] - wr_put_error_bank1,*/
/* bit[03] - wr_put_error_bank0,*/
/* bit[02] -*/
/* wr_put_only_error_bank1,*/
/* bit[01] -*/
/* wr_put_only_error_bank0*/
/* bit[00] - Tile done status.*/
/* This bit will be set once a*/
/* Unit of Work(UOW) is*/
/* completed. Software should*/
/* clear(W1C) this before*/
/* starting the next UOW*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_CORE_INTR_STATUS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_CORE_INTR_STATUS_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_CORE_INTR_STATUS_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_CORE_INTR_STATUS_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_CORE_INTR_STATUS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_FLAG

/*  DELPHI_CORE_INTR_ENABLE_REG desc:  DELPHI CoreInterrupt Enable */
/* Register */
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_t {
	struct {
uint32_t  core_intr_enable     :   8;
/*   Interrupt is registered only */
/* if this bit is set. If this is*/
/* 0, corresponding*/
/* CORE_INTR_STATUS bit is also 0*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_CORE_INTR_ENABLE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_CORE_INTR_ENABLE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_CORE_INTR_ENABLE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_CORE_INTR_ENABLE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_CORE_INTR_ENABLE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_FLAG

/*  DELPHI_CORE_INTR_SIGNAL_ENABLE_REG desc:  CORE_INTR_STATUS is */
/* exposed to interrupt pin only if corresponding */
/* CORE_INTR_STATUS_SIGNAL_ENABLE bit is set*/
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_t {
	struct {
uint32_t  core_intr_signal_enable :   8;
/*   CORE_INTR_STATUS is exposed */
/* to interrupt pin only if*/
/* corresponding ,*/
/* CORE_INTR_STATUS_SIGNAL_ENABLE*/
/* bit is set*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_CORE_INTR_SIGNAL_ENABLE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_CORE_INTR_SIGNAL_ENABLE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_CORE_INTR_SIGNAL_ENABLE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_CORE_INTR_SIGNAL_ENABLE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_CORE_INTR_SIGNAL_ENABLE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_FLAG
/* DELPHI_DBG_PERF_CTRL_REG desc:  CNN Performance Control*/
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_t {
	struct {
uint32_t  start_cnn_perf       :   1;
/*   SW set when layer-0 starts */
/* and SW clear after layer-5*/
uint32_t  Reserved0            :  31;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_OFFSET 0x0c
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_START_CNN_PERF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_START_CNN_PERF_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_START_CNN_PERF_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_START_CNN_PERF_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_START_CNN_PERF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESERVED0_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESERVED0_RANGE 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESERVED0_MASK 0xfffffffe
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_FLAG
/* DELPHI_DBG_PERF_CNT_1_REG desc:  CNN Performance counters 1*/
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_t {
	struct {
uint32_t  per_lyr_cyc_cnt      :  32;
/*   Perfomance Counter - Per */
/* Layer Cycle Counter*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_PER_LYR_CYC_CNT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_PER_LYR_CYC_CNT_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_PER_LYR_CYC_CNT_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_PER_LYR_CYC_CNT_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_PER_LYR_CYC_CNT_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_FLAG
/* DELPHI_DBG_PERF_CNT_2_REG desc:  CNN Performance counters 2*/
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_t {
	struct {
uint32_t  total_cyc_cnt        :  32;
/*   Perfomance Counter - Total */
/* Cycle Counter*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_TOTAL_CYC_CNT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_TOTAL_CYC_CNT_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_TOTAL_CYC_CNT_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_TOTAL_CYC_CNT_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_TOTAL_CYC_CNT_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_FLAG
/* DELPHI_DBG_PERF_STATUS_REG desc:  CNN Peformance Error*/
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_t {
	struct {
uint32_t  total_cyc_cnt_saturated :   1;
/*   Total layer cycle counter */
/* saturated*/
uint32_t  per_lyr_cyc_cnt_saturated :   1;
/*   Per layer cycle counter */
/* saturated*/
uint32_t  Reserved0            :  30;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_OFFSET 0x18
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_TOTAL_CYC_CNT_SATURATED_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_TOTAL_CYC_CNT_SATURATED_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_TOTAL_CYC_CNT_SATURATED_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_TOTAL_CYC_CNT_SATURATED_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_TOTAL_CYC_CNT_SATURATED_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_PER_LYR_CYC_CNT_SATURATED_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_PER_LYR_CYC_CNT_SATURATED_MSB 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_PER_LYR_CYC_CNT_SATURATED_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_PER_LYR_CYC_CNT_SATURATED_MASK 0x00000002
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_PER_LYR_CYC_CNT_SATURATED_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESERVED0_LSB 0x0002
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESERVED0_RANGE 0x001e
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESERVED0_MASK 0xfffffffc
#define CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FLAG
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FLAG
/* DELPHI_SCRATCH_PAD_REG desc:  Reserved Register*/
union CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_t {
	struct {
uint32_t  future_use           :  32;    /*  DEBUG Register:*/
/* future_use_reg[5:0] = {*/
/* disable_pof_during_pos,*/

/*  */
/* disable_pof_during_pe_comp,disable_pos_during_pe_comp,disable_delphi_idle,disable_clk_gating,cfg_isram_mem_packing} */
/* */
/* cfg_isram_mem_packing - When*/
/* programmed 1 all new IFM rows*/
/* start from Bank-0 in ISRAM.*/
/* Default both banks to be*/
/* utilized. disable_clk_gating -*/
/* When programmed 1 internal*/
/* clock gating enable to*/
/* delphi_core is disabled.*/
/* Default Clock gating to*/
/* delphi_core is enabled.*/
/* disable_delphi_idle - When*/
/* programmed 1 external clock*/
/* gating singal (delphi_idle) to*/
/* CVE is always low. Default*/
/* delphi_idle held high out of*/
/* reset till credits are*/
/* available for processing &*/
/* after completion of*/
/* computation*/
/* disable_pos_during_pe_comp -*/
/* When programmed 1 partial OFM*/
/* save do not happen during PE*/
/* computation are in progress.*/
/* This is will affect*/
/* performance.*/
/* disable_pof_during_pe_comp -*/
/* When programmed 1 PE*/
/* computation starts after*/
/* partial OFM fetch is complete.*/
/* This is will affect*/
/* performance.*/
/* disable_pof_during_pos - When*/
/* programmed 1 partial OFM fetch*/
/* do not start till partial OFM*/
/* save is complete. This is will*/
/* affect performance. Note:*/
/* Connection for*/
/* disable_pos_during_pe_comp,*/
/* disable_pof_during_pe_comp &*/
/* disable_pof_during_pos are not*/
/* made in RTL.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_OFFSET 0x1c
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FUTURE_USE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FUTURE_USE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FUTURE_USE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FUTURE_USE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_FUTURE_USE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_FLAG
/* CNN_ISRAM_ZERO_PAD_REG desc:  ISRAM Zero Padding Register*/
union CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_t {
	struct {
uint32_t  ifm_row_pdg_at_ifm_top :   8;
/*   Programming this field */
/* enables the Delphi hardware to*/
/* add padding to the top of an*/
/* Input Feature Map (IFM), the*/
/* value programed should*/
/* indicates the number of rows*/
/* that the user wants to add to*/
/* the top of an IFM.*/
uint32_t  ifm_row_pdg_at_ifm_bottom :   8;
/*   Programming this field */
/* enables the Delphi hardware to*/
/* add padding to the bottom of*/
/* an Input Feature Map (IFM),*/
/* the value programed should*/
/* indicates the number of rows*/
/* that the user wants to add to*/
/* the bottom of an IFM.*/
uint32_t  ifm_column_pdg_at_ifm_lhs :   8;
/*   Programming this field */
/* enables the Delphi hardware to*/
/* add padding to the left hand*/
/* side of an Input Feature Map*/
/* (IFM), the value programed*/
/* should indicates the number of*/
/* columns that the user wants to*/
/* add to the left of an IFM.*/
uint32_t  ifm_column_pdg_at_ifm_rhs :   8;
/*   Programming this field */
/* enables the Delphi hardware to*/
/* add padding to the right hand*/
/* side of an Input Feature Map*/
/* (IFM), the value programed*/
/* should indicates the number of*/
/* columns that the user wants to*/
/* add to the right of an IFM.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_OFFSET 0x20
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_TOP_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_TOP_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_TOP_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_TOP_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_TOP_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_BOTTOM_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_BOTTOM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_BOTTOM_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_BOTTOM_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_ROW_PDG_AT_IFM_BOTTOM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_LHS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_LHS_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_LHS_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_LHS_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_LHS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_RHS_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_RHS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_RHS_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_RHS_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_IFM_COLUMN_PDG_AT_IFM_RHS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_FLAG
/* IFM_NUM_INVALID_ROWS_REG desc:  ISRAM Invalid Rows Register*/
union CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_t {
	struct {
uint32_t  ifm_num_invalid_rows :   8;
/*   This field indicates the */
/* number of invalid rows that*/
/* needs to be removed from the*/
/* IFM, assumption is that bottom*/
/* padding would be disabled*/
/* during this time. Note:*/
/* Discarding IFMs and IFM bottom*/
/* padding can't coexist*/
uint32_t  cfg_ifm_row_cache_aligned :   1;
/*   This signal indicates that */
/* IFM row received by ISRAM read*/
/* write control is cacheline*/
/* aligned*/
uint32_t  Reserved0            :   7;    /*  Reserved Field*/
uint32_t  ifm_zero_padding_value :  16;
/*   DELPHI pads the IFM by */
/* specified programmable value.*/
/* default value for padding is*/
/* zero.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_OFFSET 0x24
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_NUM_INVALID_ROWS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_NUM_INVALID_ROWS_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_NUM_INVALID_ROWS_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_NUM_INVALID_ROWS_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_NUM_INVALID_ROWS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_CFG_IFM_ROW_CACHE_ALIGNED_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_CFG_IFM_ROW_CACHE_ALIGNED_MSB 0x0008
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_CFG_IFM_ROW_CACHE_ALIGNED_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_CFG_IFM_ROW_CACHE_ALIGNED_MASK 0x00000100
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_CFG_IFM_ROW_CACHE_ALIGNED_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESERVED0_LSB 0x0009
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESERVED0_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESERVED0_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESERVED0_MASK 0x0000fe00
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_ZERO_PADDING_VALUE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_ZERO_PADDING_VALUE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_ZERO_PADDING_VALUE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_ZERO_PADDING_VALUE_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_IFM_ZERO_PADDING_VALUE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_FLAG

/*  A_BLOCK_SIZE_NORMAL_REG desc:  GEMM reg for matrix A - block */
/* definitions */
union CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_t {
	struct {
uint32_t  a_y_block_size_normal :   8;
/*   Size of the block in Y */
/* direction - this will be equal*/
/* to number of active tiles*/
uint32_t  RSVD_0               :  24;
/*  Nebulon auto filled RSVD [31:8] */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_OFFSET 0x30
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_A_Y_BLOCK_SIZE_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_A_Y_BLOCK_SIZE_NORMAL_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_A_Y_BLOCK_SIZE_NORMAL_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_A_Y_BLOCK_SIZE_NORMAL_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_A_Y_BLOCK_SIZE_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG

/*  A_NUM_BLOCKS_IN_MB_NORMAL_REG desc:  GEMM reg for matrix A - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_t {
	struct {
uint32_t  a_x_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* X direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 4 FP16:*/
/* Possible values are 1 .. 8*/
/* FP32: Possible Values are 1 ..*/
/* 16*/
uint32_t  a_y_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* Y direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 16 FP16:*/
/* Possible values are 1 .. 16*/
/* FP32: Possible Values are 1 ..*/
/* 32*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_OFFSET 0x34
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_X_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_X_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_X_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_X_NUM_BLOCKS_IN_MB_NORMAL_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_X_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_Y_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_Y_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_Y_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_Y_NUM_BLOCKS_IN_MB_NORMAL_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_A_Y_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG

/*  A_NUM_BLOCKS_IN_MB_BOUNDARY_REG desc:  GEMM reg for matrix A - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t {
	struct {
uint32_t  a_x_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* X direction when in a boundary*/
/* condition. If*/
/* a_is_boundary_spb[0] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 4 FP16: Possible values are 1*/
/* .. 8 FP32: Possible Values are*/
/* 1 .. 16 , otherwise it is 0*/
uint32_t  a_y_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* Y direction when in a boundary*/
/* condition. If*/
/* a_is_boundary_spb[1] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 16 FP16: Possible values are 1*/
/* .. 16 FP32: Possible Values*/
/* are 1 .. 32 otherwise it is 0*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_OFFSET 0x38
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_X_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_X_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_X_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_X_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_X_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_Y_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_A_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_FLAG
/* A_MB_IN_SPB_REG desc:  GEMM reg for matrix A - SPB defintions*/
union CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_t {
	struct {
uint32_t  a_x_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in X */
/* direction. Possible values are*/
/* 1 .. 255*/
uint32_t  a_y_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in Y */
/* direction. Possible values are*/
/* 1 .. 255*/
uint32_t  a_is_boundary_spb    :   4;
/*   Indicates when the SPB is a */
/* boundary SPB Bit [0] == 1, =>*/
/* SPB is boundary in X direction*/
/* Bit [1] == 1, => SPB is*/
/* boundary in Y direction*/
/* Bit[3:2] are unused.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_OFFSET 0x3c
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_X_NUM_MB_IN_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_X_NUM_MB_IN_SPB_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_X_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_X_NUM_MB_IN_SPB_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_X_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_Y_NUM_MB_IN_SPB_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_Y_NUM_MB_IN_SPB_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_Y_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_Y_NUM_MB_IN_SPB_MASK 0x0fffc000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_Y_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_IS_BOUNDARY_SPB_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_IS_BOUNDARY_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_IS_BOUNDARY_SPB_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_IS_BOUNDARY_SPB_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_A_IS_BOUNDARY_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG

/*  A_DER_BLOCK_ROW_SIZE_SPB_REG desc:  GEMM reg for matrix A - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_t {
	struct {
uint32_t  a_der_block_row_size_spb :  32;
/*   This is a derived field and */
/* the value to be programmed =*/
/* a_x_der_num_blocks_spb **/
/* a_y_block_size_normal .*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_OFFSET 0x40
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_A_DER_BLOCK_ROW_SIZE_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_A_DER_BLOCK_ROW_SIZE_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_A_DER_BLOCK_ROW_SIZE_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_A_DER_BLOCK_ROW_SIZE_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_A_DER_BLOCK_ROW_SIZE_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_FLAG

/*  A_DER_NUM_BLOCKS_SPB_REG desc:  GEMM reg for matrix A - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_t {
	struct {
uint32_t  a_x_der_num_blocks_spb :  32;
/*   this should program to = */
/* (a_x_num_mb_in_spb **/
/* a_x_num_blocks_in_mb_normal **/
/* 64) (Note : this will*/
/* equivalent h_pitch nothing but*/
/* tile width in bytes)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_OFFSET 0x44
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_A_X_DER_NUM_BLOCKS_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_A_X_DER_NUM_BLOCKS_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_A_X_DER_NUM_BLOCKS_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_A_X_DER_NUM_BLOCKS_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_A_X_DER_NUM_BLOCKS_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_FLAG
/* A_TRANSPOSE_REG desc:  GEMM reg for matrix A*/
union CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_t {
	struct {
uint32_t  a_is_transponse      :   1;
/*   Future use. This shall be 0 */
/* only. 1 => Compute GEMM for*/
/* transpose of A (AT x B) 0 =>*/
/* Compute A x B*/
uint32_t  RSVD_0               :  31;
/*  Nebulon auto filled RSVD [31:1] */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_OFFSET 0x48
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_A_IS_TRANSPONSE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_A_IS_TRANSPONSE_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_A_IS_TRANSPONSE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_A_IS_TRANSPONSE_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_A_IS_TRANSPONSE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_FLAG

/*  B_BLOCK_SIZE_BOUNDARY_REG desc:  GEMM reg for matrix B - block */
/* definitions */
union CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_t {
	struct {
uint32_t  b_y_block_size_boundary :   8;
/*   Size of the block in Y */
/* direction boundary [normal*/
/* will be a parameter with value*/
/* set to 32 (FP16/INT8), 16*/
/* (FP32)]. Used to fetch only*/
/* these many values for B matrix*/
/* during a boundary condition.*/
/* FP16: Possible values 1 .. 32*/
/* INT8/FP32: Possible values 1*/
/* .. 16*/
uint32_t  RSVD_0               :  24;
/*  Nebulon auto filled RSVD [31:8] */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_OFFSET 0x4c
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_B_Y_BLOCK_SIZE_BOUNDARY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_B_Y_BLOCK_SIZE_BOUNDARY_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_B_Y_BLOCK_SIZE_BOUNDARY_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_B_Y_BLOCK_SIZE_BOUNDARY_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_B_Y_BLOCK_SIZE_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG

/*  B_NUM_BLOCKS_IN_MB_NORMAL_REG desc:  GEMM reg for matrix B - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_t {
	struct {
uint32_t  b_x_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* X direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 4 FP16:*/
/* Possible values are 1 .. 8*/
/* FP32: Possible Values are 1 ..*/
/* 16*/
uint32_t  b_y_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* Y direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 4 FP16:*/
/* Possible values are 1 .. 8*/
/* FP32: Possible Values are 1 ..*/
/* 16*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_OFFSET 0x50
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_X_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_X_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_X_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_X_NUM_BLOCKS_IN_MB_NORMAL_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_X_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_Y_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_Y_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_Y_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_Y_NUM_BLOCKS_IN_MB_NORMAL_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_B_Y_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG

/*  B_NUM_BLOCKS_IN_MB_BOUNDARY_REG desc:  GEMM reg for matrix B - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t {
	struct {
uint32_t  b_x_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* X direction when in a boundary*/
/* condition. If*/
/* b_is_boundary_spb[1] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 4 FP16: Possible values are 1*/
/* .. 8 FP32: Possible Values are*/
/* 1 .. 16 , otherwise it is 0*/
uint32_t  b_y_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* Y direction when in a boundary*/
/* condition. If*/
/* b_is_boundary_spb[1] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 4 FP16: Possible values are 1*/
/* .. 8 FP32: Possible Values are*/
/* 1 .. 16 , otherwise it is 0*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_OFFSET 0x54
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_X_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_X_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_X_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_X_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_X_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_Y_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_B_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_FLAG
/* B_MB_IN_SPB_REG desc:  GEMM reg for matrix B - SPB defintions*/
union CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_t {
	struct {
uint32_t  b_x_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in X */
/* direction. Possible values are*/
/* 1 .. 255*/
uint32_t  b_y_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in Y */
/* direction. Possible values are*/
/* 1 .. 255*/
uint32_t  b_is_boundary_spb    :   4;
/*   Indicates when the SPB is a */
/* boundary SPB Bit [0] == 1, =>*/
/* SPB is boundary in X direction*/
/* Bit [1] == 1, => SPB is*/
/* boundary in Y direction*/
/* Bit[3:2] are unused.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_OFFSET 0x58
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_X_NUM_MB_IN_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_X_NUM_MB_IN_SPB_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_X_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_X_NUM_MB_IN_SPB_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_X_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_Y_NUM_MB_IN_SPB_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_Y_NUM_MB_IN_SPB_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_Y_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_Y_NUM_MB_IN_SPB_MASK 0x0fffc000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_Y_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_IS_BOUNDARY_SPB_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_IS_BOUNDARY_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_IS_BOUNDARY_SPB_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_IS_BOUNDARY_SPB_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_B_IS_BOUNDARY_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG

/*  B_DER_BLOCK_ROW_SIZE_SPB_REG desc:  GEMM reg for matrix B - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_t {
	struct {
uint32_t  b_der_block_row_size_spb :  32;
/*   This is a derived field and */
/* the value to be programmed =*/
/* b_x_der_num_blocks_spb * 32*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_OFFSET 0x5c
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_B_DER_BLOCK_ROW_SIZE_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_B_DER_BLOCK_ROW_SIZE_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_B_DER_BLOCK_ROW_SIZE_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_B_DER_BLOCK_ROW_SIZE_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_B_DER_BLOCK_ROW_SIZE_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_FLAG

/*  B_DER_NUM_BLOCKS_SPB_REG desc:  GEMM reg for matrix B - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_t {
	struct {
uint32_t  b_x_der_num_blocks_spb :  32;
/*   this should program to = */
/* (b_x_num_mb_in_spb **/
/* b_x_num_blocks_in_mb_normal **/
/* 64) (Note : this will*/
/* equivalent h_pitch nothing but*/
/* tile width in bytes)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_OFFSET 0x60
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_B_X_DER_NUM_BLOCKS_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_B_X_DER_NUM_BLOCKS_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_B_X_DER_NUM_BLOCKS_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_B_X_DER_NUM_BLOCKS_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_B_X_DER_NUM_BLOCKS_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_FLAG

/*  C_BLOCK_SIZE_NORMAL_REG desc:  GEMM reg for matrix C - block */
/* definitions */
union CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_t {
	struct {
uint32_t  c_y_block_size_normal :   8;
/*   Size of the block in Y */
/* direction. Same as*/
/* a_y_block_size_normal*/
uint32_t  RSVD_0               :  24;
/*  Nebulon auto filled RSVD [31:8] */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_OFFSET 0x64
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_C_Y_BLOCK_SIZE_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_C_Y_BLOCK_SIZE_NORMAL_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_C_Y_BLOCK_SIZE_NORMAL_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_C_Y_BLOCK_SIZE_NORMAL_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_C_Y_BLOCK_SIZE_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_FLAG

/*  C_NUM_BLOCKS_IN_MB_NORMAL_REG desc:  GEMM reg for matrix C - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_t {
	struct {
uint32_t  c_x_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* X direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 32 FP16:*/
/* Possible values are 1 .. 128*/
/* FP32: Possible values are 1 ..*/
/* 255*/
uint32_t  c_y_num_blocks_in_mb_normal :  16;
/*   Number of blocks in MB in the */
/* Y direction when not in a*/
/* boundary condition (normal*/
/* condition). INT8: Possible*/
/* values are 1 .. 32 FP16:*/
/* Possible values are 1 .. 128*/
/* FP32: Possible values are 1 ..*/
/* 255*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_OFFSET 0x68
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_X_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_X_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_X_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_X_NUM_BLOCKS_IN_MB_NORMAL_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_X_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_Y_NUM_BLOCKS_IN_MB_NORMAL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_Y_NUM_BLOCKS_IN_MB_NORMAL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_Y_NUM_BLOCKS_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_Y_NUM_BLOCKS_IN_MB_NORMAL_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_C_Y_NUM_BLOCKS_IN_MB_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_FLAG

/*  C_NUM_BLOCKS_IN_MB_BOUNDARY_REG desc:  GEMM reg for matrix C - MB */
/* definitions */
union CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t {
	struct {
uint32_t  c_x_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* X direction when in a boundary*/
/* condition.If*/
/* c_is_boundary_spb[1] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 32 FP16: Possible values are 1*/
/* .. 128 FP32: Possible values*/
/* are 1 .. 255 , otherwise it is*/
/* 0*/
uint32_t  c_y_num_blocks_in_mb_boundary :  16;
/*   Number of blocks in MB in the */
/* Y direction when in a boundary*/
/* condition.If*/
/* c_is_boundary_spb[1] == 1,*/
/* INT8: Possible values are 1 ..*/
/* 32 FP16: Possible values are 1*/
/* .. 128 FP32: Possible values*/
/* are 1 .. 255 , otherwise it is*/
/* 0*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_OFFSET 0x6c
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_X_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_X_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_X_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_X_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_X_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_Y_NUM_BLOCKS_IN_MB_BOUNDARY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_Y_NUM_BLOCKS_IN_MB_BOUNDARY_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_C_Y_NUM_BLOCKS_IN_MB_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_FLAG
/* C_MB_IN_SPB_REG desc:  GEMM reg for matrix C - SPB defintions*/
union CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_t {
	struct {
uint32_t  c_x_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in X */
/* direction.Possible values are*/
/* 1 .. 255*/
uint32_t  c_y_num_mb_in_spb    :  14;
/*   Number of MBs in an SPB in Y */
/* direction. Possible values are*/
/* 1 .. 255*/
uint32_t  c_is_boundary_spb    :   4;
/*   Indicates when the SPB is a */
/* boundary SPB Bit [0] == 1, =>*/
/* SPB is boundary in X direction*/
/* Bit [1] == 1, => SPB is*/
/* boundary in Y direction*/
/* Bit[3:2] are unused.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_OFFSET 0x70
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_X_NUM_MB_IN_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_X_NUM_MB_IN_SPB_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_X_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_X_NUM_MB_IN_SPB_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_X_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_Y_NUM_MB_IN_SPB_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_Y_NUM_MB_IN_SPB_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_Y_NUM_MB_IN_SPB_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_Y_NUM_MB_IN_SPB_MASK 0x0fffc000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_Y_NUM_MB_IN_SPB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_IS_BOUNDARY_SPB_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_IS_BOUNDARY_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_IS_BOUNDARY_SPB_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_IS_BOUNDARY_SPB_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_C_IS_BOUNDARY_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_FLAG

/*  C_DER_BLOCK_ROW_SIZE_SPB_REG desc:  GEMM reg for matrix C - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_t {
	struct {
uint32_t  c_der_block_row_size_spb :  32;
/*   Size of 1 block row in terms */
/* of cache lines. This is a*/
/* derived field and the value to*/
/* be programmed =*/
/* c_x_der_num_blocks_spb **/
/* c_y_block_size_normal*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_OFFSET 0x74
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_C_DER_BLOCK_ROW_SIZE_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_C_DER_BLOCK_ROW_SIZE_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_C_DER_BLOCK_ROW_SIZE_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_C_DER_BLOCK_ROW_SIZE_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_C_DER_BLOCK_ROW_SIZE_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_FLAG

/*  C_DER_NUM_BLOCKS_SPB_REG desc:  GEMM reg for matrix C - SPB */
/* defintions */
union CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_t {
	struct {
uint32_t  c_x_der_num_blocks_spb :  32;
/*   This should program to : */
/* (c_x_num_mb_in_spb **/
/* c_x_num_blocks_in_mb_normal **/
/* num_cl_per_blk *64)*/
/* if(data_type ==0) //FP16*/
/* num_cl_per_blk = 1 else*/
/* if((accumulate_osram==0)|(last_unit_of_work==0))*/
/* //int8 - partial fetch or*/
/* partial save to sp (no retain*/
/* of data in DELPHI)*/
/* num_cl_per_blk = 4 else*/
/* if((last_unit_of_work==1) &*/
/* (bypass_quantization==0)) //*/
/* int 8 -final save to sp and*/
/* quantization num_cl_per_blk =*/
/* 1 else*/
/* if((last_unit_of_work==1) &*/
/* (bypass_quantization==1))*/
/* //int8 - final save to sp no*/
/* quantization num_cl_per_blk =*/
/* 4 (Note : this will equivalent*/
/* h_pitch nothing but tile width*/
/* in bytes)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_OFFSET 0x78
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_C_X_DER_NUM_BLOCKS_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_C_X_DER_NUM_BLOCKS_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_C_X_DER_NUM_BLOCKS_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_C_X_DER_NUM_BLOCKS_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_C_X_DER_NUM_BLOCKS_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_FLAG
/* C_DER_SUBMB_NORMAL_REG desc:  GEMM reg for matrix C*/
union CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_t {
	struct {
uint32_t  c_y_der_num_submb_in_mb_normal :  16;
/*   Derived field = */
/* c_y_num_blocks_in_mb_normal /*/
/* a_y_num_blocks_in_mb_normal*/
uint32_t  c_x_der_num_submb_in_mb_normal :  16;
/*   Derived field = */
/* c_x_num_blocks_in_mb_normal /*/
/* b_x_num_blocks_in_mb_normal*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_OFFSET 0x7c
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_Y_DER_NUM_SUBMB_IN_MB_NORMAL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_Y_DER_NUM_SUBMB_IN_MB_NORMAL_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_Y_DER_NUM_SUBMB_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_Y_DER_NUM_SUBMB_IN_MB_NORMAL_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_Y_DER_NUM_SUBMB_IN_MB_NORMAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_X_DER_NUM_SUBMB_IN_MB_NORMAL_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_X_DER_NUM_SUBMB_IN_MB_NORMAL_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_X_DER_NUM_SUBMB_IN_MB_NORMAL_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_X_DER_NUM_SUBMB_IN_MB_NORMAL_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_C_X_DER_NUM_SUBMB_IN_MB_NORMAL_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_FLAG
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_FLAG
/* C_DER_SUBMB_BOUNDARY_REG desc:  GEMM reg for matrix C*/
union CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_t {
	struct {
uint32_t  c_y_der_num_submb_in_mb_boundary :  16;
/*   If c_is_boundary_spb[1] == 1, */
/* Derived field =*/
/* ceil(c_y_num_blocks_in_mb_boundary*/
/* /*/
/* a_y_num_blocks_in_mb_normal),*/
/* else its 0*/
uint32_t  c_x_der_num_submb_in_mb_boundary :  16;
/*   If c_is_boundary_spb[0] == 1, */
/* Derived field =*/
/* ceil(c_x_num_blocks_in_mb_boundary*/
/* /*/
/* b_x_num_blocks_in_mb_normal),*/
/* else its 0*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_OFFSET 0x80
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_Y_DER_NUM_SUBMB_IN_MB_BOUNDARY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_Y_DER_NUM_SUBMB_IN_MB_BOUNDARY_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_Y_DER_NUM_SUBMB_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_Y_DER_NUM_SUBMB_IN_MB_BOUNDARY_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_Y_DER_NUM_SUBMB_IN_MB_BOUNDARY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_X_DER_NUM_SUBMB_IN_MB_BOUNDARY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_X_DER_NUM_SUBMB_IN_MB_BOUNDARY_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_X_DER_NUM_SUBMB_IN_MB_BOUNDARY_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_X_DER_NUM_SUBMB_IN_MB_BOUNDARY_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_C_X_DER_NUM_SUBMB_IN_MB_BOUNDARY_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_FLAG
/* GEMM_STREAM_MODE_REG desc:  GEMM Stream Mode*/
union CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_t {
	struct {
uint32_t  a_matrix_stream_mode_en :   4;
/*   Program this to 1 for B */
/* matrix i/o streaming.*/
uint32_t  b_matrix_stream_mode_en :   4;
/*   Program this to 1 for B */
/* matrix i/o streaming.*/
uint32_t  c_matrix_stream_mode_en :   4;
/*   program this to 1 for C */
/* matrix i/o streaming.*/
uint32_t  eltwise_matrix_stream_mode_en :   4;
/*   Program to 0/1 - if the ELT */
/* WISE BID and ORAM BID are*/
/* same. program to 2 if the ELT*/
/* WISE BID is different from*/
/* ORAM BID and no streaming of*/
/* elt wise matrix. Program to 3*/
/* if the ELT WISE BID is*/
/* different from ORAM BID and*/
/* streaming of elt wise matrix.*/
uint32_t  b_x_sub_blk_boundary :   4;
/*   program ceil(no of cols of */
/* C/16)%4*/
uint32_t  gemm_future_use      :   4;    /*  gemm future use*/
uint32_t  Reserved0            :   8;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_OFFSET 0x84
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_BITFIELD_COUNT 0x07
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_A_MATRIX_STREAM_MODE_EN_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_A_MATRIX_STREAM_MODE_EN_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_A_MATRIX_STREAM_MODE_EN_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_A_MATRIX_STREAM_MODE_EN_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_A_MATRIX_STREAM_MODE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_MATRIX_STREAM_MODE_EN_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_MATRIX_STREAM_MODE_EN_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_MATRIX_STREAM_MODE_EN_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_MATRIX_STREAM_MODE_EN_MASK 0x000000f0
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_MATRIX_STREAM_MODE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_C_MATRIX_STREAM_MODE_EN_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_C_MATRIX_STREAM_MODE_EN_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_C_MATRIX_STREAM_MODE_EN_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_C_MATRIX_STREAM_MODE_EN_MASK 0x00000f00
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_C_MATRIX_STREAM_MODE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_ELTWISE_MATRIX_STREAM_MODE_EN_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_ELTWISE_MATRIX_STREAM_MODE_EN_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_ELTWISE_MATRIX_STREAM_MODE_EN_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_ELTWISE_MATRIX_STREAM_MODE_EN_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_ELTWISE_MATRIX_STREAM_MODE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_X_SUB_BLK_BOUNDARY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_X_SUB_BLK_BOUNDARY_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_X_SUB_BLK_BOUNDARY_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_X_SUB_BLK_BOUNDARY_MASK 0x000f0000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_B_X_SUB_BLK_BOUNDARY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_GEMM_FUTURE_USE_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_GEMM_FUTURE_USE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_GEMM_FUTURE_USE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_GEMM_FUTURE_USE_MASK 0x00f00000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_GEMM_FUTURE_USE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESERVED0_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESERVED0_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESERVED0_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_FLAG
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_FLAG
/* CNN_KERNEL_BYTES_REG desc:  CNN kernel bytes per iteration*/
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_t {
	struct {
uint32_t  cnn_kernel_bytes_per_itr :  32;
/*   program this field = */
/* ceil((kernel_kxk*element_size)/var2)*var2*/
/* * var1 Where var1=*/
/* ofm_streaming_to_sp_en?local_ofm_per_iteration*/
/* : ofm_per_iteration. var2 = 1*/
/* for kernel_sp_layout=3, 16 for*/
/* kernel_sp_layout=2, 32 for*/
/* kernel_sp_layout=1, 64 for*/
/* kernel_sp_layout=0*/
/* element_size = 2 bytes for*/
/* FP16 and 1 for INT8 mode.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_OFFSET 0x88
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_CNN_KERNEL_BYTES_PER_ITR_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_CNN_KERNEL_BYTES_PER_ITR_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_CNN_KERNEL_BYTES_PER_ITR_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_CNN_KERNEL_BYTES_PER_ITR_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_CNN_KERNEL_BYTES_PER_ITR_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_FLAG
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_FLAG
/* OUT_OFFSET_REG desc:  Output offset*/
union CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_t {
	struct {
uint32_t  out_offset           :  32;
/*   offsety used to subtract */
/* during output quantization*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OFFSET 0x8c
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OUT_OFFSET_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OUT_OFFSET_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OUT_OFFSET_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OUT_OFFSET_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_OUT_OFFSET_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_FLAG
/* BATCH_MODE_REG desc:  cnn batch mode register*/
union CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_t {
	struct {
uint32_t  batch_mode           :   8;
/*   CNN: 0- no batchng. 1- */
/* infinite batch mode local*/
/* (cache the weights inside*/
/* DELPHI local buffer BRAM). 2-*/
/* infinite batch mode SP (cache*/
/* the weights in SP buffer, in*/
/* this case weights refeetech*/
/* counter needs to be*/
/* pprogrammed to fetch the same*/
/* weights from SP for multiple*/
/* batches). 3- finite batch mode*/
/* GEMM : 0 - No batching 1 -*/
/* infinite batch with data*/
/* layout in C_Y direction 2 -*/
/* infinite batch with data*/
/* layout in C_X direction.*/
uint32_t  local_batch_size     :   8;
/*   batch size that can fit in */
/* DELPHI ORAM buffer.*/
uint32_t  batch_size           :   8;
/*   Total batch size that needs */
/* to be processed for a given*/
/* UoW.*/
uint32_t  Reserved0            :   8;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_OFFSET 0x90
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_MODE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_MODE_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_MODE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_MODE_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_MODE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_LOCAL_BATCH_SIZE_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_LOCAL_BATCH_SIZE_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_LOCAL_BATCH_SIZE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_LOCAL_BATCH_SIZE_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_LOCAL_BATCH_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_SIZE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_SIZE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_SIZE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_SIZE_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_BATCH_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESERVED0_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESERVED0_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESERVED0_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_FLAG
/* ELTWISE_CNTRL_REG desc:  cnn eltwise ctrl register*/
union CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_t {
	struct {
uint32_t  eltwise_en           :   1;
/*   This enables element wise */
/* addition in DELPHI.*/
uint32_t  Reserved2            :   3;    /*  Reserved Field*/
uint32_t  eltwise_stride_en    :   1;
/*   if the IFM is larger than */
/* convolution OFM, then enable*/
/* this bit to remove alternate*/
/* pixels in the IFM to add wit*/
/* convoluted OFM.*/
uint32_t  Reserved1            :   3;    /*  Reserved Field*/
uint32_t  eltwise_relu_en      :   1;
/*   to enable ReLU after */
/* elementwise addition. This is*/
/* independent on Normal ReLU we*/
/* do after convolutuion. If we*/
/* don't require normal ReLU*/
/* (nonlinear_type=2) after*/
/* convolution then we should*/
/* disable normal ReLU.*/
uint32_t  Reserved0            :   7;    /*  Reserved Field*/
uint32_t  ifm2_result_shift_value :   8;
/*   Re quantizing parameter for */
/* IFM2 data.*/
uint32_t  ifm2_result_mult_int :   8;
/*   Re quantizing parameter for */
/* IFM2 data.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_OFFSET 0x94
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_BITFIELD_COUNT 0x08
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_EN_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_EN_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_EN_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED2_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED2_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED2_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED2_MASK 0x0000000e
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_STRIDE_EN_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_STRIDE_EN_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_STRIDE_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_STRIDE_EN_MASK 0x00000010
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_STRIDE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED1_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED1_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED1_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED1_MASK 0x000000e0
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_RELU_EN_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_RELU_EN_MSB 0x0008
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_RELU_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_RELU_EN_MASK 0x00000100
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_ELTWISE_RELU_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED0_LSB 0x0009
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED0_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED0_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED0_MASK 0x0000fe00
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_SHIFT_VALUE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_SHIFT_VALUE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_SHIFT_VALUE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_SHIFT_VALUE_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_SHIFT_VALUE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_MULT_INT_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_MULT_INT_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_MULT_INT_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_MULT_INT_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_IFM2_RESULT_MULT_INT_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_FLAG
/* ELTWISE_DIMENSION_REG desc:  cnn eltwise dimension register*/
union CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_t {
	struct {
uint32_t  eltwise_ifm2_size_rows :  16;
/*   program no of rows of a IFM2 */
/* (if the convolution is 1x1*/
/* then program orginal*/
/* dimensions)*/
uint32_t  eltwise_ifm2_size_cols :  16;
/*   program no of cols of a IFM2 */
/* (if the convolution is 1x1*/
/* then program orginal*/
/* dimensions)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_OFFSET 0x98
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_ROWS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_ROWS_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_ROWS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_ROWS_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_ROWS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_COLS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_COLS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_COLS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_COLS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_ELTWISE_IFM2_SIZE_COLS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_FLAG

/*  ELTWISE_DER_BLOCK_ROW_SIZE_REG desc:  gemm eltwise der block row */
/* size register */
union CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_t {
	struct {
uint32_t  eltwise_der_block_row_size_spb :  32;
/*   program SPB block row size of */
/* element wise matrix.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_OFFSET 0x9c
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_ELTWISE_DER_BLOCK_ROW_SIZE_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_ELTWISE_DER_BLOCK_ROW_SIZE_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_ELTWISE_DER_BLOCK_ROW_SIZE_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_ELTWISE_DER_BLOCK_ROW_SIZE_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_ELTWISE_DER_BLOCK_ROW_SIZE_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_FLAG

/*  ELTWISE_DER_NUM_BLOCKS_REG desc:  gemm eltwise num blocks register */
/* */
union CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_t {
	struct {
uint32_t  eltwise_der_num_blocks_spb :  32;
/*   program no of blocks of SPB */
/* of element wise matrix.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_OFFSET 0xa0
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_ELTWISE_DER_NUM_BLOCKS_SPB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_ELTWISE_DER_NUM_BLOCKS_SPB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_ELTWISE_DER_NUM_BLOCKS_SPB_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_ELTWISE_DER_NUM_BLOCKS_SPB_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_ELTWISE_DER_NUM_BLOCKS_SPB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_FLAG
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_FLAG
/* GROUP_CONV_REG desc:  Grouped conv reg*/
union CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_t {
	struct {
uint32_t  num_ifms_in_a_group_mask :   4;
/*   program number of ifms in a */
/* group if it is less than 8*/
/* else program to 8.*/
uint32_t  num_ofms_in_a_group_mask :   4;
/*   program number of ofms in a */
/* group if it is less than 8*/
/* else program to 8.*/
uint32_t  num_tile_sets        :   4;
/*   program to 4 if number of */
/* ofms in a group <= 8 and*/
/* program to 2 if number of ofms*/
/* in a group <=16. number of*/
/* ofms in a group >16 can be*/
/* consider in norma convolution*/
/* mode.*/
uint32_t  tile_set_order       :   4;
/*   tile_set_order[0] = if */
/* (ceil(kernel_size/kernel_stride_x)*/
/* > 1) then 1 else 0;.*/
/* tile_set_order[1] = if*/
/* (ceil(kernel_size_rows/kernel_stride_y)*/
/* > 1) then 1 else 0;*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_OFFSET 0xa4
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_IFMS_IN_A_GROUP_MASK_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_IFMS_IN_A_GROUP_MASK_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_IFMS_IN_A_GROUP_MASK_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_IFMS_IN_A_GROUP_MASK_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_IFMS_IN_A_GROUP_MASK_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_OFMS_IN_A_GROUP_MASK_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_OFMS_IN_A_GROUP_MASK_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_OFMS_IN_A_GROUP_MASK_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_OFMS_IN_A_GROUP_MASK_MASK 0x000000f0
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_OFMS_IN_A_GROUP_MASK_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_TILE_SETS_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_TILE_SETS_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_TILE_SETS_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_TILE_SETS_MASK 0x00000f00
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_NUM_TILE_SETS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_TILE_SET_ORDER_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_TILE_SET_ORDER_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_TILE_SET_ORDER_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_TILE_SET_ORDER_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_TILE_SET_ORDER_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_FLAG
/* CORE_STATUS_1 desc:  Core status_1*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_1_t {
	struct {
uint32_t  core_status_1        :  32;
/*   core status register - */
/* [31:16] - pe_startup_perf_cnt*/
/* [15: 0 ] -*/
/* gemm_startup_perf_cnt*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_OFFSET 0xb0
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_CORE_STATUS_1_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_CORE_STATUS_1_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_CORE_STATUS_1_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_CORE_STATUS_1_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_1_CORE_STATUS_1_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_FLAG
/* CORE_STATUS_2 desc:  Core status_2*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_2_t {
	struct {
uint32_t  core_status_2        :  32;
/*   core status register - [31 : */
/* 0] - gemm_compute_perf_cnt*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_OFFSET 0xb4
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_CORE_STATUS_2_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_CORE_STATUS_2_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_CORE_STATUS_2_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_CORE_STATUS_2_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_2_CORE_STATUS_2_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_3_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_FLAG
/* CORE_STATUS_3 desc:  Core status_3*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_3_t {
	struct {
uint32_t  core_status_3        :  32;
/*   core status register - [31 : */
/* 0] - gemm_teardown_perf_cnt*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_OFFSET 0xb8
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_CORE_STATUS_3_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_CORE_STATUS_3_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_CORE_STATUS_3_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_CORE_STATUS_3_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_3_CORE_STATUS_3_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_4_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_FLAG
/* CORE_STATUS_4 desc:  Core status_4*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_4_t {
	struct {
uint32_t  core_status_4        :  32;
/*   core status register - [31 : */
/* 0] - pe_compute_perf_cnt*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_OFFSET 0xbc
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_CORE_STATUS_4_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_CORE_STATUS_4_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_CORE_STATUS_4_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_CORE_STATUS_4_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_4_CORE_STATUS_4_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_5_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_FLAG
/* CORE_STATUS_5 desc:  Core status_5*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_5_t {
	struct {
uint32_t  core_status_5        :  32;
/*   core status register - [31 : */
/* 0] - pe_teardown_perf_cnt*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_OFFSET 0xc0
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_CORE_STATUS_5_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_CORE_STATUS_5_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_CORE_STATUS_5_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_CORE_STATUS_5_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_5_CORE_STATUS_5_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_6_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_FLAG
/* CORE_STATUS_6 desc:  Core status_6*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_6_t {
	struct {
uint32_t  core_status_6        :  32;
/*   core status register - */
/* [31:16] -*/
/* credit_reset_latency_perf_cnt.*/
/* [15: 0 ] -*/
/* cfg_latency_perf_cnt.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_OFFSET 0xc4
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_CORE_STATUS_6_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_CORE_STATUS_6_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_CORE_STATUS_6_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_CORE_STATUS_6_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_6_CORE_STATUS_6_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_7_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_FLAG
/* CORE_STATUS_7 desc:  Core status_7*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_7_t {
	struct {
uint32_t  core_status_7        :  32;
/*   core status register - [31:8] */
/* - reserved [7] -*/
/* credit_reset_latency_perf_ctr_ovr_flow*/
/* [6] -*/
/* cfg_latency_perf_ctr_ovr_flow*/
/* [5] -*/
/* pe_teardown_perf_ctr_ovr_flow*/
/* [4] -*/
/* pe_compute_perf_ctr_ovr_flow*/
/* [3] -*/
/* pe_startup_perf_ctr_ovr_flow*/
/* [2] -*/
/* gemm_compute_perf_ctr_ovr_flow*/
/* [1] -*/
/* gemm_startup_perf_ctr_ovr_flow*/
/* [0] -*/
/* gemm_teardown_perf_ctr_ovr_flow*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_OFFSET 0xc8
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_CORE_STATUS_7_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_CORE_STATUS_7_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_CORE_STATUS_7_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_CORE_STATUS_7_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_7_CORE_STATUS_7_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_8_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_FLAG
/* CORE_STATUS_8 desc:  Core status_8*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_8_t {
	struct {
uint32_t  core_status_8        :  32;
/*   core status register - */
/* sip_ml_gemm_dbg_struct_s*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_OFFSET 0xcc
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_CORE_STATUS_8_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_CORE_STATUS_8_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_CORE_STATUS_8_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_CORE_STATUS_8_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_8_CORE_STATUS_8_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_9_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_FLAG
/* CORE_STATUS_9 desc:  Core status_9*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_9_t {
	struct {
uint32_t  core_status_9        :  32;
/*   core status register - */
/* sip_ml_cnn_dbg_struct_s*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_OFFSET 0xd0
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_CORE_STATUS_9_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_CORE_STATUS_9_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_CORE_STATUS_9_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_CORE_STATUS_9_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_9_CORE_STATUS_9_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_10_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_FLAG
/* CORE_STATUS_10 desc:  Core status_10*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_10_t {
	struct {
uint32_t  core_status_10       :  32;
/*   core status register - */
/* sip_ml_d2s_dbg_struct_s*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_OFFSET 0xd4
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_CORE_STATUS_10_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_CORE_STATUS_10_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_CORE_STATUS_10_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_CORE_STATUS_10_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_10_CORE_STATUS_10_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_11_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_FLAG
/* CORE_STATUS_11 desc:  Core status_11*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_11_t {
	struct {
uint32_t  core_status_11       :  32;
/*   core status register - */
/* sip_ml_osram_dbg_struct_s[0]*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_OFFSET 0xd8
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_CORE_STATUS_11_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_CORE_STATUS_11_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_CORE_STATUS_11_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_CORE_STATUS_11_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_11_CORE_STATUS_11_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_12_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_FLAG
/* CORE_STATUS_12 desc:  Core status_12*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_12_t {
	struct {
uint32_t  core_status_12       :  32;
/*   core status register - */
/* sip_ml_osram_dbg_struct_s[1]*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_OFFSET 0xdc
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_CORE_STATUS_12_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_CORE_STATUS_12_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_CORE_STATUS_12_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_CORE_STATUS_12_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_12_CORE_STATUS_12_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_13_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_FLAG
/* CORE_STATUS_13 desc:  Core status_13*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_13_t {
	struct {
uint32_t  core_status_13       :  32;
/*   core status register - */
/* sip_ml_pcq_dbg_struct_s*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_OFFSET 0xe0
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_CORE_STATUS_13_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_CORE_STATUS_13_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_CORE_STATUS_13_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_CORE_STATUS_13_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_13_CORE_STATUS_13_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_14_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_FLAG
/* CORE_STATUS_14 desc:  Core status_14*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_14_t {
	struct {
uint32_t  core_status_14       :  32;
/*   core status register - */
/* sip_ml_lsu_dbg_struct_s*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_OFFSET 0xe4
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_CORE_STATUS_14_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_CORE_STATUS_14_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_CORE_STATUS_14_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_CORE_STATUS_14_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_14_CORE_STATUS_14_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_15_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_FLAG
/* CORE_STATUS_15 desc:  Core status_15*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_15_t {
	struct {
uint32_t  core_status_15       :  32;
/*   core status register - 15 */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_OFFSET 0xe8
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_CORE_STATUS_15_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_CORE_STATUS_15_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_CORE_STATUS_15_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_CORE_STATUS_15_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_15_CORE_STATUS_15_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_16_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_FLAG
/* CORE_STATUS_16 desc:  Core status_16*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_16_t {
	struct {
uint32_t  core_status_16       :  32;
/*   core status register - 16 */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_OFFSET 0xec
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_CORE_STATUS_16_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_CORE_STATUS_16_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_CORE_STATUS_16_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_CORE_STATUS_16_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_16_CORE_STATUS_16_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_17_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_FLAG
/* CORE_STATUS_17 desc:  Core status_17*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_17_t {
	struct {
uint32_t  core_status_17       :  32;
/*   core status register - 17 */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_OFFSET 0xf0
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_CORE_STATUS_17_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_CORE_STATUS_17_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_CORE_STATUS_17_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_CORE_STATUS_17_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_17_CORE_STATUS_17_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_18_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_FLAG
/* CORE_STATUS_18 desc:  Core status_18*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_18_t {
	struct {
uint32_t  core_status_18       :  32;
/*   core status register - 18 */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_OFFSET 0xf4
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_CORE_STATUS_18_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_CORE_STATUS_18_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_CORE_STATUS_18_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_CORE_STATUS_18_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_18_CORE_STATUS_18_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_CORE_STATUS_19_FLAG
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_FLAG
/* CORE_STATUS_19 desc:  Core status_19*/
union CVE_DELPHI_CFG_MEM_CORE_STATUS_19_t {
	struct {
uint32_t  core_status_19       :  32;
/*   core status register - 19 */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_OFFSET 0xf8
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_SIZE 32
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_CORE_STATUS_19_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_CORE_STATUS_19_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_CORE_STATUS_19_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_CORE_STATUS_19_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_CORE_STATUS_19_CORE_STATUS_19_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_FLAG
/* PERF_CTRL_REG desc:  GEMM guard band reg*/
union CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_t {
	struct {
uint32_t  debug_visa_bus_sel   :   4;    /*  VISA bus select*/
uint32_t  perf_cnt_en          :   1;    /*  To enable /disable*/
/* performance counters.*/
uint32_t  perf_cnt_rst         :   1;
/*   To reset the perf counters. */
uint32_t  guard_band           :  26;    /*  Guard band register*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_OFFSET 0xfc
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_DEBUG_VISA_BUS_SEL_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_DEBUG_VISA_BUS_SEL_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_DEBUG_VISA_BUS_SEL_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_DEBUG_VISA_BUS_SEL_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_DEBUG_VISA_BUS_SEL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_EN_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_EN_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_EN_MASK 0x00000010
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_RST_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_RST_MSB 0x0005
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_RST_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_RST_MASK 0x00000020
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_PERF_CNT_RST_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_GUARD_BAND_LSB 0x0006
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_GUARD_BAND_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_GUARD_BAND_RANGE 0x001a
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_GUARD_BAND_MASK 0xffffffc0
#define CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_GUARD_BAND_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_FLAG

/*  LSU_IRAM_LOWER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation lower 32bits for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_iram :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for iram lsu channel.*/
/* Addresses are byte addresses*/
/* and possible values are 0 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_FLAG

/*  LSU_IRAM_HIGHER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation higher 32bits for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_t {
	struct {
uint32_t  addr1_high_field_iram :   3;
/*   Cache-line address register 1 */
/* for Ping Pong operation upper*/
/* 3 bits for iram lsu channel.*/
/* Addresses are byte addresses.*/
uint32_t  Reserved0            :  29;    /*  Reserved Field,*/
/* addr1_high_field_iram as not*/
/* used reserved.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_IRAM_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_IRAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_IRAM_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_IRAM_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes */
/* for addr1 register for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_iram      :  32;
/*   Data transfer Size in bytes */
/* for Iram LSU channel1. in GEMM*/
/* mode program it to*/
/* b_y_num_mb_in_spb **/
/* ifm_entry_size In other modes*/
/* Total Transfer size has to be*/
/* calculated. In any mode size*/
/* cannot be zero*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_FLAG

/*  LSU_IRAM_ADDR1_CONTROL_REG desc:  Control register for address1 of */
/* ping pong buffer for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_iram     :   1;
/*   Valid to trigger the LSU IRAM */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  addr1_refetch_count_iram :  16;
/*   Refetch of addr1_size_iram */
/* bytes happens these many*/
/* times. If 0, size bytes are*/
/* fetched from programmed*/
/* location only once and no*/
/* refetch happens. In batch mode*/
/* this needs to set to zero*/
/* since the refetch is handled*/
/* trough a isram loop5. It is*/
/* not used in GEMM mode and*/
/* shall be 0. If refetch is used*/
/* addr1_size_iram shall be <=*/
/* ifm_bid_size*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_iram          :   4;
/*   axi_en_iram[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_iram[1] -> 0-*/
/* wait for credits, 1- don't*/
/* wait for credits. (this bit is*/
/* applicable only with*/
/* axi_en_iram[0] = 0 ).*/
/* axi_en_iram[2] -> 0 - don't*/
/* wait for credit reset. 1- wait*/
/* for credit reset.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_OFFSET 0x0c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_VALID_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_VALID_IRAM_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_VALID_IRAM_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_VALID_IRAM_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_VALID_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_IRAM_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_IRAM_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_IRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_IRAM_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_AXI_EN_IRAM_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_AXI_EN_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_AXI_EN_IRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_AXI_EN_IRAM_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_AXI_EN_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_10_REG desc:  LSU Stride control 10 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_t {
	struct {
uint32_t  loop5_size_iram      :  32;
/*   used only if batch mode is */
/* enabled. In CNN mode.*/
/* If(batch_mode == 0) Should be*/
/* equal to 1. else //batch mode*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration In GEMM mode*/
/* programme this to reset value*/
/* 1. possible values : 1 to*/
/* 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_11_REG desc:  LSU Stride control 11 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_t {
	struct {
uint32_t  loop5_pitch_iram     :  32;
/*   In CNN mode. If(batch_mode == */
/* 0) Should be equal to 64. else*/
/* //batch mode Should be equal*/
/* to 0 In GEMM mode programme*/
/* this to reset value 64.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_12_REG desc:  LSU Stride control 12 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_t {
	struct {
uint32_t  loop6_size_iram      :  32;
/*   used only if batch mode is */
/* enabled. In CNN mode.*/
/* If(batch_mode == 0) Should be*/
/* equal to 1. else //batch mode*/
/* batch_size In GEMM mode*/
/* programme this to reset value*/
/* 1. possible values : 1 to*/
/* 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_OFFSET 0x18
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_13_REG desc:  LSU Stride control 13 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_t {
	struct {
uint32_t  loop6_pitch_iram     :  32;
/*   In CNN mode. If(batch_mode == */
/* 0) Should be equal to 64. else*/
/* //batch mode tile_width **/
/* tile_height * number_of_ifms*/
/* In GEMM mode programme this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_OFFSET 0x1c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_IFM_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_FLAG

/*  IFM_BID_REG desc:  Input feature maps physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_IFM_BID_REG_t {
	struct {
uint32_t  ifm_bid_size         :  32;
/*   Physical memory allocation */
/* size in bytes for ISRAM LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_OFFSET 0x20
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_IFM_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_IFM_BID_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_IFM_BID_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_IFM_BID_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_IFM_BID_REG_IFM_BID_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_FLAG

/*  IFM_ENTRY_SIZE_REG desc:  Input feature map credit allocation size */
/* */
union CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_t {
	struct {
uint32_t  ifm_entry_size       :  20;
/*   The size of one credit in */
/* bytes for ISRAM LSU channel*/
/* .Possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_OFFSET 0x24
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_IFM_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_IFM_ENTRY_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_IFM_ENTRY_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_IFM_ENTRY_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_IFM_ENTRY_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_IRAM_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for IRAM */
/* */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_iram_threshold_outstanding :   8;
/*   This is guard band for */
/* issuing outstanding requests.*/
/* These many locations are*/
/* deducted from the free space*/
/* available to make outstanding*/
/* requests. For CNN AXI: if*/
/* data_type = FP16*/
/* iram_threshold_outstanding =*/
/* (1024/(2**max_iram_rows_per_cl))-var_b;*/
/* else min_val = if(var_b > 112)*/
/* 112 else var_b;*/
/* iram_threshold_outstanding =*/
/* 128-min_val; SP:*/
/* iram_threshold_outstanding =*/
/* 255. GEMM mode set to 48 for*/
/* AXI fetch set to 255 for SP*/
/* fetch.*/
uint32_t  cfg_max_iram_rows_per_cl :   5;
/*   this is to convert free space */
/* coming from ISRAM in terms of*/
/* cache lines. For CNN/GCNN*/
/* var_a =*/
/* ceil{(isram_entry_cnt_per_ifm_row*/
/* * 64 * (ifm_size_rows +*/
/* ifm_row_pdg_at_ifm_bot +*/

/*  (ifm_row_pdg_at_ifm_top*2+1)))/(ifm_size_rows*ifm_size_cols)}; */
/* var_b = 1024/var_a; var_c =*/
/* ceil{1024/(255+var_b)}; if*/
/* data_type = FP16*/
/* max_iram_rows_per_cl =*/
/* ceil($clog2(var_c)); else*/
/* max_iram_rows_per_cl = 1; for*/
/* GEMM Mode max_iram_rows_per_cl*/
/* = 1*/
uint32_t  Reserved2            :   3;    /*  Reserved Field*/
uint32_t  cfg_iram_bypass_outstanding :   1;
/*   This is Debug bit. This shall */
/* be 0 If we set this bit to 1,*/
/* it will bypass the outstanding*/
/* requests.*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  iram_outstanding_interval :   5;
/*   CNN algo mode program it to - */
/* 0 ; GEMM and FC/DBNN algo mode*/
/* program this register to 2*/
/* (two byte case). in GEMM mode*/
/* we issue outstading requests,*/
/* and this request rate has to*/
/* be once in every*/
/* iram_outstading_interval*/
/* cycles.*/
uint32_t  Reserved0            :   3;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_OFFSET 0x28
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x07
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESET 0x00000100
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_MAX_IRAM_ROWS_PER_CL_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_MAX_IRAM_ROWS_PER_CL_MSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_MAX_IRAM_ROWS_PER_CL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_MAX_IRAM_ROWS_PER_CL_MASK 0x00001f00
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_MAX_IRAM_ROWS_PER_CL_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED2_LSB 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED2_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED2_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED2_MASK 0x0000e000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_BYPASS_OUTSTANDING_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_BYPASS_OUTSTANDING_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_BYPASS_OUTSTANDING_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_BYPASS_OUTSTANDING_MASK 0x00010000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_CFG_IRAM_BYPASS_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_IRAM_OUTSTANDING_INTERVAL_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_IRAM_OUTSTANDING_INTERVAL_MSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_IRAM_OUTSTANDING_INTERVAL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_IRAM_OUTSTANDING_INTERVAL_MASK 0x1f000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_IRAM_OUTSTANDING_INTERVAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xe0000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_iram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to 1 if each IFM in SP is*/
/* cache line aligned, and should*/
/* be equal no of cache lines of*/
/* effective slice row if each*/
/* IFM row in SP is cache line*/
/* aligned else //INT8*/
/* (data_type=1 and 2) This*/
/* should be equal to*/
/* ifm_simd_depth In GEMM mode*/
/* programme this to reset value*/
/* 1. possible values : 1 to*/
/* 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_OFFSET 0x2c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_2_REG desc:  LSU Stride control 2 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_t {
	struct {
uint32_t  loop1_pitch_iram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to 64. else //INT8*/
/* (data_type=1 and 2) Equal to*/
/* slice size*/
/* (tile_width*tile_height) in*/
/* bytes. In GEMM mode programme*/
/* this to reset value 64.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_OFFSET 0x30
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_3_REG desc:  LSU Stride control 3 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_t {
	struct {
uint32_t  loop2_size_iram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to no of cache lines of*/
/* effective slice if each IFM in*/
/* SP is cache line aligned, and*/
/* should be equal to no of rows*/
/* of effective slice if each IFM*/
/* row in SP is cache line*/
/* aligned else //INT8*/
/* (data_type=1 and 2) This*/
/* should be equal to 1 if each*/
/* IFM in SP is cache line*/
/* aligned, and should be equal*/
/* no of cache lines of effective*/
/* slice row if each IFM row in*/
/* SP is cache line aligned In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_OFFSET 0x34
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_4_REG desc:  LSU Stride control 4 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_t {
	struct {
uint32_t  loop2_pitch_iram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to 64 bytes if each IFM in SP*/
/* is cache line aligned, and*/
/* should be equal to slice row*/
/* size in bytes if each IFM row*/
/* in SP is cache line aligned.*/
/* else //INT8 (data_type=1 and*/
/* 2) This should be equal to 64*/
/* In GEMM mode programme this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_OFFSET 0x38
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_5_REG desc:  LSU Stride control 5 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_t {
	struct {
uint32_t  loop3_size_iram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 Should be equal to*/
/* no of slices. (no of IFMs).*/
/* else //INT8 (data_type=1 and*/
/* 2) This should be equal to no*/
/* of cache lines of effective*/
/* slice if each IFM in SP is*/
/* cache line aligned, and should*/
/* be equal to no of rows of*/
/* effective slice if each IFM*/
/* row in SP is cache line*/
/* aligned In GEMM mode programme*/
/* this to reset value 1.*/
/* possible values : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_OFFSET 0x3c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_6_REG desc:  LSU Stride control 6 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_t {
	struct {
uint32_t  loop3_pitch_iram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 Equal to slice size*/
/* (tile_width*tile_height) in*/
/* bytes. else //INT8*/
/* (data_type=1 and 2) This*/
/* should be equal to 64 bytes if*/
/* each IFM in SP is cache line*/
/* aligned, and should be equal*/
/* to slice row size in bytes if*/
/* each IFM row in SP is cache*/
/* line aligned. In GEMM mode*/
/* programme this to reset value*/
/* 64. possible values: 64 to*/
/* 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_OFFSET 0x40
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_7_REG desc:  LSU Stride control 7 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_t {
	struct {
uint32_t  loop4_size_iram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 Should be equal to*/
/* 1. else //INT8 (data_type=1*/
/* and 2) Program this to ceil(no*/
/* of slices/ ifm_simd_depth). In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_OFFSET 0x44
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_IRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_8_REG desc:  LSU Stride control 8 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_t {
	struct {
uint32_t  loop4_pitch_iram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 Should be equal to*/
/* 64. else //INT8 (data_type=1*/
/* and 2) Should be equal to*/
/* ifm_simd_depth**/
/* loop1_pitch_iram In GEMM mode*/
/* programme this to reset value*/
/* 64. possible values: 64 to*/
/* 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_OFFSET 0x48
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_FLAG

/*  LSU_IRAM_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register */
/* for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_iram      :  32;
/*   Map to work_pitch. (for both */
/* CNN and GEMM mode) Default*/
/* value [tile_width **/
/* tile_height * tile depth] in*/
/* bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_OFFSET 0x4c
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_WORK_PITCH_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_WORK_PITCH_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_WORK_PITCH_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_WORK_PITCH_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_WORK_PITCH_IRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_FLAG

/*  LSU_EXTRA_CREDITS_IRAM_REG desc:  LSU Invalid credits for IRAM */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_t {
	struct {
uint32_t  extra_credits_iram   :  16;
/*   In both CNN and GEMM mode */
/* whenever the invalid data for*/
/* IRAM buffer in a tile is more*/
/* than a credit, this should be*/
/* programmed with total credits*/
/* in a UoW - total valid*/
/* credits.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_OFFSET 0x50
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_EXTRA_CREDITS_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_EXTRA_CREDITS_IRAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_EXTRA_CREDITS_IRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_EXTRA_CREDITS_IRAM_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_EXTRA_CREDITS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_FLAG

/*  LSU_UOW_START_ADDR_IRAM_REG desc:  LSU UOW start addr offset for */
/* iram */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_t {
	struct {
uint32_t  uow_start_addr_offset_iram :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_OFFSET 0x54
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_UOW_START_ADDR_OFFSET_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_UOW_START_ADDR_OFFSET_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_UOW_START_ADDR_OFFSET_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_UOW_START_ADDR_OFFSET_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_UOW_START_ADDR_OFFSET_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_FLAG

/*  LSU_IRAM_HIGHER_ADDR_CTRL_REG desc:  lsu iram for work pitch and */
/* bid size higher address */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_t {
	struct {
uint32_t  ifm_bid_higher_size  :   3;
/*   ifm bid size higher 3 bits */
/* (34:32)*/
uint32_t  Reserved1            :  13;    /*  Reserved Field*/
uint32_t  work_pitch_higher_iram :   3;
/*   work pitch higher 3 bits */
/* (34:32)*/
uint32_t  Reserved0            :  13;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_OFFSET 0x58
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_IFM_BID_HIGHER_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_IFM_BID_HIGHER_SIZE_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_IFM_BID_HIGHER_SIZE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_IFM_BID_HIGHER_SIZE_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_IFM_BID_HIGHER_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED1_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED1_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED1_MASK 0x0000fff8
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_IRAM_MSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_IRAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_IRAM_MASK 0x00070000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED0_LSB 0x0013
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED0_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED0_MASK 0xfff80000
#define CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_FLAG

/*  LSU_BRAM_LOWER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation lower 32bits for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_bram :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for bram LSU*/
/* channel.Addresses are byte*/
/* addresses and possible values*/
/* are 0 .. 262080 (in increments*/
/* of 64). Bits [5:0] shall be 0*/
/* always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_OFFSET 0x60
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_FLAG

/*  LSU_BRAM_HIGHER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation higher 32bits for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_t {
	struct {
uint32_t  addr1_high_field_bram :   3;
/*   Higher 3 bits of AXI 35bit */
/* address for bram LSU channel.*/
/* Used only for kernel fetch*/
/* from system memory through AXI*/
/* interface.*/
uint32_t  Reserved0            :  29;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_OFFSET 0x64
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_BRAM_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_BRAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_BRAM_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_BRAM_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes */
/* for addr1 register for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_bram      :  32;
/*   Data transfer Size in bytes */
/* for Iram LSU channel1. in GEMM*/
/* mode program it to*/
/* a_y_num_mb_in_spb **/
/* weights_entry_size*/
/* (weights_entry_size represents*/
/* entry size for A matrix as*/
/* well) In other modes Total*/
/* Transfer size has to be*/
/* calculated. In any mode size*/
/* cannot be zero*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_OFFSET 0x68
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_FLAG

/*  LSU_BRAM_ADDR1_CONTROL_REG desc:  Control register for address1 of */
/* ping pong buffer for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_bram     :   1;
/*   Valid to trigger the LSU BRAM */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  addr1_refetch_count_bram :  16;
/*   Refetch of addr1_size_bram */
/* bytes happens these many*/
/* times. If 0, size bytes are*/
/* fetched from programmed*/
/* location only once and no*/
/* refetch happens. It is not*/
/* used in GEMM mode and shall be*/
/* 0. If refetch is used*/
/* addr1_size_bram shall be <=*/
/* kernel_bid_size*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_bram          :   4;
/*   axi_en_bram[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_bram[1] -> 0-*/
/* wait for credits, 1- don't*/
/* wait for credits. (this bit is*/
/* applicable only with*/
/* axi_en_iram[0] = 0 ).*/
/* axi_en_bram[2] -> 0 - don't*/
/* wait for credit reset. 1- wait*/
/* for credit reset.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_OFFSET 0x6c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_VALID_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_VALID_BRAM_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_VALID_BRAM_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_VALID_BRAM_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_VALID_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BRAM_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BRAM_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BRAM_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_AXI_EN_BRAM_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_AXI_EN_BRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_AXI_EN_BRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_AXI_EN_BRAM_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_AXI_EN_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_10_REG desc:  LSU Stride control 10 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_t {
	struct {
uint32_t  loop5_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 should be equalt to*/
/* If(ofm_streaming_to_sp_en)*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration else 1.*/
/* else //INT8 (data_type=1 and*/
/* 2) This should be equal to*/
/* If(ofm_streaming_to_sp_en)*/
/* number_of_ifms/*/
/* ifms_per_iram_normal Else 1*/
/* In GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_OFFSET 0x70
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_BRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_11_REG desc:  LSU Stride control 11 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_t {
	struct {
uint32_t  loop5_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 should be equalt to*/
/* If(ofm_streaming_to_sp_en)*/
/* if(axi_en) loop1_size_bram **/
/* loop3_size_bram else*/
/* loop2_pitch_bram * no of*/
/* slices (equal to Z-depth) else*/
/* 64. else //INT8 (data_type=1*/
/* and 2) This should be equal to*/
/* If(ofm_streaming_to_sp_en)*/
/* ifms_per_iram_normal*/
/* *loop1_pitch_bram Else 64 In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_OFFSET 0x74
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_12_REG desc:  LSU Stride control 12 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_t {
	struct {
uint32_t  loop6_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 should be equalt to*/
/* 1 else //INT8 (data_type=1 and*/
/* 2) This should be equal to*/
/* If(ofm_streaming_to_sp_en)*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration Else 1 In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_OFFSET 0x78
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_BRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_13_REG desc:  LSU Stride control 13 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_t {
	struct {
uint32_t  loop6_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 should be equalt to*/
/* 64 else //INT8 (data_type=1*/
/* and 2) This should be equal to*/
/* If(ofm_streaming_to_sp_en)*/
/* if(axi_en) loop2_size_bram **/
/* loop4_size_bram else*/
/* loop1_pitch_bram * no of*/
/* slices (equal to Z-depth) else*/
/* 64. In GEMM mode programme*/
/* this to reset value 1.*/
/* possible values : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_OFFSET 0x7c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_FLAG
/* WEIGHTS_BID_REG desc:  Weights physical memory allocation*/
union CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_t {
	struct {
uint32_t  weights_bid_size     :  32;
/*   Physical memory allocation */
/* size in bytes for BRAM LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_OFFSET 0x80
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_WEIGHTS_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_WEIGHTS_BID_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_WEIGHTS_BID_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_WEIGHTS_BID_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_WEIGHTS_BID_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_FLAG

/*  WEIGHTS_ENTRY_SIZE_REG desc:  Weights physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_t {
	struct {
uint32_t  weights_entry_size   :  20;
/*   The size of one credit in */
/* bytes for BSRAM LSU channel*/
/* .Possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_OFFSET 0x84
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_WEIGHTS_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_WEIGHTS_ENTRY_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_WEIGHTS_ENTRY_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_WEIGHTS_ENTRY_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_WEIGHTS_ENTRY_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_BRAM_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for BRAM */
/* */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_bram_threshold_outstanding :   8;
/*   This is guard band for */
/* issuing outstanding requests.*/
/* These many locations are*/
/* deducted from the free space*/
/* available to make outstanding*/
/* requests in both CNN and GEMM*/
/* mode it has to be programmed*/
/* to 0*/
uint32_t  cfg_max_bram_rows_per_cl :   5;
/*   this is to convert free space */
/* coming from BSRAM in terms of*/
/* cache lines. In both CNN and*/
/* GEMM algo mode*/
/* if(data_type==0) //FP16 this*/
/* shall be programmed to 2 else*/
/* //INT8 DFP or INT8 LOWP*/
/* program to 2 if*/
/* ifm_simd_depth=4, 3 if*/
/* ifm_simd_depth=2, 4 if*/
/* ifm_simd_depth=1.*/
uint32_t  Reserved2            :   3;    /*  Reserved Field*/
uint32_t  cfg_bram_bypass_outstanding :   1;
/*   This is Debug bit. This field */
/* shall be 0. If we set this bit*/
/* to 1, it will bypass the*/
/* outstanding requests.*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  bram_outstanding_interval :   5;
/*   In both CNN and GEMM algo */
/* mode program it to [2]*/
uint32_t  Reserved0            :   3;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_OFFSET 0x88
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x07
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESET 0x00000400
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_MAX_BRAM_ROWS_PER_CL_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_MAX_BRAM_ROWS_PER_CL_MSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_MAX_BRAM_ROWS_PER_CL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_MAX_BRAM_ROWS_PER_CL_MASK 0x00001f00
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_MAX_BRAM_ROWS_PER_CL_RESET_VALUE 0x00000004
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED2_LSB 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED2_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED2_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED2_MASK 0x0000e000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_BYPASS_OUTSTANDING_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_BYPASS_OUTSTANDING_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_BYPASS_OUTSTANDING_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_BYPASS_OUTSTANDING_MASK 0x00010000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_CFG_BRAM_BYPASS_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BRAM_OUTSTANDING_INTERVAL_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BRAM_OUTSTANDING_INTERVAL_MSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BRAM_OUTSTANDING_INTERVAL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BRAM_OUTSTANDING_INTERVAL_MASK 0x1f000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_BRAM_OUTSTANDING_INTERVAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xe0000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to ceil(var1**/
/* num_active_tiles*k^2 in bytes)*/
/* Where K is kernel_size var1=if*/
/* (ofm_streaming_to_sp_en)*/
/* local_ofms_per_iteration else*/
/* ofm_per_iteration else //INT8*/
/* (data_type=1 and 2) This*/
/* should be equal to*/
/* ifm_simd_depth *64 In GEMM*/
/* mode programme this to reset*/
/* value 1. possible values : 1*/
/* to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_OFFSET 0x8c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_2_REG desc:  LSU Stride control 2 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_t {
	struct {
uint32_t  loop1_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 Should be equal to*/
/* 64 else //INT8 (data_type=1*/
/* and 2) should be equal to*/
/* slice size in bytes*/
/* (tile_width*tile_height). Note*/
/* slice size changes based on*/
/* CGO solution and data layout*/
/* in SP/System memory. (Ex:*/
/* if(axi_en_bram) -->*/
/* ceil((cfg_k2 * total_ofms **/
/* num_active_tiles)/64)*64 else*/
/* ceil((cfg_k2 **/
/* ofm_per_iteration **/
/* num_active_tiles)/64)*64) In*/
/* GEMM mode programme this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_OFFSET 0x90
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_3_REG desc:  LSU Stride control 3 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_t {
	struct {
uint32_t  loop2_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to If(ofm_streaming_to_sp_en )*/
/* ifms_per_iram_normal *64 Else*/
/* no of slices (equal to*/
/* Z-depth) *64 else //INT8*/
/* (data_type=1 and 2) This*/
/* should be equal to ceil(var1**/
/* num_active_tiles*k^2 in bytes)*/
/* Where K is kernel_size*/
/* var1=if(ofm_streaming_to_sp_en)*/
/* local_ofms_per_iteration*/
/* else ofm_per_iteration In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_OFFSET 0x94
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_4_REG desc:  LSU Stride control 4 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_t {
	struct {
uint32_t  loop2_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to slice size in bytes*/
/* (tile_width*tile_height). note*/
/* slice size changes based on*/
/* CGO solution and data layout*/
/* in SP/System memory. (Ex:*/
/* if(axi_en_bram) -->*/
/* ceil((cfg_k2 * total_ofms **/
/* num_active_tiles)/64)*64 else*/
/* --> ceil((cfg_k2 **/
/* ofm_per_iteration **/
/* num_active_tiles)/64)*64) else*/
/* //INT8 (data_type=1 and 2)*/
/* should be equal to 64. In GEMM*/
/* mode programme this to reset*/
/* value 64. possible values: 64*/
/* to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_OFFSET 0x98
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_5_REG desc:  LSU Stride control 5 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_t {
	struct {
uint32_t  loop3_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to If(ofm_streaming_to_sp_en)*/
/* ofm_per_iteration/*/
/* local_ofms_per_iteration Else*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration (no of*/
/* DELPHI iterations). else*/
/* //INT8 (data_type=1 and 2)*/
/* Program this to*/
/* If(ofm_streaming_to_sp_en )*/
/* ceil(ifms_per_iram_normal/ifm_simd_depth)*/
/* Else ceil (no of*/
/* ifms/ifm_simd_depth) (equal to*/
/* ceil*/
/* (Z-depth/ifm_simd_depth)). In*/
/* GEMM mode programme this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_OFFSET 0x9c
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_BRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_6_REG desc:  LSU Stride control 6 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_t {
	struct {
uint32_t  loop3_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 This should be equal*/
/* to loop1_size_bram. else*/
/* //INT8 (data_type=1 and 2)*/
/* This should be equal to*/
/* ifm_simd_depth*loop1_pitch_bram.*/
/* In GEMM mode programme this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_OFFSET 0xa0
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_7_REG desc:  LSU Stride control 7 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_t {
	struct {
uint32_t  loop4_size_bram      :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16 should be equalt to*/
/* If(ofm_streaming_to_sp_en)*/
/* number_of_ifms/*/
/* ifms_per_iram_normal else 1.*/
/* else //INT8 (data_type=1 and*/
/* 2) This should be equal to*/
/* If(ofm_streaming_to_sp_en)*/
/* ofm_per_iteration/*/
/* local_ofms_per_iteration. Else*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration (no of*/
/* DELPHI iterations). In GEMM*/
/* mode programme this to reset*/
/* value 1. possible values : 1*/
/* to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_OFFSET 0xa4
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_BRAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_8_REG desc:  LSU Stride control 8 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_t {
	struct {
uint32_t  loop4_pitch_bram     :  32;
/*   In CNN mode. If(data_type == */
/* 0) //Fp16*/
/* If(ofm_streaming_to_sp_en)*/
/* ifms_per_iram_normal*/
/* *tile_width*tile_height Else*/
/* Should be equal to 64. else*/
/* //INT8 (data_type=1 and 2)*/
/* This should be equal to*/
/* loop2_size_bram In GEMM mode*/
/* programme this to reset value*/
/* 64. possible values: 64 to*/
/* 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_OFFSET 0xa8
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_bram      :  32;
/*   In both CNN and GEMM mode Map */
/* to work_pitch. Default value*/
/* tile_width * tile_height **/
/* tile depth in bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_OFFSET 0xac
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_WORK_PITCH_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_WORK_PITCH_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_WORK_PITCH_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_WORK_PITCH_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_WORK_PITCH_BRAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_FLAG

/*  LSU_EXTRA_CREDITS_BRAM_REG desc:  LSU Invalid credits for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_t {
	struct {
uint32_t  extra_credits_bram   :  16;
/*   whenever the invalid data for */
/* BRAM buffer in a tile is more*/
/* than a credit, this should be*/
/* programmed with total credits*/
/* in a UoW - total valid credits*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_OFFSET 0xb0
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_EXTRA_CREDITS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_EXTRA_CREDITS_BRAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_EXTRA_CREDITS_BRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_EXTRA_CREDITS_BRAM_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_EXTRA_CREDITS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_FLAG

/*  LSU_UOW_START_ADDR_BRAM_REG desc:  LSU UOW start addr offset for */
/* bram */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_t {
	struct {
uint32_t  uow_start_addr_offset_bram :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_OFFSET 0xb4
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_UOW_START_ADDR_OFFSET_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_UOW_START_ADDR_OFFSET_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_UOW_START_ADDR_OFFSET_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_UOW_START_ADDR_OFFSET_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_UOW_START_ADDR_OFFSET_BRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_FLAG

/*  LSU_BRAM_STRIDE_CTRL_14_REG desc:  LSU Stride control 10 register */
/* for BRAM */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_t {
	struct {
uint32_t  work_pitch_higher_bram :   3;
/*   Work_pitch_higher. Used only */
/* for kernel fetch from system*/
/* memory through AXI interface.*/
uint32_t  Reserved0            :  29;    /*  Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_OFFSET 0xb8
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_WORK_PITCH_HIGHER_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_WORK_PITCH_HIGHER_BRAM_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_WORK_PITCH_HIGHER_BRAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_WORK_PITCH_HIGHER_BRAM_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_WORK_PITCH_HIGHER_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_FLAG
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_FLAG

/*  WEIGHTS_BID_HIGHER_REG desc:  Weights physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_t {
	struct {
uint32_t  weights_bid_higher_size :   3;
/*   weights_bid_higher. Used only */
/* for kernel fetch from system*/
/* memory through AXI interface.*/
uint32_t  Reserved0            :  29;    /*  Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_OFFSET 0xbc
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_WEIGHTS_BID_HIGHER_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_WEIGHTS_BID_HIGHER_SIZE_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_WEIGHTS_BID_HIGHER_SIZE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_WEIGHTS_BID_HIGHER_SIZE_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_WEIGHTS_BID_HIGHER_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_FLAG

/*  LSU_ORAM_PF_LOWER_ADDR1_REG desc:  Address register 1 for Ping */
/* Pong operation lower 32bits for ORAM_PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_oram_pf :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for Partial Fetch LSU*/
/* channel. Addresses are byte*/
/* addresses and possible values*/
/* are 0 .. 262080 (in increments*/
/* of 64). Bits [5:0] shall be 0*/
/* always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_OFFSET 0xc0
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_PF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_PF_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_PF_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_PF_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_PF_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_FLAG

/*  LSU_ORAM_PF_HIGHER_ADDR1_REG desc:  Address register 1 for Ping */
/* Pong operation higher 32bits for ORAM_PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Reserved Field, addr higer */
/* field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_OFFSET 0xc4
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG desc:  Size of access in bytes */
/* for addr1 register for ORAM_PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_oram_pf   :  32;
/*   Data transfer Size in bytes */
/* for Partial OFM in oram LSU*/
/* channel1. For GEMM it is =*/
/* (c_y_num_mb_in_spb **/
/* c_x_num_mb_in_spb)*/
/* *(osram_pof_size * NUM_PE **/
/* num_active_tiles * 2).*/
/* osram_pof_size is the number*/
/* of OSRAM rows occupied by 1*/
/* MB. Refer delphi_core sheet*/
/* description for more details*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_OFFSET 0xc8
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_PF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_PF_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_PF_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_PF_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_PF_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_FLAG

/*  LSU_ORAM_PF_ADDR1_CONTROL_REG desc:  Control register for address1 */
/* of ping pong buffer for ORAM_PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_oram_pf  :   1;
/*   Valid to trigger the LSU ORAM */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  addr1_refetch_count_oram_pf :  16;
/*   Refetch of addr1_size_oram_pf */
/* bytes happens these many*/
/* times. If 0, size bytes are*/
/* fetched from programmed*/
/* location only once and no*/
/* refetch happens. In CNN mode*/
/* not used. In GEMM mode if bias*/
/* is enabled, this should be*/
/* programmed to*/
/* a_y_num_mb_in_spb*/
uint32_t  Reserved0            :  15;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_OFFSET 0xcc
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_PF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_PF_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_PF_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_PF_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_PF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ORAM_PF_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ORAM_PF_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ORAM_PF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ORAM_PF_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ORAM_PF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESERVED0_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESERVED0_MASK 0xfffe0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_FLAG

/*  LSU_ORAM_PF_LOWER_ADDR2_REG desc:  Address register 2 for Ping */
/* Pong operation lower 32bits for PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Not used for ACVE. Address */
/* register 2 for Ping Pong*/
/* operation lower 32bits for*/
/* oram_pf*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_OFFSET 0xd0
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_FLAG

/*  LSU_ORAM_PF_HIGHER_ADDR2_REG desc:  Address register 2 for Ping */
/* Pong operation higher 32bits for PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Reserved Field, address */
/* higher field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_OFFSET 0xd4
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_FLAG

/*  LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG desc:  transfer size register */
/* 1 for Ping Pong operation PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Not used for ACVE. Data */
/* transfer Size for Partial OFM*/
/* in oram LSU channel2*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_OFFSET 0xd8
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_FLAG

/*  LSU_ORAM_PF_ADDR2_CONTROL_REG desc:  Control register for address2 */
/* of ping pong buffer for PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_t {
	struct {
uint32_t  Reserved0            :  32;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_OFFSET 0xdc
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_POFM_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_FLAG

/*  POFM_BID_REG desc:  Partial Output feature maps physical memory */
/* allocation */
union CVE_DELPHI_CFG_MEM_POFM_BID_REG_t {
	struct {
uint32_t  pofm_bid_size        :  20;
/*   Physical memory allocation */
/* size in bytes for Partal Fetch*/
/* ORAM LSU channel in SP.*/
/* Address pointer would roll*/
/* back to the starting address*/
/* after reading this much data.*/
/* Size in in terms of bytes and*/
/* possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
/* (Range indicates only*/
/* capapbility in RTL)*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_OFFSET 0xe0
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_POFM_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_POFM_BID_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_POFM_BID_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_POFM_BID_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_POFM_BID_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_POFM_BID_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_FLAG

/*  POFM_ENTRY_SIZE_REG desc:  Partial Output feature map credit */
/* allocation size */
union CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_t {
	struct {
uint32_t  pofm_entry_size      :  20;
/*   The size of one credit in */
/* bytes for partial fetch ORAM*/
/* LSU channel .Possible values*/
/* are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_OFFSET 0xe4
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_POFM_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_POFM_ENTRY_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_POFM_ENTRY_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_POFM_ENTRY_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_POFM_ENTRY_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_ORAM_PF_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for */
/* ORAM_PF */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_oram_pf_threshold_outstanding :   8;
/*   Not used in ACVE. Reset value */
/* (of 0) has to be preserved.*/
/* This is guard band for issuing*/
/* outstanding requests. These*/
/* many locations are deducted*/
/* from the free space available*/
/* to make outstanding requests.*/
uint32_t  cfg_max_oram_pf_rows_per_cl :   5;
/*   This is to convert free space */
/* coming from ORAM_PF controller*/
/* in terms of cache lines. This*/
/* shall be programmed to 1*/
uint32_t  Reserved2            :   3;    /*  Reserved Field*/
uint32_t  cfg_oram_pf_bypass_outstanding :   1;
/*   This is Debug bit. This shall */
/* be 0. If we set this bit to 1,*/
/* it will bypass the outstanding*/
/* requests.*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  oram_outstanding_interval :   5;
/*   partial fetch oram */
/* outstanding interval count*/
/* This should be programmed to*/
/* the value of 2. this is*/
/* applicable for all the algo*/
/* modes.*/
uint32_t  Reserved0            :   3;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_OFFSET 0xe8
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x07
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESET 0x00000200
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_MAX_ORAM_PF_ROWS_PER_CL_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_MAX_ORAM_PF_ROWS_PER_CL_MSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_MAX_ORAM_PF_ROWS_PER_CL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_MAX_ORAM_PF_ROWS_PER_CL_MASK 0x00001f00
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_MAX_ORAM_PF_ROWS_PER_CL_RESET_VALUE 0x00000002
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED2_LSB 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED2_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED2_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED2_MASK 0x0000e000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_BYPASS_OUTSTANDING_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_BYPASS_OUTSTANDING_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_BYPASS_OUTSTANDING_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_BYPASS_OUTSTANDING_MASK 0x00010000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_CFG_ORAM_PF_BYPASS_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_ORAM_OUTSTANDING_INTERVAL_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_ORAM_OUTSTANDING_INTERVAL_MSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_ORAM_OUTSTANDING_INTERVAL_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_ORAM_OUTSTANDING_INTERVAL_MASK 0x1f000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_ORAM_OUTSTANDING_INTERVAL_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xe0000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_pof       :  16;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Map to h_size.*/
/* This should be equal to 1 if*/
/* pos_data_32byte_aligned bit is*/
/* set to 1, and else should be*/
/* equal to no of cache lines of*/
/* effective slice row else*/
/* //bias fetch when*/
/* first_unit_of_work = 1 Map to*/
/* h_size. This should be equal*/
/* to size of all biases in terms*/
/* of cache line In GEMM mode Map*/
/* to h_size. //if bias is*/
/* enabled This should be equal*/
/* to size of all biases in terms*/
/* of cache line possible values*/
/* : 1 to 4095.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_OFFSET 0xec
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_LOOP1_SIZE_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_LOOP1_SIZE_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_LOOP1_SIZE_POF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_LOOP1_SIZE_POF_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_LOOP1_SIZE_POF_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_2_REG desc:  LSU Stride control 2 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_t {
	struct {
uint32_t  loop1_pitch_pof      :  18;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Not used in pof*/
/* fetch. Should be equal to 64*/
/* bytes. else //bias fetch when*/
/* first_unit_of_work = 1 Not*/
/* used in bias fetch. Should be*/
/* equal to 64 bytes. In GEMM*/
/* mode Program this to reset*/
/* value 64 possible values: 64*/
/* to 262080*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_OFFSET 0xf0
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_LOOP1_PITCH_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_LOOP1_PITCH_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_LOOP1_PITCH_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_LOOP1_PITCH_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_LOOP1_PITCH_POF_RESET_VALUE 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_3_REG desc:  LSU Stride control 3 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_t {
	struct {
uint32_t  loop2_size_pof       :  16;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Map to z_size.*/
/* This should be equal to*/
/* If(ofm_streaming_to_sp_en==0)*/
/* ofm_per_iteration **/
/* num_active_tiles. Else*/
/* local_ofm_per_iteration **/
/* num_active_tiles. else //bias*/
/* fetch when first_unit_of_work*/
/* = 1 Not used in bias fetch.*/
/* Should be equal to 1. In GEMM*/
/* mode Program this to reset*/
/* value 1. possible values : 1*/
/* to 4095.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_OFFSET 0xf4
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_LOOP2_SIZE_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_LOOP2_SIZE_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_LOOP2_SIZE_POF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_LOOP2_SIZE_POF_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_LOOP2_SIZE_POF_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_4_REG desc:  LSU Stride control 4 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_t {
	struct {
uint32_t  loop2_pitch_pof      :  18;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Map to v_pitch.*/
/* This should be equal to slice*/
/* size in bytes*/
/* (tile_width*tile_height) else*/
/* //bias fetch when*/
/* first_unit_of_work = 1 Should*/
/* be equal to*/
/* tile_size(tile_width*tile_height)*/
/* In GEMM mode Should be equal*/
/* to*/
/* tile_size(tile_width*tile_height)*/
/* if bias is enabled. possible*/
/* values: 64 to 262080*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_OFFSET 0xf8
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_LOOP2_PITCH_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_LOOP2_PITCH_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_LOOP2_PITCH_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_LOOP2_PITCH_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_LOOP2_PITCH_POF_RESET_VALUE 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_5_REG desc:  LSU Stride control 5 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_t {
	struct {
uint32_t  loop3_size_pof       :  16;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Map to v_size.*/
/* This should be equal to no of*/
/* rows of OFM/2 if*/
/* pos_data_32byte_aligned bit is*/
/* set to 1, and else should be*/
/* equal to no of rows of OFM*/
/* else //bias fetch when*/
/* first_unit_of_work = 1 Not*/
/* used in bias fetch. Should be*/
/* equal to 1. In GEMM mode*/
/* Program this to reset value 1*/
/* possible values : 1 to 4095.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_OFFSET 0xfc
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_LOOP3_SIZE_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_LOOP3_SIZE_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_LOOP3_SIZE_POF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_LOOP3_SIZE_POF_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_LOOP3_SIZE_POF_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_6_REG desc:  LSU Stride control 6 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_t {
	struct {
uint32_t  loop3_pitch_pof      :  18;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Map to h_pitch.*/
/* Equal to 2*slice row size or*/
/* tile width in bytes if*/
/* pos_data_32byte_aligned bit is*/
/* set to 1, and else should be*/
/* equal slice row size or tile*/
/* width in bytes else //bias*/
/* fetch when first_unit_of_work*/
/* = 1 Not used in bias fetch.*/
/* Should be equal to 64 bytes.*/
/* In GEMM mode Program this to*/
/* reset value 64 possible*/
/* values: 64 to 262080*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_LOOP3_PITCH_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_LOOP3_PITCH_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_LOOP3_PITCH_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_LOOP3_PITCH_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_LOOP3_PITCH_POF_RESET_VALUE 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_7_REG desc:  LSU Stride control 7 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_t {
	struct {
uint32_t  loop4_size_pof       :  16;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch This should be*/
/* equal to*/
/* If(ofm_streaming_to_sp_en==0)*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration (no of*/
/* DELPHI iterations). Else*/
/* ofm_per_iteration/*/
/* local_ofm_per_iteration. else*/
/* //bias fetch when*/
/* first_unit_of_work = 1 Not*/
/* used in bias fetch. Should be*/
/* equal to 1. In GEMM mode*/
/* Program this to reset value 1*/
/* possible values : 1 to 4095.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_LOOP4_SIZE_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_LOOP4_SIZE_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_LOOP4_SIZE_POF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_LOOP4_SIZE_POF_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_LOOP4_SIZE_POF_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_8_REG desc:  LSU Stride control 8 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_t {
	struct {
uint32_t  loop4_pitch_pof      :  18;    /*  In CNN mode*/
/* if(first_unit_of_work == 0) //*/
/* partial fetch Equal to*/
/* slice_size in bytes **/
/* ofm_per_iteration **/
/* num_active_tiles*/
/* If(ofm_streaming_to_sp_en==0)*/
/* slice_size in bytes **/
/* ofm_per_iteration **/
/* num_active_tiles. Else*/
/* slice_size in bytes **/
/* local_ofm_per_iteration **/
/* num_active_tiles. else //bias*/
/* fetch when first_unit_of_work*/
/* = 1 Not used in bias fetch.*/
/* Should be equal to [64 bytes].*/
/* In GEMM mode Program this to*/
/* reset value [64] possible*/
/* values: 64 to 262080*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_LOOP4_PITCH_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_LOOP4_PITCH_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_LOOP4_PITCH_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_LOOP4_PITCH_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_LOOP4_PITCH_POF_RESET_VALUE 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_FLAG

/*  LSU_POF_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register for */
/* POF */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_pof       :  18;
/*   In Both CNN and GEMM mode Map */
/* to work_pitch. Default value*/
/* tile_width * tile_height **/
/* tile depth in bytes.*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_OFFSET 0x0c
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_WORK_PITCH_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_WORK_PITCH_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_WORK_PITCH_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_WORK_PITCH_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_WORK_PITCH_POF_RESET_VALUE 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_FLAG
/* LSU_EXTRA_CREDITS_POF_REG desc:  LSU Invalid credits for POF*/
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_t {
	struct {
uint32_t  extra_credits_pof    :  16;
/*   Whenever the invalid data POF */
/* buffer in a tile is more than*/
/* a credit, this should be*/
/* programmed with total credits*/
/* in a UoW - total valid*/
/* credits.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_EXTRA_CREDITS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_EXTRA_CREDITS_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_EXTRA_CREDITS_POF_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_EXTRA_CREDITS_POF_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_EXTRA_CREDITS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_FLAG

/*  LSU_UOW_START_ADDR_POF_REG desc:  LSU UOW start addr offset for */
/* pof */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_t {
	struct {
uint32_t  uow_start_addr_offset_pof :  18;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
uint32_t  Reserved0            :  14;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_UOW_START_ADDR_OFFSET_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_UOW_START_ADDR_OFFSET_POF_MSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_UOW_START_ADDR_OFFSET_POF_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_UOW_START_ADDR_OFFSET_POF_MASK 0x0003ffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_UOW_START_ADDR_OFFSET_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESERVED0_LSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESERVED0_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESERVED0_MASK 0xfffc0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_FLAG

/*  LSU_ORAM_LOWER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation lower 32bits for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_oram :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for iram lsu channel.*/
/* Addresses are byte addresses*/
/* and possible values are 0 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_OFFSET 0x20
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_FLAG

/*  LSU_ORAM_HIGHER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation higher 32bits for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_t {
	struct {
uint32_t  addr1_high_field_oram :   3;
/*   higher bits for oram address. */
uint32_t  Reserved0            :  29;
/*   HIGHER FIELD FOR ORAM, */
/* Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_OFFSET 0x24
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_ORAM_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_ORAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_ORAM_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_ADDR1_HIGH_FIELD_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_ORAM_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes */
/* for addr1 register for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_oram      :  32;
/*   Data transfer Size in bytes */
/* for oram LSU channel1. In GEMM*/
/* mode program total transfer*/
/* size.(Total SPB size in*/
/* bytes). For GEMM, in case of*/
/* partial save it is =*/
/* (c_y_num_mb_in_spb **/
/* c_x_num_mb_in_spb)*/
/* *(osram_pof_size * NUM_PE **/
/* num_active_tiles * 2).*/
/* osram_pof_size is the number*/
/* of OSRAM rows occupied by 1*/
/* MB. Refer delphi_core sheet*/
/* description for more details.*/
/* For final save, the size would*/
/* be*/

/*  */
/* oram_transfer_size_temp=(c_rows+((num_active_tiles-c_rows%num_active_tiles)%num_active_tiles))*(c_cols+((32-c_cols%32)%32))*2; */
/* */
/* and*/

/*  */
/* oram_transfer_size=ceil(oram_transfer_size_temp/ofm_entry_size_local)*ofm_entry_size_local; */
/* */
/* Where c_rows is the total*/
/* number of matrix rows in C-SPB*/
/* and c_cols is the total number*/
/* of columns in C-SPB*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_OFFSET 0x28
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_FLAG

/*  LSU_ORAM_ADDR1_CONTROL_REG desc:  Control register for address1 of */
/* ping pong buffer for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_oram     :   1;
/*   Valid to trigger the LSU ORAM */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  RSVD_0               :  16;
/*  Nebulon auto filled RSVD [16:1] */
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_oram          :   4;
/*   axi_en_oram[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_oram[1] -> 0-*/
/* always zero (not applicable).*/
/* axi_en_oram[2] -> 0 - always*/
/* zero (not applicable).*/
/* Axi_en_oram[3] -> reserved.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_OFFSET 0x2c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_ADDR1_VALID_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_AXI_EN_ORAM_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_AXI_EN_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_AXI_EN_ORAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_AXI_EN_ORAM_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_AXI_EN_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_FLAG

/*  LSU_ORAM_LOWER_ADDR2_REG desc:  Address register 2 for Ping Pong */
/* operation lower 32bits for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Not used for ACVE. Address */
/* register 2 for Ping Pong*/
/* operation lower 32bits for*/
/* oram*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_OFFSET 0x30
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_FLAG

/*  LSU_ORAM_HIGHER_ADDR2_REG desc:  Address register 2 for Ping Pong */
/* operation higher 32bits forORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_t {
	struct {
uint32_t  Reserved0            :  32;
/*   Not used for ACVE. Address */
/* register 2 for Ping Pong*/
/* operation lower 32bits for*/
/* oram*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_OFFSET 0x34
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESERVED0_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESERVED0_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESERVED0_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_FLAG
/* AXI_USER_INFO_ORAM_REG desc:  AXI user info oram register*/
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_t {
	struct {
uint32_t  axi_arcache_oram     :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_oram      :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_oram :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_OFFSET 0x38
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARCACHE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARCACHE_ORAM_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARCACHE_ORAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARCACHE_ORAM_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARCACHE_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_ORAM_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_ORAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_ORAM_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_EXTEND_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_EXTEND_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_EXTEND_ORAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_EXTEND_ORAM_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_AXI_ARUSER_EXTEND_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_FLAG

/*  LSU_ORAM_HIGHER_ADDR_CTRL_REG desc:  work pitch bid size higher */
/* address fields */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_t {
	struct {
uint32_t  ofm_bid_higher_size  :   3;    /*  higher bits for*/
/* ofm_bid_size_reg*/
uint32_t  Reserved1            :  13;    /*  Reserved Field*/
uint32_t  work_pitch_higher_oram :   3;    /*  higher bits for*/
/* work_pitch_oram register*/
uint32_t  Reserved0            :  13;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFFSET 0x3c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFM_BID_HIGHER_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFM_BID_HIGHER_SIZE_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFM_BID_HIGHER_SIZE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFM_BID_HIGHER_SIZE_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_OFM_BID_HIGHER_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED1_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED1_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED1_MASK 0x0000fff8
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_ORAM_MSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_ORAM_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_ORAM_MASK 0x00070000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_WORK_PITCH_HIGHER_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED0_LSB 0x0013
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED0_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED0_MASK 0xfff80000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_OFM_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_FLAG

/*  OFM_BID_REG desc:  Output feature maps physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_OFM_BID_REG_t {
	struct {
uint32_t  ofm_bid_size         :  32;
/*   Physical memory allocation */
/* size in bytes for ORAM LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFFSET 0x40
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFM_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFM_BID_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFM_BID_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFM_BID_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_OFM_BID_REG_OFM_BID_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_FLAG

/*  OFM_ENTRY_SIZE_REG desc:  Output feature map credit allocation */
/* size */
union CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_t {
	struct {
uint32_t  ofm_entry_size       :  32;
/*   The size of one credit in */
/* bytes for ORAM LSU channel*/
/* .Possible values are 64 ..*/
/* 4,294,967,296 (in increments*/
/* of 64). Bits [5:0] shall be 0*/
/* always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFFSET 0x44
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFM_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFM_ENTRY_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFM_ENTRY_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFM_ENTRY_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_OFM_ENTRY_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_oram      :  32;    /*  In CNN mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save*/
/* If(num_active_tiles > 2)*/
/* program it to STREAM_OUT_PIPE,*/
/* where STREAM_OUT_PIPE = 4 else*/
/* if (num_active_tiles == 2)*/
/* Program it to 2 else Program*/
/* it to 1 else // partial save*/
/* This should be equal to 1 if*/
/* each ofm_row_size <= 32 bytes,*/
/* and should be equal no of*/
/* cache lines of effective slice*/
/* row or ofm_row if each*/
/* ofm_row_size > 32 bytes In*/
/* GEMM mode Prodram this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_OFFSET 0x48
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_LOOP1_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_2_REG desc:  LSU Stride control 2 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_t {
	struct {
uint32_t  loop1_pitch_oram     :  32;    /*  In CNN mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save Equal to*/
/* tile_width*tile_height in*/
/* bytes. else // partial save*/
/* Not used in pos. Should be*/
/* equal to 64. In GEMM mode*/
/* Prodram this to reset value*/
/* 64. possible values: 64 to*/
/* 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_OFFSET 0x4c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_LOOP1_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_3_REG desc:  LSU Stride control 3 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_t {
	struct {
uint32_t  loop2_size_oram      :  32;    /*  In CNN mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save Map to h_size.*/
/* This should be equal to 1 if*/
/* each OFM in SP is cache line*/
/* aligned, and should be equal*/
/* no of cache lines of effective*/
/* slice row if each OFM row in*/
/* SP is cache line aligned else*/
/* // partial save Map to z_size.*/
/* If(ofm_streaming_to_sp_en==0)*/
/* ofm_per_iteration **/
/* num_active_tiles. Else*/
/* local_ofm_per_iteration **/
/* num_active_tiles. In GEMM mode*/
/* Prodram this to reset value 1.*/
/* possible values : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_OFFSET 0x50
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_LOOP2_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_4_REG desc:  LSU Stride control 4 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_t {
	struct {
uint32_t  loop2_pitch_oram     :  32;    /*  In CNN Mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save Should be equal*/
/* to 64. else // partial save*/
/* Map to v_pitch. This should be*/
/* equal to slice size in bytes*/
/* (tile_width*tile_height) In*/
/* GEMM mode Prodram this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_OFFSET 0x54
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_LOOP2_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_5_REG desc:  LSU Stride control 5 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_t {
	struct {
uint32_t  loop3_size_oram      :  32;    /*  In CNN Mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save Map to v_size.*/
/* This should be equal to no of*/
/* cache lines of effective slice*/
/* if each OFM in SP is cache*/
/* line aligned, and should be*/
/* equal to no of rows of*/
/* effective slice if each OFM*/
/* row in SP is cache line*/
/* aligned else // partial save*/
/* Map to v_size. This should be*/
/* equal to no of rows of OFM/2*/
/* if each ofm_row_size <= 32*/
/* bytes, and should be equal no*/
/* of rows of OFM if each*/
/* ofm_row_size > 32 bytes In*/
/* GEMM mode Prodram this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_OFFSET 0x58
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_LOOP3_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_6_REG desc:  LSU Stride control 6 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_t {
	struct {
uint32_t  loop3_pitch_oram     :  32;    /*  In CNN Mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save Map to h_pitch.*/
/* This should be equal to 64 if*/
/* each OFM in SP is cache line*/
/* aligned, and should be equal*/
/* to slice row size in bytes if*/
/* each OFM row in SP is cache*/
/* line aligned. else // partial*/
/* save Map to h_pitch. Equal to*/
/* slice row size or tile width*/
/* in bytes. In GEMM mode Prodram*/
/* this to reset value 64.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_OFFSET 0x5c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_LOOP3_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_7_REG desc:  LSU Stride control 7 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_t {
	struct {
uint32_t  loop4_size_oram      :  32;    /*  In CNN Mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save If*/
/* (num_active_tiles > 2) Number*/
/* of slices/STREAM_OUT_PIPE,*/
/* where STREAM_OUT_PIPE = 4.*/
/* else if (num_active_tiles ==*/
/* 2) Program it to 2 else*/
/* Number of slices. else //*/
/* partial save This should be*/
/* equal to*/
/* If(ofm_streaming_to_sp_en==0)*/
/* number_of_ofms_per_tile/*/
/* ofm_per_iteration (no of*/
/* DELPHI iterations). Else*/
/* ofm_per_iteration/*/
/* local_ofm_per_iteration In*/
/* GEMM mode Prodram this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_OFFSET 0x60
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_LOOP4_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_8_REG desc:  LSU Stride control 8 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_t {
	struct {
uint32_t  loop4_pitch_oram     :  32;    /*  In CNN Mode*/
/* if(last_unit_of_work == 1 )*/
/* //final save If*/
/* (num_active_tiles > 2) slice*/
/* size * STREAM_OUT_PIPE, where*/
/* STREAM_OUT_PIPE = 4. else if*/
/* (num_active_tiles == 2)*/
/* Program it to 2 else slice*/
/* size where slice_size=*/
/* tile_width*tile_height in*/
/* bytes else // partial save*/
/* Equal to*/
/* If(ofm_streaming_to_sp_en==0)*/
/* slice_size in bytes **/
/* ofm_per_iteration **/
/* num_active_tiles Else*/
/* slice_size in bytes **/
/* local_ofm_per_iteration **/
/* num_active_tiles In GEMM mode*/
/* Prodram this to reset value 1.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_OFFSET 0x64
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_LOOP4_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_oram      :  32;
/*   In Both CNN and GEMM mode Map */
/* to work_pitch. Default value*/
/* tile_width * tile_height **/
/* tile depth in bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_OFFSET 0x68
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_WORK_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_WORK_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_WORK_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_WORK_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_WORK_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_FLAG

/*  LSU_EXTRA_CREDITS_ORAM_REG desc:  LSU Invalid credits for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_t {
	struct {
uint32_t  extra_credits_oram   :  16;
/*   whenever the invalid data for */
/* ORAM buffer in a tile is more*/
/* than a credit, this should be*/
/* programmed with total credits*/
/* in a UoW - total valid*/
/* credits. Possible range 0 to*/
/* 4095.*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_OFFSET 0x6c
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_EXTRA_CREDITS_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_EXTRA_CREDITS_ORAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_EXTRA_CREDITS_ORAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_EXTRA_CREDITS_ORAM_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_EXTRA_CREDITS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_FLAG

/*  LSU_COMPLETION_MSG_REG desc:  LSU completion msg indication enable */
/* */
union CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_t {
	struct {
uint32_t  completion_msg_en    :   1;
/*   when this bit is set, DELPHI */
/* will wait for dummy output*/
/* credits and release them and*/
/* finish UoW. This can be used*/
/* in partial retention mode*/
/* where actual output crredits*/
/* not required for a UoW and*/
/* still requires completion*/
/* message from DELPHI in terms*/
/* of credits release.*/
uint32_t  Reserved0            :  31;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_OFFSET 0x70
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_COMPLETION_MSG_EN_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_COMPLETION_MSG_EN_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_COMPLETION_MSG_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_COMPLETION_MSG_EN_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_COMPLETION_MSG_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESERVED0_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESERVED0_RANGE 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESERVED0_MASK 0xfffffffe
#define CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_FLAG

/*  LSU_UOW_START_ADDR_ORAM_REG desc:  LSU UOW start addr offset for */
/* ORAM */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_t {
	struct {
uint32_t  uow_start_addr_offset_oram :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_OFFSET 0x74
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_UOW_START_ADDR_OFFSET_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_UOW_START_ADDR_OFFSET_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_UOW_START_ADDR_OFFSET_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_UOW_START_ADDR_OFFSET_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_UOW_START_ADDR_OFFSET_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_FLAG

/*  LSU_INTR_STATUS_REG desc:  Status of various interrupts. Set by */
/* h/w cleared by s/w */
union CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_t {
	struct {
uint32_t  lsu_intr_status      :  32;    /* */
/* {addr2_status_oram,addr1_status_oram,*/
/* addr2_status_bram,*/
/* addr1_status_bram,*/
/* addr2_status_iram,*/
/* addr1_status_iram} - exposed*/
/* to interrupt line if*/
/* corresponding SIGNAL_ENABLE*/
/* bit is set*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_OFFSET 0x80
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_LSU_INTR_STATUS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_LSU_INTR_STATUS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_LSU_INTR_STATUS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_LSU_INTR_STATUS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_LSU_INTR_STATUS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_FLAG

/*  LSU_INTR_ENABLE_REG desc:  Interrupt is registered only if this */
/* bit is set. If this is 0, */
/* corresponding LSU_INTR_STATUS bit is also 0*/
union CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_t {
	struct {
uint32_t  lsu_intr_enable      :  32;    /* */
/* addr2_status_oram,addr1_status_oram,*/
/* addr2_status_bram,*/
/* addr1_status_bram,*/
/* addr2_status_iram,*/
/* addr1_status_iram - register*/
/* these only if enable is high*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_OFFSET 0x84
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_LSU_INTR_ENABLE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_LSU_INTR_ENABLE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_LSU_INTR_ENABLE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_LSU_INTR_ENABLE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_LSU_INTR_ENABLE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_FLAG

/*  LSU_INTR_SIGNAL_ENABLE_REG desc:  LSU_INTR_STATUS is exposed to */
/* interrupt pin only if corresponding */
/* LSU_INTR_STATUS_SIGNAL_ENABLE bit is set*/
union CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_t {
	struct {
uint32_t  lsu_intr_signal_enable :  32;    /* */
/* addr2_status_oram,addr1_status_oram,*/
/* addr2_status_bram,*/
/* addr1_status_bram,*/
/* addr2_status_iram,*/
/* addr1_status_iram*/
/* SIGNAL_ENABLE*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_OFFSET 0x88
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_LSU_INTR_SIGNAL_ENABLE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_LSU_INTR_SIGNAL_ENABLE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_LSU_INTR_SIGNAL_ENABLE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_LSU_INTR_SIGNAL_ENABLE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_LSU_INTR_SIGNAL_ENABLE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_FLAG

/*  WR_NON_POSTED_CTRL_REG desc:  Write non posted control register */
/* */
union CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_t {
	struct {
uint32_t  non_posted_write_step :  15;
/*   This will determine how often */
/* a non-posted write should be*/
/* done. cve_wr_non_posted will*/
/* be issued on every*/
/* (non_posted_write_step*(ofm_entry_size/64)*/
/* )th write.*/
uint32_t  Reserved0            :  17;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_OFFSET 0x8c
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_NON_POSTED_WRITE_STEP_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_NON_POSTED_WRITE_STEP_MSB 0x000e
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_NON_POSTED_WRITE_STEP_RANGE 0x000f
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_NON_POSTED_WRITE_STEP_MASK 0x00007fff
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_NON_POSTED_WRITE_STEP_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESERVED0_LSB 0x000f
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESERVED0_RANGE 0x0011
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESERVED0_MASK 0xffff8000
#define CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_FLAG
/* AXI_USER_INFO_BRAM_REG desc:  AXI user info bram register*/
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_t {
	struct {
uint32_t  axi_arcache_bram     :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_bram      :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_bram :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_OFFSET 0x90
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARCACHE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARCACHE_BRAM_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARCACHE_BRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARCACHE_BRAM_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARCACHE_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_BRAM_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_BRAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_BRAM_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_EXTEND_BRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_EXTEND_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_EXTEND_BRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_EXTEND_BRAM_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_AXI_ARUSER_EXTEND_BRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_FLAG
/* AXI_USER_INFO_IRAM_REG desc:  AXI user info iram register*/
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_t {
	struct {
uint32_t  axi_arcache_iram     :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_iram      :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_iram :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_OFFSET 0x94
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARCACHE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARCACHE_IRAM_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARCACHE_IRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARCACHE_IRAM_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARCACHE_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_IRAM_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_IRAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_IRAM_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_EXTEND_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_EXTEND_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_EXTEND_IRAM_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_EXTEND_IRAM_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_AXI_ARUSER_EXTEND_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_FLAG
/* STATE_0_CREDIT_STATUS_1 desc:  State 0 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_t {
	struct {
uint32_t  s0_crd_status_bram   :  12;
/*   State 0 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s0_crd_status_iram   :  12;
/*   State 0 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_OFFSET 0x98
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_S0_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_FLAG
/* STATE_0_CREDIT_STATUS_2 desc:  State 0 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_t {
	struct {
uint32_t  s0_crd_status_pof    :  12;
/*   State 0 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s0_crd_status_oram   :  12;
/*   State 0 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_OFFSET 0x9c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_S0_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_FLAG
/* STATE_1_CREDIT_STATUS_1 desc:  State 1 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_t {
	struct {
uint32_t  s1_crd_status_bram   :  12;
/*   State 1 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s1_crd_status_iram   :  12;
/*   State 1 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_OFFSET 0xa0
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_S1_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_FLAG
/* STATE_1_CREDIT_STATUS_2 desc:  State 1 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_t {
	struct {
uint32_t  s1_crd_status_pof    :  12;
/*   State 1 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s1_crd_status_oram   :  12;
/*   State 1 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_OFFSET 0xa4
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_S1_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_FLAG
/* STATE_2_CREDIT_STATUS_1 desc:  State 2 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_t {
	struct {
uint32_t  s2_crd_status_bram   :  12;
/*   State 2 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s2_crd_status_iram   :  12;
/*   State 2 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_OFFSET 0xa8
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_S2_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_FLAG
/* STATE_2_CREDIT_STATUS_2 desc:  State 2 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_t {
	struct {
uint32_t  s2_crd_status_pof    :  12;
/*   State 2 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s2_crd_status_oram   :  12;
/*   State 2 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_OFFSET 0xac
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_S2_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_FLAG
/* STATE_3_CREDIT_STATUS_1 desc:  State 3 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_t {
	struct {
uint32_t  s3_crd_status_bram   :  12;
/*   State 3 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s3_crd_status_iram   :  12;
/*   State 3 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_OFFSET 0xb0
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_S3_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_FLAG
/* STATE_3_CREDIT_STATUS_2 desc:  State 3 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_t {
	struct {
uint32_t  s3_crd_status_pof    :  12;
/*   State 3 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s3_crd_status_oram   :  12;
/*   State 3 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_OFFSET 0xb4
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_S3_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_FLAG
/* STATE_4_CREDIT_STATUS_1 desc:  State 4 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_t {
	struct {
uint32_t  s4_crd_status_bram   :  12;
/*   State 4 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s4_crd_status_iram   :  12;
/*   State 4 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_OFFSET 0xb8
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_S4_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_FLAG
/* STATE_4_CREDIT_STATUS_2 desc:  State 4 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_t {
	struct {
uint32_t  s4_crd_status_pof    :  12;
/*   State 4 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s4_crd_status_oram   :  12;
/*   State 4 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_OFFSET 0xbc
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_S4_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_FLAG
/* STATE_5_CREDIT_STATUS_1 desc:  State 5 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_t {
	struct {
uint32_t  s5_crd_status_bram   :  12;
/*   State 5 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s5_crd_status_iram   :  12;
/*   State 5 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_OFFSET 0xc0
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_S5_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_FLAG
/* STATE_5_CREDIT_STATUS_2 desc:  State 5 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_t {
	struct {
uint32_t  s5_crd_status_pof    :  12;
/*   State 5 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s5_crd_status_oram   :  12;
/*   State 5 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_OFFSET 0xc4
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_S5_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_FLAG
/* STATE_6_CREDIT_STATUS_1 desc:  State 6 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_t {
	struct {
uint32_t  s6_crd_status_bram   :  12;
/*   State 6 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s6_crd_status_iram   :  12;
/*   State 6 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_OFFSET 0xc8
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_S6_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_FLAG
/* STATE_6_CREDIT_STATUS_2 desc:  State 6 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_t {
	struct {
uint32_t  s6_crd_status_pof    :  12;
/*   State 6 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s6_crd_status_oram   :  12;
/*   State 6 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_OFFSET 0xcc
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_S6_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_FLAG
/* STATE_7_CREDIT_STATUS_1 desc:  State 7 Credit status_1*/
union CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_t {
	struct {
uint32_t  s7_crd_status_bram   :  12;
/*   State 7 BRAM Credit status */
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s7_crd_status_iram   :  12;
/*   State 7 IRAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_OFFSET 0xd0
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_S7_CRD_STATUS_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_FLAG
/* STATE_7_CREDIT_STATUS_2 desc:  State 7 Credit status_2*/
union CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_t {
	struct {
uint32_t  s7_crd_status_pof    :  12;
/*   State 7 POF channel Credit */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  s7_crd_status_oram   :  12;
/*   State 7 ORAM Credit status */
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_OFFSET 0xd4
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_S7_CRD_STATUS_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_FLAG
/* LSU_CH_STATUS_1 desc:  LSU channel status_1*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_t {
	struct {
uint32_t  ch_addr_bram         :  11;    /*  BRAM Address status*/
uint32_t  Reserved1            :   1;    /*  Reserved Field*/
uint32_t  data_xfer_fsm_ps_q_bram :   4;    /*  BRAM FSM status*/
uint32_t  ch_addr_iram         :  11;    /*  IRAM Address status*/
uint32_t  Reserved0            :   1;    /*  Reserved Field*/
uint32_t  data_xfer_fsm_ps_q_iram :   4;    /*  IRAM FSM status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_OFFSET 0xd8
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_BRAM_MSB 0x000a
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_BRAM_RANGE 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_BRAM_MASK 0x000007ff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED1_LSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED1_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED1_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED1_MASK 0x00000800
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_BRAM_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_BRAM_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_BRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_BRAM_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_IRAM_MSB 0x001a
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_IRAM_RANGE 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_IRAM_MASK 0x07ff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_CH_ADDR_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED0_LSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED0_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED0_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED0_MASK 0x08000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_IRAM_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_IRAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_IRAM_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_DATA_XFER_FSM_PS_Q_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_FLAG
/* LSU_CH_STATUS_2 desc:  LSU channel status_2*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_t {
	struct {
uint32_t  ch_addr_pof          :  11;    /*  POF Address status*/
uint32_t  Reserved1            :   1;    /*  Reserved Field*/
uint32_t  data_xfer_fsm_ps_q_pof :   4;    /*  POF FSM status*/
uint32_t  ch_addr_oram         :  11;    /*  ORAM Address status*/
uint32_t  Reserved0            :   1;    /*  Reserved Field*/
uint32_t  data_xfer_fsm_ps_q_oram :   4;    /*  ORAM FSM status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_OFFSET 0xdc
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_POF_MSB 0x000a
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_POF_RANGE 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_POF_MASK 0x000007ff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED1_LSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED1_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED1_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED1_MASK 0x00000800
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_POF_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_POF_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_POF_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_POF_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_ORAM_MSB 0x001a
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_ORAM_RANGE 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_ORAM_MASK 0x07ff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_CH_ADDR_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED0_LSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED0_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED0_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED0_MASK 0x08000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_RESERVED0_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_ORAM_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_ORAM_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_ORAM_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_DATA_XFER_FSM_PS_Q_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_FLAG
/* LSU_CH_STATUS_3 desc:  LSU channel status_3*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_t {
	struct {
uint32_t  ch_size_bram         :  32;    /*  BRAM Size status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_OFFSET 0xe0
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_CH_SIZE_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_CH_SIZE_BRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_CH_SIZE_BRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_CH_SIZE_BRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_CH_SIZE_BRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_FLAG
/* LSU_CH_STATUS_4 desc:  LSU channel status_4*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_t {
	struct {
uint32_t  ch_size_iram         :  32;    /*  IRAM Size status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_OFFSET 0xe4
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_CH_SIZE_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_CH_SIZE_IRAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_CH_SIZE_IRAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_CH_SIZE_IRAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_CH_SIZE_IRAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_FLAG
/* LSU_CH_STATUS_5 desc:  LSU channel status_5*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_t {
	struct {
uint32_t  ch_size_pof          :  32;    /*  POF Size status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_OFFSET 0xe8
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_CH_SIZE_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_CH_SIZE_POF_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_CH_SIZE_POF_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_CH_SIZE_POF_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_CH_SIZE_POF_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_FLAG
/* LSU_CH_STATUS_6 desc:  LSU channel status_6*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_t {
	struct {
uint32_t  ch_size_oram         :  32;    /*  ORAM Size status*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_OFFSET 0xec
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_CH_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_CH_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_CH_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_CH_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_CH_SIZE_ORAM_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_FLAG
/* LSU_CH_STATUS_7 desc:  LSU channel status_7*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_t {
	struct {
uint32_t  ch_credit_update_cnt_acc_bram :  12;
/*   STATE 0 BRAM Credit Update */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  ch_credit_release_cnt_acc_bram :  12;
/*   STATE 0 BRAM Credit Release */
/* status*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_OFFSET 0xf0
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_UPDATE_CNT_ACC_BRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_UPDATE_CNT_ACC_BRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_UPDATE_CNT_ACC_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_UPDATE_CNT_ACC_BRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_UPDATE_CNT_ACC_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_RELEASE_CNT_ACC_BRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_RELEASE_CNT_ACC_BRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_RELEASE_CNT_ACC_BRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_RELEASE_CNT_ACC_BRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_CH_CREDIT_RELEASE_CNT_ACC_BRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_FLAG
/* LSU_CH_STATUS_8 desc:  LSU channel status_8*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_t {
	struct {
uint32_t  ch_credit_update_cnt_acc_iram :  12;
/*   STATE 0 IRAM Credit Update */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  ch_credit_release_cnt_acc_iram :  12;
/*   STATE 0 IRAM Credit Release */
/* status*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_OFFSET 0xf4
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_UPDATE_CNT_ACC_IRAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_UPDATE_CNT_ACC_IRAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_UPDATE_CNT_ACC_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_UPDATE_CNT_ACC_IRAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_UPDATE_CNT_ACC_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_RELEASE_CNT_ACC_IRAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_RELEASE_CNT_ACC_IRAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_RELEASE_CNT_ACC_IRAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_RELEASE_CNT_ACC_IRAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_CH_CREDIT_RELEASE_CNT_ACC_IRAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_FLAG
/* LSU_CH_STATUS_9 desc:  LSU channel status_9*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_t {
	struct {
uint32_t  ch_credit_update_cnt_acc_pof :  12;
/*   STATE 0 POF Credit Update */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  ch_credit_release_cnt_acc_pof :  12;
/*   STATE 0 POF Credit Release */
/* status*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_OFFSET 0xf8
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_UPDATE_CNT_ACC_POF_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_UPDATE_CNT_ACC_POF_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_UPDATE_CNT_ACC_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_UPDATE_CNT_ACC_POF_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_UPDATE_CNT_ACC_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_RELEASE_CNT_ACC_POF_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_RELEASE_CNT_ACC_POF_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_RELEASE_CNT_ACC_POF_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_RELEASE_CNT_ACC_POF_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_CH_CREDIT_RELEASE_CNT_ACC_POF_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_FLAG
/* LSU_CH_STATUS_10 desc:  LSU channel status_10*/
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_t {
	struct {
uint32_t  ch_credit_update_cnt_acc_oram :  12;
/*   STATE 0 ORAM Credit Update */
/* status*/
uint32_t  Reserved1            :   4;    /*  Reserved Field*/
uint32_t  ch_credit_release_cnt_acc_oram :  12;
/*   STATE 0 ORAM Credit Release */
/* status*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_OFFSET 0xfc
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_UPDATE_CNT_ACC_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_UPDATE_CNT_ACC_ORAM_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_UPDATE_CNT_ACC_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_UPDATE_CNT_ACC_ORAM_MASK 0x00000fff
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_UPDATE_CNT_ACC_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED1_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED1_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED1_MASK 0x0000f000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_RELEASE_CNT_ACC_ORAM_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_RELEASE_CNT_ACC_ORAM_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_RELEASE_CNT_ACC_ORAM_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_RELEASE_CNT_ACC_ORAM_MASK 0x0fff0000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_CH_CREDIT_RELEASE_CNT_ACC_ORAM_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_FLAG
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_FLAG
/* COM_CRD_UPD_REG desc:  CBB Comon Credit Update Register*/
union CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_t {
	struct {
uint32_t  crd_update           :   1;
/*   This is a valid bit for */
/* credit updates. This should be*/
/* set to 1 while publishing*/
/* credits to DELPHI*/
uint32_t  last_input           :   1;
/*   It indicates that the last */
/* credit updates for input*/
/* streams. CBBs should produce*/
/* the last output based on this*/
/* and should not expect any more*/
/* data.*/
uint32_t  state_id             :   8;
/*   State id: Valid values 0-5 */
uint32_t  stream_id            :   6;
/*   The stream_id identfifies */
/* which input or output this*/
/* credit update applies to*/
/* 6'b000000 - Kernel weights*/
/* read 6'b000001 - Input Feature*/
/* Map read 6'b000010 - Partial*/
/* Outputs read 6'b000011 -*/
/* Partial Outputs/Outputs writes*/
/* 6'b000100 - BIAS read*/
/* 6'b000101 - PCQ read*/
uint32_t  num_credits          :  16;
/*   The number of credits */
/* received for consumption or*/
/* allocated for production*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_CRD_UPDATE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_CRD_UPDATE_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_CRD_UPDATE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_CRD_UPDATE_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_CRD_UPDATE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_LAST_INPUT_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_LAST_INPUT_MSB 0x0001
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_LAST_INPUT_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_LAST_INPUT_MASK 0x00000002
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_LAST_INPUT_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STATE_ID_LSB 0x0002
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STATE_ID_MSB 0x0009
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STATE_ID_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STATE_ID_MASK 0x000003fc
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STATE_ID_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STREAM_ID_LSB 0x000a
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STREAM_ID_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STREAM_ID_RANGE 0x0006
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STREAM_ID_MASK 0x0000fc00
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_STREAM_ID_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_NUM_CREDITS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_NUM_CREDITS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_NUM_CREDITS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_NUM_CREDITS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_NUM_CREDITS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_FLAG
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_FLAG
/* COM_STATE_MSG_REG desc:  CBB Comon state CNC message*/
union CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_t {
	struct {
uint32_t  state_msg_valid      :   1;
/*   This is a valid bit for state */
/* message. This should be set to*/
/* 1.*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  state_msg_num_patch  :   8;
/*   this filed will tell DELPHI */
/* the number of patches(UoW)*/
/* needs to be executed for a*/
/* given state.*/
uint32_t  state_msg_id         :   8;
/*   this is to inform DELPHI the */
/* Physical state number to*/
/* switch. Possible values are*/
/* from 0 to 5.*/
uint32_t  Reserved0            :   8;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_VALID_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_VALID_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_VALID_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_VALID_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_VALID_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED1_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED1_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED1_MASK 0x000000fe
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_NUM_PATCH_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_NUM_PATCH_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_NUM_PATCH_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_NUM_PATCH_MASK 0x0000ff00
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_NUM_PATCH_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_ID_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_ID_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_ID_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_ID_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_STATE_MSG_ID_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED0_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED0_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED0_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_FLAG

/*  LSU_PCQ_LOWER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation lower 32bits for PCQ */
/* (Per-Channel Quantization)*/
union CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_pcq  :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for pcq (per-channel*/
/* offset ) lsu channel.*/
/* Addresses are byte addresses*/
/* and possible values are 0 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_OFFSET 0x50
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_PCQ_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_PCQ_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_PCQ_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_PCQ_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes for */
/* addr1 register for PCQ */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_pcq       :  32;
/*   program transfer size. */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_OFFSET 0x54
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_PCQ_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_PCQ_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_PCQ_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_FLAG

/*  LSU_PCQ_ADDR1_CONTROL_REG desc:  Control register for address1 of */
/* ping pong buffer for PCQ */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_pcq      :   1;
/*   Valid to trigger the LSU PCQ */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  addr1_refetch_count_pcq :  16;
/*   Refetch of addr1_size_pcq */
/* bytes happens these many*/
/* times. If 0, size bytes are*/
/* fetched from programmed*/
/* location only once and no*/
/* refetch happens. It is not*/
/* used in GEMM mode and shall be*/
/* 0. If refetch is used*/
/* addr1_size_pcq shall be <=*/
/* ifm_bid_size*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_pcq           :   4;
/*   axi_en_pcq[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_pcq[1] -> 0-*/
/* wait for credits, 1- don't*/
/* wait for credits. (this bit is*/
/* applicable only with*/
/* axi_en_pcq[0] = 0 ).*/
/* axi_en_pcq[2] -> 0 - don't*/
/* wait for credit reset. 1- wait*/
/* for credit reset.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_OFFSET 0x58
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_VALID_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_VALID_PCQ_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_VALID_PCQ_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_VALID_PCQ_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_VALID_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_PCQ_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_PCQ_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_PCQ_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_PCQ_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_AXI_EN_PCQ_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_AXI_EN_PCQ_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_AXI_EN_PCQ_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_AXI_EN_PCQ_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_AXI_EN_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_PCQ_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_FLAG

/*  PCQ_BID_REG desc:  Per-Channel Offset physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_PCQ_BID_REG_t {
	struct {
uint32_t  pcq_bid_size         :  32;
/*   Physical memory allocation */
/* size in bytes for PCQ LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_OFFSET 0x5c
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_PCQ_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_PCQ_BID_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_PCQ_BID_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_PCQ_BID_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_PCQ_BID_REG_PCQ_BID_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_FLAG

/*  PCQ_ENTRY_SIZE_REG desc:  Per-Channel Offset credit allocation */
/* size */
union CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_t {
	struct {
uint32_t  pcq_entry_size       :  20;
/*   The size of one credit in */
/* bytes for PCQ LSU channel*/
/* .Possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_OFFSET 0x60
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_PCQ_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_PCQ_ENTRY_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_PCQ_ENTRY_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_PCQ_ENTRY_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_PCQ_ENTRY_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_PCQ_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for PCQ */
/* */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_pcq_threshold_outstanding :   8;
/*   This is guard band for */
/* issuing outstanding requests.*/
/* These many locations are*/
/* deducted from the free space*/
/* available to make outstanding*/
/* requests. For CNN mode and*/
/* GEMM mode for SP fetch program*/
/* to 255 for AXI fetch program*/
/* to 6 if num_active_tiles = 32*/
/* else program 255.*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_OFFSET 0x64
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_CFG_PCQ_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_CFG_PCQ_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_CFG_PCQ_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_CFG_PCQ_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_CFG_PCQ_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_FLAG

/*  LSU_UOW_START_ADDR_PCQ_REG desc:  LSU UOW start addr offset for */
/* PCQ */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_t {
	struct {
uint32_t  uow_start_addr_offset_pcq :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_OFFSET 0x68
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_UOW_START_ADDR_OFFSET_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_UOW_START_ADDR_OFFSET_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_UOW_START_ADDR_OFFSET_PCQ_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_UOW_START_ADDR_OFFSET_PCQ_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_UOW_START_ADDR_OFFSET_PCQ_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_FLAG

/*  LSU_PCQ_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register for */
/* PCQ */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_pcq       :  32;
/*   Data transfer Size in units */
/* of number of Cache Lines for*/
/* PCQ LSU channel In any mode*/
/* size cannot be zero*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_OFFSET 0x6c
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_LOOP1_SIZE_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_LOOP1_SIZE_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_LOOP1_SIZE_PCQ_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_LOOP1_SIZE_PCQ_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_LOOP1_SIZE_PCQ_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_FLAG

/*  LSU_PCQ_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register for */
/* PCQ */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_pcq       :  32;
/*   Map to work_pitch. (for both */
/* CNN and GEMM mode) Default*/
/* value [tile_width **/
/* tile_height * tile depth] in*/
/* bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_OFFSET 0x70
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_WORK_PITCH_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_WORK_PITCH_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_WORK_PITCH_PCQ_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_WORK_PITCH_PCQ_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_WORK_PITCH_PCQ_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_FLAG

/*  LSU_NXT_CONFIG_START_LOWER_ADDR_REG desc:  Lower Address of Next */
/* config register base in system memory */
union CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_t {
	struct {
uint32_t  nxt_config_start_lower_addr :  32;
/*   Base address of config */
/* registers in system memory,*/
/* when delphi operates in config*/
/* blob fetch mode.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_OFFSET 0x74
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_NXT_CONFIG_START_LOWER_ADDR_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_NXT_CONFIG_START_LOWER_ADDR_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_NXT_CONFIG_START_LOWER_ADDR_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_NXT_CONFIG_START_LOWER_ADDR_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_NXT_CONFIG_START_LOWER_ADDR_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_FLAG

/*  LSU_NXT_CONFIG_START_HIGHER_ADDR_REG desc:  Higher Address of Next */
/* config register base in system memory */
union CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_t {
	struct {
uint32_t  nxt_config_start_higher_addr :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved3            :   5;    /*  Reserved Field*/
uint32_t  addr1_high_field_pcq :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved2            :   5;    /*  Reserved Field*/
uint32_t  pcq_bid_higher_size  :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved1            :   5;    /*  Reserved Field*/
uint32_t  work_pitch_higher_pcq :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved0            :   5;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_OFFSET 0x78
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_BITFIELD_COUNT 0x08
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_NXT_CONFIG_START_HIGHER_ADDR_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_NXT_CONFIG_START_HIGHER_ADDR_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_NXT_CONFIG_START_HIGHER_ADDR_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_NXT_CONFIG_START_HIGHER_ADDR_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_NXT_CONFIG_START_HIGHER_ADDR_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED3_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED3_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED3_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED3_MASK 0x000000f8
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED3_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_PCQ_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_PCQ_MSB 0x000a
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_PCQ_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_PCQ_MASK 0x00000700
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED2_LSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED2_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED2_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED2_MASK 0x0000f800
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_PCQ_BID_HIGHER_SIZE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_PCQ_BID_HIGHER_SIZE_MSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_PCQ_BID_HIGHER_SIZE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_PCQ_BID_HIGHER_SIZE_MASK 0x00070000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_PCQ_BID_HIGHER_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED1_LSB 0x0013
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED1_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED1_MASK 0x00f80000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_PCQ_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_PCQ_MSB 0x001a
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_PCQ_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_PCQ_MASK 0x07000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED0_LSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED0_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED0_MASK 0xf8000000
#define CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_FLAG
/* LSU_NUM_PATCH desc:  Num Patch count*/
union CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_t {
	struct {
uint32_t  num_patch            :   8;
/*   This filed will tell DELPHI */
/* the number of patches(UoW)*/
/* needs to be executed for a*/
/* given state in conifig blob*/
/* fetch mode.*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_OFFSET 0x7c
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_NUM_PATCH_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_NUM_PATCH_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_NUM_PATCH_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_NUM_PATCH_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_NUM_PATCH_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_FLAG
/* LSU_LAST_INPUT desc:  Last Input indication*/
union CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_t {
	struct {
uint32_t  last_input           :   1;
/*   It indicates that the last */
/* UOW for Delphi. DELPHI sends*/
/* output last along with output*/
/* credits at the end of UoW*/
/* (last patch of that state).*/
uint32_t  Reserved0            :  31;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_OFFSET 0x80
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_LAST_INPUT_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_LAST_INPUT_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_LAST_INPUT_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_LAST_INPUT_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_LAST_INPUT_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESERVED0_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESERVED0_RANGE 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESERVED0_MASK 0xfffffffe
#define CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_FLAG

/*  IFM_CREDIT_GRANNULARITY desc:  Input feature map credit */
/* grannularity */
union CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  ifm_credit_grannularity :  14;
/*   IFM credit grannularity */
uint32_t  Reserved0            :  18;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_OFFSET 0x84
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_IFM_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_IFM_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_IFM_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_IFM_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_IFM_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESERVED0_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESERVED0_MASK 0xffffc000
#define CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_FLAG

/*  WEIGHTS_CREDIT_GRANNULARITY desc:  Weights physical memory */
/* grannularity */
union CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  weights_credit_grannularity :  14;
/*   weights credit grannularity */
uint32_t  Reserved0            :  18;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_OFFSET 0x88
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_WEIGHTS_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_WEIGHTS_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_WEIGHTS_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_WEIGHTS_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_WEIGHTS_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESERVED0_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESERVED0_MASK 0xffffc000
#define CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_FLAG

/*  POFM_CREDIT_GRANNULARITY desc:  Partial Output feature map credit */
/* grannulariy */
union CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  pofm_credit_grannularity :  14;
/*   POFM credit grannularity */
uint32_t  Reserved0            :  18;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_OFFSET 0x8c
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_POFM_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_POFM_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_POFM_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_POFM_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_POFM_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESERVED0_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESERVED0_MASK 0xffffc000
#define CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_FLAG

/*  OFM_CREDIT_GRANNULARITY desc:  Output feature map credit */
/* grannularity */
union CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  ofm_credit_grannularity :  14;
/*   OFM credit grannularity */
uint32_t  Reserved0            :  18;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFFSET 0x90
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFM_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFM_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFM_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFM_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_OFM_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESERVED0_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESERVED0_MASK 0xffffc000
#define CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_FLAG
/* PCQ_CREDIT_GRANNULARITY desc:  PCQ credit grannularity*/
union CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  pcq_credit_grannularity :  14;
/*   PCQ credit grannularity */
uint32_t  Reserved0            :  18;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_OFFSET 0x94
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_PCQ_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_PCQ_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_PCQ_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_PCQ_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_PCQ_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESERVED0_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0012
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESERVED0_MASK 0xffffc000
#define CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_FLAG
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_FLAG
/* BIAS_CREDIT_GRANNULARITY desc:  BIAS credit grannularity*/
union CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_t {
	struct {
uint32_t  bias_credit_grannularity :  14;
/*   bias credit grannularity */
uint32_t  Reserved1            :   2;    /*  Reserved Field*/
uint32_t  eltwise_credit_grannularity :  14;
/*   eltwise credit grannularity */
uint32_t  Reserved0            :   2;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_OFFSET 0x98
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_SIZE 32
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BIAS_CREDIT_GRANNULARITY_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BIAS_CREDIT_GRANNULARITY_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BIAS_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BIAS_CREDIT_GRANNULARITY_MASK 0x00003fff
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_BIAS_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED1_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED1_RANGE 0x0002
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED1_MASK 0x0000c000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_ELTWISE_CREDIT_GRANNULARITY_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_ELTWISE_CREDIT_GRANNULARITY_MSB 0x001d
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_ELTWISE_CREDIT_GRANNULARITY_RANGE 0x000e
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_ELTWISE_CREDIT_GRANNULARITY_MASK 0x3fff0000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_ELTWISE_CREDIT_GRANNULARITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED0_LSB 0x001e
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED0_RANGE 0x0002
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED0_MASK 0xc0000000
#define CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_FLAG

/*  LSU_BIAS_LOWER_ADDR1_REG desc:  Address register 1 for Ping Pong */
/* operation lower 32bits for BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_bias :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for bias lsu channel.*/
/* Addresses are byte addresses*/
/* and possible values are 0 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_OFFSET 0x9c
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BIAS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BIAS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_BIAS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_BIAS_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes */
/* for addr1 register for BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_bias      :  32;
/*   program transfer size. */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_OFFSET 0xa0
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BIAS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BIAS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_BIAS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_FLAG

/*  LSU_BIAS_ADDR1_CONTROL_REG desc:  Control register for address1 of */
/* ping pong buffer for BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_bias     :   1;
/*   Valid to trigger the LSU BIAS */
/* Ch1 data transfer. All other*/
/* registers of this channel*/
/* should have been programmed*/
/* before this bit is set. No*/
/* change in definition in GEMM*/
/* mode.*/
uint32_t  addr1_refetch_count_bias :  16;
/*   Refetch of addr1_size_bias */
/* bytes happens these many*/
/* times. If 0, size bytes are*/
/* fetched from programmed*/
/* location only once and no*/
/* refetch happens. It is not*/
/* used in GEMM mode and shall be*/
/* 0. If refetch is used*/
/* addr1_size_bias shall be <=*/
/* ifm_bid_size*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_bias          :   4;
/*   axi_en_bias[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_bias[1] -> 0-*/
/* wait for credits, 1- don't*/
/* wait for credits. (this bit is*/
/* applicable only with*/
/* axi_en_bias[0] = 0 ).*/
/* axi_en_bias[2] -> 0 - don't*/
/* wait for credit reset. 1- wait*/
/* for credit reset.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_OFFSET 0xa4
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_VALID_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_VALID_BIAS_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_VALID_BIAS_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_VALID_BIAS_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_VALID_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BIAS_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BIAS_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BIAS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BIAS_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_AXI_EN_BIAS_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_AXI_EN_BIAS_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_AXI_EN_BIAS_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_AXI_EN_BIAS_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_AXI_EN_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_BIAS_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_FLAG
/* BIAS_BID_REG desc:  BIAS physical memory allocation*/
union CVE_DELPHI_CFG_MEM_BIAS_BID_REG_t {
	struct {
uint32_t  bias_bid_size        :  32;
/*   Physical memory allocation */
/* size in bytes for BIAS LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_OFFSET 0xa8
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BIAS_BID_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BIAS_BID_SIZE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BIAS_BID_SIZE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BIAS_BID_SIZE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_BIAS_BID_REG_BIAS_BID_SIZE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_FLAG
/* BIAS_ENTRY_SIZE_REG desc:  BIAS credit allocation size*/
union CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_t {
	struct {
uint32_t  bias_entry_size      :  20;
/*   The size of one credit in */
/* bytes for BIAS LSU channel*/
/* .Possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_OFFSET 0xac
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BIAS_ENTRY_SIZE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BIAS_ENTRY_SIZE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BIAS_ENTRY_SIZE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BIAS_ENTRY_SIZE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_BIAS_ENTRY_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_BIAS_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for BIAS */
/* */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_bias_threshold_outstanding :   8;
/*   This is guard band for */
/* issuing outstanding requests.*/
/* These many locations are*/
/* deducted from the free space*/
/* available to make outstanding*/
/* requests. For CNN mode and*/
/* GEMM mode for SP fetch program*/
/* to 255. for AXI fetch prrogram*/
/* to 6 if num_active_tile=32*/
/* else program to 255.*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_OFFSET 0xb0
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_CFG_BIAS_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_CFG_BIAS_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_CFG_BIAS_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_CFG_BIAS_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_CFG_BIAS_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_FLAG

/*  LSU_UOW_START_ADDR_BIAS_REG desc:  LSU UOW start addr offset for */
/* BIAS */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_t {
	struct {
uint32_t  uow_start_addr_offset_bias :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_OFFSET 0xb4
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_UOW_START_ADDR_OFFSET_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_UOW_START_ADDR_OFFSET_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_UOW_START_ADDR_OFFSET_BIAS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_UOW_START_ADDR_OFFSET_BIAS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_UOW_START_ADDR_OFFSET_BIAS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_FLAG

/*  LSU_BIAS_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register */
/* for BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_bias      :  32;
/*   Data transfer Size in units */
/* of number of Cache Lines for*/
/* BIAS LSU channel In any mode*/
/* size cannot be zero*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_OFFSET 0xb8
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_LOOP1_SIZE_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_LOOP1_SIZE_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_LOOP1_SIZE_BIAS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_LOOP1_SIZE_BIAS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_LOOP1_SIZE_BIAS_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_FLAG

/*  LSU_BIAS_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register */
/* for BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_bias      :  32;
/*   Map to work_pitch. (for both */
/* CNN and GEMM mode) Default*/
/* value [tile_width **/
/* tile_height * tile depth] in*/
/* bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_OFFSET 0xbc
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_WORK_PITCH_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_WORK_PITCH_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_WORK_PITCH_BIAS_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_WORK_PITCH_BIAS_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_WORK_PITCH_BIAS_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_FLAG

/*  LSU_BIAS_CONFIG_HIGHER_ADDR_REG desc:  LSU Higher Address of */
/* config regsiter BIAS */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_t {
	struct {
uint32_t  addr1_high_field_bias :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved2            :   5;    /*  Reserved Field*/
uint32_t  bias_bid_higher_size :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved1            :   5;    /*  Reserved Field*/
uint32_t  work_pitch_higher_bias :   3;
/*   Higher Base address of config */
/* registers in system memory.*/
uint32_t  Reserved0            :  13;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_OFFSET 0xc0
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_BIAS_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_BIAS_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_BIAS_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED2_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED2_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED2_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED2_MASK 0x000000f8
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BIAS_BID_HIGHER_SIZE_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BIAS_BID_HIGHER_SIZE_MSB 0x000a
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BIAS_BID_HIGHER_SIZE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BIAS_BID_HIGHER_SIZE_MASK 0x00000700
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_BIAS_BID_HIGHER_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED1_LSB 0x000b
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED1_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED1_MASK 0x0000f800
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_BIAS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_BIAS_MSB 0x0012
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_BIAS_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_BIAS_MASK 0x00070000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_WORK_PITCH_HIGHER_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED0_LSB 0x0013
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED0_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED0_MASK 0xfff80000
#define CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_FLAG
/* AXI_USER_INFO_PCQ_REG desc:  AXI user infopcq register*/
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_t {
	struct {
uint32_t  axi_arcache_pcq      :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_pcq       :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_pcq :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_OFFSET 0xc4
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARCACHE_PCQ_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARCACHE_PCQ_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARCACHE_PCQ_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARCACHE_PCQ_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARCACHE_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_PCQ_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_PCQ_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_PCQ_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_PCQ_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_PCQ_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_EXTEND_PCQ_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_EXTEND_PCQ_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_EXTEND_PCQ_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_EXTEND_PCQ_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_AXI_ARUSER_EXTEND_PCQ_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_FLAG
/* AXI_USER_INFO_BIAS_REG desc:  AXI user info bias register*/
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_t {
	struct {
uint32_t  axi_arcache_bias     :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_bias      :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_bias :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_OFFSET 0xc8
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARCACHE_BIAS_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARCACHE_BIAS_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARCACHE_BIAS_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARCACHE_BIAS_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARCACHE_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_BIAS_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_BIAS_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_BIAS_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_BIAS_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_BIAS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_EXTEND_BIAS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_EXTEND_BIAS_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_EXTEND_BIAS_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_EXTEND_BIAS_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_AXI_ARUSER_EXTEND_BIAS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_FLAG

/*  LSU_ELTWISE_LOWER_ADDR1_REG desc:  Address register 1 for Ping */
/* Pong operation lower 32bits for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_t {
	struct {
uint32_t  addr1_low_field_eltwise :  32;
/*   Cache-line address register 1 */
/* for Ping Pong operation lower*/
/* 32bits for bram LSU*/
/* channel.Addresses are byte*/
/* addresses and possible values*/
/* are 0 .. 262080 (in increments*/
/* of 64). Bits [5:0] shall be 0*/
/* always*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_OFFSET 0xe0
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_ADDR1_LOW_FIELD_ELTWISE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_FLAG

/*  LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG desc:  size of access in bytes */
/* for addr1 register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_t {
	struct {
uint32_t  addr1_size_eltwise   :  32;
/*   address size for eltwise */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_OFFSET 0xe4
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_ADDR1_SIZE_ELTWISE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_FLAG

/*  LSU_ELTWISE_ADDR1_CONTROL_REG desc:  Control register for address1 */
/* of ping pong buffer for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_t {
	struct {
uint32_t  addr1_valid_eltwise  :   1;
/*   Valid to trigger the */
/* LSUELTWISE Channel data*/
/* transfer. All other registers*/
/* of this channel should have*/
/* been programmed before this*/
/* bit is set. No change in*/
/* definition in GEMM mode.*/
uint32_t  addr1_refetch_count_eltwise :  16;
/*   Refetch happens these many */
/* times. It is not used in GEMM*/
/* mode and shall be 0. If*/
/* refetch is used*/
/* addr1_size_bram shall be <=*/
/* kernel_bid_size*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  axi_en_eltwise       :   4;
/*   axi_en_eltwise[0] -> 0- fecth */
/* from SP, 1- fetch from systeme*/
/* memory. axi_en_eltwise[1] ->*/
/* 0- wait for credits, 1- don't*/
/* wait for credits. (this bit is*/
/* applicable only with*/
/* axi_en_eltwise[0] = 0 ).*/
/* axi_en_eltwise[2] -> 0 - don't*/
/* wait for credit reset. 1- wait*/
/* for credit reset.*/
uint32_t  Reserved0            :   4;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_OFFSET 0xe8
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_BITFIELD_COUNT 0x05
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_VALID_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_VALID_ELTWISE_MSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_VALID_ELTWISE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_VALID_ELTWISE_MASK 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_VALID_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ELTWISE_LSB 0x0001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ELTWISE_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ELTWISE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ELTWISE_MASK 0x0001fffe
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_ADDR1_REFETCH_COUNT_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED1_LSB 0x0011
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED1_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED1_MASK 0x00fe0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_AXI_EN_ELTWISE_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_AXI_EN_ELTWISE_MSB 0x001b
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_AXI_EN_ELTWISE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_AXI_EN_ELTWISE_MASK 0x0f000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_AXI_EN_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED0_LSB 0x001c
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED0_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED0_MASK 0xf0000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_FLAG
/* ELTWISE_BID_REG desc:  ELTWISE physical memory allocation*/
union CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_t {
	struct {
uint32_t  bid_size_eltwise     :  32;
/*   Physical memory allocation */
/* size in bytes for ELTWISE LSU*/
/* channel in SP. Address pointer*/
/* would roll back to the*/
/* starting address after reading*/
/* this much data. Size in in*/
/* terms of bytes and possible*/
/* values are 64 .. 262080 (in*/
/* increments of 64). Bits [5:0]*/
/* shall be 0 always (Range*/
/* indicates only capapbility in*/
/* RTL)*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_OFFSET 0xec
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BID_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BID_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BID_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BID_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_BID_SIZE_ELTWISE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_FLAG

/*  ELTWISE_CONFIG_HIGHER_ADDR_REG desc:  ELTWISE config higher */
/* register */
union CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_t {
	struct {
uint32_t  addr1_high_field_eltwise :   3;
/*   higher filed of address */
/* [34:32]*/
uint32_t  Reserved1            :  13;    /*  Reserved Field*/
uint32_t  bid_size_higher_eltwise :   3;
/*   higher filed of bid size */
/* [34:32]*/
uint32_t  Reserved0            :  13;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_OFFSET 0xf0
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BITFIELD_COUNT 0x04
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_ELTWISE_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_ELTWISE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_ELTWISE_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_ADDR1_HIGH_FIELD_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED1_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED1_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED1_MASK 0x0000fff8
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BID_SIZE_HIGHER_ELTWISE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BID_SIZE_HIGHER_ELTWISE_MSB 0x0012
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BID_SIZE_HIGHER_ELTWISE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BID_SIZE_HIGHER_ELTWISE_MASK 0x00070000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_BID_SIZE_HIGHER_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED0_LSB 0x0013
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED0_RANGE 0x000d
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED0_MASK 0xfff80000
#define CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_FLAG

/*  ELTWISE_ENTRY_SIZE_REG desc:  ELTWISE physical memory allocation */
/* */
union CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_t {
	struct {
uint32_t  entry_size_eltwise   :  20;
/*   The size of one credit in */
/* bytes for ELTWISE LSU channel*/
/* .Possible values are 64 ..*/
/* 262080 (in increments of 64).*/
/* Bits [5:0] shall be 0 always*/
uint32_t  Reserved0            :  12;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_OFFSET 0xf4
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_ENTRY_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_ENTRY_SIZE_ELTWISE_MSB 0x0013
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_ENTRY_SIZE_ELTWISE_RANGE 0x0014
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_ENTRY_SIZE_ELTWISE_MASK 0x000fffff
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_ENTRY_SIZE_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESERVED0_LSB 0x0014
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESERVED0_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESERVED0_MASK 0xfff00000
#define CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_FLAG

/*  LSU_ELTWISE_OUTSTANDING_CTRL_REG desc:  OUTSTANDING control for */
/* ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_t {
	struct {
uint32_t  cfg_eltwise_threshold_outstanding :   8;
/*   This is guard band for */
/* issuing outstanding requests.*/
/* These many locations are*/
/* deducted from the free space*/
/* available to make outstanding*/
/* requests in both CNN and GEMM*/
/* mode for SP fetch program to 6*/
/* if eltwise_stride_en=0 else*/
/* program to 255 for AXI fetch*/
/* program to 6.*/
uint32_t  Reserved0            :  24;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_OFFSET 0xf8
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_CFG_ELTWISE_THRESHOLD_OUTSTANDING_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_CFG_ELTWISE_THRESHOLD_OUTSTANDING_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_CFG_ELTWISE_THRESHOLD_OUTSTANDING_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_CFG_ELTWISE_THRESHOLD_OUTSTANDING_MASK 0x000000ff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_CFG_ELTWISE_THRESHOLD_OUTSTANDING_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESERVED0_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESERVED0_RANGE 0x0018
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESERVED0_MASK 0xffffff00
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_1_REG desc:  LSU Stride control 1 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_t {
	struct {
uint32_t  loop1_size_eltwise   :  32;    /*  In CNN mode if(*/
/* eltwise_stride_en== 1 ) //*/
/* strided case Program it to 1*/
/* else // non strided case*/
/* If(num_active_tiles > 2)*/
/* program it to STREAM_OUT_PIPE,*/
/* where STREAM_OUT_PIPE = 4 else*/
/* if (num_active_tiles == 2)*/
/* Program it to 2 else Program*/
/* it to 1 In GEMM mode Prodram*/
/* this to reset value 1.*/
/* possible values : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_OFFSET 0xfc
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_LOOP1_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_LOOP1_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_LOOP1_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_LOOP1_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_LOOP1_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_2_REG desc:  LSU Stride control 2 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_t {
	struct {
uint32_t  loop1_pitch_eltwise  :  32;    /*  In CNN mode*/
/* if(eltwise_stride_en == 1 )*/
/* Equal to 64 else*/
/* tile_width*tile_height in*/
/* bytes. In GEMM mode Prodram*/
/* this to reset value 64.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_LOOP1_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_LOOP1_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_LOOP1_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_LOOP1_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_LOOP1_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_3_REG desc:  LSU Stride control 3 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_t {
	struct {
uint32_t  loop2_size_eltwise   :  32;
/*   In CNN mode Program it to 1 */
/* In GEMM mode Prodram this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_LOOP2_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_LOOP2_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_LOOP2_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_LOOP2_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_LOOP2_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_4_REG desc:  LSU Stride control 4 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_t {
	struct {
uint32_t  loop2_pitch_eltwise  :  32;
/*   In CNN Mode Should be equal */
/* to 64. In GEMM mode Prodram*/
/* this to reset value 64.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_LOOP2_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_LOOP2_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_LOOP2_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_LOOP2_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_LOOP2_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_5_REG desc:  LSU Stride control 5 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_t {
	struct {
uint32_t  loop3_size_eltwise   :  32;
/*   In CNN Mode Map to v_size. */
/* This should be equal to no of*/
/* cache lines of effective slice*/
/* (no of cache lines of*/
/* effective IFM2) In GEMM mode*/
/* Prodram this to reset value 1.*/
/* possible values : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_OFFSET 0x0c
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_LOOP3_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_LOOP3_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_LOOP3_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_LOOP3_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_LOOP3_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_6_REG desc:  LSU Stride control 6 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_t {
	struct {
uint32_t  loop3_pitch_eltwise  :  32;
/*   In CNN Mode Map to h_pitch. */
/* This should be equal to 64. In*/
/* GEMM mode Prodram this to*/
/* reset value 64. possible*/
/* values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_LOOP3_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_LOOP3_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_LOOP3_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_LOOP3_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_LOOP3_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_7_REG desc:  LSU Stride control 7 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_t {
	struct {
uint32_t  loop4_size_eltwise   :  32;    /*  In CNN Mode*/
/* if(eltwise_stride_en== 1 )*/
/* Number of slices (no of IFM2s)*/
/* else If (num_active_tiles > 2)*/
/* Number of*/
/* slices/STREAM_OUT_PIPE, where*/
/* STREAM_OUT_PIPE = 4. else if*/
/* (num_active_tiles == 2)*/
/* Number of slices/2 else*/
/* Number of slices. Note: If*/
/* batch mode is there multiply*/
/* above result with batch_size*/
/* In GEMM mode Prodram this to*/
/* reset value 1. possible values*/
/* : 1 to 4095.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_LOOP4_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_LOOP4_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_LOOP4_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_LOOP4_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_LOOP4_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_8_REG desc:  LSU Stride control 8 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_t {
	struct {
uint32_t  loop4_pitch_eltwise  :  32;    /*  In CNN Mode*/
/* if(eltwise_stride_en== 1 )*/
/* slice size else If*/
/* (num_active_tiles > 2) slice*/
/* size * STREAM_OUT_PIPE, where*/
/* STREAM_OUT_PIPE = 4. else if*/
/* (num_active_tiles == 2) slice*/
/* size*2 else slice size where*/
/* slice_size=*/
/* tile_width*tile_height in*/
/* bytes In GEMM mode Prodram*/
/* this to reset value 1.*/
/* possible values: 64 to 262080*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_OFFSET 0x18
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_LOOP4_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_LOOP4_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_LOOP4_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_LOOP4_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_LOOP4_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_9_REG desc:  LSU Stride control 9 register */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_t {
	struct {
uint32_t  work_pitch_eltwise   :  32;
/*   In both CNN and GEMM mode Map */
/* to work_pitch. Default value*/
/* tile_width * tile_height **/
/* tile depth in bytes.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_OFFSET 0x1c
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_WORK_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_WORK_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_WORK_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_WORK_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_WORK_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_10_REG desc:  LSU Stride control 10 */
/* register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_t {
	struct {
uint32_t  work_pitch_higher_eltwise :   3;
/*   higher filed of work pitch */
/* [34:32]*/
uint32_t  Reserved0            :  29;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_OFFSET 0x20
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_WORK_PITCH_HIGHER_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_WORK_PITCH_HIGHER_ELTWISE_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_WORK_PITCH_HIGHER_ELTWISE_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_WORK_PITCH_HIGHER_ELTWISE_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_WORK_PITCH_HIGHER_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_FLAG

/*  LSU_EXTRA_CREDITS_ELTWISE_REG desc:  LSU Invalid credits for */
/* ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_t {
	struct {
uint32_t  extra_credits_eltwise :  16;
/*   whenever the invalid data for */
/* ELTWISE buffer in a tile is*/
/* more than a credit, this*/
/* should be programmed with*/
/* total credits in a UoW - total*/
/* valid credits*/
uint32_t  Reserved0            :  16;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_OFFSET 0x24
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_EXTRA_CREDITS_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_EXTRA_CREDITS_ELTWISE_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_EXTRA_CREDITS_ELTWISE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_EXTRA_CREDITS_ELTWISE_MASK 0x0000ffff
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_EXTRA_CREDITS_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESERVED0_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESERVED0_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESERVED0_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_FLAG

/*  LSU_UOW_START_ADDR_ELTWISE_REG desc:  LSU UOW start addr offset */
/* for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_t {
	struct {
uint32_t  uow_start_addr_offset_eltwise :  32;
/*   uow start address offset, */
/* this will get added to BID*/
/* base address at the start of*/
/* every UOW.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_OFFSET 0x28
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_UOW_START_ADDR_OFFSET_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_UOW_START_ADDR_OFFSET_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_UOW_START_ADDR_OFFSET_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_UOW_START_ADDR_OFFSET_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_UOW_START_ADDR_OFFSET_ELTWISE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_FLAG

/*  AXI_USER_INFO_ELTWISE_REG desc:  AXI user info eltwise register */
/* */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_t {
	struct {
uint32_t  axi_arcache_eltwise  :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_eltwise   :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_eltwise :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_OFFSET 0x2c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARCACHE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARCACHE_ELTWISE_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARCACHE_ELTWISE_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARCACHE_ELTWISE_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARCACHE_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_ELTWISE_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_ELTWISE_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_ELTWISE_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_ELTWISE_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_ELTWISE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_EXTEND_ELTWISE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_EXTEND_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_EXTEND_ELTWISE_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_EXTEND_ELTWISE_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_AXI_ARUSER_EXTEND_ELTWISE_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_11_REG desc:  LSU Stride control 11 */
/* register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_t {
	struct {
uint32_t  loop5_size_eltwise   :  32;
/*   this should be equal to no of */
/* IFMy cuts of an IFM2*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_OFFSET 0x30
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_LOOP5_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_LOOP5_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_LOOP5_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_LOOP5_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_LOOP5_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_12_REG desc:  LSU Stride control 12 */
/* register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_t {
	struct {
uint32_t  loop5_pitch_eltwise  :  32;    /*  Should be equail to*/
/* loop3_size_eltwise*64*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_OFFSET 0x34
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_LOOP5_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_LOOP5_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_LOOP5_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_LOOP5_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_LOOP5_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_13_REG desc:  LSU Stride control 13 */
/* register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_t {
	struct {
uint32_t  loop6_size_eltwise   :  32;
/*   Should be equal to batch size */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_OFFSET 0x38
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_LOOP6_SIZE_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_LOOP6_SIZE_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_LOOP6_SIZE_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_LOOP6_SIZE_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_LOOP6_SIZE_ELTWISE_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_FLAG

/*  LSU_ELTWISE_STRIDE_CTRL_14_REG desc:  LSU Stride control 14 */
/* register for ELTWISE */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_t {
	struct {
uint32_t  loop6_pitch_eltwise  :  32;
/*   slice_size * no_of_IFM2s or */
/* in other words*/
/* loop4_pitch_eltwise **/
/* loop4_size_eltwise*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_OFFSET 0x3c
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_LOOP6_PITCH_ELTWISE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_LOOP6_PITCH_ELTWISE_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_LOOP6_PITCH_ELTWISE_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_LOOP6_PITCH_ELTWISE_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_LOOP6_PITCH_ELTWISE_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_10_REG desc:  LSU Stride control 10 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_t {
	struct {
uint32_t  loop5_size_oram      :  32;
/*   this should be equal to no of */
/* OFMy cuts of an OFM*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_OFFSET 0x40
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_LOOP5_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_11_REG desc:  LSU Stride control 11 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_t {
	struct {
uint32_t  loop5_pitch_oram     :  32;    /*  Should be equal to*/
/* loop3_size_oram*64*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_OFFSET 0x44
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_LOOP5_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_12_REG desc:  LSU Stride control 12 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_t {
	struct {
uint32_t  loop6_size_oram      :  32;
/*   Should be equal to batch size */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_OFFSET 0x48
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_RESET 0x00000001
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_LOOP6_SIZE_ORAM_RESET_VALUE 0x00000001

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_FLAG
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_FLAG

/*  LSU_ORAM_STRIDE_CTRL_13_REG desc:  LSU Stride control 13 register */
/* for ORAM */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_t {
	struct {
uint32_t  loop6_pitch_oram     :  32;
/*   slice_size * no_of_IFM2s or */
/* in other words*/
/* loop4_pitch_oram **/
/* loop4_size_oram*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_OFFSET 0x4c
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_RESET 0x00000040
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_ORAM_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_ORAM_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_ORAM_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_ORAM_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_LOOP6_PITCH_ORAM_RESET_VALUE 0x00000040

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_MS_CFG_FLAG
#define CVE_DELPHI_CFG_MEM_MS_CFG_FLAG
/* MS_CFG desc:  Multi state configuration registers*/
union CVE_DELPHI_CFG_MEM_MS_CFG_t {
	struct {
uint32_t  delphi_config_mode   :   2;
/*   Delphi configuration mode */
/* selection; 0 - Remote*/
/* configuration mode (Delphi*/
/* config by TLC through APB*/
/* interface, MS_FSM will be*/
/* bypassed); 1 -*/
/* Auto-configuratuib mode*/
/* (Delphi config from sp_reg.*/
/* Only credit upd and MS config*/
/* is through APB interface) 2-*/
/* Config blob fetch mode (Delphi*/
/* config blob fetch from system*/
/* memory)*/
uint32_t  Reserved2            :   6;    /*  Reserved Field*/
uint32_t  ms_state_arb_priority :   1;
/*   Priority for arbiter that */
/* chooses between all states*/
/* with credits; 0 - State with*/
/* highest index is given highest*/
/* priority; 1 - State with*/
/* lowest index is given highest*/
/* priority*/
uint32_t  Reserved1            :   7;    /*  Reserved Field*/
uint32_t  num_sp_reg_in_state  :   8;
/*   Number of auto-config */
/* registers that are available*/
/* in SP for a state*/
uint32_t  Reserved0            :   8;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_MS_CFG_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_MS_CFG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_MS_CFG_SIZE 32
#define CVE_DELPHI_CFG_MEM_MS_CFG_BITFIELD_COUNT 0x06
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_DELPHI_CONFIG_MODE_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_MS_CFG_DELPHI_CONFIG_MODE_MSB 0x0001
#define CVE_DELPHI_CFG_MEM_MS_CFG_DELPHI_CONFIG_MODE_RANGE 0x0002
#define CVE_DELPHI_CFG_MEM_MS_CFG_DELPHI_CONFIG_MODE_MASK 0x00000003
#define CVE_DELPHI_CFG_MEM_MS_CFG_DELPHI_CONFIG_MODE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED2_LSB 0x0002
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED2_MSB 0x0007
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED2_RANGE 0x0006
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED2_MASK 0x000000fc
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED2_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_MS_STATE_ARB_PRIORITY_LSB 0x0008
#define CVE_DELPHI_CFG_MEM_MS_CFG_MS_STATE_ARB_PRIORITY_MSB 0x0008
#define CVE_DELPHI_CFG_MEM_MS_CFG_MS_STATE_ARB_PRIORITY_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_MS_CFG_MS_STATE_ARB_PRIORITY_MASK 0x00000100
#define CVE_DELPHI_CFG_MEM_MS_CFG_MS_STATE_ARB_PRIORITY_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED1_LSB 0x0009
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED1_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED1_RANGE 0x0007
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED1_MASK 0x0000fe00
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED1_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_NUM_SP_REG_IN_STATE_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_MS_CFG_NUM_SP_REG_IN_STATE_MSB 0x0017
#define CVE_DELPHI_CFG_MEM_MS_CFG_NUM_SP_REG_IN_STATE_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_MS_CFG_NUM_SP_REG_IN_STATE_MASK 0x00ff0000
#define CVE_DELPHI_CFG_MEM_MS_CFG_NUM_SP_REG_IN_STATE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED0_LSB 0x0018
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED0_RANGE 0x0008
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED0_MASK 0xff000000
#define CVE_DELPHI_CFG_MEM_MS_CFG_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_FLAG
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_FLAG
/* MS_SP_REG_ADDR desc:  Addr of auto-config reg in SP*/
union CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_t {
	struct {
uint32_t  sp_reg_addr_field    :  32;
/*   Base address (byte-aligned) */
/* of auto-config registers in*/
/* SP, when delphi operates in*/
/* auto-config mode*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_OFFSET 0x04
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SIZE 32
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SP_REG_ADDR_FIELD_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SP_REG_ADDR_FIELD_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SP_REG_ADDR_FIELD_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SP_REG_ADDR_FIELD_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_SP_REG_ADDR_FIELD_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_FLAG
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_FLAG

/*  MS_SP_REG_HIGHER_ADDR desc:  Higher Addr of auto-config reg in SP */
/* */
union CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_t {
	struct {
uint32_t  sp_reg_higher_addr_field :   3;
/*   Higher Base address. Used */
/* only in cofig blob fetch mode.*/
uint32_t  Reserved0            :  29;    /*  Reserved Field*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_OFFSET 0x08
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SIZE 32
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_BITFIELD_COUNT 0x02
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SP_REG_HIGHER_ADDR_FIELD_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SP_REG_HIGHER_ADDR_FIELD_MSB 0x0002
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SP_REG_HIGHER_ADDR_FIELD_RANGE 0x0003
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SP_REG_HIGHER_ADDR_FIELD_MASK 0x00000007
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_SP_REG_HIGHER_ADDR_FIELD_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESERVED0_LSB 0x0003
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESERVED0_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESERVED0_RANGE 0x001d
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESERVED0_MASK 0xfffffff8
#define CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_RESERVED0_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_FLAG
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_FLAG

/*  AXI_USER_INFO_CFG_BLOB_REG desc:  AXI user info cfg blob register */
/* */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_t {
	struct {
uint32_t  axi_arcache_cfg_blob :   4;
/*   AXI Write cache attributes */
uint32_t  axi_aruser_cfg_blob  :  12;
/*   AXI_ARUSER[ 0] - Reserved */
/* AXI_ARUSER[ 1] - Flush*/
/* AXI_ARUSER[ 2] - Bypass*/
/* AXI_ARUSER[ 3] - Reserved*/
/* AXI_ARUSER[ 8:4] - Stream ID*/
/* (ATU_ID) AXI_ARUSER[11:9] -*/
/* Reserved*/
uint32_t  axi_aruser_extend_cfg_blob :  16;
/*   AXI_ARUSER_EXTEND[ 1: 0] - */
/* CLOS - LLC Class Service*/
/* AXI_ARUSER_EXTEND[ 2] -*/
/* Reserved CLOS*/
/* AXI_ARUSER_EXTEND[ 3] -*/
/* Bridge_Priority - Transaction*/
/* priority in the AXI2IDI bridge*/
/* AXI_ARUSER_EXTEND[ 5: 4] -*/
/* Reserved Bridge_Priority*/
/* AXI_ARUSER_EXTEND[ 7: 6] - NT*/
/* - LLC NT AXI_ARUSER_EXTEND[ 8]*/
/* - Prefetch_LLC - LLC prefetch*/
/* - Set by DSE HW*/
/* AXI_ARUSER_EXTEND[ 9] -*/
/* Prefetch_LLC_Fake_Data - If*/
/* LLC prefetch then return fake*/
/* data (all zeros)*/
/* AXI_ARUSER_EXTEND[11:10] -*/
/* Reserved_Prefetch*/
/* AXI_ARUSER_EXTEND[15:12] -*/
/* Reserved*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_OFFSET 0x10
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_SIZE 32
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_BITFIELD_COUNT 0x03
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARCACHE_CFG_BLOB_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARCACHE_CFG_BLOB_MSB 0x0003
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARCACHE_CFG_BLOB_RANGE 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARCACHE_CFG_BLOB_MASK 0x0000000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARCACHE_CFG_BLOB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_CFG_BLOB_LSB 0x0004
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_CFG_BLOB_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_CFG_BLOB_RANGE 0x000c
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_CFG_BLOB_MASK 0x0000fff0
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_CFG_BLOB_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_EXTEND_CFG_BLOB_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_EXTEND_CFG_BLOB_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_EXTEND_CFG_BLOB_RANGE 0x0010
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_EXTEND_CFG_BLOB_MASK 0xffff0000
#define CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_AXI_ARUSER_EXTEND_CFG_BLOB_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_FLAG
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_FLAG

/*  MS_CREDIT_RESET desc:  Indicates which stream's credits are reset */
/* */
union CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_t {
	struct {
uint32_t  credit_reset         :  32;
/*   set credit_reset[0] to 1 to */
/* issue credit reset to*/
/* DELPHI.Whenever TLC receives*/
/* Delphi ORAM LAST, a credit*/
/* reset has to be sent to Delphi*/
/* if DELPHI left with any extra*/
/* output credits. DELPHI will*/
/* clear all the left over output*/
/* credits. Credits for next*/
/* execution has to be given*/
/* after credit reset only.*/
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_OFFSET 0x14
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_SIZE 32
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_BITFIELD_COUNT 0x01
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_RESET 0x00000000
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_CREDIT_RESET_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_CREDIT_RESET_MSB 0x001f
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_CREDIT_RESET_RANGE 0x0020
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_CREDIT_RESET_MASK 0xffffffff
#define CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_CREDIT_RESET_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
#ifndef CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_FLAG
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_FLAG
/* GECOE_MAX_BURST_LENGTH desc:  GeCoE DEC MAX BURST LENGTH*/
union CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_t {
	struct {
uint32_t  GECOE_DEC_MAX_BURST_LENGTH :   5;
/*   Max burst length for decoder */
uint32_t  GECOE_ENC_MAX_BURST_LENGTH :   5;
/*   Max burst length for encoder */
uint32_t  GECOE_START_BITS     :   2;
/*   GeCoE start bits -- when */
/* these bits are set as 0x3*/
/* (1'b11), GeCoE can start*/
/* operating*/
uint32_t  GECOE_ENCODER_BLOCK_SIZE :   1;
/*   GeCoE encoder block size -- */
/* when this bit 1 we have 512*/
/* block size programmed for*/
/* encoder otherwise 256*/
uint32_t  GECOE_DECODER_BLOCK_SIZE :   1;
/*   GeCoE decoder block size -- */
/* when this bit 1 we have 512*/
/* block size programmed for*/
/* decoder otherwise 256*/
uint32_t  GECOE_CLK_GATE_EN    :   1;
/*   GeCoE clock gating value */
/* enabled - when clock gating*/
/* option is enabled set it as 1*/
uint32_t  GECOE_DEC_BYPASS     :   1;
/*   GeCoE decode bypass enable. 0 */
/* - mixed mode is enabled. 1 -*/
/* bypass is enabled*/
uint32_t  GECOE_ENC_BYPASS     :   1;
/*   GeCoE encode bypass enable. 0 */
/* - TID handling is enabled. 1 -*/
/* bypass is enabled*/
uint32_t  RSVD_0               :  15;
/*  Nebulon auto filled RSVD [31:17] */
	}                                field;
uint32_t                         val;
};
#endif
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_OFFSET 0x00
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_SCOPE 0x01
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_SIZE 32
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_BITFIELD_COUNT 0x08
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_RESET 0x00000c01
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_LSB 0x0000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_MSB 0x0004
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_MASK 0x0000001f
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_MAX_BURST_LENGTH_RESET_VALUE 0x00000001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_LSB 0x0005
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_MSB 0x0009
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_RANGE 0x0005
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_MASK 0x000003e0
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_MAX_BURST_LENGTH_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_LSB 0x000a
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_MSB 0x000b
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_RANGE 0x0002
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_MASK 0x00000c00
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_START_BITS_RESET_VALUE 0x00000003
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_LSB 0x000c
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_MSB 0x000c
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_MASK 0x00001000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENCODER_BLOCK_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_LSB 0x000d
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_MSB 0x000d
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_MASK 0x00002000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DECODER_BLOCK_SIZE_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_LSB 0x000e
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_MSB 0x000e
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_MASK 0x00004000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_CLK_GATE_EN_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_BYPASS_LSB 0x000f
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_BYPASS_MSB 0x000f
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_BYPASS_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_BYPASS_MASK 0x00008000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_DEC_BYPASS_RESET_VALUE 0x00000000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_BYPASS_LSB 0x0010
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_BYPASS_MSB 0x0010
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_BYPASS_RANGE 0x0001
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_BYPASS_MASK 0x00010000
#define CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_GECOE_ENC_BYPASS_RESET_VALUE 0x00000000

/*  ------------------------------------------------------------------ */
/* */
/* starting the array instantiation section*/
struct cve_delphi_cfg_t {
union CVE_DELPHI_CFG_MEM_DELPHI_ALGO_CTRL_REG_t DELPHI_ALGO_CTRL_REG;
/*  offset 4'h0, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_CTRL_NUM_TILE_REG_t DELPHI_CTRL_NUM_TILE_REG;
/*  offset 4'h4, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_WORK_PARTN_CTRL_REG_t DELPHI_WORK_PARTN_CTRL_REG;
/*  offset 4'h8, width 32 */
	uint8_t	                   rsvd0[4];
union CVE_DELPHI_CFG_MEM_LUT_CTRL_1_REG_t LUT_CTRL_1_REG;
/*  offset 8'h10, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_2_REG_t LUT_CTRL_2_REG;
/*  offset 8'h14, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_3_REG_t LUT_CTRL_3_REG;
/*  offset 8'h18, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_4_REG_t LUT_CTRL_4_REG;
/*  offset 8'h1C, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_5_REG_t LUT_CTRL_5_REG;
/*  offset 8'h20, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_6_REG_t LUT_CTRL_6_REG;
/*  offset 8'h24, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_7_REG_t LUT_CTRL_7_REG;
/*  offset 8'h28, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_8_REG_t LUT_CTRL_8_REG;
/*  offset 8'h2C, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_9_REG_t LUT_CTRL_9_REG;
/*  offset 8'h30, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_10_REG_t LUT_CTRL_10_REG;
/*  offset 8'h34, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_11_REG_t LUT_CTRL_11_REG;
/*  offset 8'h38, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_12_REG_t LUT_CTRL_12_REG;
/*  offset 8'h3C, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_13_REG_t LUT_CTRL_13_REG;
/*  offset 8'h40, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_14_REG_t LUT_CTRL_14_REG;
/*  offset 8'h44, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_15_REG_t LUT_CTRL_15_REG;
/*  offset 8'h48, width 32 */
union CVE_DELPHI_CFG_MEM_LUT_CTRL_16_REG_t LUT_CTRL_16_REG;
/*  offset 8'h4C, width 32 */
union CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_REG_t NONLINEAR_ALGO_CTRL_REG;
/*  offset 8'h50, width 32 */
union CVE_DELPHI_CFG_MEM_INT8_LOWP_OFFSET_REG_t INT8_LOWP_OFFSET_REG;
/*  offset 8'h54, width 32 */
union CVE_DELPHI_CFG_MEM_INT8_QUANTIZATION_PARAM_REG_t INT8_QUANTIZATION_PARAM_REG;
/*  offset 8'h58, width 32 */
union CVE_DELPHI_CFG_MEM_NONLINEAR_ALGO_CTRL_INT8_REG_t NONLINEAR_ALGO_CTRL_INT8_REG;
/*  offset 8'h5C, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_IFM_DIMENSION_REG_t CNN_IFM_DIMENSION_REG;
/*  offset 8'h60, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_IFM_CTRL_REG_t CNN_IFM_CTRL_REG;
/*  offset 8'h64, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_IFM_PIX_CNT_REG_t CNN_IFM_PIX_CNT_REG;
/*  offset 8'h68, width 32 */
	uint8_t	                   rsvd1[4];
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_DIMENSION_REG_t CNN_KERNEL_DIMENSION_REG;
/*  offset 8'h70, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_CTRL_REG_t CNN_KERNEL_CTRL_REG;
/*  offset 8'h74, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_BIAS_CTRL_REG_t CNN_BIAS_CTRL_REG;
/*  offset 8'h78, width 32 */
	uint8_t	                   rsvd2[4];
union CVE_DELPHI_CFG_MEM_CNN_OFM_DIMENSION_REG_t CNN_OFM_DIMENSION_REG;
/*  offset 8'h80, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_OFM_CTRL_REG_t CNN_OFM_CTRL_REG;
/*  offset 8'h84, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_CTRL_REG_t CNN_MAXPOOL_CTRL_REG;
/*  offset 8'h88, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_MAXPOOL_BYPASS_REG_t CNN_MAXPOOL_BYPASS_REG;
/*  offset 8'h8C, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_VALUE_REG_t CNN_ZERO_PADDING_VALUE_REG;
/*  offset 8'h90, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_ZERO_PADDING_REG_t CNN_ZERO_PADDING_REG;
/*  offset 8'h94, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_IFM_OFM_CTRL_REG_t CNN_IFM_OFM_CTRL_REG;
/*  offset 8'h98, width 32 */
	uint8_t	                   rsvd3[100];
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_STATUS_REG_t DELPHI_CORE_INTR_STATUS_REG;
/*  offset 12'h100, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_ENABLE_REG_t DELPHI_CORE_INTR_ENABLE_REG;
/*  offset 12'h104, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG_t DELPHI_CORE_INTR_SIGNAL_ENABLE_REG;
/*  offset 12'h108, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CTRL_REG_t DELPHI_DBG_PERF_CTRL_REG;
/*  offset 12'h10C, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_1_REG_t DELPHI_DBG_PERF_CNT_1_REG;
/*  offset 12'h110, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_CNT_2_REG_t DELPHI_DBG_PERF_CNT_2_REG;
/*  offset 12'h114, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_DBG_PERF_STATUS_REG_t DELPHI_DBG_PERF_STATUS_REG;
/*  offset 12'h118, width 32 */
union CVE_DELPHI_CFG_MEM_DELPHI_SCRATCH_PAD_REG_t DELPHI_SCRATCH_PAD_REG;
/*  offset 12'h11C, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_ISRAM_ZERO_PAD_REG_t CNN_ISRAM_ZERO_PAD_REG;
/*  offset 12'h120, width 32 */
union CVE_DELPHI_CFG_MEM_IFM_NUM_INVALID_ROWS_REG_t IFM_NUM_INVALID_ROWS_REG;
/*  offset 12'h124, width 32 */
	uint8_t	                   rsvd4[8];
union CVE_DELPHI_CFG_MEM_A_BLOCK_SIZE_NORMAL_REG_t A_BLOCK_SIZE_NORMAL_REG;
/*  offset 12'h130, width 32 */
union CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_NORMAL_REG_t A_NUM_BLOCKS_IN_MB_NORMAL_REG;
/*  offset 12'h134, width 32 */
union CVE_DELPHI_CFG_MEM_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t A_NUM_BLOCKS_IN_MB_BOUNDARY_REG;
/*  offset 12'h138, width 32 */
union CVE_DELPHI_CFG_MEM_A_MB_IN_SPB_REG_t A_MB_IN_SPB_REG;
/*  offset 12'h13C, width 32 */
union CVE_DELPHI_CFG_MEM_A_DER_BLOCK_ROW_SIZE_SPB_REG_t A_DER_BLOCK_ROW_SIZE_SPB_REG;
/*  offset 12'h140, width 32 */
union CVE_DELPHI_CFG_MEM_A_DER_NUM_BLOCKS_SPB_REG_t A_DER_NUM_BLOCKS_SPB_REG;
/*  offset 12'h144, width 32 */
union CVE_DELPHI_CFG_MEM_A_TRANSPOSE_REG_t A_TRANSPOSE_REG;
/*  offset 12'h148, width 32 */
union CVE_DELPHI_CFG_MEM_B_BLOCK_SIZE_BOUNDARY_REG_t B_BLOCK_SIZE_BOUNDARY_REG;
/*  offset 12'h14C, width 32 */
union CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_NORMAL_REG_t B_NUM_BLOCKS_IN_MB_NORMAL_REG;
/*  offset 12'h150, width 32 */
union CVE_DELPHI_CFG_MEM_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t B_NUM_BLOCKS_IN_MB_BOUNDARY_REG;
/*  offset 12'h154, width 32 */
union CVE_DELPHI_CFG_MEM_B_MB_IN_SPB_REG_t B_MB_IN_SPB_REG;
/*  offset 12'h158, width 32 */
union CVE_DELPHI_CFG_MEM_B_DER_BLOCK_ROW_SIZE_SPB_REG_t B_DER_BLOCK_ROW_SIZE_SPB_REG;
/*  offset 12'h15C, width 32 */
union CVE_DELPHI_CFG_MEM_B_DER_NUM_BLOCKS_SPB_REG_t B_DER_NUM_BLOCKS_SPB_REG;
/*  offset 12'h160, width 32 */
union CVE_DELPHI_CFG_MEM_C_BLOCK_SIZE_NORMAL_REG_t C_BLOCK_SIZE_NORMAL_REG;
/*  offset 12'h164, width 32 */
union CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_NORMAL_REG_t C_NUM_BLOCKS_IN_MB_NORMAL_REG;
/*  offset 12'h168, width 32 */
union CVE_DELPHI_CFG_MEM_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG_t C_NUM_BLOCKS_IN_MB_BOUNDARY_REG;
/*  offset 12'h16C, width 32 */
union CVE_DELPHI_CFG_MEM_C_MB_IN_SPB_REG_t C_MB_IN_SPB_REG;
/*  offset 12'h170, width 32 */
union CVE_DELPHI_CFG_MEM_C_DER_BLOCK_ROW_SIZE_SPB_REG_t C_DER_BLOCK_ROW_SIZE_SPB_REG;
/*  offset 12'h174, width 32 */
union CVE_DELPHI_CFG_MEM_C_DER_NUM_BLOCKS_SPB_REG_t C_DER_NUM_BLOCKS_SPB_REG;
/*  offset 12'h178, width 32 */
union CVE_DELPHI_CFG_MEM_C_DER_SUBMB_NORMAL_REG_t C_DER_SUBMB_NORMAL_REG;
/*  offset 12'h17C, width 32 */
union CVE_DELPHI_CFG_MEM_C_DER_SUBMB_BOUNDARY_REG_t C_DER_SUBMB_BOUNDARY_REG;
/*  offset 12'h180, width 32 */
union CVE_DELPHI_CFG_MEM_GEMM_STREAM_MODE_REG_t GEMM_STREAM_MODE_REG;
/*  offset 12'h184, width 32 */
union CVE_DELPHI_CFG_MEM_CNN_KERNEL_BYTES_REG_t CNN_KERNEL_BYTES_REG;
/*  offset 12'h188, width 32 */
union CVE_DELPHI_CFG_MEM_OUT_OFFSET_REG_t OUT_OFFSET_REG;
/*  offset 12'h18C, width 32 */
union CVE_DELPHI_CFG_MEM_BATCH_MODE_REG_t BATCH_MODE_REG;
/*  offset 12'h190, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_CNTRL_REG_t ELTWISE_CNTRL_REG;
/*  offset 12'h194, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_DIMENSION_REG_t ELTWISE_DIMENSION_REG;
/*  offset 12'h198, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_DER_BLOCK_ROW_SIZE_REG_t ELTWISE_DER_BLOCK_ROW_SIZE_REG;
/*  offset 12'h19C, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_DER_NUM_BLOCKS_REG_t ELTWISE_DER_NUM_BLOCKS_REG;
/*  offset 12'h1A0, width 32 */
union CVE_DELPHI_CFG_MEM_GROUP_CONV_REG_t GROUP_CONV_REG;
/*  offset 12'h1A4, width 32 */
	uint8_t	                   rsvd5[8];
union CVE_DELPHI_CFG_MEM_CORE_STATUS_1_t CORE_STATUS_1;
/*  offset 12'h1B0, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_2_t CORE_STATUS_2;
/*  offset 12'h1B4, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_3_t CORE_STATUS_3;
/*  offset 12'h1B8, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_4_t CORE_STATUS_4;
/*  offset 12'h1BC, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_5_t CORE_STATUS_5;
/*  offset 12'h1C0, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_6_t CORE_STATUS_6;
/*  offset 12'h1C4, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_7_t CORE_STATUS_7;
/*  offset 12'h1C8, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_8_t CORE_STATUS_8;
/*  offset 12'h1CC, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_9_t CORE_STATUS_9;
/*  offset 12'h1D0, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_10_t CORE_STATUS_10;
/*  offset 12'h1D4, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_11_t CORE_STATUS_11;
/*  offset 12'h1D8, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_12_t CORE_STATUS_12;
/*  offset 12'h1DC, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_13_t CORE_STATUS_13;
/*  offset 12'h1E0, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_14_t CORE_STATUS_14;
/*  offset 12'h1E4, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_15_t CORE_STATUS_15;
/*  offset 12'h1E8, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_16_t CORE_STATUS_16;
/*  offset 12'h1EC, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_17_t CORE_STATUS_17;
/*  offset 12'h1F0, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_18_t CORE_STATUS_18;
/*  offset 12'h1F4, width 32 */
union CVE_DELPHI_CFG_MEM_CORE_STATUS_19_t CORE_STATUS_19;
/*  offset 12'h1F8, width 32 */
union CVE_DELPHI_CFG_MEM_PERF_CTRL_REG_t PERF_CTRL_REG;
/*  offset 12'h1FC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_LOWER_ADDR1_REG_t LSU_IRAM_LOWER_ADDR1_REG;
/*  offset 12'h200, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR1_REG_t LSU_IRAM_HIGHER_ADDR1_REG;
/*  offset 12'h204, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG_t LSU_IRAM_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h208, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_ADDR1_CONTROL_REG_t LSU_IRAM_ADDR1_CONTROL_REG;
/*  offset 12'h20C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_10_REG_t LSU_IRAM_STRIDE_CTRL_10_REG;
/*  offset 12'h210, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_11_REG_t LSU_IRAM_STRIDE_CTRL_11_REG;
/*  offset 12'h214, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_12_REG_t LSU_IRAM_STRIDE_CTRL_12_REG;
/*  offset 12'h218, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_13_REG_t LSU_IRAM_STRIDE_CTRL_13_REG;
/*  offset 12'h21C, width 32 */
union CVE_DELPHI_CFG_MEM_IFM_BID_REG_t IFM_BID_REG;
/*  offset 12'h220, width 32 */
union CVE_DELPHI_CFG_MEM_IFM_ENTRY_SIZE_REG_t IFM_ENTRY_SIZE_REG;
/*  offset 12'h224, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_OUTSTANDING_CTRL_REG_t LSU_IRAM_OUTSTANDING_CTRL_REG;
/*  offset 12'h228, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_1_REG_t LSU_IRAM_STRIDE_CTRL_1_REG;
/*  offset 12'h22C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_2_REG_t LSU_IRAM_STRIDE_CTRL_2_REG;
/*  offset 12'h230, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_3_REG_t LSU_IRAM_STRIDE_CTRL_3_REG;
/*  offset 12'h234, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_4_REG_t LSU_IRAM_STRIDE_CTRL_4_REG;
/*  offset 12'h238, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_5_REG_t LSU_IRAM_STRIDE_CTRL_5_REG;
/*  offset 12'h23C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_6_REG_t LSU_IRAM_STRIDE_CTRL_6_REG;
/*  offset 12'h240, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_7_REG_t LSU_IRAM_STRIDE_CTRL_7_REG;
/*  offset 12'h244, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_8_REG_t LSU_IRAM_STRIDE_CTRL_8_REG;
/*  offset 12'h248, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_STRIDE_CTRL_9_REG_t LSU_IRAM_STRIDE_CTRL_9_REG;
/*  offset 12'h24C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_IRAM_REG_t LSU_EXTRA_CREDITS_IRAM_REG;
/*  offset 12'h250, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_IRAM_REG_t LSU_UOW_START_ADDR_IRAM_REG;
/*  offset 12'h254, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_IRAM_HIGHER_ADDR_CTRL_REG_t LSU_IRAM_HIGHER_ADDR_CTRL_REG;
/*  offset 12'h258, width 32 */
	uint8_t	                   rsvd6[4];
union CVE_DELPHI_CFG_MEM_LSU_BRAM_LOWER_ADDR1_REG_t LSU_BRAM_LOWER_ADDR1_REG;
/*  offset 12'h260, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_HIGHER_ADDR1_REG_t LSU_BRAM_HIGHER_ADDR1_REG;
/*  offset 12'h264, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG_t LSU_BRAM_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h268, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_ADDR1_CONTROL_REG_t LSU_BRAM_ADDR1_CONTROL_REG;
/*  offset 12'h26C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_10_REG_t LSU_BRAM_STRIDE_CTRL_10_REG;
/*  offset 12'h270, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_11_REG_t LSU_BRAM_STRIDE_CTRL_11_REG;
/*  offset 12'h274, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_12_REG_t LSU_BRAM_STRIDE_CTRL_12_REG;
/*  offset 12'h278, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_13_REG_t LSU_BRAM_STRIDE_CTRL_13_REG;
/*  offset 12'h27C, width 32 */
union CVE_DELPHI_CFG_MEM_WEIGHTS_BID_REG_t WEIGHTS_BID_REG;
/*  offset 12'h280, width 32 */
union CVE_DELPHI_CFG_MEM_WEIGHTS_ENTRY_SIZE_REG_t WEIGHTS_ENTRY_SIZE_REG;
/*  offset 12'h284, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_OUTSTANDING_CTRL_REG_t LSU_BRAM_OUTSTANDING_CTRL_REG;
/*  offset 12'h288, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_1_REG_t LSU_BRAM_STRIDE_CTRL_1_REG;
/*  offset 12'h28C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_2_REG_t LSU_BRAM_STRIDE_CTRL_2_REG;
/*  offset 12'h290, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_3_REG_t LSU_BRAM_STRIDE_CTRL_3_REG;
/*  offset 12'h294, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_4_REG_t LSU_BRAM_STRIDE_CTRL_4_REG;
/*  offset 12'h298, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_5_REG_t LSU_BRAM_STRIDE_CTRL_5_REG;
/*  offset 12'h29C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_6_REG_t LSU_BRAM_STRIDE_CTRL_6_REG;
/*  offset 12'h2A0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_7_REG_t LSU_BRAM_STRIDE_CTRL_7_REG;
/*  offset 12'h2A4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_8_REG_t LSU_BRAM_STRIDE_CTRL_8_REG;
/*  offset 12'h2A8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_9_REG_t LSU_BRAM_STRIDE_CTRL_9_REG;
/*  offset 12'h2AC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_BRAM_REG_t LSU_EXTRA_CREDITS_BRAM_REG;
/*  offset 12'h2B0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BRAM_REG_t LSU_UOW_START_ADDR_BRAM_REG;
/*  offset 12'h2B4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BRAM_STRIDE_CTRL_14_REG_t LSU_BRAM_STRIDE_CTRL_14_REG;
/*  offset 12'h2B8, width 32 */
union CVE_DELPHI_CFG_MEM_WEIGHTS_BID_HIGHER_REG_t WEIGHTS_BID_HIGHER_REG;
/*  offset 12'h2BC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR1_REG_t LSU_ORAM_PF_LOWER_ADDR1_REG;
/*  offset 12'h2C0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR1_REG_t LSU_ORAM_PF_HIGHER_ADDR1_REG;
/*  offset 12'h2C4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG_t LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h2C8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR1_CONTROL_REG_t LSU_ORAM_PF_ADDR1_CONTROL_REG;
/*  offset 12'h2CC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_LOWER_ADDR2_REG_t LSU_ORAM_PF_LOWER_ADDR2_REG;
/*  offset 12'h2D0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_HIGHER_ADDR2_REG_t LSU_ORAM_PF_HIGHER_ADDR2_REG;
/*  offset 12'h2D4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG_t LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG;
/*  offset 12'h2D8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_ADDR2_CONTROL_REG_t LSU_ORAM_PF_ADDR2_CONTROL_REG;
/*  offset 12'h2DC, width 32 */
union CVE_DELPHI_CFG_MEM_POFM_BID_REG_t POFM_BID_REG;
/*  offset 12'h2E0, width 32 */
union CVE_DELPHI_CFG_MEM_POFM_ENTRY_SIZE_REG_t POFM_ENTRY_SIZE_REG;
/*  offset 12'h2E4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_PF_OUTSTANDING_CTRL_REG_t LSU_ORAM_PF_OUTSTANDING_CTRL_REG;
/*  offset 12'h2E8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_1_REG_t LSU_POF_STRIDE_CTRL_1_REG;
/*  offset 12'h2EC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_2_REG_t LSU_POF_STRIDE_CTRL_2_REG;
/*  offset 12'h2F0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_3_REG_t LSU_POF_STRIDE_CTRL_3_REG;
/*  offset 12'h2F4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_4_REG_t LSU_POF_STRIDE_CTRL_4_REG;
/*  offset 12'h2F8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_5_REG_t LSU_POF_STRIDE_CTRL_5_REG;
/*  offset 12'h2FC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_6_REG_t LSU_POF_STRIDE_CTRL_6_REG;
/*  offset 12'h300, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_7_REG_t LSU_POF_STRIDE_CTRL_7_REG;
/*  offset 12'h304, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_8_REG_t LSU_POF_STRIDE_CTRL_8_REG;
/*  offset 12'h308, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_POF_STRIDE_CTRL_9_REG_t LSU_POF_STRIDE_CTRL_9_REG;
/*  offset 12'h30C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_POF_REG_t LSU_EXTRA_CREDITS_POF_REG;
/*  offset 12'h310, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_POF_REG_t LSU_UOW_START_ADDR_POF_REG;
/*  offset 12'h314, width 32 */
	uint8_t	                   rsvd7[8];
union CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR1_REG_t LSU_ORAM_LOWER_ADDR1_REG;
/*  offset 12'h320, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR1_REG_t LSU_ORAM_HIGHER_ADDR1_REG;
/*  offset 12'h324, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG_t LSU_ORAM_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h328, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_ADDR1_CONTROL_REG_t LSU_ORAM_ADDR1_CONTROL_REG;
/*  offset 12'h32C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_LOWER_ADDR2_REG_t LSU_ORAM_LOWER_ADDR2_REG;
/*  offset 12'h330, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR2_REG_t LSU_ORAM_HIGHER_ADDR2_REG;
/*  offset 12'h334, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ORAM_REG_t AXI_USER_INFO_ORAM_REG;
/*  offset 12'h338, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_HIGHER_ADDR_CTRL_REG_t LSU_ORAM_HIGHER_ADDR_CTRL_REG;
/*  offset 12'h33C, width 32 */
union CVE_DELPHI_CFG_MEM_OFM_BID_REG_t OFM_BID_REG;
/*  offset 12'h340, width 32 */
union CVE_DELPHI_CFG_MEM_OFM_ENTRY_SIZE_REG_t OFM_ENTRY_SIZE_REG;
/*  offset 12'h344, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_1_REG_t LSU_ORAM_STRIDE_CTRL_1_REG;
/*  offset 12'h348, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_2_REG_t LSU_ORAM_STRIDE_CTRL_2_REG;
/*  offset 12'h34C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_3_REG_t LSU_ORAM_STRIDE_CTRL_3_REG;
/*  offset 12'h350, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_4_REG_t LSU_ORAM_STRIDE_CTRL_4_REG;
/*  offset 12'h354, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_5_REG_t LSU_ORAM_STRIDE_CTRL_5_REG;
/*  offset 12'h358, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_6_REG_t LSU_ORAM_STRIDE_CTRL_6_REG;
/*  offset 12'h35C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_7_REG_t LSU_ORAM_STRIDE_CTRL_7_REG;
/*  offset 12'h360, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_8_REG_t LSU_ORAM_STRIDE_CTRL_8_REG;
/*  offset 12'h364, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_9_REG_t LSU_ORAM_STRIDE_CTRL_9_REG;
/*  offset 12'h368, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ORAM_REG_t LSU_EXTRA_CREDITS_ORAM_REG;
/*  offset 12'h36C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_COMPLETION_MSG_REG_t LSU_COMPLETION_MSG_REG;
/*  offset 12'h370, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ORAM_REG_t LSU_UOW_START_ADDR_ORAM_REG;
/*  offset 12'h374, width 32 */
	uint8_t	                   rsvd8[8];
union CVE_DELPHI_CFG_MEM_LSU_INTR_STATUS_REG_t LSU_INTR_STATUS_REG;
/*  offset 12'h380, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_INTR_ENABLE_REG_t LSU_INTR_ENABLE_REG;
/*  offset 12'h384, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_INTR_SIGNAL_ENABLE_REG_t LSU_INTR_SIGNAL_ENABLE_REG;
/*  offset 12'h388, width 32 */
union CVE_DELPHI_CFG_MEM_WR_NON_POSTED_CTRL_REG_t WR_NON_POSTED_CTRL_REG;
/*  offset 12'h38C, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BRAM_REG_t AXI_USER_INFO_BRAM_REG;
/*  offset 12'h390, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_IRAM_REG_t AXI_USER_INFO_IRAM_REG;
/*  offset 12'h394, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_1_t STATE_0_CREDIT_STATUS_1;
/*  offset 12'h398, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_0_CREDIT_STATUS_2_t STATE_0_CREDIT_STATUS_2;
/*  offset 12'h39C, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_1_t STATE_1_CREDIT_STATUS_1;
/*  offset 12'h3A0, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_1_CREDIT_STATUS_2_t STATE_1_CREDIT_STATUS_2;
/*  offset 12'h3A4, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_1_t STATE_2_CREDIT_STATUS_1;
/*  offset 12'h3A8, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_2_CREDIT_STATUS_2_t STATE_2_CREDIT_STATUS_2;
/*  offset 12'h3AC, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_1_t STATE_3_CREDIT_STATUS_1;
/*  offset 12'h3B0, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_3_CREDIT_STATUS_2_t STATE_3_CREDIT_STATUS_2;
/*  offset 12'h3B4, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_1_t STATE_4_CREDIT_STATUS_1;
/*  offset 12'h3B8, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_4_CREDIT_STATUS_2_t STATE_4_CREDIT_STATUS_2;
/*  offset 12'h3BC, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_1_t STATE_5_CREDIT_STATUS_1;
/*  offset 12'h3C0, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_5_CREDIT_STATUS_2_t STATE_5_CREDIT_STATUS_2;
/*  offset 12'h3C4, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_1_t STATE_6_CREDIT_STATUS_1;
/*  offset 12'h3C8, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_6_CREDIT_STATUS_2_t STATE_6_CREDIT_STATUS_2;
/*  offset 12'h3CC, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_1_t STATE_7_CREDIT_STATUS_1;
/*  offset 12'h3D0, width 32 */
union CVE_DELPHI_CFG_MEM_STATE_7_CREDIT_STATUS_2_t STATE_7_CREDIT_STATUS_2;
/*  offset 12'h3D4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_1_t LSU_CH_STATUS_1;
/*  offset 12'h3D8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_2_t LSU_CH_STATUS_2;
/*  offset 12'h3DC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_3_t LSU_CH_STATUS_3;
/*  offset 12'h3E0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_4_t LSU_CH_STATUS_4;
/*  offset 12'h3E4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_5_t LSU_CH_STATUS_5;
/*  offset 12'h3E8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_6_t LSU_CH_STATUS_6;
/*  offset 12'h3EC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_7_t LSU_CH_STATUS_7;
/*  offset 12'h3F0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_8_t LSU_CH_STATUS_8;
/*  offset 12'h3F4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_9_t LSU_CH_STATUS_9;
/*  offset 12'h3F8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_CH_STATUS_10_t LSU_CH_STATUS_10;
/*  offset 12'h3FC, width 32 */
union CVE_DELPHI_CFG_MEM_COM_CRD_UPD_REG_t COM_CRD_UPD_REG;
/*  offset 12'h400, width 32 */
	uint8_t	                   rsvd9[4];
union CVE_DELPHI_CFG_MEM_COM_STATE_MSG_REG_t COM_STATE_MSG_REG;
/*  offset 12'h408, width 32 */
	uint8_t	                   rsvd10[68];
union CVE_DELPHI_CFG_MEM_LSU_PCQ_LOWER_ADDR1_REG_t LSU_PCQ_LOWER_ADDR1_REG;
/*  offset 12'h450, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG_t LSU_PCQ_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h454, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_ADDR1_CONTROL_REG_t LSU_PCQ_ADDR1_CONTROL_REG;
/*  offset 12'h458, width 32 */
union CVE_DELPHI_CFG_MEM_PCQ_BID_REG_t PCQ_BID_REG;
/*  offset 12'h45C, width 32 */
union CVE_DELPHI_CFG_MEM_PCQ_ENTRY_SIZE_REG_t PCQ_ENTRY_SIZE_REG;
/*  offset 12'h460, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_OUTSTANDING_CTRL_REG_t LSU_PCQ_OUTSTANDING_CTRL_REG;
/*  offset 12'h464, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_PCQ_REG_t LSU_UOW_START_ADDR_PCQ_REG;
/*  offset 12'h468, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_1_REG_t LSU_PCQ_STRIDE_CTRL_1_REG;
/*  offset 12'h46C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_PCQ_STRIDE_CTRL_9_REG_t LSU_PCQ_STRIDE_CTRL_9_REG;
/*  offset 12'h470, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_LOWER_ADDR_REG_t LSU_NXT_CONFIG_START_LOWER_ADDR_REG;
/*  offset 12'h474, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG_t LSU_NXT_CONFIG_START_HIGHER_ADDR_REG;
/*  offset 12'h478, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_NUM_PATCH_t LSU_NUM_PATCH;
/*  offset 12'h47C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_LAST_INPUT_t LSU_LAST_INPUT;
/*  offset 12'h480, width 32 */
union CVE_DELPHI_CFG_MEM_IFM_CREDIT_GRANNULARITY_t IFM_CREDIT_GRANNULARITY;
/*  offset 12'h484, width 32 */
union CVE_DELPHI_CFG_MEM_WEIGHTS_CREDIT_GRANNULARITY_t WEIGHTS_CREDIT_GRANNULARITY;
/*  offset 12'h488, width 32 */
union CVE_DELPHI_CFG_MEM_POFM_CREDIT_GRANNULARITY_t POFM_CREDIT_GRANNULARITY;
/*  offset 12'h48C, width 32 */
union CVE_DELPHI_CFG_MEM_OFM_CREDIT_GRANNULARITY_t OFM_CREDIT_GRANNULARITY;
/*  offset 12'h490, width 32 */
union CVE_DELPHI_CFG_MEM_PCQ_CREDIT_GRANNULARITY_t PCQ_CREDIT_GRANNULARITY;
/*  offset 12'h494, width 32 */
union CVE_DELPHI_CFG_MEM_BIAS_CREDIT_GRANNULARITY_t BIAS_CREDIT_GRANNULARITY;
/*  offset 12'h498, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_LOWER_ADDR1_REG_t LSU_BIAS_LOWER_ADDR1_REG;
/*  offset 12'h49C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG_t LSU_BIAS_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h4A0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_ADDR1_CONTROL_REG_t LSU_BIAS_ADDR1_CONTROL_REG;
/*  offset 12'h4A4, width 32 */
union CVE_DELPHI_CFG_MEM_BIAS_BID_REG_t BIAS_BID_REG;
/*  offset 12'h4A8, width 32 */
union CVE_DELPHI_CFG_MEM_BIAS_ENTRY_SIZE_REG_t BIAS_ENTRY_SIZE_REG;
/*  offset 12'h4AC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_OUTSTANDING_CTRL_REG_t LSU_BIAS_OUTSTANDING_CTRL_REG;
/*  offset 12'h4B0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_BIAS_REG_t LSU_UOW_START_ADDR_BIAS_REG;
/*  offset 12'h4B4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_1_REG_t LSU_BIAS_STRIDE_CTRL_1_REG;
/*  offset 12'h4B8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_STRIDE_CTRL_9_REG_t LSU_BIAS_STRIDE_CTRL_9_REG;
/*  offset 12'h4BC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_BIAS_CONFIG_HIGHER_ADDR_REG_t LSU_BIAS_CONFIG_HIGHER_ADDR_REG;
/*  offset 12'h4C0, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_PCQ_REG_t AXI_USER_INFO_PCQ_REG;
/*  offset 12'h4C4, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_BIAS_REG_t AXI_USER_INFO_BIAS_REG;
/*  offset 12'h4C8, width 32 */
	uint8_t	                   rsvd11[20];
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_LOWER_ADDR1_REG_t LSU_ELTWISE_LOWER_ADDR1_REG;
/*  offset 12'h4E0, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG_t LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG;
/*  offset 12'h4E4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_ADDR1_CONTROL_REG_t LSU_ELTWISE_ADDR1_CONTROL_REG;
/*  offset 12'h4E8, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_BID_REG_t ELTWISE_BID_REG;
/*  offset 12'h4EC, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_CONFIG_HIGHER_ADDR_REG_t ELTWISE_CONFIG_HIGHER_ADDR_REG;
/*  offset 12'h4F0, width 32 */
union CVE_DELPHI_CFG_MEM_ELTWISE_ENTRY_SIZE_REG_t ELTWISE_ENTRY_SIZE_REG;
/*  offset 12'h4F4, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_OUTSTANDING_CTRL_REG_t LSU_ELTWISE_OUTSTANDING_CTRL_REG;
/*  offset 12'h4F8, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_1_REG_t LSU_ELTWISE_STRIDE_CTRL_1_REG;
/*  offset 12'h4FC, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_2_REG_t LSU_ELTWISE_STRIDE_CTRL_2_REG;
/*  offset 12'h500, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_3_REG_t LSU_ELTWISE_STRIDE_CTRL_3_REG;
/*  offset 12'h504, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_4_REG_t LSU_ELTWISE_STRIDE_CTRL_4_REG;
/*  offset 12'h508, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_5_REG_t LSU_ELTWISE_STRIDE_CTRL_5_REG;
/*  offset 12'h50C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_6_REG_t LSU_ELTWISE_STRIDE_CTRL_6_REG;
/*  offset 12'h510, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_7_REG_t LSU_ELTWISE_STRIDE_CTRL_7_REG;
/*  offset 12'h514, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_8_REG_t LSU_ELTWISE_STRIDE_CTRL_8_REG;
/*  offset 12'h518, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_9_REG_t LSU_ELTWISE_STRIDE_CTRL_9_REG;
/*  offset 12'h51C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_10_REG_t LSU_ELTWISE_STRIDE_CTRL_10_REG;
/*  offset 12'h520, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_EXTRA_CREDITS_ELTWISE_REG_t LSU_EXTRA_CREDITS_ELTWISE_REG;
/*  offset 12'h524, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_UOW_START_ADDR_ELTWISE_REG_t LSU_UOW_START_ADDR_ELTWISE_REG;
/*  offset 12'h528, width 32 */
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_ELTWISE_REG_t AXI_USER_INFO_ELTWISE_REG;
/*  offset 12'h52C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_11_REG_t LSU_ELTWISE_STRIDE_CTRL_11_REG;
/*  offset 12'h530, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_12_REG_t LSU_ELTWISE_STRIDE_CTRL_12_REG;
/*  offset 12'h534, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_13_REG_t LSU_ELTWISE_STRIDE_CTRL_13_REG;
/*  offset 12'h538, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ELTWISE_STRIDE_CTRL_14_REG_t LSU_ELTWISE_STRIDE_CTRL_14_REG;
/*  offset 12'h53C, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_10_REG_t LSU_ORAM_STRIDE_CTRL_10_REG;
/*  offset 12'h540, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_11_REG_t LSU_ORAM_STRIDE_CTRL_11_REG;
/*  offset 12'h544, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_12_REG_t LSU_ORAM_STRIDE_CTRL_12_REG;
/*  offset 12'h548, width 32 */
union CVE_DELPHI_CFG_MEM_LSU_ORAM_STRIDE_CTRL_13_REG_t LSU_ORAM_STRIDE_CTRL_13_REG;
/*  offset 12'h54C, width 32 */
	uint8_t	                   rsvd12[176];
union CVE_DELPHI_CFG_MEM_MS_CFG_t MS_CFG;
/*  offset 12'h600, width 32 */
union CVE_DELPHI_CFG_MEM_MS_SP_REG_ADDR_t MS_SP_REG_ADDR;
/*  offset 12'h604, width 32 */
union CVE_DELPHI_CFG_MEM_MS_SP_REG_HIGHER_ADDR_t MS_SP_REG_HIGHER_ADDR;
/*  offset 12'h608, width 32 */
	uint8_t	                   rsvd13[4];
union CVE_DELPHI_CFG_MEM_AXI_USER_INFO_CFG_BLOB_REG_t AXI_USER_INFO_CFG_BLOB_REG;
/*  offset 12'h610, width 32 */
union CVE_DELPHI_CFG_MEM_MS_CREDIT_RESET_t MS_CREDIT_RESET;
/*  offset 12'h614, width 32 */
	uint8_t	                   rsvd14[1512];
union CVE_DELPHI_CFG_MEM_GECOE_MAX_BURST_LENGTH_t GECOE_MAX_BURST_LENGTH;
/*  offset 16'h0C00, width 32 */
};

#define CVE_DELPHI_DELPHI_ALGO_CTRL_REG                        0
#define CVE_DELPHI_DELPHI_CTRL_NUM_TILE_REG                    1
#define CVE_DELPHI_DELPHI_WORK_PARTN_CTRL_REG                  2
#define CVE_DELPHI_LUT_CTRL_1_REG                              4
#define CVE_DELPHI_LUT_CTRL_2_REG                              5
#define CVE_DELPHI_LUT_CTRL_3_REG                              6
#define CVE_DELPHI_LUT_CTRL_4_REG                              7
#define CVE_DELPHI_LUT_CTRL_5_REG                              8
#define CVE_DELPHI_LUT_CTRL_6_REG                              9
#define CVE_DELPHI_LUT_CTRL_7_REG                             10
#define CVE_DELPHI_LUT_CTRL_8_REG                             11
#define CVE_DELPHI_LUT_CTRL_9_REG                             12
#define CVE_DELPHI_LUT_CTRL_10_REG                            13
#define CVE_DELPHI_LUT_CTRL_11_REG                            14
#define CVE_DELPHI_LUT_CTRL_12_REG                            15
#define CVE_DELPHI_LUT_CTRL_13_REG                            16
#define CVE_DELPHI_LUT_CTRL_14_REG                            17
#define CVE_DELPHI_LUT_CTRL_15_REG                            18
#define CVE_DELPHI_LUT_CTRL_16_REG                            19
#define CVE_DELPHI_NONLINEAR_ALGO_CTRL_REG                    20
#define CVE_DELPHI_INT8_LOWP_OFFSET_REG                       21
#define CVE_DELPHI_INT8_QUANTIZATION_PARAM_REG                22
#define CVE_DELPHI_NONLINEAR_ALGO_CTRL_INT8_REG               23
#define CVE_DELPHI_CNN_IFM_DIMENSION_REG                      24
#define CVE_DELPHI_CNN_IFM_CTRL_REG                           25
#define CVE_DELPHI_CNN_IFM_PIX_CNT_REG                        26
#define CVE_DELPHI_CNN_KERNEL_DIMENSION_REG                   28
#define CVE_DELPHI_CNN_KERNEL_CTRL_REG                        29
#define CVE_DELPHI_CNN_BIAS_CTRL_REG                          30
#define CVE_DELPHI_CNN_OFM_DIMENSION_REG                      32
#define CVE_DELPHI_CNN_OFM_CTRL_REG                           33
#define CVE_DELPHI_CNN_MAXPOOL_CTRL_REG                       34
#define CVE_DELPHI_CNN_MAXPOOL_BYPASS_REG                     35
#define CVE_DELPHI_CNN_ZERO_PADDING_VALUE_REG                 36
#define CVE_DELPHI_CNN_ZERO_PADDING_REG                       37
#define CVE_DELPHI_CNN_IFM_OFM_CTRL_REG                       38
#define CVE_DELPHI_DELPHI_CORE_INTR_STATUS_REG                64
#define CVE_DELPHI_DELPHI_CORE_INTR_ENABLE_REG                65
#define CVE_DELPHI_DELPHI_CORE_INTR_SIGNAL_ENABLE_REG         66
#define CVE_DELPHI_DELPHI_DBG_PERF_CTRL_REG                   67
#define CVE_DELPHI_DELPHI_DBG_PERF_CNT_1_REG                  68
#define CVE_DELPHI_DELPHI_DBG_PERF_CNT_2_REG                  69
#define CVE_DELPHI_DELPHI_DBG_PERF_STATUS_REG                 70
#define CVE_DELPHI_DELPHI_SCRATCH_PAD_REG                     71
#define CVE_DELPHI_CNN_ISRAM_ZERO_PAD_REG                     72
#define CVE_DELPHI_IFM_NUM_INVALID_ROWS_REG                   73
#define CVE_DELPHI_A_BLOCK_SIZE_NORMAL_REG                    76
#define CVE_DELPHI_A_NUM_BLOCKS_IN_MB_NORMAL_REG              77
#define CVE_DELPHI_A_NUM_BLOCKS_IN_MB_BOUNDARY_REG            78
#define CVE_DELPHI_A_MB_IN_SPB_REG                            79
#define CVE_DELPHI_A_DER_BLOCK_ROW_SIZE_SPB_REG               80
#define CVE_DELPHI_A_DER_NUM_BLOCKS_SPB_REG                   81
#define CVE_DELPHI_A_TRANSPOSE_REG                            82
#define CVE_DELPHI_B_BLOCK_SIZE_BOUNDARY_REG                  83
#define CVE_DELPHI_B_NUM_BLOCKS_IN_MB_NORMAL_REG              84
#define CVE_DELPHI_B_NUM_BLOCKS_IN_MB_BOUNDARY_REG            85
#define CVE_DELPHI_B_MB_IN_SPB_REG                            86
#define CVE_DELPHI_B_DER_BLOCK_ROW_SIZE_SPB_REG               87
#define CVE_DELPHI_B_DER_NUM_BLOCKS_SPB_REG                   88
#define CVE_DELPHI_C_BLOCK_SIZE_NORMAL_REG                    89
#define CVE_DELPHI_C_NUM_BLOCKS_IN_MB_NORMAL_REG              90
#define CVE_DELPHI_C_NUM_BLOCKS_IN_MB_BOUNDARY_REG            91
#define CVE_DELPHI_C_MB_IN_SPB_REG                            92
#define CVE_DELPHI_C_DER_BLOCK_ROW_SIZE_SPB_REG               93
#define CVE_DELPHI_C_DER_NUM_BLOCKS_SPB_REG                   94
#define CVE_DELPHI_C_DER_SUBMB_NORMAL_REG                     95
#define CVE_DELPHI_C_DER_SUBMB_BOUNDARY_REG                   96
#define CVE_DELPHI_GEMM_STREAM_MODE_REG                       97
#define CVE_DELPHI_CNN_KERNEL_BYTES_REG                       98
#define CVE_DELPHI_OUT_OFFSET_REG                             99
#define CVE_DELPHI_BATCH_MODE_REG                            100
#define CVE_DELPHI_ELTWISE_CNTRL_REG                         101
#define CVE_DELPHI_ELTWISE_DIMENSION_REG                     102
#define CVE_DELPHI_ELTWISE_DER_BLOCK_ROW_SIZE_REG            103
#define CVE_DELPHI_ELTWISE_DER_NUM_BLOCKS_REG                104
#define CVE_DELPHI_GROUP_CONV_REG                            105
#define CVE_DELPHI_CORE_STATUS_1                             108
#define CVE_DELPHI_CORE_STATUS_2                             109
#define CVE_DELPHI_CORE_STATUS_3                             110
#define CVE_DELPHI_CORE_STATUS_4                             111
#define CVE_DELPHI_CORE_STATUS_5                             112
#define CVE_DELPHI_CORE_STATUS_6                             113
#define CVE_DELPHI_CORE_STATUS_7                             114
#define CVE_DELPHI_CORE_STATUS_8                             115
#define CVE_DELPHI_CORE_STATUS_9                             116
#define CVE_DELPHI_CORE_STATUS_10                            117
#define CVE_DELPHI_CORE_STATUS_11                            118
#define CVE_DELPHI_CORE_STATUS_12                            119
#define CVE_DELPHI_CORE_STATUS_13                            120
#define CVE_DELPHI_CORE_STATUS_14                            121
#define CVE_DELPHI_CORE_STATUS_15                            122
#define CVE_DELPHI_CORE_STATUS_16                            123
#define CVE_DELPHI_CORE_STATUS_17                            124
#define CVE_DELPHI_CORE_STATUS_18                            125
#define CVE_DELPHI_CORE_STATUS_19                            126
#define CVE_DELPHI_PERF_CTRL_REG                             127
#define CVE_DELPHI_LSU_IRAM_LOWER_ADDR1_REG                  128
#define CVE_DELPHI_LSU_IRAM_HIGHER_ADDR1_REG                 129
#define CVE_DELPHI_LSU_IRAM_ADDR1_TRANSFER_SIZE_REG          130
#define CVE_DELPHI_LSU_IRAM_ADDR1_CONTROL_REG                131
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_10_REG               132
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_11_REG               133
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_12_REG               134
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_13_REG               135
#define CVE_DELPHI_IFM_BID_REG                               136
#define CVE_DELPHI_IFM_ENTRY_SIZE_REG                        137
#define CVE_DELPHI_LSU_IRAM_OUTSTANDING_CTRL_REG             138
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_1_REG                139
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_2_REG                140
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_3_REG                141
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_4_REG                142
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_5_REG                143
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_6_REG                144
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_7_REG                145
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_8_REG                146
#define CVE_DELPHI_LSU_IRAM_STRIDE_CTRL_9_REG                147
#define CVE_DELPHI_LSU_EXTRA_CREDITS_IRAM_REG                148
#define CVE_DELPHI_LSU_UOW_START_ADDR_IRAM_REG               149
#define CVE_DELPHI_LSU_IRAM_HIGHER_ADDR_CTRL_REG             150
#define CVE_DELPHI_LSU_BRAM_LOWER_ADDR1_REG                  152
#define CVE_DELPHI_LSU_BRAM_HIGHER_ADDR1_REG                 153
#define CVE_DELPHI_LSU_BRAM_ADDR1_TRANSFER_SIZE_REG          154
#define CVE_DELPHI_LSU_BRAM_ADDR1_CONTROL_REG                155
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_10_REG               156
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_11_REG               157
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_12_REG               158
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_13_REG               159
#define CVE_DELPHI_WEIGHTS_BID_REG                           160
#define CVE_DELPHI_WEIGHTS_ENTRY_SIZE_REG                    161
#define CVE_DELPHI_LSU_BRAM_OUTSTANDING_CTRL_REG             162
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_1_REG                163
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_2_REG                164
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_3_REG                165
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_4_REG                166
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_5_REG                167
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_6_REG                168
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_7_REG                169
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_8_REG                170
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_9_REG                171
#define CVE_DELPHI_LSU_EXTRA_CREDITS_BRAM_REG                172
#define CVE_DELPHI_LSU_UOW_START_ADDR_BRAM_REG               173
#define CVE_DELPHI_LSU_BRAM_STRIDE_CTRL_14_REG               174
#define CVE_DELPHI_WEIGHTS_BID_HIGHER_REG                    175
#define CVE_DELPHI_LSU_ORAM_PF_LOWER_ADDR1_REG               176
#define CVE_DELPHI_LSU_ORAM_PF_HIGHER_ADDR1_REG              177
#define CVE_DELPHI_LSU_ORAM_PF_ADDR1_TRANSFER_SIZE_REG       178
#define CVE_DELPHI_LSU_ORAM_PF_ADDR1_CONTROL_REG             179
#define CVE_DELPHI_LSU_ORAM_PF_LOWER_ADDR2_REG               180
#define CVE_DELPHI_LSU_ORAM_PF_HIGHER_ADDR2_REG              181
#define CVE_DELPHI_LSU_ORAM_PF_ADDR2_TRANSFER_SIZE_REG       182
#define CVE_DELPHI_LSU_ORAM_PF_ADDR2_CONTROL_REG             183
#define CVE_DELPHI_POFM_BID_REG                              184
#define CVE_DELPHI_POFM_ENTRY_SIZE_REG                       185
#define CVE_DELPHI_LSU_ORAM_PF_OUTSTANDING_CTRL_REG          186
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_1_REG                 187
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_2_REG                 188
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_3_REG                 189
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_4_REG                 190
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_5_REG                 191
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_6_REG                 192
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_7_REG                 193
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_8_REG                 194
#define CVE_DELPHI_LSU_POF_STRIDE_CTRL_9_REG                 195
#define CVE_DELPHI_LSU_EXTRA_CREDITS_POF_REG                 196
#define CVE_DELPHI_LSU_UOW_START_ADDR_POF_REG                197
#define CVE_DELPHI_LSU_ORAM_LOWER_ADDR1_REG                  200
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR1_REG                 201
#define CVE_DELPHI_LSU_ORAM_ADDR1_TRANSFER_SIZE_REG          202
#define CVE_DELPHI_LSU_ORAM_ADDR1_CONTROL_REG                203
#define CVE_DELPHI_LSU_ORAM_LOWER_ADDR2_REG                  204
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR2_REG                 205
#define CVE_DELPHI_AXI_USER_INFO_ORAM_REG                    206
#define CVE_DELPHI_LSU_ORAM_HIGHER_ADDR_CTRL_REG             207
#define CVE_DELPHI_OFM_BID_REG                               208
#define CVE_DELPHI_OFM_ENTRY_SIZE_REG                        209
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_1_REG                210
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_2_REG                211
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_3_REG                212
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_4_REG                213
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_5_REG                214
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_6_REG                215
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_7_REG                216
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_8_REG                217
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_9_REG                218
#define CVE_DELPHI_LSU_EXTRA_CREDITS_ORAM_REG                219
#define CVE_DELPHI_LSU_COMPLETION_MSG_REG                    220
#define CVE_DELPHI_LSU_UOW_START_ADDR_ORAM_REG               221
#define CVE_DELPHI_LSU_INTR_STATUS_REG                       224
#define CVE_DELPHI_LSU_INTR_ENABLE_REG                       225
#define CVE_DELPHI_LSU_INTR_SIGNAL_ENABLE_REG                226
#define CVE_DELPHI_WR_NON_POSTED_CTRL_REG                    227
#define CVE_DELPHI_AXI_USER_INFO_BRAM_REG                    228
#define CVE_DELPHI_AXI_USER_INFO_IRAM_REG                    229
#define CVE_DELPHI_STATE_0_CREDIT_STATUS_1                   230
#define CVE_DELPHI_STATE_0_CREDIT_STATUS_2                   231
#define CVE_DELPHI_STATE_1_CREDIT_STATUS_1                   232
#define CVE_DELPHI_STATE_1_CREDIT_STATUS_2                   233
#define CVE_DELPHI_STATE_2_CREDIT_STATUS_1                   234
#define CVE_DELPHI_STATE_2_CREDIT_STATUS_2                   235
#define CVE_DELPHI_STATE_3_CREDIT_STATUS_1                   236
#define CVE_DELPHI_STATE_3_CREDIT_STATUS_2                   237
#define CVE_DELPHI_STATE_4_CREDIT_STATUS_1                   238
#define CVE_DELPHI_STATE_4_CREDIT_STATUS_2                   239
#define CVE_DELPHI_STATE_5_CREDIT_STATUS_1                   240
#define CVE_DELPHI_STATE_5_CREDIT_STATUS_2                   241
#define CVE_DELPHI_STATE_6_CREDIT_STATUS_1                   242
#define CVE_DELPHI_STATE_6_CREDIT_STATUS_2                   243
#define CVE_DELPHI_STATE_7_CREDIT_STATUS_1                   244
#define CVE_DELPHI_STATE_7_CREDIT_STATUS_2                   245
#define CVE_DELPHI_LSU_CH_STATUS_1                           246
#define CVE_DELPHI_LSU_CH_STATUS_2                           247
#define CVE_DELPHI_LSU_CH_STATUS_3                           248
#define CVE_DELPHI_LSU_CH_STATUS_4                           249
#define CVE_DELPHI_LSU_CH_STATUS_5                           250
#define CVE_DELPHI_LSU_CH_STATUS_6                           251
#define CVE_DELPHI_LSU_CH_STATUS_7                           252
#define CVE_DELPHI_LSU_CH_STATUS_8                           253
#define CVE_DELPHI_LSU_CH_STATUS_9                           254
#define CVE_DELPHI_LSU_CH_STATUS_10                          255
#define CVE_DELPHI_COM_CRD_UPD_REG                           256
#define CVE_DELPHI_COM_STATE_MSG_REG                         258
#define CVE_DELPHI_LSU_PCQ_LOWER_ADDR1_REG                   276
#define CVE_DELPHI_LSU_PCQ_ADDR1_TRANSFER_SIZE_REG           277
#define CVE_DELPHI_LSU_PCQ_ADDR1_CONTROL_REG                 278
#define CVE_DELPHI_PCQ_BID_REG                               279
#define CVE_DELPHI_PCQ_ENTRY_SIZE_REG                        280
#define CVE_DELPHI_LSU_PCQ_OUTSTANDING_CTRL_REG              281
#define CVE_DELPHI_LSU_UOW_START_ADDR_PCQ_REG                282
#define CVE_DELPHI_LSU_PCQ_STRIDE_CTRL_1_REG                 283
#define CVE_DELPHI_LSU_PCQ_STRIDE_CTRL_9_REG                 284
#define CVE_DELPHI_LSU_NXT_CONFIG_START_LOWER_ADDR_REG       285
#define CVE_DELPHI_LSU_NXT_CONFIG_START_HIGHER_ADDR_REG      286
#define CVE_DELPHI_LSU_NUM_PATCH                             287
#define CVE_DELPHI_LSU_LAST_INPUT                            288
#define CVE_DELPHI_IFM_CREDIT_GRANNULARITY                   289
#define CVE_DELPHI_WEIGHTS_CREDIT_GRANNULARITY               290
#define CVE_DELPHI_POFM_CREDIT_GRANNULARITY                  291
#define CVE_DELPHI_OFM_CREDIT_GRANNULARITY                   292
#define CVE_DELPHI_PCQ_CREDIT_GRANNULARITY                   293
#define CVE_DELPHI_BIAS_CREDIT_GRANNULARITY                  294
#define CVE_DELPHI_LSU_BIAS_LOWER_ADDR1_REG                  295
#define CVE_DELPHI_LSU_BIAS_ADDR1_TRANSFER_SIZE_REG          296
#define CVE_DELPHI_LSU_BIAS_ADDR1_CONTROL_REG                297
#define CVE_DELPHI_BIAS_BID_REG                              298
#define CVE_DELPHI_BIAS_ENTRY_SIZE_REG                       299
#define CVE_DELPHI_LSU_BIAS_OUTSTANDING_CTRL_REG             300
#define CVE_DELPHI_LSU_UOW_START_ADDR_BIAS_REG               301
#define CVE_DELPHI_LSU_BIAS_STRIDE_CTRL_1_REG                302
#define CVE_DELPHI_LSU_BIAS_STRIDE_CTRL_9_REG                303
#define CVE_DELPHI_LSU_BIAS_CONFIG_HIGHER_ADDR_REG           304
#define CVE_DELPHI_AXI_USER_INFO_PCQ_REG                     305
#define CVE_DELPHI_AXI_USER_INFO_BIAS_REG                    306
#define CVE_DELPHI_LSU_ELTWISE_LOWER_ADDR1_REG               312
#define CVE_DELPHI_LSU_ELTWISE_ADDR1_TRANSFER_SIZE_REG       313
#define CVE_DELPHI_LSU_ELTWISE_ADDR1_CONTROL_REG             314
#define CVE_DELPHI_ELTWISE_BID_REG                           315
#define CVE_DELPHI_ELTWISE_CONFIG_HIGHER_ADDR_REG            316
#define CVE_DELPHI_ELTWISE_ENTRY_SIZE_REG                    317
#define CVE_DELPHI_LSU_ELTWISE_OUTSTANDING_CTRL_REG          318
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_1_REG             319
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_2_REG             320
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_3_REG             321
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_4_REG             322
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_5_REG             323
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_6_REG             324
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_7_REG             325
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_8_REG             326
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_9_REG             327
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_10_REG            328
#define CVE_DELPHI_LSU_EXTRA_CREDITS_ELTWISE_REG             329
#define CVE_DELPHI_LSU_UOW_START_ADDR_ELTWISE_REG            330
#define CVE_DELPHI_AXI_USER_INFO_ELTWISE_REG                 331
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_11_REG            332
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_12_REG            333
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_13_REG            334
#define CVE_DELPHI_LSU_ELTWISE_STRIDE_CTRL_14_REG            335
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_10_REG               336
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_11_REG               337
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_12_REG               338
#define CVE_DELPHI_LSU_ORAM_STRIDE_CTRL_13_REG               339
#define CVE_DELPHI_MS_CFG                                    384
#define CVE_DELPHI_MS_SP_REG_ADDR                            385
#define CVE_DELPHI_MS_SP_REG_HIGHER_ADDR                     386
#define CVE_DELPHI_AXI_USER_INFO_CFG_BLOB_REG                388
#define CVE_DELPHI_MS_CREDIT_RESET                           389
#define CVE_DELPHI_GECOE_MAX_BURST_LENGTH                    768

#endif // _CVE_DELPHI_CFG_REGS_H_
