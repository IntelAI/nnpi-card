#
# NNP-I Linux Driver
# Copyright (c) 2017-2021, Intel Corporation.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
# 
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 

ROOTDIR?=..
DRIVER_DIR?=$(ROOTDIR)/driver
OUTPUTDIR?=$(ROOTDIR)/release
VERSION_DIR=$(ROOTDIR)/automation/version
HW_REPO_DIR?=$(HW)
-HW_SHORT_NAME?=cve2
FW_PACK_DIR=$(FW_PKGS_ARTIFACTS)/a_step/base_package/rtl/release
FW_PACK_DIR_BASE=/release_artifacts/fw_pkgs/build_artifact
FW_PACK_BASE_PACKAGE_DIR=/a_step/base_package

ifeq ($(platform_target_dir),null_device_ring3)
	DEVICE_DLL = libnullicedevice.so
else
	DEVICE_DLL = libcoral_drv.so
endif

CC=gcc
LD=gcc

INCLUDES+= \
	-I . \
	-I $(DRIVER_DIR) \
	-I $(DRIVER_DIR)/linux \
	-I $(DRIVER_DIR)/../external/hw_interface/$(HW_SHORT_NAME) \
	-I $(DRIVER_DIR)/../external/hw_interface/$(HW_SHORT_NAME)/a_step \
	-I $(VERSION_DIR) \
	-I $(DRIVER_DIR)/ice_safe_lib

ifdef DEBUG
CFLAGS=-g -O0 $(INCLUDES) -Wall -Werror
endif

ifdef RELEASE
CFLAGS= $(INCLUDES) -Wall -Werror
CFLAGS+=-O3 -fstack-protector-all -Wformat -Wformat-security -D_FORTIFY_SOURCE=2
endif

LDFLAGS=
IS_DEBUG=0
IS_64BIT=1

CFLAGS+=-fmessage-length=0 \
-Wextra \
-Wwrite-strings \
-Winit-self \
-Wcast-align \
-Wcast-qual \
-Wstrict-aliasing \
-Wformat=2 \
-Wmissing-declarations \
-Wmissing-include-dirs \
-Wno-unused-parameter \
-Wuninitialized \
-Wold-style-definition \
-Wmissing-prototypes

ifdef TARGET32
CFLAGS+=-m32 -march=core2 -DTARGET32=1
LDFLAGS+=-m32
IS_64BIT=0
endif

ifndef RELEASE
CFLAGS+=-D_DEBUG
IS_DEBUG=1
endif

CFLAGS+=-DGIT_HASH=$(GIT_HASH)

CORAL_DRIVER_DLL_DIR=$(CORAL_DIR)
ifeq ($(NOCORALCOMPILE),1)
	CORAL_DRIVER_DLL_DIR=$(HW_ARTIFACTS)/lib
endif

SRCS+=$(VERSION_DIR)/version.c\
	$(DRIVER_DIR)/a_step_regs.c\
	$(DRIVER_DIR)/b_step_regs.c\
	$(DRIVER_DIR)/c_step_regs.c\
	$(DRIVER_DIR)/dispatcher.c\
	$(DRIVER_DIR)/iova_allocator.c \
	$(DRIVER_DIR)/device_interface.c\
	$(DRIVER_DIR)/dev_context.c\
	$(DRIVER_DIR)/doubly_linked_list.c\
	$(DRIVER_DIR)/linux/lin_mm_dma.c\
	$(DRIVER_DIR)/linux/lin_mm_mmu.c\
	$(DRIVER_DIR)/memory_manager.c\
	$(DRIVER_DIR)/cve_firmware.c\
	$(DRIVER_DIR)/cve_driver.c\
	$(DRIVER_DIR)/cve_driver_utils.c\
	$(DRIVER_DIR)/cve_device_group.c\
	$(DRIVER_DIR)/cve_context_process.c\
	$(DRIVER_DIR)/scheduler.c\
	rbtree.c\
	os_interface_stub.c\
	$(DRIVER_DIR)/cve_device.c\
	$(DRIVER_DIR)/ice_trace.c\
	$(DRIVER_DIR)/ice_debug.c\
	$(DRIVER_DIR)/icedrv_internal_sw_counter_funcs.c \
        icedrv_sw_trace_stub.c\
	$(DRIVER_DIR)/ice_safe_lib/ice_safe_func.c\

CFLAGS  += -DRING3_VALIDATION -I$(CORAL_DIR)/src
LDFLAGS += -shared -lcoral_drv -L$(CORAL_DRIVER_DLL_DIR) -Wl,-rpath,'$$ORIGIN'
ifneq ($(FULL_INTEGRATION),1)
	LDFLAGS += -Wl,-rpath,$(CORAL_DRIVER_DLL_DIR)
endif

CORAL_BUILD_FLAGS+= IS_64BIT=$(IS_64BIT) DEBUG=$(IS_DEBUG) ENABLE_MMU=1
CFLAGS+=-DRING3_VALIDATION -fpic
ifeq ($(IDC_ENABLE),1)
	CFLAGS += -DIDC_ENABLE
endif

ifeq ($(NULL_DEVICE_RING3),1)
	CFLAGS += -DNULL_DEVICE_RING3 -I$(DRIVER_DIR)/../null_device/common -I$(DRIVER_DIR)/../null_device/nulldev_kmd_ring3
endif

CFLAGS+=-DFW_PACK_DIR="\"$(FW_PACK_DIR)\""
CFLAGS+=-DFW_PACK_DIR_BASE="\"$(FW_PACK_DIR_BASE)\""
CFLAGS+=-DFW_PACK_BASE_PACKAGE_DIR="\"$(FW_PACK_BASE_PACKAGE_DIR)\""

# Enable memory detection in KMD
# Should be removed for performence optimization
CFLAGS+=-DENABLE_MEM_DETECT

TARGET=$(OUTPUTDIR)/libcvedriver.so

all: $(TARGET)

OBJS1=$(subst .c,.o,$(SRCS))
OBJS=$(foreach obj, $(OBJS1), $(OUTPUTDIR)/$(obj))
OBJS2=$(foreach obj, $(OBJS), $(OUTPUTDIR)/$(notdir $(obj)))
FWS1=$(wildcard $(FW_DIR_PATH)/*.out)
FWS=$(subst .out,,$(FWS1))

DEPENDS=$(OUTPUTDIR)/depends
-include $(DEPENDS)

$(OUTPUTDIR)/%.o: %.c
	mkdir -p $(OUTPUTDIR)
	$(CC) $(CFLAGS) -c -o $(OUTPUTDIR)/$(notdir $@) $<

$(TARGET) : $(OBJS) $(DEVICE_DLL)
	$(LD) $(LDFLAGS) -o $@ $(OBJS2)
	@echo "CORAL_DIR_EXT is $(CORAL_DIR_EXT)" 

.PHONY: FORCE
$(DEVICE_DLL) : FORCE
ifneq ($(NOCORALCOMPILE),1)
	$(MAKE) -C $(CORAL_DIR) driver_dll $(CORAL_BUILD_FLAGS)
	ln -sf $(CORAL_DIR)/$(DEVICE_DLL) $(OUTPUTDIR) 
endif

$(DEPENDS):
	mkdir -p $(OUTPUTDIR)
	python3 make_depends.py $(OUTPUTDIR) $(CFLAGS) -- $(SRCS) > $@

clean:
ifneq ($(NOCORALCOMPILE),1)
ifeq ($(RING3_VALIDATION),1)
	$(MAKE) -C $(CORAL_DIR) clean $(CORAL_BUILD_FLAGS)
	rm -f  $(OUTPUTDIR)/$(DEVICE_DLL)
endif
endif
	rm -rf $(OUTPUTDIR)/* tags $(DEPENDS)

tags = ctags *.[ch] $(DRIVER_DIR)/*.[ch] $(DRIVER_DIR)/linux/lin_mm*.[ch]

